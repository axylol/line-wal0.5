void(__stdcall *real_glAccum)(GLenum op,GLfloat value) = 0;
    void skibidigfx_glAccum(GLenum op,GLfloat value)
    {
    
    real_glAccum(op,value);
    }
void(__stdcall *real_glAlphaFunc)(GLenum func,GLclampf ref) = 0;
    void skibidigfx_glAlphaFunc(GLenum func,GLclampf ref)
    {
    
    real_glAlphaFunc(func,ref);
    }
GLboolean(__stdcall *real_glAreTexturesResident)(GLsizei n,const GLuint* textures,GLboolean* residences) = 0;
    GLboolean skibidigfx_glAreTexturesResident(GLsizei n,const GLuint* textures,GLboolean* residences)
    {
    
    return real_glAreTexturesResident(n,textures,residences);
    }
void(__stdcall *real_glArrayElement)(GLint i) = 0;
    void skibidigfx_glArrayElement(GLint i)
    {
    
    real_glArrayElement(i);
    }
void(__stdcall *real_glBegin)(GLenum mode) = 0;
    void skibidigfx_glBegin(GLenum mode)
    {
    
    real_glBegin(mode);
    }
void(__stdcall *real_glBindTexture)(GLenum target,GLuint texture) = 0;
    void skibidigfx_glBindTexture(GLenum target,GLuint texture)
    {
    
    real_glBindTexture(target,texture);
    }
void(__stdcall *real_glBitmap)(GLsizei width,GLsizei height,GLfloat xorig,GLfloat yorig,GLfloat xmove,GLfloat ymove,const GLubyte* bitmap) = 0;
    void skibidigfx_glBitmap(GLsizei width,GLsizei height,GLfloat xorig,GLfloat yorig,GLfloat xmove,GLfloat ymove,const GLubyte* bitmap)
    {
    
    real_glBitmap(width,height,xorig,yorig,xmove,ymove,bitmap);
    }
void(__stdcall *real_glBlendFunc)(GLenum sfactor,GLenum dfactor) = 0;
    void skibidigfx_glBlendFunc(GLenum sfactor,GLenum dfactor)
    {
    
    real_glBlendFunc(sfactor,dfactor);
    }
void(__stdcall *real_glCallList)(GLuint list) = 0;
    void skibidigfx_glCallList(GLuint list)
    {
    
    real_glCallList(list);
    }
void(__stdcall *real_glCallLists)(GLsizei n,GLenum type,const GLvoid* lists) = 0;
    void skibidigfx_glCallLists(GLsizei n,GLenum type,const GLvoid* lists)
    {
    
    real_glCallLists(n,type,lists);
    }
void(__stdcall *real_glClear)(GLbitfield mask) = 0;
    void skibidigfx_glClear(GLbitfield mask)
    {
    
    real_glClear(mask);
    }
void(__stdcall *real_glClearAccum)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha) = 0;
    void skibidigfx_glClearAccum(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
    {
    
    real_glClearAccum(red,green,blue,alpha);
    }
void(__stdcall *real_glClearColor)(GLclampf red,GLclampf green,GLclampf blue,GLclampf alpha) = 0;
    void skibidigfx_glClearColor(GLclampf red,GLclampf green,GLclampf blue,GLclampf alpha)
    {
    
    real_glClearColor(red,green,blue,alpha);
    }
void(__stdcall *real_glClearDepth)(GLclampd depth) = 0;
    void skibidigfx_glClearDepth(GLclampd depth)
    {
    
    real_glClearDepth(depth);
    }
void(__stdcall *real_glClearIndex)(GLfloat c) = 0;
    void skibidigfx_glClearIndex(GLfloat c)
    {
    
    real_glClearIndex(c);
    }
void(__stdcall *real_glClearStencil)(GLint s) = 0;
    void skibidigfx_glClearStencil(GLint s)
    {
    
    real_glClearStencil(s);
    }
void(__stdcall *real_glClipPlane)(GLenum plane,const GLdouble* equation) = 0;
    void skibidigfx_glClipPlane(GLenum plane,const GLdouble* equation)
    {
    
    real_glClipPlane(plane,equation);
    }
void(__stdcall *real_glColor3b)(GLbyte red,GLbyte green,GLbyte blue) = 0;
    void skibidigfx_glColor3b(GLbyte red,GLbyte green,GLbyte blue)
    {
    
    real_glColor3b(red,green,blue);
    }
void(__stdcall *real_glColor3bv)(const GLbyte* v) = 0;
    void skibidigfx_glColor3bv(const GLbyte* v)
    {
    
    real_glColor3bv(v);
    }
void(__stdcall *real_glColor3d)(GLdouble red,GLdouble green,GLdouble blue) = 0;
    void skibidigfx_glColor3d(GLdouble red,GLdouble green,GLdouble blue)
    {
    
    real_glColor3d(red,green,blue);
    }
void(__stdcall *real_glColor3dv)(const GLdouble* v) = 0;
    void skibidigfx_glColor3dv(const GLdouble* v)
    {
    
    real_glColor3dv(v);
    }
void(__stdcall *real_glColor3f)(GLfloat red,GLfloat green,GLfloat blue) = 0;
    void skibidigfx_glColor3f(GLfloat red,GLfloat green,GLfloat blue)
    {
    
    real_glColor3f(red,green,blue);
    }
void(__stdcall *real_glColor3fv)(const GLfloat* v) = 0;
    void skibidigfx_glColor3fv(const GLfloat* v)
    {
    
    real_glColor3fv(v);
    }
void(__stdcall *real_glColor3i)(GLint red,GLint green,GLint blue) = 0;
    void skibidigfx_glColor3i(GLint red,GLint green,GLint blue)
    {
    
    real_glColor3i(red,green,blue);
    }
void(__stdcall *real_glColor3iv)(const GLint* v) = 0;
    void skibidigfx_glColor3iv(const GLint* v)
    {
    
    real_glColor3iv(v);
    }
void(__stdcall *real_glColor3s)(GLshort red,GLshort green,GLshort blue) = 0;
    void skibidigfx_glColor3s(GLshort red,GLshort green,GLshort blue)
    {
    
    real_glColor3s(red,green,blue);
    }
void(__stdcall *real_glColor3sv)(const GLshort* v) = 0;
    void skibidigfx_glColor3sv(const GLshort* v)
    {
    
    real_glColor3sv(v);
    }
void(__stdcall *real_glColor3ub)(GLubyte red,GLubyte green,GLubyte blue) = 0;
    void skibidigfx_glColor3ub(GLubyte red,GLubyte green,GLubyte blue)
    {
    
    real_glColor3ub(red,green,blue);
    }
void(__stdcall *real_glColor3ubv)(const GLubyte* v) = 0;
    void skibidigfx_glColor3ubv(const GLubyte* v)
    {
    
    real_glColor3ubv(v);
    }
void(__stdcall *real_glColor3ui)(GLuint red,GLuint green,GLuint blue) = 0;
    void skibidigfx_glColor3ui(GLuint red,GLuint green,GLuint blue)
    {
    
    real_glColor3ui(red,green,blue);
    }
void(__stdcall *real_glColor3uiv)(const GLuint* v) = 0;
    void skibidigfx_glColor3uiv(const GLuint* v)
    {
    
    real_glColor3uiv(v);
    }
void(__stdcall *real_glColor3us)(GLushort red,GLushort green,GLushort blue) = 0;
    void skibidigfx_glColor3us(GLushort red,GLushort green,GLushort blue)
    {
    
    real_glColor3us(red,green,blue);
    }
void(__stdcall *real_glColor3usv)(const GLushort* v) = 0;
    void skibidigfx_glColor3usv(const GLushort* v)
    {
    
    real_glColor3usv(v);
    }
void(__stdcall *real_glColor4b)(GLbyte red,GLbyte green,GLbyte blue,GLbyte alpha) = 0;
    void skibidigfx_glColor4b(GLbyte red,GLbyte green,GLbyte blue,GLbyte alpha)
    {
    
    real_glColor4b(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4bv)(const GLbyte* v) = 0;
    void skibidigfx_glColor4bv(const GLbyte* v)
    {
    
    real_glColor4bv(v);
    }
void(__stdcall *real_glColor4d)(GLdouble red,GLdouble green,GLdouble blue,GLdouble alpha) = 0;
    void skibidigfx_glColor4d(GLdouble red,GLdouble green,GLdouble blue,GLdouble alpha)
    {
    
    real_glColor4d(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4dv)(const GLdouble* v) = 0;
    void skibidigfx_glColor4dv(const GLdouble* v)
    {
    
    real_glColor4dv(v);
    }
void(__stdcall *real_glColor4f)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha) = 0;
    void skibidigfx_glColor4f(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
    {
    
    real_glColor4f(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4fv)(const GLfloat* v) = 0;
    void skibidigfx_glColor4fv(const GLfloat* v)
    {
    
    real_glColor4fv(v);
    }
void(__stdcall *real_glColor4i)(GLint red,GLint green,GLint blue,GLint alpha) = 0;
    void skibidigfx_glColor4i(GLint red,GLint green,GLint blue,GLint alpha)
    {
    
    real_glColor4i(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4iv)(const GLint* v) = 0;
    void skibidigfx_glColor4iv(const GLint* v)
    {
    
    real_glColor4iv(v);
    }
void(__stdcall *real_glColor4s)(GLshort red,GLshort green,GLshort blue,GLshort alpha) = 0;
    void skibidigfx_glColor4s(GLshort red,GLshort green,GLshort blue,GLshort alpha)
    {
    
    real_glColor4s(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4sv)(const GLshort* v) = 0;
    void skibidigfx_glColor4sv(const GLshort* v)
    {
    
    real_glColor4sv(v);
    }
void(__stdcall *real_glColor4ub)(GLubyte red,GLubyte green,GLubyte blue,GLubyte alpha) = 0;
    void skibidigfx_glColor4ub(GLubyte red,GLubyte green,GLubyte blue,GLubyte alpha)
    {
    
    real_glColor4ub(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4ubv)(const GLubyte* v) = 0;
    void skibidigfx_glColor4ubv(const GLubyte* v)
    {
    
    real_glColor4ubv(v);
    }
void(__stdcall *real_glColor4ui)(GLuint red,GLuint green,GLuint blue,GLuint alpha) = 0;
    void skibidigfx_glColor4ui(GLuint red,GLuint green,GLuint blue,GLuint alpha)
    {
    
    real_glColor4ui(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4uiv)(const GLuint* v) = 0;
    void skibidigfx_glColor4uiv(const GLuint* v)
    {
    
    real_glColor4uiv(v);
    }
void(__stdcall *real_glColor4us)(GLushort red,GLushort green,GLushort blue,GLushort alpha) = 0;
    void skibidigfx_glColor4us(GLushort red,GLushort green,GLushort blue,GLushort alpha)
    {
    
    real_glColor4us(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4usv)(const GLushort* v) = 0;
    void skibidigfx_glColor4usv(const GLushort* v)
    {
    
    real_glColor4usv(v);
    }
void(__stdcall *real_glColorMask)(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha) = 0;
    void skibidigfx_glColorMask(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha)
    {
    
    real_glColorMask(red,green,blue,alpha);
    }
void(__stdcall *real_glColorMaterial)(GLenum face,GLenum mode) = 0;
    void skibidigfx_glColorMaterial(GLenum face,GLenum mode)
    {
    
    real_glColorMaterial(face,mode);
    }
void(__stdcall *real_glColorPointer)(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer) = 0;
    void skibidigfx_glColorPointer(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    real_glColorPointer(size,type,stride,pointer);
    }
void(__stdcall *real_glCopyPixels)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum type) = 0;
    void skibidigfx_glCopyPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum type)
    {
    
    real_glCopyPixels(x,y,width,height,type);
    }
void(__stdcall *real_glCopyTexImage1D)(GLenum target,GLint level,GLenum internalFormat,GLint x,GLint y,GLsizei width,GLint border) = 0;
    void skibidigfx_glCopyTexImage1D(GLenum target,GLint level,GLenum internalFormat,GLint x,GLint y,GLsizei width,GLint border)
    {
    
    real_glCopyTexImage1D(target,level,internalFormat,x,y,width,border);
    }
void(__stdcall *real_glCopyTexImage2D)(GLenum target,GLint level,GLenum internalFormat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border) = 0;
    void skibidigfx_glCopyTexImage2D(GLenum target,GLint level,GLenum internalFormat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)
    {
    
    real_glCopyTexImage2D(target,level,internalFormat,x,y,width,height,border);
    }
void(__stdcall *real_glCopyTexSubImage1D)(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width) = 0;
    void skibidigfx_glCopyTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)
    {
    
    real_glCopyTexSubImage1D(target,level,xoffset,x,y,width);
    }
void(__stdcall *real_glCopyTexSubImage2D)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height) = 0;
    void skibidigfx_glCopyTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)
    {
    
    real_glCopyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
    }
void(__stdcall *real_glCullFace)(GLenum mode) = 0;
    void skibidigfx_glCullFace(GLenum mode)
    {
    
    real_glCullFace(mode);
    }
void(__stdcall *real_glDeleteLists)(GLuint list,GLsizei range) = 0;
    void skibidigfx_glDeleteLists(GLuint list,GLsizei range)
    {
    
    real_glDeleteLists(list,range);
    }
void(__stdcall *real_glDeleteTextures)(GLsizei n,const GLuint* textures) = 0;
    void skibidigfx_glDeleteTextures(GLsizei n,const GLuint* textures)
    {
    
    real_glDeleteTextures(n,textures);
    }
void(__stdcall *real_glDepthFunc)(GLenum func) = 0;
    void skibidigfx_glDepthFunc(GLenum func)
    {
    
    real_glDepthFunc(func);
    }
void(__stdcall *real_glDepthMask)(GLboolean flag) = 0;
    void skibidigfx_glDepthMask(GLboolean flag)
    {
    
    real_glDepthMask(flag);
    }
void(__stdcall *real_glDepthRange)(GLclampd zNear,GLclampd zFar) = 0;
    void skibidigfx_glDepthRange(GLclampd zNear,GLclampd zFar)
    {
    
    real_glDepthRange(zNear,zFar);
    }
void(__stdcall *real_glDisable)(GLenum cap) = 0;
    void skibidigfx_glDisable(GLenum cap)
    {
    
    real_glDisable(cap);
    }
void(__stdcall *real_glDisableClientState)(GLenum array) = 0;
    void skibidigfx_glDisableClientState(GLenum array)
    {
    
    real_glDisableClientState(array);
    }
void(__stdcall *real_glDrawArrays)(GLenum mode,GLint first,GLsizei count) = 0;
    void skibidigfx_glDrawArrays(GLenum mode,GLint first,GLsizei count)
    {
    
    real_glDrawArrays(mode,first,count);
    }
void(__stdcall *real_glDrawBuffer)(GLenum mode) = 0;
    void skibidigfx_glDrawBuffer(GLenum mode)
    {
    
    real_glDrawBuffer(mode);
    }
void(__stdcall *real_glDrawElements)(GLenum mode,GLsizei count,GLenum type,const GLvoid* indices) = 0;
    void skibidigfx_glDrawElements(GLenum mode,GLsizei count,GLenum type,const GLvoid* indices)
    {
    
    real_glDrawElements(mode,count,type,indices);
    }
void(__stdcall *real_glDrawPixels)(GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid* pixels) = 0;
    void skibidigfx_glDrawPixels(GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    real_glDrawPixels(width,height,format,type,pixels);
    }
void(__stdcall *real_glEdgeFlag)(GLboolean flag) = 0;
    void skibidigfx_glEdgeFlag(GLboolean flag)
    {
    
    real_glEdgeFlag(flag);
    }
void(__stdcall *real_glEdgeFlagPointer)(GLsizei stride,const GLvoid* pointer) = 0;
    void skibidigfx_glEdgeFlagPointer(GLsizei stride,const GLvoid* pointer)
    {
    
    real_glEdgeFlagPointer(stride,pointer);
    }
void(__stdcall *real_glEdgeFlagv)(const GLboolean* flag) = 0;
    void skibidigfx_glEdgeFlagv(const GLboolean* flag)
    {
    
    real_glEdgeFlagv(flag);
    }
void(__stdcall *real_glEnable)(GLenum cap) = 0;
    void skibidigfx_glEnable(GLenum cap)
    {
    
    real_glEnable(cap);
    }
void(__stdcall *real_glEnableClientState)(GLenum array) = 0;
    void skibidigfx_glEnableClientState(GLenum array)
    {
    
    real_glEnableClientState(array);
    }
void(__stdcall *real_glEnd)() = 0;
    void skibidigfx_glEnd()
    {
    
    real_glEnd();
    }
void(__stdcall *real_glEndList)() = 0;
    void skibidigfx_glEndList()
    {
    
    real_glEndList();
    }
void(__stdcall *real_glEvalCoord1d)(GLdouble u) = 0;
    void skibidigfx_glEvalCoord1d(GLdouble u)
    {
    
    real_glEvalCoord1d(u);
    }
void(__stdcall *real_glEvalCoord1dv)(const GLdouble* u) = 0;
    void skibidigfx_glEvalCoord1dv(const GLdouble* u)
    {
    
    real_glEvalCoord1dv(u);
    }
void(__stdcall *real_glEvalCoord1f)(GLfloat u) = 0;
    void skibidigfx_glEvalCoord1f(GLfloat u)
    {
    
    real_glEvalCoord1f(u);
    }
void(__stdcall *real_glEvalCoord1fv)(const GLfloat* u) = 0;
    void skibidigfx_glEvalCoord1fv(const GLfloat* u)
    {
    
    real_glEvalCoord1fv(u);
    }
void(__stdcall *real_glEvalCoord2d)(GLdouble u,GLdouble v) = 0;
    void skibidigfx_glEvalCoord2d(GLdouble u,GLdouble v)
    {
    
    real_glEvalCoord2d(u,v);
    }
void(__stdcall *real_glEvalCoord2dv)(const GLdouble* u) = 0;
    void skibidigfx_glEvalCoord2dv(const GLdouble* u)
    {
    
    real_glEvalCoord2dv(u);
    }
void(__stdcall *real_glEvalCoord2f)(GLfloat u,GLfloat v) = 0;
    void skibidigfx_glEvalCoord2f(GLfloat u,GLfloat v)
    {
    
    real_glEvalCoord2f(u,v);
    }
void(__stdcall *real_glEvalCoord2fv)(const GLfloat* u) = 0;
    void skibidigfx_glEvalCoord2fv(const GLfloat* u)
    {
    
    real_glEvalCoord2fv(u);
    }
void(__stdcall *real_glEvalMesh1)(GLenum mode,GLint i1,GLint i2) = 0;
    void skibidigfx_glEvalMesh1(GLenum mode,GLint i1,GLint i2)
    {
    
    real_glEvalMesh1(mode,i1,i2);
    }
void(__stdcall *real_glEvalMesh2)(GLenum mode,GLint i1,GLint i2,GLint j1,GLint j2) = 0;
    void skibidigfx_glEvalMesh2(GLenum mode,GLint i1,GLint i2,GLint j1,GLint j2)
    {
    
    real_glEvalMesh2(mode,i1,i2,j1,j2);
    }
void(__stdcall *real_glEvalPoint1)(GLint i) = 0;
    void skibidigfx_glEvalPoint1(GLint i)
    {
    
    real_glEvalPoint1(i);
    }
void(__stdcall *real_glEvalPoint2)(GLint i,GLint j) = 0;
    void skibidigfx_glEvalPoint2(GLint i,GLint j)
    {
    
    real_glEvalPoint2(i,j);
    }
void(__stdcall *real_glFeedbackBuffer)(GLsizei size,GLenum type,GLfloat* buffer) = 0;
    void skibidigfx_glFeedbackBuffer(GLsizei size,GLenum type,GLfloat* buffer)
    {
    
    real_glFeedbackBuffer(size,type,buffer);
    }
void(__stdcall *real_glFinish)() = 0;
    void skibidigfx_glFinish()
    {
    
    real_glFinish();
    }
void(__stdcall *real_glFlush)() = 0;
    void skibidigfx_glFlush()
    {
    
    real_glFlush();
    }
void(__stdcall *real_glFogf)(GLenum pname,GLfloat param) = 0;
    void skibidigfx_glFogf(GLenum pname,GLfloat param)
    {
    
    real_glFogf(pname,param);
    }
void(__stdcall *real_glFogfv)(GLenum pname,const GLfloat* params) = 0;
    void skibidigfx_glFogfv(GLenum pname,const GLfloat* params)
    {
    
    real_glFogfv(pname,params);
    }
void(__stdcall *real_glFogi)(GLenum pname,GLint param) = 0;
    void skibidigfx_glFogi(GLenum pname,GLint param)
    {
    
    real_glFogi(pname,param);
    }
void(__stdcall *real_glFogiv)(GLenum pname,const GLint* params) = 0;
    void skibidigfx_glFogiv(GLenum pname,const GLint* params)
    {
    
    real_glFogiv(pname,params);
    }
void(__stdcall *real_glFrontFace)(GLenum mode) = 0;
    void skibidigfx_glFrontFace(GLenum mode)
    {
    
    real_glFrontFace(mode);
    }
void(__stdcall *real_glFrustum)(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar) = 0;
    void skibidigfx_glFrustum(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar)
    {
    
    real_glFrustum(left,right,bottom,top,zNear,zFar);
    }
GLuint(__stdcall *real_glGenLists)(GLsizei range) = 0;
    GLuint skibidigfx_glGenLists(GLsizei range)
    {
    
    return real_glGenLists(range);
    }
void(__stdcall *real_glGenTextures)(GLsizei n,GLuint* textures) = 0;
    void skibidigfx_glGenTextures(GLsizei n,GLuint* textures)
    {
    
    real_glGenTextures(n,textures);
    }
void(__stdcall *real_glGetBooleanv)(GLenum pname,GLboolean* params) = 0;
    void skibidigfx_glGetBooleanv(GLenum pname,GLboolean* params)
    {
    
    real_glGetBooleanv(pname,params);
    }
void(__stdcall *real_glGetClipPlane)(GLenum plane,GLdouble* equation) = 0;
    void skibidigfx_glGetClipPlane(GLenum plane,GLdouble* equation)
    {
    
    real_glGetClipPlane(plane,equation);
    }
void(__stdcall *real_glGetDoublev)(GLenum pname,GLdouble* params) = 0;
    void skibidigfx_glGetDoublev(GLenum pname,GLdouble* params)
    {
    
    real_glGetDoublev(pname,params);
    }
GLenum(__stdcall *real_glGetError)() = 0;
    GLenum skibidigfx_glGetError()
    {
    
    return real_glGetError();
    }
void(__stdcall *real_glGetFloatv)(GLenum pname,GLfloat* params) = 0;
    void skibidigfx_glGetFloatv(GLenum pname,GLfloat* params)
    {
    
    real_glGetFloatv(pname,params);
    }
void(__stdcall *real_glGetIntegerv)(GLenum pname,GLint* params) = 0;
    void skibidigfx_glGetIntegerv(GLenum pname,GLint* params)
    {
    
    real_glGetIntegerv(pname,params);
    }
void(__stdcall *real_glGetLightfv)(GLenum light,GLenum pname,GLfloat* params) = 0;
    void skibidigfx_glGetLightfv(GLenum light,GLenum pname,GLfloat* params)
    {
    
    real_glGetLightfv(light,pname,params);
    }
void(__stdcall *real_glGetLightiv)(GLenum light,GLenum pname,GLint* params) = 0;
    void skibidigfx_glGetLightiv(GLenum light,GLenum pname,GLint* params)
    {
    
    real_glGetLightiv(light,pname,params);
    }
void(__stdcall *real_glGetMapdv)(GLenum target,GLenum query,GLdouble* v) = 0;
    void skibidigfx_glGetMapdv(GLenum target,GLenum query,GLdouble* v)
    {
    
    real_glGetMapdv(target,query,v);
    }
void(__stdcall *real_glGetMapfv)(GLenum target,GLenum query,GLfloat* v) = 0;
    void skibidigfx_glGetMapfv(GLenum target,GLenum query,GLfloat* v)
    {
    
    real_glGetMapfv(target,query,v);
    }
void(__stdcall *real_glGetMapiv)(GLenum target,GLenum query,GLint* v) = 0;
    void skibidigfx_glGetMapiv(GLenum target,GLenum query,GLint* v)
    {
    
    real_glGetMapiv(target,query,v);
    }
void(__stdcall *real_glGetMaterialfv)(GLenum face,GLenum pname,GLfloat* params) = 0;
    void skibidigfx_glGetMaterialfv(GLenum face,GLenum pname,GLfloat* params)
    {
    
    real_glGetMaterialfv(face,pname,params);
    }
void(__stdcall *real_glGetMaterialiv)(GLenum face,GLenum pname,GLint* params) = 0;
    void skibidigfx_glGetMaterialiv(GLenum face,GLenum pname,GLint* params)
    {
    
    real_glGetMaterialiv(face,pname,params);
    }
void(__stdcall *real_glGetPixelMapfv)(GLenum map,GLfloat* values) = 0;
    void skibidigfx_glGetPixelMapfv(GLenum map,GLfloat* values)
    {
    
    real_glGetPixelMapfv(map,values);
    }
void(__stdcall *real_glGetPixelMapuiv)(GLenum map,GLuint* values) = 0;
    void skibidigfx_glGetPixelMapuiv(GLenum map,GLuint* values)
    {
    
    real_glGetPixelMapuiv(map,values);
    }
void(__stdcall *real_glGetPixelMapusv)(GLenum map,GLushort* values) = 0;
    void skibidigfx_glGetPixelMapusv(GLenum map,GLushort* values)
    {
    
    real_glGetPixelMapusv(map,values);
    }
void(__stdcall *real_glGetPointerv)(GLenum pname,GLvoid** params) = 0;
    void skibidigfx_glGetPointerv(GLenum pname,GLvoid** params)
    {
    
    real_glGetPointerv(pname,params);
    }
void(__stdcall *real_glGetPolygonStipple)(GLubyte* mask) = 0;
    void skibidigfx_glGetPolygonStipple(GLubyte* mask)
    {
    
    real_glGetPolygonStipple(mask);
    }
const GLubyte *(__stdcall *real_glGetString)(GLenum name) = 0;
    const GLubyte * skibidigfx_glGetString(GLenum name)
    {
    
    return real_glGetString(name);
    }
void(__stdcall *real_glGetTexEnvfv)(GLenum target,GLenum pname,GLfloat* params) = 0;
    void skibidigfx_glGetTexEnvfv(GLenum target,GLenum pname,GLfloat* params)
    {
    
    real_glGetTexEnvfv(target,pname,params);
    }
void(__stdcall *real_glGetTexEnviv)(GLenum target,GLenum pname,GLint* params) = 0;
    void skibidigfx_glGetTexEnviv(GLenum target,GLenum pname,GLint* params)
    {
    
    real_glGetTexEnviv(target,pname,params);
    }
void(__stdcall *real_glGetTexGendv)(GLenum coord,GLenum pname,GLdouble* params) = 0;
    void skibidigfx_glGetTexGendv(GLenum coord,GLenum pname,GLdouble* params)
    {
    
    real_glGetTexGendv(coord,pname,params);
    }
void(__stdcall *real_glGetTexGenfv)(GLenum coord,GLenum pname,GLfloat* params) = 0;
    void skibidigfx_glGetTexGenfv(GLenum coord,GLenum pname,GLfloat* params)
    {
    
    real_glGetTexGenfv(coord,pname,params);
    }
void(__stdcall *real_glGetTexGeniv)(GLenum coord,GLenum pname,GLint* params) = 0;
    void skibidigfx_glGetTexGeniv(GLenum coord,GLenum pname,GLint* params)
    {
    
    real_glGetTexGeniv(coord,pname,params);
    }
void(__stdcall *real_glGetTexImage)(GLenum target,GLint level,GLenum format,GLenum type,GLvoid* pixels) = 0;
    void skibidigfx_glGetTexImage(GLenum target,GLint level,GLenum format,GLenum type,GLvoid* pixels)
    {
    
    real_glGetTexImage(target,level,format,type,pixels);
    }
void(__stdcall *real_glGetTexLevelParameterfv)(GLenum target,GLint level,GLenum pname,GLfloat* params) = 0;
    void skibidigfx_glGetTexLevelParameterfv(GLenum target,GLint level,GLenum pname,GLfloat* params)
    {
    
    real_glGetTexLevelParameterfv(target,level,pname,params);
    }
void(__stdcall *real_glGetTexLevelParameteriv)(GLenum target,GLint level,GLenum pname,GLint* params) = 0;
    void skibidigfx_glGetTexLevelParameteriv(GLenum target,GLint level,GLenum pname,GLint* params)
    {
    
    real_glGetTexLevelParameteriv(target,level,pname,params);
    }
void(__stdcall *real_glGetTexParameterfv)(GLenum target,GLenum pname,GLfloat* params) = 0;
    void skibidigfx_glGetTexParameterfv(GLenum target,GLenum pname,GLfloat* params)
    {
    
    real_glGetTexParameterfv(target,pname,params);
    }
void(__stdcall *real_glGetTexParameteriv)(GLenum target,GLenum pname,GLint* params) = 0;
    void skibidigfx_glGetTexParameteriv(GLenum target,GLenum pname,GLint* params)
    {
    
    real_glGetTexParameteriv(target,pname,params);
    }
void(__stdcall *real_glHint)(GLenum target,GLenum mode) = 0;
    void skibidigfx_glHint(GLenum target,GLenum mode)
    {
    
    real_glHint(target,mode);
    }
void(__stdcall *real_glIndexMask)(GLuint mask) = 0;
    void skibidigfx_glIndexMask(GLuint mask)
    {
    
    real_glIndexMask(mask);
    }
void(__stdcall *real_glIndexPointer)(GLenum type,GLsizei stride,const GLvoid* pointer) = 0;
    void skibidigfx_glIndexPointer(GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    real_glIndexPointer(type,stride,pointer);
    }
void(__stdcall *real_glIndexd)(GLdouble c) = 0;
    void skibidigfx_glIndexd(GLdouble c)
    {
    
    real_glIndexd(c);
    }
void(__stdcall *real_glIndexdv)(const GLdouble* c) = 0;
    void skibidigfx_glIndexdv(const GLdouble* c)
    {
    
    real_glIndexdv(c);
    }
void(__stdcall *real_glIndexf)(GLfloat c) = 0;
    void skibidigfx_glIndexf(GLfloat c)
    {
    
    real_glIndexf(c);
    }
void(__stdcall *real_glIndexfv)(const GLfloat* c) = 0;
    void skibidigfx_glIndexfv(const GLfloat* c)
    {
    
    real_glIndexfv(c);
    }
void(__stdcall *real_glIndexi)(GLint c) = 0;
    void skibidigfx_glIndexi(GLint c)
    {
    
    real_glIndexi(c);
    }
void(__stdcall *real_glIndexiv)(const GLint* c) = 0;
    void skibidigfx_glIndexiv(const GLint* c)
    {
    
    real_glIndexiv(c);
    }
void(__stdcall *real_glIndexs)(GLshort c) = 0;
    void skibidigfx_glIndexs(GLshort c)
    {
    
    real_glIndexs(c);
    }
void(__stdcall *real_glIndexsv)(const GLshort* c) = 0;
    void skibidigfx_glIndexsv(const GLshort* c)
    {
    
    real_glIndexsv(c);
    }
void(__stdcall *real_glIndexub)(GLubyte c) = 0;
    void skibidigfx_glIndexub(GLubyte c)
    {
    
    real_glIndexub(c);
    }
void(__stdcall *real_glIndexubv)(const GLubyte* c) = 0;
    void skibidigfx_glIndexubv(const GLubyte* c)
    {
    
    real_glIndexubv(c);
    }
void(__stdcall *real_glInitNames)() = 0;
    void skibidigfx_glInitNames()
    {
    
    real_glInitNames();
    }
void(__stdcall *real_glInterleavedArrays)(GLenum format,GLsizei stride,const GLvoid* pointer) = 0;
    void skibidigfx_glInterleavedArrays(GLenum format,GLsizei stride,const GLvoid* pointer)
    {
    
    real_glInterleavedArrays(format,stride,pointer);
    }
GLboolean(__stdcall *real_glIsEnabled)(GLenum cap) = 0;
    GLboolean skibidigfx_glIsEnabled(GLenum cap)
    {
    
    return real_glIsEnabled(cap);
    }
GLboolean(__stdcall *real_glIsList)(GLuint list) = 0;
    GLboolean skibidigfx_glIsList(GLuint list)
    {
    
    return real_glIsList(list);
    }
GLboolean(__stdcall *real_glIsTexture)(GLuint texture) = 0;
    GLboolean skibidigfx_glIsTexture(GLuint texture)
    {
    
    return real_glIsTexture(texture);
    }
void(__stdcall *real_glLightModelf)(GLenum pname,GLfloat param) = 0;
    void skibidigfx_glLightModelf(GLenum pname,GLfloat param)
    {
    
    real_glLightModelf(pname,param);
    }
void(__stdcall *real_glLightModelfv)(GLenum pname,const GLfloat* params) = 0;
    void skibidigfx_glLightModelfv(GLenum pname,const GLfloat* params)
    {
    
    real_glLightModelfv(pname,params);
    }
void(__stdcall *real_glLightModeli)(GLenum pname,GLint param) = 0;
    void skibidigfx_glLightModeli(GLenum pname,GLint param)
    {
    
    real_glLightModeli(pname,param);
    }
void(__stdcall *real_glLightModeliv)(GLenum pname,const GLint* params) = 0;
    void skibidigfx_glLightModeliv(GLenum pname,const GLint* params)
    {
    
    real_glLightModeliv(pname,params);
    }
void(__stdcall *real_glLightf)(GLenum light,GLenum pname,GLfloat param) = 0;
    void skibidigfx_glLightf(GLenum light,GLenum pname,GLfloat param)
    {
    
    real_glLightf(light,pname,param);
    }
void(__stdcall *real_glLightfv)(GLenum light,GLenum pname,const GLfloat* params) = 0;
    void skibidigfx_glLightfv(GLenum light,GLenum pname,const GLfloat* params)
    {
    
    real_glLightfv(light,pname,params);
    }
void(__stdcall *real_glLighti)(GLenum light,GLenum pname,GLint param) = 0;
    void skibidigfx_glLighti(GLenum light,GLenum pname,GLint param)
    {
    
    real_glLighti(light,pname,param);
    }
void(__stdcall *real_glLightiv)(GLenum light,GLenum pname,const GLint* params) = 0;
    void skibidigfx_glLightiv(GLenum light,GLenum pname,const GLint* params)
    {
    
    real_glLightiv(light,pname,params);
    }
void(__stdcall *real_glLineStipple)(GLint factor,GLushort pattern) = 0;
    void skibidigfx_glLineStipple(GLint factor,GLushort pattern)
    {
    
    real_glLineStipple(factor,pattern);
    }
void(__stdcall *real_glLineWidth)(GLfloat width) = 0;
    void skibidigfx_glLineWidth(GLfloat width)
    {
    
    real_glLineWidth(width);
    }
void(__stdcall *real_glListBase)(GLuint base) = 0;
    void skibidigfx_glListBase(GLuint base)
    {
    
    real_glListBase(base);
    }
void(__stdcall *real_glLoadIdentity)() = 0;
    void skibidigfx_glLoadIdentity()
    {
    
    real_glLoadIdentity();
    }
void(__stdcall *real_glLoadMatrixd)(const GLdouble* m) = 0;
    void skibidigfx_glLoadMatrixd(const GLdouble* m)
    {
    
    real_glLoadMatrixd(m);
    }
void(__stdcall *real_glLoadMatrixf)(const GLfloat* m) = 0;
    void skibidigfx_glLoadMatrixf(const GLfloat* m)
    {
    
    real_glLoadMatrixf(m);
    }
void(__stdcall *real_glLoadName)(GLuint name) = 0;
    void skibidigfx_glLoadName(GLuint name)
    {
    
    real_glLoadName(name);
    }
void(__stdcall *real_glLogicOp)(GLenum opcode) = 0;
    void skibidigfx_glLogicOp(GLenum opcode)
    {
    
    real_glLogicOp(opcode);
    }
void(__stdcall *real_glMap1d)(GLenum target,GLdouble u1,GLdouble u2,GLint stride,GLint order,const GLdouble* points) = 0;
    void skibidigfx_glMap1d(GLenum target,GLdouble u1,GLdouble u2,GLint stride,GLint order,const GLdouble* points)
    {
    
    real_glMap1d(target,u1,u2,stride,order,points);
    }
void(__stdcall *real_glMap1f)(GLenum target,GLfloat u1,GLfloat u2,GLint stride,GLint order,const GLfloat* points) = 0;
    void skibidigfx_glMap1f(GLenum target,GLfloat u1,GLfloat u2,GLint stride,GLint order,const GLfloat* points)
    {
    
    real_glMap1f(target,u1,u2,stride,order,points);
    }
void(__stdcall *real_glMap2d)(GLenum target,GLdouble u1,GLdouble u2,GLint ustride,GLint uorder,GLdouble v1,GLdouble v2,GLint vstride,GLint vorder,const GLdouble* points) = 0;
    void skibidigfx_glMap2d(GLenum target,GLdouble u1,GLdouble u2,GLint ustride,GLint uorder,GLdouble v1,GLdouble v2,GLint vstride,GLint vorder,const GLdouble* points)
    {
    
    real_glMap2d(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
    }
void(__stdcall *real_glMap2f)(GLenum target,GLfloat u1,GLfloat u2,GLint ustride,GLint uorder,GLfloat v1,GLfloat v2,GLint vstride,GLint vorder,const GLfloat* points) = 0;
    void skibidigfx_glMap2f(GLenum target,GLfloat u1,GLfloat u2,GLint ustride,GLint uorder,GLfloat v1,GLfloat v2,GLint vstride,GLint vorder,const GLfloat* points)
    {
    
    real_glMap2f(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
    }
void(__stdcall *real_glMapGrid1d)(GLint un,GLdouble u1,GLdouble u2) = 0;
    void skibidigfx_glMapGrid1d(GLint un,GLdouble u1,GLdouble u2)
    {
    
    real_glMapGrid1d(un,u1,u2);
    }
void(__stdcall *real_glMapGrid1f)(GLint un,GLfloat u1,GLfloat u2) = 0;
    void skibidigfx_glMapGrid1f(GLint un,GLfloat u1,GLfloat u2)
    {
    
    real_glMapGrid1f(un,u1,u2);
    }
void(__stdcall *real_glMapGrid2d)(GLint un,GLdouble u1,GLdouble u2,GLint vn,GLdouble v1,GLdouble v2) = 0;
    void skibidigfx_glMapGrid2d(GLint un,GLdouble u1,GLdouble u2,GLint vn,GLdouble v1,GLdouble v2)
    {
    
    real_glMapGrid2d(un,u1,u2,vn,v1,v2);
    }
void(__stdcall *real_glMapGrid2f)(GLint un,GLfloat u1,GLfloat u2,GLint vn,GLfloat v1,GLfloat v2) = 0;
    void skibidigfx_glMapGrid2f(GLint un,GLfloat u1,GLfloat u2,GLint vn,GLfloat v1,GLfloat v2)
    {
    
    real_glMapGrid2f(un,u1,u2,vn,v1,v2);
    }
void(__stdcall *real_glMaterialf)(GLenum face,GLenum pname,GLfloat param) = 0;
    void skibidigfx_glMaterialf(GLenum face,GLenum pname,GLfloat param)
    {
    
    real_glMaterialf(face,pname,param);
    }
void(__stdcall *real_glMaterialfv)(GLenum face,GLenum pname,const GLfloat* params) = 0;
    void skibidigfx_glMaterialfv(GLenum face,GLenum pname,const GLfloat* params)
    {
    
    real_glMaterialfv(face,pname,params);
    }
void(__stdcall *real_glMateriali)(GLenum face,GLenum pname,GLint param) = 0;
    void skibidigfx_glMateriali(GLenum face,GLenum pname,GLint param)
    {
    
    real_glMateriali(face,pname,param);
    }
void(__stdcall *real_glMaterialiv)(GLenum face,GLenum pname,const GLint* params) = 0;
    void skibidigfx_glMaterialiv(GLenum face,GLenum pname,const GLint* params)
    {
    
    real_glMaterialiv(face,pname,params);
    }
void(__stdcall *real_glMatrixMode)(GLenum mode) = 0;
    void skibidigfx_glMatrixMode(GLenum mode)
    {
    
    real_glMatrixMode(mode);
    }
void(__stdcall *real_glMultMatrixd)(const GLdouble* m) = 0;
    void skibidigfx_glMultMatrixd(const GLdouble* m)
    {
    
    real_glMultMatrixd(m);
    }
void(__stdcall *real_glMultMatrixf)(const GLfloat* m) = 0;
    void skibidigfx_glMultMatrixf(const GLfloat* m)
    {
    
    real_glMultMatrixf(m);
    }
void(__stdcall *real_glNewList)(GLuint list,GLenum mode) = 0;
    void skibidigfx_glNewList(GLuint list,GLenum mode)
    {
    
    real_glNewList(list,mode);
    }
void(__stdcall *real_glNormal3b)(GLbyte nx,GLbyte ny,GLbyte nz) = 0;
    void skibidigfx_glNormal3b(GLbyte nx,GLbyte ny,GLbyte nz)
    {
    
    real_glNormal3b(nx,ny,nz);
    }
void(__stdcall *real_glNormal3bv)(const GLbyte* v) = 0;
    void skibidigfx_glNormal3bv(const GLbyte* v)
    {
    
    real_glNormal3bv(v);
    }
void(__stdcall *real_glNormal3d)(GLdouble nx,GLdouble ny,GLdouble nz) = 0;
    void skibidigfx_glNormal3d(GLdouble nx,GLdouble ny,GLdouble nz)
    {
    
    real_glNormal3d(nx,ny,nz);
    }
void(__stdcall *real_glNormal3dv)(const GLdouble* v) = 0;
    void skibidigfx_glNormal3dv(const GLdouble* v)
    {
    
    real_glNormal3dv(v);
    }
void(__stdcall *real_glNormal3f)(GLfloat nx,GLfloat ny,GLfloat nz) = 0;
    void skibidigfx_glNormal3f(GLfloat nx,GLfloat ny,GLfloat nz)
    {
    
    real_glNormal3f(nx,ny,nz);
    }
void(__stdcall *real_glNormal3fv)(const GLfloat* v) = 0;
    void skibidigfx_glNormal3fv(const GLfloat* v)
    {
    
    real_glNormal3fv(v);
    }
void(__stdcall *real_glNormal3i)(GLint nx,GLint ny,GLint nz) = 0;
    void skibidigfx_glNormal3i(GLint nx,GLint ny,GLint nz)
    {
    
    real_glNormal3i(nx,ny,nz);
    }
void(__stdcall *real_glNormal3iv)(const GLint* v) = 0;
    void skibidigfx_glNormal3iv(const GLint* v)
    {
    
    real_glNormal3iv(v);
    }
void(__stdcall *real_glNormal3s)(GLshort nx,GLshort ny,GLshort nz) = 0;
    void skibidigfx_glNormal3s(GLshort nx,GLshort ny,GLshort nz)
    {
    
    real_glNormal3s(nx,ny,nz);
    }
void(__stdcall *real_glNormal3sv)(const GLshort* v) = 0;
    void skibidigfx_glNormal3sv(const GLshort* v)
    {
    
    real_glNormal3sv(v);
    }
void(__stdcall *real_glNormalPointer)(GLenum type,GLsizei stride,const GLvoid* pointer) = 0;
    void skibidigfx_glNormalPointer(GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    real_glNormalPointer(type,stride,pointer);
    }
void(__stdcall *real_glOrtho)(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar) = 0;
    void skibidigfx_glOrtho(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble zNear,GLdouble zFar)
    {
    
    real_glOrtho(left,right,bottom,top,zNear,zFar);
    }
void(__stdcall *real_glPassThrough)(GLfloat token) = 0;
    void skibidigfx_glPassThrough(GLfloat token)
    {
    
    real_glPassThrough(token);
    }
void(__stdcall *real_glPixelMapfv)(GLenum map,GLsizei mapsize,const GLfloat* values) = 0;
    void skibidigfx_glPixelMapfv(GLenum map,GLsizei mapsize,const GLfloat* values)
    {
    
    real_glPixelMapfv(map,mapsize,values);
    }
void(__stdcall *real_glPixelMapuiv)(GLenum map,GLsizei mapsize,const GLuint* values) = 0;
    void skibidigfx_glPixelMapuiv(GLenum map,GLsizei mapsize,const GLuint* values)
    {
    
    real_glPixelMapuiv(map,mapsize,values);
    }
void(__stdcall *real_glPixelMapusv)(GLenum map,GLsizei mapsize,const GLushort* values) = 0;
    void skibidigfx_glPixelMapusv(GLenum map,GLsizei mapsize,const GLushort* values)
    {
    
    real_glPixelMapusv(map,mapsize,values);
    }
void(__stdcall *real_glPixelStoref)(GLenum pname,GLfloat param) = 0;
    void skibidigfx_glPixelStoref(GLenum pname,GLfloat param)
    {
    
    real_glPixelStoref(pname,param);
    }
void(__stdcall *real_glPixelStorei)(GLenum pname,GLint param) = 0;
    void skibidigfx_glPixelStorei(GLenum pname,GLint param)
    {
    
    real_glPixelStorei(pname,param);
    }
void(__stdcall *real_glPixelTransferf)(GLenum pname,GLfloat param) = 0;
    void skibidigfx_glPixelTransferf(GLenum pname,GLfloat param)
    {
    
    real_glPixelTransferf(pname,param);
    }
void(__stdcall *real_glPixelTransferi)(GLenum pname,GLint param) = 0;
    void skibidigfx_glPixelTransferi(GLenum pname,GLint param)
    {
    
    real_glPixelTransferi(pname,param);
    }
void(__stdcall *real_glPixelZoom)(GLfloat xfactor,GLfloat yfactor) = 0;
    void skibidigfx_glPixelZoom(GLfloat xfactor,GLfloat yfactor)
    {
    
    real_glPixelZoom(xfactor,yfactor);
    }
void(__stdcall *real_glPointSize)(GLfloat size) = 0;
    void skibidigfx_glPointSize(GLfloat size)
    {
    
    real_glPointSize(size);
    }
void(__stdcall *real_glPolygonMode)(GLenum face,GLenum mode) = 0;
    void skibidigfx_glPolygonMode(GLenum face,GLenum mode)
    {
    
    real_glPolygonMode(face,mode);
    }
void(__stdcall *real_glPolygonOffset)(GLfloat factor,GLfloat units) = 0;
    void skibidigfx_glPolygonOffset(GLfloat factor,GLfloat units)
    {
    
    real_glPolygonOffset(factor,units);
    }
void(__stdcall *real_glPolygonStipple)(const GLubyte* mask) = 0;
    void skibidigfx_glPolygonStipple(const GLubyte* mask)
    {
    
    real_glPolygonStipple(mask);
    }
void(__stdcall *real_glPopAttrib)() = 0;
    void skibidigfx_glPopAttrib()
    {
    
    real_glPopAttrib();
    }
void(__stdcall *real_glPopClientAttrib)() = 0;
    void skibidigfx_glPopClientAttrib()
    {
    
    real_glPopClientAttrib();
    }
void(__stdcall *real_glPopMatrix)() = 0;
    void skibidigfx_glPopMatrix()
    {
    
    real_glPopMatrix();
    }
void(__stdcall *real_glPopName)() = 0;
    void skibidigfx_glPopName()
    {
    
    real_glPopName();
    }
void(__stdcall *real_glPrioritizeTextures)(GLsizei n,const GLuint* textures,const GLclampf* priorities) = 0;
    void skibidigfx_glPrioritizeTextures(GLsizei n,const GLuint* textures,const GLclampf* priorities)
    {
    
    real_glPrioritizeTextures(n,textures,priorities);
    }
void(__stdcall *real_glPushAttrib)(GLbitfield mask) = 0;
    void skibidigfx_glPushAttrib(GLbitfield mask)
    {
    
    real_glPushAttrib(mask);
    }
void(__stdcall *real_glPushClientAttrib)(GLbitfield mask) = 0;
    void skibidigfx_glPushClientAttrib(GLbitfield mask)
    {
    
    real_glPushClientAttrib(mask);
    }
void(__stdcall *real_glPushMatrix)() = 0;
    void skibidigfx_glPushMatrix()
    {
    
    real_glPushMatrix();
    }
void(__stdcall *real_glPushName)(GLuint name) = 0;
    void skibidigfx_glPushName(GLuint name)
    {
    
    real_glPushName(name);
    }
void(__stdcall *real_glRasterPos2d)(GLdouble x,GLdouble y) = 0;
    void skibidigfx_glRasterPos2d(GLdouble x,GLdouble y)
    {
    
    real_glRasterPos2d(x,y);
    }
void(__stdcall *real_glRasterPos2dv)(const GLdouble* v) = 0;
    void skibidigfx_glRasterPos2dv(const GLdouble* v)
    {
    
    real_glRasterPos2dv(v);
    }
void(__stdcall *real_glRasterPos2f)(GLfloat x,GLfloat y) = 0;
    void skibidigfx_glRasterPos2f(GLfloat x,GLfloat y)
    {
    
    real_glRasterPos2f(x,y);
    }
void(__stdcall *real_glRasterPos2fv)(const GLfloat* v) = 0;
    void skibidigfx_glRasterPos2fv(const GLfloat* v)
    {
    
    real_glRasterPos2fv(v);
    }
void(__stdcall *real_glRasterPos2i)(GLint x,GLint y) = 0;
    void skibidigfx_glRasterPos2i(GLint x,GLint y)
    {
    
    real_glRasterPos2i(x,y);
    }
void(__stdcall *real_glRasterPos2iv)(const GLint* v) = 0;
    void skibidigfx_glRasterPos2iv(const GLint* v)
    {
    
    real_glRasterPos2iv(v);
    }
void(__stdcall *real_glRasterPos2s)(GLshort x,GLshort y) = 0;
    void skibidigfx_glRasterPos2s(GLshort x,GLshort y)
    {
    
    real_glRasterPos2s(x,y);
    }
void(__stdcall *real_glRasterPos2sv)(const GLshort* v) = 0;
    void skibidigfx_glRasterPos2sv(const GLshort* v)
    {
    
    real_glRasterPos2sv(v);
    }
void(__stdcall *real_glRasterPos3d)(GLdouble x,GLdouble y,GLdouble z) = 0;
    void skibidigfx_glRasterPos3d(GLdouble x,GLdouble y,GLdouble z)
    {
    
    real_glRasterPos3d(x,y,z);
    }
void(__stdcall *real_glRasterPos3dv)(const GLdouble* v) = 0;
    void skibidigfx_glRasterPos3dv(const GLdouble* v)
    {
    
    real_glRasterPos3dv(v);
    }
void(__stdcall *real_glRasterPos3f)(GLfloat x,GLfloat y,GLfloat z) = 0;
    void skibidigfx_glRasterPos3f(GLfloat x,GLfloat y,GLfloat z)
    {
    
    real_glRasterPos3f(x,y,z);
    }
void(__stdcall *real_glRasterPos3fv)(const GLfloat* v) = 0;
    void skibidigfx_glRasterPos3fv(const GLfloat* v)
    {
    
    real_glRasterPos3fv(v);
    }
void(__stdcall *real_glRasterPos3i)(GLint x,GLint y,GLint z) = 0;
    void skibidigfx_glRasterPos3i(GLint x,GLint y,GLint z)
    {
    
    real_glRasterPos3i(x,y,z);
    }
void(__stdcall *real_glRasterPos3iv)(const GLint* v) = 0;
    void skibidigfx_glRasterPos3iv(const GLint* v)
    {
    
    real_glRasterPos3iv(v);
    }
void(__stdcall *real_glRasterPos3s)(GLshort x,GLshort y,GLshort z) = 0;
    void skibidigfx_glRasterPos3s(GLshort x,GLshort y,GLshort z)
    {
    
    real_glRasterPos3s(x,y,z);
    }
void(__stdcall *real_glRasterPos3sv)(const GLshort* v) = 0;
    void skibidigfx_glRasterPos3sv(const GLshort* v)
    {
    
    real_glRasterPos3sv(v);
    }
void(__stdcall *real_glRasterPos4d)(GLdouble x,GLdouble y,GLdouble z,GLdouble w) = 0;
    void skibidigfx_glRasterPos4d(GLdouble x,GLdouble y,GLdouble z,GLdouble w)
    {
    
    real_glRasterPos4d(x,y,z,w);
    }
void(__stdcall *real_glRasterPos4dv)(const GLdouble* v) = 0;
    void skibidigfx_glRasterPos4dv(const GLdouble* v)
    {
    
    real_glRasterPos4dv(v);
    }
void(__stdcall *real_glRasterPos4f)(GLfloat x,GLfloat y,GLfloat z,GLfloat w) = 0;
    void skibidigfx_glRasterPos4f(GLfloat x,GLfloat y,GLfloat z,GLfloat w)
    {
    
    real_glRasterPos4f(x,y,z,w);
    }
void(__stdcall *real_glRasterPos4fv)(const GLfloat* v) = 0;
    void skibidigfx_glRasterPos4fv(const GLfloat* v)
    {
    
    real_glRasterPos4fv(v);
    }
void(__stdcall *real_glRasterPos4i)(GLint x,GLint y,GLint z,GLint w) = 0;
    void skibidigfx_glRasterPos4i(GLint x,GLint y,GLint z,GLint w)
    {
    
    real_glRasterPos4i(x,y,z,w);
    }
void(__stdcall *real_glRasterPos4iv)(const GLint* v) = 0;
    void skibidigfx_glRasterPos4iv(const GLint* v)
    {
    
    real_glRasterPos4iv(v);
    }
void(__stdcall *real_glRasterPos4s)(GLshort x,GLshort y,GLshort z,GLshort w) = 0;
    void skibidigfx_glRasterPos4s(GLshort x,GLshort y,GLshort z,GLshort w)
    {
    
    real_glRasterPos4s(x,y,z,w);
    }
void(__stdcall *real_glRasterPos4sv)(const GLshort* v) = 0;
    void skibidigfx_glRasterPos4sv(const GLshort* v)
    {
    
    real_glRasterPos4sv(v);
    }
void(__stdcall *real_glReadBuffer)(GLenum mode) = 0;
    void skibidigfx_glReadBuffer(GLenum mode)
    {
    
    real_glReadBuffer(mode);
    }
void(__stdcall *real_glReadPixels)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLvoid* pixels) = 0;
    void skibidigfx_glReadPixels(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLvoid* pixels)
    {
    
    real_glReadPixels(x,y,width,height,format,type,pixels);
    }
void(__stdcall *real_glRectd)(GLdouble x1,GLdouble y1,GLdouble x2,GLdouble y2) = 0;
    void skibidigfx_glRectd(GLdouble x1,GLdouble y1,GLdouble x2,GLdouble y2)
    {
    
    real_glRectd(x1,y1,x2,y2);
    }
void(__stdcall *real_glRectdv)(const GLdouble* v1,const GLdouble* v2) = 0;
    void skibidigfx_glRectdv(const GLdouble* v1,const GLdouble* v2)
    {
    
    real_glRectdv(v1,v2);
    }
void(__stdcall *real_glRectf)(GLfloat x1,GLfloat y1,GLfloat x2,GLfloat y2) = 0;
    void skibidigfx_glRectf(GLfloat x1,GLfloat y1,GLfloat x2,GLfloat y2)
    {
    
    real_glRectf(x1,y1,x2,y2);
    }
void(__stdcall *real_glRectfv)(const GLfloat* v1,const GLfloat* v2) = 0;
    void skibidigfx_glRectfv(const GLfloat* v1,const GLfloat* v2)
    {
    
    real_glRectfv(v1,v2);
    }
void(__stdcall *real_glRecti)(GLint x1,GLint y1,GLint x2,GLint y2) = 0;
    void skibidigfx_glRecti(GLint x1,GLint y1,GLint x2,GLint y2)
    {
    
    real_glRecti(x1,y1,x2,y2);
    }
void(__stdcall *real_glRectiv)(const GLint* v1,const GLint* v2) = 0;
    void skibidigfx_glRectiv(const GLint* v1,const GLint* v2)
    {
    
    real_glRectiv(v1,v2);
    }
void(__stdcall *real_glRects)(GLshort x1,GLshort y1,GLshort x2,GLshort y2) = 0;
    void skibidigfx_glRects(GLshort x1,GLshort y1,GLshort x2,GLshort y2)
    {
    
    real_glRects(x1,y1,x2,y2);
    }
void(__stdcall *real_glRectsv)(const GLshort* v1,const GLshort* v2) = 0;
    void skibidigfx_glRectsv(const GLshort* v1,const GLshort* v2)
    {
    
    real_glRectsv(v1,v2);
    }
GLint(__stdcall *real_glRenderMode)(GLenum mode) = 0;
    GLint skibidigfx_glRenderMode(GLenum mode)
    {
    
    return real_glRenderMode(mode);
    }
void(__stdcall *real_glRotated)(GLdouble angle,GLdouble x,GLdouble y,GLdouble z) = 0;
    void skibidigfx_glRotated(GLdouble angle,GLdouble x,GLdouble y,GLdouble z)
    {
    
    real_glRotated(angle,x,y,z);
    }
void(__stdcall *real_glRotatef)(GLfloat angle,GLfloat x,GLfloat y,GLfloat z) = 0;
    void skibidigfx_glRotatef(GLfloat angle,GLfloat x,GLfloat y,GLfloat z)
    {
    
    real_glRotatef(angle,x,y,z);
    }
void(__stdcall *real_glScaled)(GLdouble x,GLdouble y,GLdouble z) = 0;
    void skibidigfx_glScaled(GLdouble x,GLdouble y,GLdouble z)
    {
    
    real_glScaled(x,y,z);
    }
void(__stdcall *real_glScalef)(GLfloat x,GLfloat y,GLfloat z) = 0;
    void skibidigfx_glScalef(GLfloat x,GLfloat y,GLfloat z)
    {
    
    real_glScalef(x,y,z);
    }
void(__stdcall *real_glScissor)(GLint x,GLint y,GLsizei width,GLsizei height) = 0;
    void skibidigfx_glScissor(GLint x,GLint y,GLsizei width,GLsizei height)
    {
    
    real_glScissor(x,y,width,height);
    }
void(__stdcall *real_glSelectBuffer)(GLsizei size,GLuint* buffer) = 0;
    void skibidigfx_glSelectBuffer(GLsizei size,GLuint* buffer)
    {
    
    real_glSelectBuffer(size,buffer);
    }
void(__stdcall *real_glShadeModel)(GLenum mode) = 0;
    void skibidigfx_glShadeModel(GLenum mode)
    {
    
    real_glShadeModel(mode);
    }
void(__stdcall *real_glStencilFunc)(GLenum func,GLint ref,GLuint mask) = 0;
    void skibidigfx_glStencilFunc(GLenum func,GLint ref,GLuint mask)
    {
    
    real_glStencilFunc(func,ref,mask);
    }
void(__stdcall *real_glStencilMask)(GLuint mask) = 0;
    void skibidigfx_glStencilMask(GLuint mask)
    {
    
    real_glStencilMask(mask);
    }
void(__stdcall *real_glStencilOp)(GLenum fail,GLenum zfail,GLenum zpass) = 0;
    void skibidigfx_glStencilOp(GLenum fail,GLenum zfail,GLenum zpass)
    {
    
    real_glStencilOp(fail,zfail,zpass);
    }
void(__stdcall *real_glTexCoord1d)(GLdouble s) = 0;
    void skibidigfx_glTexCoord1d(GLdouble s)
    {
    
    real_glTexCoord1d(s);
    }
void(__stdcall *real_glTexCoord1dv)(const GLdouble* v) = 0;
    void skibidigfx_glTexCoord1dv(const GLdouble* v)
    {
    
    real_glTexCoord1dv(v);
    }
void(__stdcall *real_glTexCoord1f)(GLfloat s) = 0;
    void skibidigfx_glTexCoord1f(GLfloat s)
    {
    
    real_glTexCoord1f(s);
    }
void(__stdcall *real_glTexCoord1fv)(const GLfloat* v) = 0;
    void skibidigfx_glTexCoord1fv(const GLfloat* v)
    {
    
    real_glTexCoord1fv(v);
    }
void(__stdcall *real_glTexCoord1i)(GLint s) = 0;
    void skibidigfx_glTexCoord1i(GLint s)
    {
    
    real_glTexCoord1i(s);
    }
void(__stdcall *real_glTexCoord1iv)(const GLint* v) = 0;
    void skibidigfx_glTexCoord1iv(const GLint* v)
    {
    
    real_glTexCoord1iv(v);
    }
void(__stdcall *real_glTexCoord1s)(GLshort s) = 0;
    void skibidigfx_glTexCoord1s(GLshort s)
    {
    
    real_glTexCoord1s(s);
    }
void(__stdcall *real_glTexCoord1sv)(const GLshort* v) = 0;
    void skibidigfx_glTexCoord1sv(const GLshort* v)
    {
    
    real_glTexCoord1sv(v);
    }
void(__stdcall *real_glTexCoord2d)(GLdouble s,GLdouble t) = 0;
    void skibidigfx_glTexCoord2d(GLdouble s,GLdouble t)
    {
    
    real_glTexCoord2d(s,t);
    }
void(__stdcall *real_glTexCoord2dv)(const GLdouble* v) = 0;
    void skibidigfx_glTexCoord2dv(const GLdouble* v)
    {
    
    real_glTexCoord2dv(v);
    }
void(__stdcall *real_glTexCoord2f)(GLfloat s,GLfloat t) = 0;
    void skibidigfx_glTexCoord2f(GLfloat s,GLfloat t)
    {
    
    real_glTexCoord2f(s,t);
    }
void(__stdcall *real_glTexCoord2fv)(const GLfloat* v) = 0;
    void skibidigfx_glTexCoord2fv(const GLfloat* v)
    {
    
    real_glTexCoord2fv(v);
    }
void(__stdcall *real_glTexCoord2i)(GLint s,GLint t) = 0;
    void skibidigfx_glTexCoord2i(GLint s,GLint t)
    {
    
    real_glTexCoord2i(s,t);
    }
void(__stdcall *real_glTexCoord2iv)(const GLint* v) = 0;
    void skibidigfx_glTexCoord2iv(const GLint* v)
    {
    
    real_glTexCoord2iv(v);
    }
void(__stdcall *real_glTexCoord2s)(GLshort s,GLshort t) = 0;
    void skibidigfx_glTexCoord2s(GLshort s,GLshort t)
    {
    
    real_glTexCoord2s(s,t);
    }
void(__stdcall *real_glTexCoord2sv)(const GLshort* v) = 0;
    void skibidigfx_glTexCoord2sv(const GLshort* v)
    {
    
    real_glTexCoord2sv(v);
    }
void(__stdcall *real_glTexCoord3d)(GLdouble s,GLdouble t,GLdouble r) = 0;
    void skibidigfx_glTexCoord3d(GLdouble s,GLdouble t,GLdouble r)
    {
    
    real_glTexCoord3d(s,t,r);
    }
void(__stdcall *real_glTexCoord3dv)(const GLdouble* v) = 0;
    void skibidigfx_glTexCoord3dv(const GLdouble* v)
    {
    
    real_glTexCoord3dv(v);
    }
void(__stdcall *real_glTexCoord3f)(GLfloat s,GLfloat t,GLfloat r) = 0;
    void skibidigfx_glTexCoord3f(GLfloat s,GLfloat t,GLfloat r)
    {
    
    real_glTexCoord3f(s,t,r);
    }
void(__stdcall *real_glTexCoord3fv)(const GLfloat* v) = 0;
    void skibidigfx_glTexCoord3fv(const GLfloat* v)
    {
    
    real_glTexCoord3fv(v);
    }
void(__stdcall *real_glTexCoord3i)(GLint s,GLint t,GLint r) = 0;
    void skibidigfx_glTexCoord3i(GLint s,GLint t,GLint r)
    {
    
    real_glTexCoord3i(s,t,r);
    }
void(__stdcall *real_glTexCoord3iv)(const GLint* v) = 0;
    void skibidigfx_glTexCoord3iv(const GLint* v)
    {
    
    real_glTexCoord3iv(v);
    }
void(__stdcall *real_glTexCoord3s)(GLshort s,GLshort t,GLshort r) = 0;
    void skibidigfx_glTexCoord3s(GLshort s,GLshort t,GLshort r)
    {
    
    real_glTexCoord3s(s,t,r);
    }
void(__stdcall *real_glTexCoord3sv)(const GLshort* v) = 0;
    void skibidigfx_glTexCoord3sv(const GLshort* v)
    {
    
    real_glTexCoord3sv(v);
    }
void(__stdcall *real_glTexCoord4d)(GLdouble s,GLdouble t,GLdouble r,GLdouble q) = 0;
    void skibidigfx_glTexCoord4d(GLdouble s,GLdouble t,GLdouble r,GLdouble q)
    {
    
    real_glTexCoord4d(s,t,r,q);
    }
void(__stdcall *real_glTexCoord4dv)(const GLdouble* v) = 0;
    void skibidigfx_glTexCoord4dv(const GLdouble* v)
    {
    
    real_glTexCoord4dv(v);
    }
void(__stdcall *real_glTexCoord4f)(GLfloat s,GLfloat t,GLfloat r,GLfloat q) = 0;
    void skibidigfx_glTexCoord4f(GLfloat s,GLfloat t,GLfloat r,GLfloat q)
    {
    
    real_glTexCoord4f(s,t,r,q);
    }
void(__stdcall *real_glTexCoord4fv)(const GLfloat* v) = 0;
    void skibidigfx_glTexCoord4fv(const GLfloat* v)
    {
    
    real_glTexCoord4fv(v);
    }
void(__stdcall *real_glTexCoord4i)(GLint s,GLint t,GLint r,GLint q) = 0;
    void skibidigfx_glTexCoord4i(GLint s,GLint t,GLint r,GLint q)
    {
    
    real_glTexCoord4i(s,t,r,q);
    }
void(__stdcall *real_glTexCoord4iv)(const GLint* v) = 0;
    void skibidigfx_glTexCoord4iv(const GLint* v)
    {
    
    real_glTexCoord4iv(v);
    }
void(__stdcall *real_glTexCoord4s)(GLshort s,GLshort t,GLshort r,GLshort q) = 0;
    void skibidigfx_glTexCoord4s(GLshort s,GLshort t,GLshort r,GLshort q)
    {
    
    real_glTexCoord4s(s,t,r,q);
    }
void(__stdcall *real_glTexCoord4sv)(const GLshort* v) = 0;
    void skibidigfx_glTexCoord4sv(const GLshort* v)
    {
    
    real_glTexCoord4sv(v);
    }
void(__stdcall *real_glTexCoordPointer)(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer) = 0;
    void skibidigfx_glTexCoordPointer(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    real_glTexCoordPointer(size,type,stride,pointer);
    }
void(__stdcall *real_glTexEnvf)(GLenum target,GLenum pname,GLfloat param) = 0;
    void skibidigfx_glTexEnvf(GLenum target,GLenum pname,GLfloat param)
    {
    
    real_glTexEnvf(target,pname,param);
    }
void(__stdcall *real_glTexEnvfv)(GLenum target,GLenum pname,const GLfloat* params) = 0;
    void skibidigfx_glTexEnvfv(GLenum target,GLenum pname,const GLfloat* params)
    {
    
    real_glTexEnvfv(target,pname,params);
    }
void(__stdcall *real_glTexEnvi)(GLenum target,GLenum pname,GLint param) = 0;
    void skibidigfx_glTexEnvi(GLenum target,GLenum pname,GLint param)
    {
    
    real_glTexEnvi(target,pname,param);
    }
void(__stdcall *real_glTexEnviv)(GLenum target,GLenum pname,const GLint* params) = 0;
    void skibidigfx_glTexEnviv(GLenum target,GLenum pname,const GLint* params)
    {
    
    real_glTexEnviv(target,pname,params);
    }
void(__stdcall *real_glTexGend)(GLenum coord,GLenum pname,GLdouble param) = 0;
    void skibidigfx_glTexGend(GLenum coord,GLenum pname,GLdouble param)
    {
    
    real_glTexGend(coord,pname,param);
    }
void(__stdcall *real_glTexGendv)(GLenum coord,GLenum pname,const GLdouble* params) = 0;
    void skibidigfx_glTexGendv(GLenum coord,GLenum pname,const GLdouble* params)
    {
    
    real_glTexGendv(coord,pname,params);
    }
void(__stdcall *real_glTexGenf)(GLenum coord,GLenum pname,GLfloat param) = 0;
    void skibidigfx_glTexGenf(GLenum coord,GLenum pname,GLfloat param)
    {
    
    real_glTexGenf(coord,pname,param);
    }
void(__stdcall *real_glTexGenfv)(GLenum coord,GLenum pname,const GLfloat* params) = 0;
    void skibidigfx_glTexGenfv(GLenum coord,GLenum pname,const GLfloat* params)
    {
    
    real_glTexGenfv(coord,pname,params);
    }
void(__stdcall *real_glTexGeni)(GLenum coord,GLenum pname,GLint param) = 0;
    void skibidigfx_glTexGeni(GLenum coord,GLenum pname,GLint param)
    {
    
    real_glTexGeni(coord,pname,param);
    }
void(__stdcall *real_glTexGeniv)(GLenum coord,GLenum pname,const GLint* params) = 0;
    void skibidigfx_glTexGeniv(GLenum coord,GLenum pname,const GLint* params)
    {
    
    real_glTexGeniv(coord,pname,params);
    }
void(__stdcall *real_glTexImage1D)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const GLvoid* pixels) = 0;
    void skibidigfx_glTexImage1D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    real_glTexImage1D(target,level,internalformat,width,border,format,type,pixels);
    }
void(__stdcall *real_glTexImage2D)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const GLvoid* pixels) = 0;
    void skibidigfx_glTexImage2D(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    real_glTexImage2D(target,level,internalformat,width,height,border,format,type,pixels);
    }
void(__stdcall *real_glTexParameterf)(GLenum target,GLenum pname,GLfloat param) = 0;
    void skibidigfx_glTexParameterf(GLenum target,GLenum pname,GLfloat param)
    {
    
    real_glTexParameterf(target,pname,param);
    }
void(__stdcall *real_glTexParameterfv)(GLenum target,GLenum pname,const GLfloat* params) = 0;
    void skibidigfx_glTexParameterfv(GLenum target,GLenum pname,const GLfloat* params)
    {
    
    real_glTexParameterfv(target,pname,params);
    }
void(__stdcall *real_glTexParameteri)(GLenum target,GLenum pname,GLint param) = 0;
    void skibidigfx_glTexParameteri(GLenum target,GLenum pname,GLint param)
    {
    
    real_glTexParameteri(target,pname,param);
    }
void(__stdcall *real_glTexParameteriv)(GLenum target,GLenum pname,const GLint* params) = 0;
    void skibidigfx_glTexParameteriv(GLenum target,GLenum pname,const GLint* params)
    {
    
    real_glTexParameteriv(target,pname,params);
    }
void(__stdcall *real_glTexSubImage1D)(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const GLvoid* pixels) = 0;
    void skibidigfx_glTexSubImage1D(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    real_glTexSubImage1D(target,level,xoffset,width,format,type,pixels);
    }
void(__stdcall *real_glTexSubImage2D)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid* pixels) = 0;
    void skibidigfx_glTexSubImage2D(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid* pixels)
    {
    
    real_glTexSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
    }
void(__stdcall *real_glTranslated)(GLdouble x,GLdouble y,GLdouble z) = 0;
    void skibidigfx_glTranslated(GLdouble x,GLdouble y,GLdouble z)
    {
    
    real_glTranslated(x,y,z);
    }
void(__stdcall *real_glTranslatef)(GLfloat x,GLfloat y,GLfloat z) = 0;
    void skibidigfx_glTranslatef(GLfloat x,GLfloat y,GLfloat z)
    {
    
    real_glTranslatef(x,y,z);
    }
void(__stdcall *real_glVertex2d)(GLdouble x,GLdouble y) = 0;
    void skibidigfx_glVertex2d(GLdouble x,GLdouble y)
    {
    
    real_glVertex2d(x,y);
    }
void(__stdcall *real_glVertex2dv)(const GLdouble* v) = 0;
    void skibidigfx_glVertex2dv(const GLdouble* v)
    {
    
    real_glVertex2dv(v);
    }
void(__stdcall *real_glVertex2f)(GLfloat x,GLfloat y) = 0;
    void skibidigfx_glVertex2f(GLfloat x,GLfloat y)
    {
    
    real_glVertex2f(x,y);
    }
void(__stdcall *real_glVertex2fv)(const GLfloat* v) = 0;
    void skibidigfx_glVertex2fv(const GLfloat* v)
    {
    
    real_glVertex2fv(v);
    }
void(__stdcall *real_glVertex2i)(GLint x,GLint y) = 0;
    void skibidigfx_glVertex2i(GLint x,GLint y)
    {
    
    real_glVertex2i(x,y);
    }
void(__stdcall *real_glVertex2iv)(const GLint* v) = 0;
    void skibidigfx_glVertex2iv(const GLint* v)
    {
    
    real_glVertex2iv(v);
    }
void(__stdcall *real_glVertex2s)(GLshort x,GLshort y) = 0;
    void skibidigfx_glVertex2s(GLshort x,GLshort y)
    {
    
    real_glVertex2s(x,y);
    }
void(__stdcall *real_glVertex2sv)(const GLshort* v) = 0;
    void skibidigfx_glVertex2sv(const GLshort* v)
    {
    
    real_glVertex2sv(v);
    }
void(__stdcall *real_glVertex3d)(GLdouble x,GLdouble y,GLdouble z) = 0;
    void skibidigfx_glVertex3d(GLdouble x,GLdouble y,GLdouble z)
    {
    
    real_glVertex3d(x,y,z);
    }
void(__stdcall *real_glVertex3dv)(const GLdouble* v) = 0;
    void skibidigfx_glVertex3dv(const GLdouble* v)
    {
    
    real_glVertex3dv(v);
    }
void(__stdcall *real_glVertex3f)(GLfloat x,GLfloat y,GLfloat z) = 0;
    void skibidigfx_glVertex3f(GLfloat x,GLfloat y,GLfloat z)
    {
    
    real_glVertex3f(x,y,z);
    }
void(__stdcall *real_glVertex3fv)(const GLfloat* v) = 0;
    void skibidigfx_glVertex3fv(const GLfloat* v)
    {
    
    real_glVertex3fv(v);
    }
void(__stdcall *real_glVertex3i)(GLint x,GLint y,GLint z) = 0;
    void skibidigfx_glVertex3i(GLint x,GLint y,GLint z)
    {
    
    real_glVertex3i(x,y,z);
    }
void(__stdcall *real_glVertex3iv)(const GLint* v) = 0;
    void skibidigfx_glVertex3iv(const GLint* v)
    {
    
    real_glVertex3iv(v);
    }
void(__stdcall *real_glVertex3s)(GLshort x,GLshort y,GLshort z) = 0;
    void skibidigfx_glVertex3s(GLshort x,GLshort y,GLshort z)
    {
    
    real_glVertex3s(x,y,z);
    }
void(__stdcall *real_glVertex3sv)(const GLshort* v) = 0;
    void skibidigfx_glVertex3sv(const GLshort* v)
    {
    
    real_glVertex3sv(v);
    }
void(__stdcall *real_glVertex4d)(GLdouble x,GLdouble y,GLdouble z,GLdouble w) = 0;
    void skibidigfx_glVertex4d(GLdouble x,GLdouble y,GLdouble z,GLdouble w)
    {
    
    real_glVertex4d(x,y,z,w);
    }
void(__stdcall *real_glVertex4dv)(const GLdouble* v) = 0;
    void skibidigfx_glVertex4dv(const GLdouble* v)
    {
    
    real_glVertex4dv(v);
    }
void(__stdcall *real_glVertex4f)(GLfloat x,GLfloat y,GLfloat z,GLfloat w) = 0;
    void skibidigfx_glVertex4f(GLfloat x,GLfloat y,GLfloat z,GLfloat w)
    {
    
    real_glVertex4f(x,y,z,w);
    }
void(__stdcall *real_glVertex4fv)(const GLfloat* v) = 0;
    void skibidigfx_glVertex4fv(const GLfloat* v)
    {
    
    real_glVertex4fv(v);
    }
void(__stdcall *real_glVertex4i)(GLint x,GLint y,GLint z,GLint w) = 0;
    void skibidigfx_glVertex4i(GLint x,GLint y,GLint z,GLint w)
    {
    
    real_glVertex4i(x,y,z,w);
    }
void(__stdcall *real_glVertex4iv)(const GLint* v) = 0;
    void skibidigfx_glVertex4iv(const GLint* v)
    {
    
    real_glVertex4iv(v);
    }
void(__stdcall *real_glVertex4s)(GLshort x,GLshort y,GLshort z,GLshort w) = 0;
    void skibidigfx_glVertex4s(GLshort x,GLshort y,GLshort z,GLshort w)
    {
    
    real_glVertex4s(x,y,z,w);
    }
void(__stdcall *real_glVertex4sv)(const GLshort* v) = 0;
    void skibidigfx_glVertex4sv(const GLshort* v)
    {
    
    real_glVertex4sv(v);
    }
void(__stdcall *real_glVertexPointer)(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer) = 0;
    void skibidigfx_glVertexPointer(GLint size,GLenum type,GLsizei stride,const GLvoid* pointer)
    {
    
    real_glVertexPointer(size,type,stride,pointer);
    }
void(__stdcall *real_glViewport)(GLint x,GLint y,GLsizei width,GLsizei height) = 0;
    void skibidigfx_glViewport(GLint x,GLint y,GLsizei width,GLsizei height)
    {
    
    real_glViewport(x,y,width,height);
    }
void(__stdcall *real_glDrawRangeElements)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices) = 0;
    void skibidigfx_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices)
    {
    
    real_glDrawRangeElements(mode,start,end,count,type,indices);
    }
void(__stdcall *real_glTexImage3D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTexImage3D(target,level,internalformat,width,height,depth,border,format,type,pixels);
    }
void(__stdcall *real_glTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
    }
void(__stdcall *real_glCopyTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
    }
void(__stdcall *real_glActiveTexture)(GLenum texture) = 0;
    void skibidigfx_glActiveTexture(GLenum texture)
    {
    
    real_glActiveTexture(texture);
    }
void(__stdcall *real_glSampleCoverage)(GLfloat value, GLboolean invert) = 0;
    void skibidigfx_glSampleCoverage(GLfloat value, GLboolean invert)
    {
    
    real_glSampleCoverage(value,invert);
    }
void(__stdcall *real_glCompressedTexImage3D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexImage3D(target,level,internalformat,width,height,depth,border,imageSize,data);
    }
void(__stdcall *real_glCompressedTexImage2D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexImage2D(target,level,internalformat,width,height,border,imageSize,data);
    }
void(__stdcall *real_glCompressedTexImage1D)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexImage1D(target,level,internalformat,width,border,imageSize,data);
    }
void(__stdcall *real_glCompressedTexSubImage3D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);
    }
void(__stdcall *real_glCompressedTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,imageSize,data);
    }
void(__stdcall *real_glCompressedTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexSubImage1D(target,level,xoffset,width,format,imageSize,data);
    }
void(__stdcall *real_glGetCompressedTexImage)(GLenum target, GLint level, void* img) = 0;
    void skibidigfx_glGetCompressedTexImage(GLenum target, GLint level, void* img)
    {
    
    real_glGetCompressedTexImage(target,level,img);
    }
void(__stdcall *real_glClientActiveTexture)(GLenum texture) = 0;
    void skibidigfx_glClientActiveTexture(GLenum texture)
    {
    
    real_glClientActiveTexture(texture);
    }
void(__stdcall *real_glMultiTexCoord1d)(GLenum target, GLdouble s) = 0;
    void skibidigfx_glMultiTexCoord1d(GLenum target, GLdouble s)
    {
    
    real_glMultiTexCoord1d(target,s);
    }
void(__stdcall *real_glMultiTexCoord1dv)(GLenum target, const GLdouble* v) = 0;
    void skibidigfx_glMultiTexCoord1dv(GLenum target, const GLdouble* v)
    {
    
    real_glMultiTexCoord1dv(target,v);
    }
void(__stdcall *real_glMultiTexCoord1f)(GLenum target, GLfloat s) = 0;
    void skibidigfx_glMultiTexCoord1f(GLenum target, GLfloat s)
    {
    
    real_glMultiTexCoord1f(target,s);
    }
void(__stdcall *real_glMultiTexCoord1fv)(GLenum target, const GLfloat* v) = 0;
    void skibidigfx_glMultiTexCoord1fv(GLenum target, const GLfloat* v)
    {
    
    real_glMultiTexCoord1fv(target,v);
    }
void(__stdcall *real_glMultiTexCoord1i)(GLenum target, GLint s) = 0;
    void skibidigfx_glMultiTexCoord1i(GLenum target, GLint s)
    {
    
    real_glMultiTexCoord1i(target,s);
    }
void(__stdcall *real_glMultiTexCoord1iv)(GLenum target, const GLint* v) = 0;
    void skibidigfx_glMultiTexCoord1iv(GLenum target, const GLint* v)
    {
    
    real_glMultiTexCoord1iv(target,v);
    }
void(__stdcall *real_glMultiTexCoord1s)(GLenum target, GLshort s) = 0;
    void skibidigfx_glMultiTexCoord1s(GLenum target, GLshort s)
    {
    
    real_glMultiTexCoord1s(target,s);
    }
void(__stdcall *real_glMultiTexCoord1sv)(GLenum target, const GLshort* v) = 0;
    void skibidigfx_glMultiTexCoord1sv(GLenum target, const GLshort* v)
    {
    
    real_glMultiTexCoord1sv(target,v);
    }
void(__stdcall *real_glMultiTexCoord2d)(GLenum target, GLdouble s, GLdouble t) = 0;
    void skibidigfx_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
    {
    
    real_glMultiTexCoord2d(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2dv)(GLenum target, const GLdouble* v) = 0;
    void skibidigfx_glMultiTexCoord2dv(GLenum target, const GLdouble* v)
    {
    
    real_glMultiTexCoord2dv(target,v);
    }
void(__stdcall *real_glMultiTexCoord2f)(GLenum target, GLfloat s, GLfloat t) = 0;
    void skibidigfx_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
    {
    
    real_glMultiTexCoord2f(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2fv)(GLenum target, const GLfloat* v) = 0;
    void skibidigfx_glMultiTexCoord2fv(GLenum target, const GLfloat* v)
    {
    
    real_glMultiTexCoord2fv(target,v);
    }
void(__stdcall *real_glMultiTexCoord2i)(GLenum target, GLint s, GLint t) = 0;
    void skibidigfx_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
    {
    
    real_glMultiTexCoord2i(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2iv)(GLenum target, const GLint* v) = 0;
    void skibidigfx_glMultiTexCoord2iv(GLenum target, const GLint* v)
    {
    
    real_glMultiTexCoord2iv(target,v);
    }
void(__stdcall *real_glMultiTexCoord2s)(GLenum target, GLshort s, GLshort t) = 0;
    void skibidigfx_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
    {
    
    real_glMultiTexCoord2s(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2sv)(GLenum target, const GLshort* v) = 0;
    void skibidigfx_glMultiTexCoord2sv(GLenum target, const GLshort* v)
    {
    
    real_glMultiTexCoord2sv(target,v);
    }
void(__stdcall *real_glMultiTexCoord3d)(GLenum target, GLdouble s, GLdouble t, GLdouble r) = 0;
    void skibidigfx_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
    {
    
    real_glMultiTexCoord3d(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3dv)(GLenum target, const GLdouble* v) = 0;
    void skibidigfx_glMultiTexCoord3dv(GLenum target, const GLdouble* v)
    {
    
    real_glMultiTexCoord3dv(target,v);
    }
void(__stdcall *real_glMultiTexCoord3f)(GLenum target, GLfloat s, GLfloat t, GLfloat r) = 0;
    void skibidigfx_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
    {
    
    real_glMultiTexCoord3f(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3fv)(GLenum target, const GLfloat* v) = 0;
    void skibidigfx_glMultiTexCoord3fv(GLenum target, const GLfloat* v)
    {
    
    real_glMultiTexCoord3fv(target,v);
    }
void(__stdcall *real_glMultiTexCoord3i)(GLenum target, GLint s, GLint t, GLint r) = 0;
    void skibidigfx_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
    {
    
    real_glMultiTexCoord3i(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3iv)(GLenum target, const GLint* v) = 0;
    void skibidigfx_glMultiTexCoord3iv(GLenum target, const GLint* v)
    {
    
    real_glMultiTexCoord3iv(target,v);
    }
void(__stdcall *real_glMultiTexCoord3s)(GLenum target, GLshort s, GLshort t, GLshort r) = 0;
    void skibidigfx_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
    {
    
    real_glMultiTexCoord3s(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3sv)(GLenum target, const GLshort* v) = 0;
    void skibidigfx_glMultiTexCoord3sv(GLenum target, const GLshort* v)
    {
    
    real_glMultiTexCoord3sv(target,v);
    }
void(__stdcall *real_glMultiTexCoord4d)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) = 0;
    void skibidigfx_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
    {
    
    real_glMultiTexCoord4d(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4dv)(GLenum target, const GLdouble* v) = 0;
    void skibidigfx_glMultiTexCoord4dv(GLenum target, const GLdouble* v)
    {
    
    real_glMultiTexCoord4dv(target,v);
    }
void(__stdcall *real_glMultiTexCoord4f)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) = 0;
    void skibidigfx_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
    {
    
    real_glMultiTexCoord4f(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4fv)(GLenum target, const GLfloat* v) = 0;
    void skibidigfx_glMultiTexCoord4fv(GLenum target, const GLfloat* v)
    {
    
    real_glMultiTexCoord4fv(target,v);
    }
void(__stdcall *real_glMultiTexCoord4i)(GLenum target, GLint s, GLint t, GLint r, GLint q) = 0;
    void skibidigfx_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
    {
    
    real_glMultiTexCoord4i(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4iv)(GLenum target, const GLint* v) = 0;
    void skibidigfx_glMultiTexCoord4iv(GLenum target, const GLint* v)
    {
    
    real_glMultiTexCoord4iv(target,v);
    }
void(__stdcall *real_glMultiTexCoord4s)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) = 0;
    void skibidigfx_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
    {
    
    real_glMultiTexCoord4s(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4sv)(GLenum target, const GLshort* v) = 0;
    void skibidigfx_glMultiTexCoord4sv(GLenum target, const GLshort* v)
    {
    
    real_glMultiTexCoord4sv(target,v);
    }
void(__stdcall *real_glLoadTransposeMatrixf)(const GLfloat* m) = 0;
    void skibidigfx_glLoadTransposeMatrixf(const GLfloat* m)
    {
    
    real_glLoadTransposeMatrixf(m);
    }
void(__stdcall *real_glLoadTransposeMatrixd)(const GLdouble* m) = 0;
    void skibidigfx_glLoadTransposeMatrixd(const GLdouble* m)
    {
    
    real_glLoadTransposeMatrixd(m);
    }
void(__stdcall *real_glMultTransposeMatrixf)(const GLfloat* m) = 0;
    void skibidigfx_glMultTransposeMatrixf(const GLfloat* m)
    {
    
    real_glMultTransposeMatrixf(m);
    }
void(__stdcall *real_glMultTransposeMatrixd)(const GLdouble* m) = 0;
    void skibidigfx_glMultTransposeMatrixd(const GLdouble* m)
    {
    
    real_glMultTransposeMatrixd(m);
    }
void(__stdcall *real_glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) = 0;
    void skibidigfx_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
    {
    
    real_glBlendFuncSeparate(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha);
    }
void(__stdcall *real_glMultiDrawArrays)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount) = 0;
    void skibidigfx_glMultiDrawArrays(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount)
    {
    
    real_glMultiDrawArrays(mode,first,count,drawcount);
    }
void(__stdcall *real_glMultiDrawElements)(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei drawcount) = 0;
    void skibidigfx_glMultiDrawElements(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei drawcount)
    {
    
    real_glMultiDrawElements(mode,count,type,constindices,drawcount);
    }
void(__stdcall *real_glPointParameterf)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glPointParameterf(GLenum pname, GLfloat param)
    {
    
    real_glPointParameterf(pname,param);
    }
void(__stdcall *real_glPointParameterfv)(GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glPointParameterfv(GLenum pname, const GLfloat* params)
    {
    
    real_glPointParameterfv(pname,params);
    }
void(__stdcall *real_glPointParameteri)(GLenum pname, GLint param) = 0;
    void skibidigfx_glPointParameteri(GLenum pname, GLint param)
    {
    
    real_glPointParameteri(pname,param);
    }
void(__stdcall *real_glPointParameteriv)(GLenum pname, const GLint* params) = 0;
    void skibidigfx_glPointParameteriv(GLenum pname, const GLint* params)
    {
    
    real_glPointParameteriv(pname,params);
    }
void(__stdcall *real_glFogCoordf)(GLfloat coord) = 0;
    void skibidigfx_glFogCoordf(GLfloat coord)
    {
    
    real_glFogCoordf(coord);
    }
void(__stdcall *real_glFogCoordfv)(const GLfloat* coord) = 0;
    void skibidigfx_glFogCoordfv(const GLfloat* coord)
    {
    
    real_glFogCoordfv(coord);
    }
void(__stdcall *real_glFogCoordd)(GLdouble coord) = 0;
    void skibidigfx_glFogCoordd(GLdouble coord)
    {
    
    real_glFogCoordd(coord);
    }
void(__stdcall *real_glFogCoorddv)(const GLdouble* coord) = 0;
    void skibidigfx_glFogCoorddv(const GLdouble* coord)
    {
    
    real_glFogCoorddv(coord);
    }
void(__stdcall *real_glFogCoordPointer)(GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glFogCoordPointer(GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glFogCoordPointer(type,stride,pointer);
    }
void(__stdcall *real_glSecondaryColor3b)(GLbyte red, GLbyte green, GLbyte blue) = 0;
    void skibidigfx_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
    {
    
    real_glSecondaryColor3b(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3bv)(const GLbyte* v) = 0;
    void skibidigfx_glSecondaryColor3bv(const GLbyte* v)
    {
    
    real_glSecondaryColor3bv(v);
    }
void(__stdcall *real_glSecondaryColor3d)(GLdouble red, GLdouble green, GLdouble blue) = 0;
    void skibidigfx_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
    {
    
    real_glSecondaryColor3d(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3dv)(const GLdouble* v) = 0;
    void skibidigfx_glSecondaryColor3dv(const GLdouble* v)
    {
    
    real_glSecondaryColor3dv(v);
    }
void(__stdcall *real_glSecondaryColor3f)(GLfloat red, GLfloat green, GLfloat blue) = 0;
    void skibidigfx_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
    {
    
    real_glSecondaryColor3f(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3fv)(const GLfloat* v) = 0;
    void skibidigfx_glSecondaryColor3fv(const GLfloat* v)
    {
    
    real_glSecondaryColor3fv(v);
    }
void(__stdcall *real_glSecondaryColor3i)(GLint red, GLint green, GLint blue) = 0;
    void skibidigfx_glSecondaryColor3i(GLint red, GLint green, GLint blue)
    {
    
    real_glSecondaryColor3i(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3iv)(const GLint* v) = 0;
    void skibidigfx_glSecondaryColor3iv(const GLint* v)
    {
    
    real_glSecondaryColor3iv(v);
    }
void(__stdcall *real_glSecondaryColor3s)(GLshort red, GLshort green, GLshort blue) = 0;
    void skibidigfx_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
    {
    
    real_glSecondaryColor3s(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3sv)(const GLshort* v) = 0;
    void skibidigfx_glSecondaryColor3sv(const GLshort* v)
    {
    
    real_glSecondaryColor3sv(v);
    }
void(__stdcall *real_glSecondaryColor3ub)(GLubyte red, GLubyte green, GLubyte blue) = 0;
    void skibidigfx_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
    {
    
    real_glSecondaryColor3ub(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3ubv)(const GLubyte* v) = 0;
    void skibidigfx_glSecondaryColor3ubv(const GLubyte* v)
    {
    
    real_glSecondaryColor3ubv(v);
    }
void(__stdcall *real_glSecondaryColor3ui)(GLuint red, GLuint green, GLuint blue) = 0;
    void skibidigfx_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
    {
    
    real_glSecondaryColor3ui(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3uiv)(const GLuint* v) = 0;
    void skibidigfx_glSecondaryColor3uiv(const GLuint* v)
    {
    
    real_glSecondaryColor3uiv(v);
    }
void(__stdcall *real_glSecondaryColor3us)(GLushort red, GLushort green, GLushort blue) = 0;
    void skibidigfx_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
    {
    
    real_glSecondaryColor3us(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3usv)(const GLushort* v) = 0;
    void skibidigfx_glSecondaryColor3usv(const GLushort* v)
    {
    
    real_glSecondaryColor3usv(v);
    }
void(__stdcall *real_glSecondaryColorPointer)(GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glSecondaryColorPointer(size,type,stride,pointer);
    }
void(__stdcall *real_glWindowPos2d)(GLdouble x, GLdouble y) = 0;
    void skibidigfx_glWindowPos2d(GLdouble x, GLdouble y)
    {
    
    real_glWindowPos2d(x,y);
    }
void(__stdcall *real_glWindowPos2dv)(const GLdouble* v) = 0;
    void skibidigfx_glWindowPos2dv(const GLdouble* v)
    {
    
    real_glWindowPos2dv(v);
    }
void(__stdcall *real_glWindowPos2f)(GLfloat x, GLfloat y) = 0;
    void skibidigfx_glWindowPos2f(GLfloat x, GLfloat y)
    {
    
    real_glWindowPos2f(x,y);
    }
void(__stdcall *real_glWindowPos2fv)(const GLfloat* v) = 0;
    void skibidigfx_glWindowPos2fv(const GLfloat* v)
    {
    
    real_glWindowPos2fv(v);
    }
void(__stdcall *real_glWindowPos2i)(GLint x, GLint y) = 0;
    void skibidigfx_glWindowPos2i(GLint x, GLint y)
    {
    
    real_glWindowPos2i(x,y);
    }
void(__stdcall *real_glWindowPos2iv)(const GLint* v) = 0;
    void skibidigfx_glWindowPos2iv(const GLint* v)
    {
    
    real_glWindowPos2iv(v);
    }
void(__stdcall *real_glWindowPos2s)(GLshort x, GLshort y) = 0;
    void skibidigfx_glWindowPos2s(GLshort x, GLshort y)
    {
    
    real_glWindowPos2s(x,y);
    }
void(__stdcall *real_glWindowPos2sv)(const GLshort* v) = 0;
    void skibidigfx_glWindowPos2sv(const GLshort* v)
    {
    
    real_glWindowPos2sv(v);
    }
void(__stdcall *real_glWindowPos3d)(GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glWindowPos3d(x,y,z);
    }
void(__stdcall *real_glWindowPos3dv)(const GLdouble* v) = 0;
    void skibidigfx_glWindowPos3dv(const GLdouble* v)
    {
    
    real_glWindowPos3dv(v);
    }
void(__stdcall *real_glWindowPos3f)(GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glWindowPos3f(x,y,z);
    }
void(__stdcall *real_glWindowPos3fv)(const GLfloat* v) = 0;
    void skibidigfx_glWindowPos3fv(const GLfloat* v)
    {
    
    real_glWindowPos3fv(v);
    }
void(__stdcall *real_glWindowPos3i)(GLint x, GLint y, GLint z) = 0;
    void skibidigfx_glWindowPos3i(GLint x, GLint y, GLint z)
    {
    
    real_glWindowPos3i(x,y,z);
    }
void(__stdcall *real_glWindowPos3iv)(const GLint* v) = 0;
    void skibidigfx_glWindowPos3iv(const GLint* v)
    {
    
    real_glWindowPos3iv(v);
    }
void(__stdcall *real_glWindowPos3s)(GLshort x, GLshort y, GLshort z) = 0;
    void skibidigfx_glWindowPos3s(GLshort x, GLshort y, GLshort z)
    {
    
    real_glWindowPos3s(x,y,z);
    }
void(__stdcall *real_glWindowPos3sv)(const GLshort* v) = 0;
    void skibidigfx_glWindowPos3sv(const GLshort* v)
    {
    
    real_glWindowPos3sv(v);
    }
void(__stdcall *real_glBlendColor)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = 0;
    void skibidigfx_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
    {
    
    real_glBlendColor(red,green,blue,alpha);
    }
void(__stdcall *real_glBlendEquation)(GLenum mode) = 0;
    void skibidigfx_glBlendEquation(GLenum mode)
    {
    
    real_glBlendEquation(mode);
    }
void(__stdcall *real_glGenQueries)(GLsizei n, GLuint* ids) = 0;
    void skibidigfx_glGenQueries(GLsizei n, GLuint* ids)
    {
    
    real_glGenQueries(n,ids);
    }
void(__stdcall *real_glDeleteQueries)(GLsizei n, const GLuint* ids) = 0;
    void skibidigfx_glDeleteQueries(GLsizei n, const GLuint* ids)
    {
    
    real_glDeleteQueries(n,ids);
    }
GLboolean(__stdcall *real_glIsQuery)(GLuint id) = 0;
    GLboolean skibidigfx_glIsQuery(GLuint id)
    {
    
    return real_glIsQuery(id);
    }
void(__stdcall *real_glBeginQuery)(GLenum target, GLuint id) = 0;
    void skibidigfx_glBeginQuery(GLenum target, GLuint id)
    {
    
    real_glBeginQuery(target,id);
    }
void(__stdcall *real_glEndQuery)(GLenum target) = 0;
    void skibidigfx_glEndQuery(GLenum target)
    {
    
    real_glEndQuery(target);
    }
void(__stdcall *real_glGetQueryiv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetQueryiv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetQueryiv(target,pname,params);
    }
void(__stdcall *real_glGetQueryObjectiv)(GLuint id, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetQueryObjectiv(GLuint id, GLenum pname, GLint* params)
    {
    
    real_glGetQueryObjectiv(id,pname,params);
    }
void(__stdcall *real_glGetQueryObjectuiv)(GLuint id, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params)
    {
    
    real_glGetQueryObjectuiv(id,pname,params);
    }
void(__stdcall *real_glBindBuffer)(GLenum target, GLuint buffer) = 0;
    void skibidigfx_glBindBuffer(GLenum target, GLuint buffer)
    {
    
    real_glBindBuffer(target,buffer);
    }
void(__stdcall *real_glDeleteBuffers)(GLsizei n, const GLuint* buffers) = 0;
    void skibidigfx_glDeleteBuffers(GLsizei n, const GLuint* buffers)
    {
    
    real_glDeleteBuffers(n,buffers);
    }
void(__stdcall *real_glGenBuffers)(GLsizei n, GLuint* buffers) = 0;
    void skibidigfx_glGenBuffers(GLsizei n, GLuint* buffers)
    {
    
    real_glGenBuffers(n,buffers);
    }
GLboolean(__stdcall *real_glIsBuffer)(GLuint buffer) = 0;
    GLboolean skibidigfx_glIsBuffer(GLuint buffer)
    {
    
    return real_glIsBuffer(buffer);
    }
void(__stdcall *real_glBufferData)(GLenum target, GLsizeiptr size, const void* data, GLenum usage) = 0;
    void skibidigfx_glBufferData(GLenum target, GLsizeiptr size, const void* data, GLenum usage)
    {
    
    real_glBufferData(target,size,data,usage);
    }
void(__stdcall *real_glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data) = 0;
    void skibidigfx_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    real_glBufferSubData(target,offset,size,data);
    }
void(__stdcall *real_glGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void* data) = 0;
    void skibidigfx_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void* data)
    {
    
    real_glGetBufferSubData(target,offset,size,data);
    }
void *(__stdcall *real_glMapBuffer)(GLenum target, GLenum access) = 0;
    void * skibidigfx_glMapBuffer(GLenum target, GLenum access)
    {
    
    return real_glMapBuffer(target,access);
    }
GLboolean(__stdcall *real_glUnmapBuffer)(GLenum target) = 0;
    GLboolean skibidigfx_glUnmapBuffer(GLenum target)
    {
    
    return real_glUnmapBuffer(target);
    }
void(__stdcall *real_glGetBufferParameteriv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetBufferParameteriv(target,pname,params);
    }
void(__stdcall *real_glGetBufferPointerv)(GLenum target, GLenum pname, void** params) = 0;
    void skibidigfx_glGetBufferPointerv(GLenum target, GLenum pname, void** params)
    {
    
    real_glGetBufferPointerv(target,pname,params);
    }
void(__stdcall *real_glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha) = 0;
    void skibidigfx_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
    {
    
    real_glBlendEquationSeparate(modeRGB,modeAlpha);
    }
void(__stdcall *real_glDrawBuffers)(GLsizei n, const GLenum* bufs) = 0;
    void skibidigfx_glDrawBuffers(GLsizei n, const GLenum* bufs)
    {
    
    real_glDrawBuffers(n,bufs);
    }
void(__stdcall *real_glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) = 0;
    void skibidigfx_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
    {
    
    real_glStencilOpSeparate(face,sfail,dpfail,dppass);
    }
void(__stdcall *real_glStencilFuncSeparate)(GLenum face, GLenum func, GLint ref, GLuint mask) = 0;
    void skibidigfx_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
    {
    
    real_glStencilFuncSeparate(face,func,ref,mask);
    }
void(__stdcall *real_glStencilMaskSeparate)(GLenum face, GLuint mask) = 0;
    void skibidigfx_glStencilMaskSeparate(GLenum face, GLuint mask)
    {
    
    real_glStencilMaskSeparate(face,mask);
    }
void(__stdcall *real_glAttachShader)(GLuint program, GLuint shader) = 0;
    void skibidigfx_glAttachShader(GLuint program, GLuint shader)
    {
    
    real_glAttachShader(program,shader);
    }
void(__stdcall *real_glBindAttribLocation)(GLuint program, GLuint index, const GLchar* name) = 0;
    void skibidigfx_glBindAttribLocation(GLuint program, GLuint index, const GLchar* name)
    {
    
    real_glBindAttribLocation(program,index,name);
    }
void(__stdcall *real_glCompileShader)(GLuint shader) = 0;
    void skibidigfx_glCompileShader(GLuint shader)
    {
    
    real_glCompileShader(shader);
    }
GLuint(__stdcall *real_glCreateProgram)() = 0;
    GLuint skibidigfx_glCreateProgram()
    {
    
    return real_glCreateProgram();
    }
GLuint(__stdcall *real_glCreateShader)(GLenum type) = 0;
    GLuint skibidigfx_glCreateShader(GLenum type)
    {
    
    return real_glCreateShader(type);
    }
void(__stdcall *real_glDeleteProgram)(GLuint program) = 0;
    void skibidigfx_glDeleteProgram(GLuint program)
    {
    
    real_glDeleteProgram(program);
    }
void(__stdcall *real_glDeleteShader)(GLuint shader) = 0;
    void skibidigfx_glDeleteShader(GLuint shader)
    {
    
    real_glDeleteShader(shader);
    }
void(__stdcall *real_glDetachShader)(GLuint program, GLuint shader) = 0;
    void skibidigfx_glDetachShader(GLuint program, GLuint shader)
    {
    
    real_glDetachShader(program,shader);
    }
void(__stdcall *real_glDisableVertexAttribArray)(GLuint index) = 0;
    void skibidigfx_glDisableVertexAttribArray(GLuint index)
    {
    
    real_glDisableVertexAttribArray(index);
    }
void(__stdcall *real_glEnableVertexAttribArray)(GLuint index) = 0;
    void skibidigfx_glEnableVertexAttribArray(GLuint index)
    {
    
    real_glEnableVertexAttribArray(index);
    }
void(__stdcall *real_glGetActiveAttrib)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name) = 0;
    void skibidigfx_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
    {
    
    real_glGetActiveAttrib(program,index,bufSize,length,size,type,name);
    }
void(__stdcall *real_glGetActiveUniform)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name) = 0;
    void skibidigfx_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
    {
    
    real_glGetActiveUniform(program,index,bufSize,length,size,type,name);
    }
void(__stdcall *real_glGetAttachedShaders)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders) = 0;
    void skibidigfx_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders)
    {
    
    real_glGetAttachedShaders(program,maxCount,count,shaders);
    }
GLint(__stdcall *real_glGetAttribLocation)(GLuint program, const GLchar* name) = 0;
    GLint skibidigfx_glGetAttribLocation(GLuint program, const GLchar* name)
    {
    
    return real_glGetAttribLocation(program,name);
    }
void(__stdcall *real_glGetProgramiv)(GLuint program, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetProgramiv(GLuint program, GLenum pname, GLint* params)
    {
    
    real_glGetProgramiv(program,pname,params);
    }
void(__stdcall *real_glGetProgramInfoLog)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog) = 0;
    void skibidigfx_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
    {
    
    real_glGetProgramInfoLog(program,bufSize,length,infoLog);
    }
void(__stdcall *real_glGetShaderiv)(GLuint shader, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetShaderiv(GLuint shader, GLenum pname, GLint* params)
    {
    
    real_glGetShaderiv(shader,pname,params);
    }
void(__stdcall *real_glGetShaderInfoLog)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog) = 0;
    void skibidigfx_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
    {
    
    real_glGetShaderInfoLog(shader,bufSize,length,infoLog);
    }
void(__stdcall *real_glGetShaderSource)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source) = 0;
    void skibidigfx_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source)
    {
    
    real_glGetShaderSource(shader,bufSize,length,source);
    }
GLint(__stdcall *real_glGetUniformLocation)(GLuint program, const GLchar* name) = 0;
    GLint skibidigfx_glGetUniformLocation(GLuint program, const GLchar* name)
    {
    
    return real_glGetUniformLocation(program,name);
    }
void(__stdcall *real_glGetUniformfv)(GLuint program, GLint location, GLfloat* params) = 0;
    void skibidigfx_glGetUniformfv(GLuint program, GLint location, GLfloat* params)
    {
    
    real_glGetUniformfv(program,location,params);
    }
void(__stdcall *real_glGetUniformiv)(GLuint program, GLint location, GLint* params) = 0;
    void skibidigfx_glGetUniformiv(GLuint program, GLint location, GLint* params)
    {
    
    real_glGetUniformiv(program,location,params);
    }
void(__stdcall *real_glGetVertexAttribdv)(GLuint index, GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble* params)
    {
    
    real_glGetVertexAttribdv(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribfv)(GLuint index, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params)
    {
    
    real_glGetVertexAttribfv(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribiv)(GLuint index, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params)
    {
    
    real_glGetVertexAttribiv(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribPointerv)(GLuint index, GLenum pname, void** pointer) = 0;
    void skibidigfx_glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer)
    {
    
    real_glGetVertexAttribPointerv(index,pname,pointer);
    }
GLboolean(__stdcall *real_glIsProgram)(GLuint program) = 0;
    GLboolean skibidigfx_glIsProgram(GLuint program)
    {
    
    return real_glIsProgram(program);
    }
GLboolean(__stdcall *real_glIsShader)(GLuint shader) = 0;
    GLboolean skibidigfx_glIsShader(GLuint shader)
    {
    
    return real_glIsShader(shader);
    }
void(__stdcall *real_glLinkProgram)(GLuint program) = 0;
    void skibidigfx_glLinkProgram(GLuint program)
    {
    
    real_glLinkProgram(program);
    }
void(__stdcall *real_glShaderSource)(GLuint shader, GLsizei count, const GLchar** conststring, const GLint* length) = 0;
    void skibidigfx_glShaderSource(GLuint shader, GLsizei count, const GLchar** conststring, const GLint* length)
    {
    
    real_glShaderSource(shader,count,conststring,length);
    }
void(__stdcall *real_glUseProgram)(GLuint program) = 0;
    void skibidigfx_glUseProgram(GLuint program)
    {
    
    real_glUseProgram(program);
    }
void(__stdcall *real_glUniform1f)(GLint location, GLfloat v0) = 0;
    void skibidigfx_glUniform1f(GLint location, GLfloat v0)
    {
    
    real_glUniform1f(location,v0);
    }
void(__stdcall *real_glUniform2f)(GLint location, GLfloat v0, GLfloat v1) = 0;
    void skibidigfx_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
    {
    
    real_glUniform2f(location,v0,v1);
    }
void(__stdcall *real_glUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = 0;
    void skibidigfx_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
    {
    
    real_glUniform3f(location,v0,v1,v2);
    }
void(__stdcall *real_glUniform4f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = 0;
    void skibidigfx_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
    {
    
    real_glUniform4f(location,v0,v1,v2,v3);
    }
void(__stdcall *real_glUniform1i)(GLint location, GLint v0) = 0;
    void skibidigfx_glUniform1i(GLint location, GLint v0)
    {
    
    real_glUniform1i(location,v0);
    }
void(__stdcall *real_glUniform2i)(GLint location, GLint v0, GLint v1) = 0;
    void skibidigfx_glUniform2i(GLint location, GLint v0, GLint v1)
    {
    
    real_glUniform2i(location,v0,v1);
    }
void(__stdcall *real_glUniform3i)(GLint location, GLint v0, GLint v1, GLint v2) = 0;
    void skibidigfx_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
    {
    
    real_glUniform3i(location,v0,v1,v2);
    }
void(__stdcall *real_glUniform4i)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = 0;
    void skibidigfx_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
    {
    
    real_glUniform4i(location,v0,v1,v2,v3);
    }
void(__stdcall *real_glUniform1fv)(GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glUniform1fv(GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glUniform1fv(location,count,value);
    }
void(__stdcall *real_glUniform2fv)(GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glUniform2fv(GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glUniform2fv(location,count,value);
    }
void(__stdcall *real_glUniform3fv)(GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glUniform3fv(GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glUniform3fv(location,count,value);
    }
void(__stdcall *real_glUniform4fv)(GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glUniform4fv(GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glUniform4fv(location,count,value);
    }
void(__stdcall *real_glUniform1iv)(GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glUniform1iv(GLint location, GLsizei count, const GLint* value)
    {
    
    real_glUniform1iv(location,count,value);
    }
void(__stdcall *real_glUniform2iv)(GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glUniform2iv(GLint location, GLsizei count, const GLint* value)
    {
    
    real_glUniform2iv(location,count,value);
    }
void(__stdcall *real_glUniform3iv)(GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glUniform3iv(GLint location, GLsizei count, const GLint* value)
    {
    
    real_glUniform3iv(location,count,value);
    }
void(__stdcall *real_glUniform4iv)(GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glUniform4iv(GLint location, GLsizei count, const GLint* value)
    {
    
    real_glUniform4iv(location,count,value);
    }
void(__stdcall *real_glUniformMatrix2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix2fv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix3fv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix4fv(location,count,transpose,value);
    }
void(__stdcall *real_glValidateProgram)(GLuint program) = 0;
    void skibidigfx_glValidateProgram(GLuint program)
    {
    
    real_glValidateProgram(program);
    }
void(__stdcall *real_glVertexAttrib1d)(GLuint index, GLdouble x) = 0;
    void skibidigfx_glVertexAttrib1d(GLuint index, GLdouble x)
    {
    
    real_glVertexAttrib1d(index,x);
    }
void(__stdcall *real_glVertexAttrib1dv)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib1dv(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib1dv(index,v);
    }
void(__stdcall *real_glVertexAttrib1f)(GLuint index, GLfloat x) = 0;
    void skibidigfx_glVertexAttrib1f(GLuint index, GLfloat x)
    {
    
    real_glVertexAttrib1f(index,x);
    }
void(__stdcall *real_glVertexAttrib1fv)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib1fv(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib1fv(index,v);
    }
void(__stdcall *real_glVertexAttrib1s)(GLuint index, GLshort x) = 0;
    void skibidigfx_glVertexAttrib1s(GLuint index, GLshort x)
    {
    
    real_glVertexAttrib1s(index,x);
    }
void(__stdcall *real_glVertexAttrib1sv)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib1sv(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib1sv(index,v);
    }
void(__stdcall *real_glVertexAttrib2d)(GLuint index, GLdouble x, GLdouble y) = 0;
    void skibidigfx_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
    {
    
    real_glVertexAttrib2d(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2dv)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib2dv(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib2dv(index,v);
    }
void(__stdcall *real_glVertexAttrib2f)(GLuint index, GLfloat x, GLfloat y) = 0;
    void skibidigfx_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
    {
    
    real_glVertexAttrib2f(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2fv)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib2fv(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib2fv(index,v);
    }
void(__stdcall *real_glVertexAttrib2s)(GLuint index, GLshort x, GLshort y) = 0;
    void skibidigfx_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
    {
    
    real_glVertexAttrib2s(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2sv)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib2sv(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib2sv(index,v);
    }
void(__stdcall *real_glVertexAttrib3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glVertexAttrib3d(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3dv)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib3dv(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib3dv(index,v);
    }
void(__stdcall *real_glVertexAttrib3f)(GLuint index, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glVertexAttrib3f(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3fv)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib3fv(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib3fv(index,v);
    }
void(__stdcall *real_glVertexAttrib3s)(GLuint index, GLshort x, GLshort y, GLshort z) = 0;
    void skibidigfx_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
    {
    
    real_glVertexAttrib3s(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3sv)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib3sv(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib3sv(index,v);
    }
void(__stdcall *real_glVertexAttrib4Nbv)(GLuint index, const GLbyte* v) = 0;
    void skibidigfx_glVertexAttrib4Nbv(GLuint index, const GLbyte* v)
    {
    
    real_glVertexAttrib4Nbv(index,v);
    }
void(__stdcall *real_glVertexAttrib4Niv)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttrib4Niv(GLuint index, const GLint* v)
    {
    
    real_glVertexAttrib4Niv(index,v);
    }
void(__stdcall *real_glVertexAttrib4Nsv)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib4Nsv(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib4Nsv(index,v);
    }
void(__stdcall *real_glVertexAttrib4Nub)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) = 0;
    void skibidigfx_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
    {
    
    real_glVertexAttrib4Nub(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4Nubv)(GLuint index, const GLubyte* v) = 0;
    void skibidigfx_glVertexAttrib4Nubv(GLuint index, const GLubyte* v)
    {
    
    real_glVertexAttrib4Nubv(index,v);
    }
void(__stdcall *real_glVertexAttrib4Nuiv)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttrib4Nuiv(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttrib4Nuiv(index,v);
    }
void(__stdcall *real_glVertexAttrib4Nusv)(GLuint index, const GLushort* v) = 0;
    void skibidigfx_glVertexAttrib4Nusv(GLuint index, const GLushort* v)
    {
    
    real_glVertexAttrib4Nusv(index,v);
    }
void(__stdcall *real_glVertexAttrib4bv)(GLuint index, const GLbyte* v) = 0;
    void skibidigfx_glVertexAttrib4bv(GLuint index, const GLbyte* v)
    {
    
    real_glVertexAttrib4bv(index,v);
    }
void(__stdcall *real_glVertexAttrib4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glVertexAttrib4d(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4dv)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib4dv(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib4dv(index,v);
    }
void(__stdcall *real_glVertexAttrib4f)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glVertexAttrib4f(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4fv)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib4fv(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib4fv(index,v);
    }
void(__stdcall *real_glVertexAttrib4iv)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttrib4iv(GLuint index, const GLint* v)
    {
    
    real_glVertexAttrib4iv(index,v);
    }
void(__stdcall *real_glVertexAttrib4s)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) = 0;
    void skibidigfx_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    real_glVertexAttrib4s(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4sv)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib4sv(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib4sv(index,v);
    }
void(__stdcall *real_glVertexAttrib4ubv)(GLuint index, const GLubyte* v) = 0;
    void skibidigfx_glVertexAttrib4ubv(GLuint index, const GLubyte* v)
    {
    
    real_glVertexAttrib4ubv(index,v);
    }
void(__stdcall *real_glVertexAttrib4uiv)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttrib4uiv(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttrib4uiv(index,v);
    }
void(__stdcall *real_glVertexAttrib4usv)(GLuint index, const GLushort* v) = 0;
    void skibidigfx_glVertexAttrib4usv(GLuint index, const GLushort* v)
    {
    
    real_glVertexAttrib4usv(index,v);
    }
void(__stdcall *real_glVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer)
    {
    
    real_glVertexAttribPointer(index,size,type,normalized,stride,pointer);
    }
void(__stdcall *real_glUniformMatrix2x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix2x3fv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix3x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix3x2fv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix2x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix2x4fv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix4x2fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix4x2fv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix3x4fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix3x4fv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix4x3fv)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix4x3fv(location,count,transpose,value);
    }
void(__stdcall *real_glColorMaski)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) = 0;
    void skibidigfx_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
    {
    
    real_glColorMaski(index,r,g,b,a);
    }
void(__stdcall *real_glGetBooleani_v)(GLenum target, GLuint index, GLboolean* data) = 0;
    void skibidigfx_glGetBooleani_v(GLenum target, GLuint index, GLboolean* data)
    {
    
    real_glGetBooleani_v(target,index,data);
    }
void(__stdcall *real_glGetIntegeri_v)(GLenum target, GLuint index, GLint* data) = 0;
    void skibidigfx_glGetIntegeri_v(GLenum target, GLuint index, GLint* data)
    {
    
    real_glGetIntegeri_v(target,index,data);
    }
void(__stdcall *real_glEnablei)(GLenum target, GLuint index) = 0;
    void skibidigfx_glEnablei(GLenum target, GLuint index)
    {
    
    real_glEnablei(target,index);
    }
void(__stdcall *real_glDisablei)(GLenum target, GLuint index) = 0;
    void skibidigfx_glDisablei(GLenum target, GLuint index)
    {
    
    real_glDisablei(target,index);
    }
GLboolean(__stdcall *real_glIsEnabledi)(GLenum target, GLuint index) = 0;
    GLboolean skibidigfx_glIsEnabledi(GLenum target, GLuint index)
    {
    
    return real_glIsEnabledi(target,index);
    }
void(__stdcall *real_glBeginTransformFeedback)(GLenum primitiveMode) = 0;
    void skibidigfx_glBeginTransformFeedback(GLenum primitiveMode)
    {
    
    real_glBeginTransformFeedback(primitiveMode);
    }
void(__stdcall *real_glEndTransformFeedback)() = 0;
    void skibidigfx_glEndTransformFeedback()
    {
    
    real_glEndTransformFeedback();
    }
void(__stdcall *real_glBindBufferRange)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = 0;
    void skibidigfx_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    real_glBindBufferRange(target,index,buffer,offset,size);
    }
void(__stdcall *real_glBindBufferBase)(GLenum target, GLuint index, GLuint buffer) = 0;
    void skibidigfx_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
    {
    
    real_glBindBufferBase(target,index,buffer);
    }
void(__stdcall *real_glTransformFeedbackVaryings)(GLuint program, GLsizei count, const GLchar** constvaryings, GLenum bufferMode) = 0;
    void skibidigfx_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar** constvaryings, GLenum bufferMode)
    {
    
    real_glTransformFeedbackVaryings(program,count,constvaryings,bufferMode);
    }
void(__stdcall *real_glGetTransformFeedbackVarying)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name) = 0;
    void skibidigfx_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)
    {
    
    real_glGetTransformFeedbackVarying(program,index,bufSize,length,size,type,name);
    }
void(__stdcall *real_glClampColor)(GLenum target, GLenum clamp) = 0;
    void skibidigfx_glClampColor(GLenum target, GLenum clamp)
    {
    
    real_glClampColor(target,clamp);
    }
void(__stdcall *real_glBeginConditionalRender)(GLuint id, GLenum mode) = 0;
    void skibidigfx_glBeginConditionalRender(GLuint id, GLenum mode)
    {
    
    real_glBeginConditionalRender(id,mode);
    }
void(__stdcall *real_glEndConditionalRender)() = 0;
    void skibidigfx_glEndConditionalRender()
    {
    
    real_glEndConditionalRender();
    }
void(__stdcall *real_glVertexAttribIPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glVertexAttribIPointer(index,size,type,stride,pointer);
    }
void(__stdcall *real_glGetVertexAttribIiv)(GLuint index, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint* params)
    {
    
    real_glGetVertexAttribIiv(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribIuiv)(GLuint index, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params)
    {
    
    real_glGetVertexAttribIuiv(index,pname,params);
    }
void(__stdcall *real_glVertexAttribI1i)(GLuint index, GLint x) = 0;
    void skibidigfx_glVertexAttribI1i(GLuint index, GLint x)
    {
    
    real_glVertexAttribI1i(index,x);
    }
void(__stdcall *real_glVertexAttribI2i)(GLuint index, GLint x, GLint y) = 0;
    void skibidigfx_glVertexAttribI2i(GLuint index, GLint x, GLint y)
    {
    
    real_glVertexAttribI2i(index,x,y);
    }
void(__stdcall *real_glVertexAttribI3i)(GLuint index, GLint x, GLint y, GLint z) = 0;
    void skibidigfx_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
    {
    
    real_glVertexAttribI3i(index,x,y,z);
    }
void(__stdcall *real_glVertexAttribI4i)(GLuint index, GLint x, GLint y, GLint z, GLint w) = 0;
    void skibidigfx_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    real_glVertexAttribI4i(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttribI1ui)(GLuint index, GLuint x) = 0;
    void skibidigfx_glVertexAttribI1ui(GLuint index, GLuint x)
    {
    
    real_glVertexAttribI1ui(index,x);
    }
void(__stdcall *real_glVertexAttribI2ui)(GLuint index, GLuint x, GLuint y) = 0;
    void skibidigfx_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
    {
    
    real_glVertexAttribI2ui(index,x,y);
    }
void(__stdcall *real_glVertexAttribI3ui)(GLuint index, GLuint x, GLuint y, GLuint z) = 0;
    void skibidigfx_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
    {
    
    real_glVertexAttribI3ui(index,x,y,z);
    }
void(__stdcall *real_glVertexAttribI4ui)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = 0;
    void skibidigfx_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    real_glVertexAttribI4ui(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttribI1iv)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttribI1iv(GLuint index, const GLint* v)
    {
    
    real_glVertexAttribI1iv(index,v);
    }
void(__stdcall *real_glVertexAttribI2iv)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttribI2iv(GLuint index, const GLint* v)
    {
    
    real_glVertexAttribI2iv(index,v);
    }
void(__stdcall *real_glVertexAttribI3iv)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttribI3iv(GLuint index, const GLint* v)
    {
    
    real_glVertexAttribI3iv(index,v);
    }
void(__stdcall *real_glVertexAttribI4iv)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttribI4iv(GLuint index, const GLint* v)
    {
    
    real_glVertexAttribI4iv(index,v);
    }
void(__stdcall *real_glVertexAttribI1uiv)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttribI1uiv(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttribI1uiv(index,v);
    }
void(__stdcall *real_glVertexAttribI2uiv)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttribI2uiv(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttribI2uiv(index,v);
    }
void(__stdcall *real_glVertexAttribI3uiv)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttribI3uiv(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttribI3uiv(index,v);
    }
void(__stdcall *real_glVertexAttribI4uiv)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttribI4uiv(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttribI4uiv(index,v);
    }
void(__stdcall *real_glVertexAttribI4bv)(GLuint index, const GLbyte* v) = 0;
    void skibidigfx_glVertexAttribI4bv(GLuint index, const GLbyte* v)
    {
    
    real_glVertexAttribI4bv(index,v);
    }
void(__stdcall *real_glVertexAttribI4sv)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttribI4sv(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttribI4sv(index,v);
    }
void(__stdcall *real_glVertexAttribI4ubv)(GLuint index, const GLubyte* v) = 0;
    void skibidigfx_glVertexAttribI4ubv(GLuint index, const GLubyte* v)
    {
    
    real_glVertexAttribI4ubv(index,v);
    }
void(__stdcall *real_glVertexAttribI4usv)(GLuint index, const GLushort* v) = 0;
    void skibidigfx_glVertexAttribI4usv(GLuint index, const GLushort* v)
    {
    
    real_glVertexAttribI4usv(index,v);
    }
void(__stdcall *real_glGetUniformuiv)(GLuint program, GLint location, GLuint* params) = 0;
    void skibidigfx_glGetUniformuiv(GLuint program, GLint location, GLuint* params)
    {
    
    real_glGetUniformuiv(program,location,params);
    }
void(__stdcall *real_glBindFragDataLocation)(GLuint program, GLuint color, const GLchar* name) = 0;
    void skibidigfx_glBindFragDataLocation(GLuint program, GLuint color, const GLchar* name)
    {
    
    real_glBindFragDataLocation(program,color,name);
    }
GLint(__stdcall *real_glGetFragDataLocation)(GLuint program, const GLchar* name) = 0;
    GLint skibidigfx_glGetFragDataLocation(GLuint program, const GLchar* name)
    {
    
    return real_glGetFragDataLocation(program,name);
    }
void(__stdcall *real_glUniform1ui)(GLint location, GLuint v0) = 0;
    void skibidigfx_glUniform1ui(GLint location, GLuint v0)
    {
    
    real_glUniform1ui(location,v0);
    }
void(__stdcall *real_glUniform2ui)(GLint location, GLuint v0, GLuint v1) = 0;
    void skibidigfx_glUniform2ui(GLint location, GLuint v0, GLuint v1)
    {
    
    real_glUniform2ui(location,v0,v1);
    }
void(__stdcall *real_glUniform3ui)(GLint location, GLuint v0, GLuint v1, GLuint v2) = 0;
    void skibidigfx_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
    {
    
    real_glUniform3ui(location,v0,v1,v2);
    }
void(__stdcall *real_glUniform4ui)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = 0;
    void skibidigfx_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
    {
    
    real_glUniform4ui(location,v0,v1,v2,v3);
    }
void(__stdcall *real_glUniform1uiv)(GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glUniform1uiv(GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glUniform1uiv(location,count,value);
    }
void(__stdcall *real_glUniform2uiv)(GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glUniform2uiv(GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glUniform2uiv(location,count,value);
    }
void(__stdcall *real_glUniform3uiv)(GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glUniform3uiv(GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glUniform3uiv(location,count,value);
    }
void(__stdcall *real_glUniform4uiv)(GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glUniform4uiv(GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glUniform4uiv(location,count,value);
    }
void(__stdcall *real_glTexParameterIiv)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glTexParameterIiv(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glTexParameterIiv(target,pname,params);
    }
void(__stdcall *real_glTexParameterIuiv)(GLenum target, GLenum pname, const GLuint* params) = 0;
    void skibidigfx_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint* params)
    {
    
    real_glTexParameterIuiv(target,pname,params);
    }
void(__stdcall *real_glGetTexParameterIiv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTexParameterIiv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetTexParameterIiv(target,pname,params);
    }
void(__stdcall *real_glGetTexParameterIuiv)(GLenum target, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint* params)
    {
    
    real_glGetTexParameterIuiv(target,pname,params);
    }
void(__stdcall *real_glClearBufferiv)(GLenum buffer, GLint drawbuffer, const GLint* value) = 0;
    void skibidigfx_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint* value)
    {
    
    real_glClearBufferiv(buffer,drawbuffer,value);
    }
void(__stdcall *real_glClearBufferuiv)(GLenum buffer, GLint drawbuffer, const GLuint* value) = 0;
    void skibidigfx_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint* value)
    {
    
    real_glClearBufferuiv(buffer,drawbuffer,value);
    }
void(__stdcall *real_glClearBufferfv)(GLenum buffer, GLint drawbuffer, const GLfloat* value) = 0;
    void skibidigfx_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat* value)
    {
    
    real_glClearBufferfv(buffer,drawbuffer,value);
    }
void(__stdcall *real_glClearBufferfi)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) = 0;
    void skibidigfx_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
    {
    
    real_glClearBufferfi(buffer,drawbuffer,depth,stencil);
    }
const GLubyte *(__stdcall *real_glGetStringi)(GLenum name, GLuint index) = 0;
    const GLubyte * skibidigfx_glGetStringi(GLenum name, GLuint index)
    {
    
    return real_glGetStringi(name,index);
    }
GLboolean(__stdcall *real_glIsRenderbuffer)(GLuint renderbuffer) = 0;
    GLboolean skibidigfx_glIsRenderbuffer(GLuint renderbuffer)
    {
    
    return real_glIsRenderbuffer(renderbuffer);
    }
void(__stdcall *real_glBindRenderbuffer)(GLenum target, GLuint renderbuffer) = 0;
    void skibidigfx_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
    {
    
    real_glBindRenderbuffer(target,renderbuffer);
    }
void(__stdcall *real_glDeleteRenderbuffers)(GLsizei n, const GLuint* renderbuffers) = 0;
    void skibidigfx_glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers)
    {
    
    real_glDeleteRenderbuffers(n,renderbuffers);
    }
void(__stdcall *real_glGenRenderbuffers)(GLsizei n, GLuint* renderbuffers) = 0;
    void skibidigfx_glGenRenderbuffers(GLsizei n, GLuint* renderbuffers)
    {
    
    real_glGenRenderbuffers(n,renderbuffers);
    }
void(__stdcall *real_glRenderbufferStorage)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glRenderbufferStorage(target,internalformat,width,height);
    }
void(__stdcall *real_glGetRenderbufferParameteriv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetRenderbufferParameteriv(target,pname,params);
    }
GLboolean(__stdcall *real_glIsFramebuffer)(GLuint framebuffer) = 0;
    GLboolean skibidigfx_glIsFramebuffer(GLuint framebuffer)
    {
    
    return real_glIsFramebuffer(framebuffer);
    }
void(__stdcall *real_glBindFramebuffer)(GLenum target, GLuint framebuffer) = 0;
    void skibidigfx_glBindFramebuffer(GLenum target, GLuint framebuffer)
    {
    
    real_glBindFramebuffer(target,framebuffer);
    }
void(__stdcall *real_glDeleteFramebuffers)(GLsizei n, const GLuint* framebuffers) = 0;
    void skibidigfx_glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers)
    {
    
    real_glDeleteFramebuffers(n,framebuffers);
    }
void(__stdcall *real_glGenFramebuffers)(GLsizei n, GLuint* framebuffers) = 0;
    void skibidigfx_glGenFramebuffers(GLsizei n, GLuint* framebuffers)
    {
    
    real_glGenFramebuffers(n,framebuffers);
    }
GLenum(__stdcall *real_glCheckFramebufferStatus)(GLenum target) = 0;
    GLenum skibidigfx_glCheckFramebufferStatus(GLenum target)
    {
    
    return real_glCheckFramebufferStatus(target);
    }
void(__stdcall *real_glFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = 0;
    void skibidigfx_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    real_glFramebufferTexture1D(target,attachment,textarget,texture,level);
    }
void(__stdcall *real_glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = 0;
    void skibidigfx_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    real_glFramebufferTexture2D(target,attachment,textarget,texture,level);
    }
void(__stdcall *real_glFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) = 0;
    void skibidigfx_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
    {
    
    real_glFramebufferTexture3D(target,attachment,textarget,texture,level,zoffset);
    }
void(__stdcall *real_glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = 0;
    void skibidigfx_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
    {
    
    real_glFramebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
    }
void(__stdcall *real_glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params)
    {
    
    real_glGetFramebufferAttachmentParameteriv(target,attachment,pname,params);
    }
void(__stdcall *real_glGenerateMipmap)(GLenum target) = 0;
    void skibidigfx_glGenerateMipmap(GLenum target)
    {
    
    real_glGenerateMipmap(target);
    }
void(__stdcall *real_glBlitFramebuffer)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = 0;
    void skibidigfx_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
    {
    
    real_glBlitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
    }
void(__stdcall *real_glRenderbufferStorageMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glRenderbufferStorageMultisample(target,samples,internalformat,width,height);
    }
void(__stdcall *real_glFramebufferTextureLayer)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) = 0;
    void skibidigfx_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    real_glFramebufferTextureLayer(target,attachment,texture,level,layer);
    }
void *(__stdcall *real_glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) = 0;
    void * skibidigfx_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
    {
    
    return real_glMapBufferRange(target,offset,length,access);
    }
void(__stdcall *real_glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length) = 0;
    void skibidigfx_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
    {
    
    real_glFlushMappedBufferRange(target,offset,length);
    }
void(__stdcall *real_glBindVertexArray)(GLuint array) = 0;
    void skibidigfx_glBindVertexArray(GLuint array)
    {
    
    real_glBindVertexArray(array);
    }
void(__stdcall *real_glDeleteVertexArrays)(GLsizei n, const GLuint* arrays) = 0;
    void skibidigfx_glDeleteVertexArrays(GLsizei n, const GLuint* arrays)
    {
    
    real_glDeleteVertexArrays(n,arrays);
    }
void(__stdcall *real_glGenVertexArrays)(GLsizei n, GLuint* arrays) = 0;
    void skibidigfx_glGenVertexArrays(GLsizei n, GLuint* arrays)
    {
    
    real_glGenVertexArrays(n,arrays);
    }
GLboolean(__stdcall *real_glIsVertexArray)(GLuint array) = 0;
    GLboolean skibidigfx_glIsVertexArray(GLuint array)
    {
    
    return real_glIsVertexArray(array);
    }
void(__stdcall *real_glDrawArraysInstanced)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) = 0;
    void skibidigfx_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
    {
    
    real_glDrawArraysInstanced(mode,first,count,instancecount);
    }
void(__stdcall *real_glDrawElementsInstanced)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount) = 0;
    void skibidigfx_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount)
    {
    
    real_glDrawElementsInstanced(mode,count,type,indices,instancecount);
    }
void(__stdcall *real_glTexBuffer)(GLenum target, GLenum internalformat, GLuint buffer) = 0;
    void skibidigfx_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    real_glTexBuffer(target,internalformat,buffer);
    }
void(__stdcall *real_glPrimitiveRestartIndex)(GLuint index) = 0;
    void skibidigfx_glPrimitiveRestartIndex(GLuint index)
    {
    
    real_glPrimitiveRestartIndex(index);
    }
void(__stdcall *real_glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = 0;
    void skibidigfx_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
    {
    
    real_glCopyBufferSubData(readTarget,writeTarget,readOffset,writeOffset,size);
    }
void(__stdcall *real_glGetUniformIndices)(GLuint program, GLsizei uniformCount, const GLchar** constuniformNames, GLuint* uniformIndices) = 0;
    void skibidigfx_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar** constuniformNames, GLuint* uniformIndices)
    {
    
    real_glGetUniformIndices(program,uniformCount,constuniformNames,uniformIndices);
    }
void(__stdcall *real_glGetActiveUniformsiv)(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)
    {
    
    real_glGetActiveUniformsiv(program,uniformCount,uniformIndices,pname,params);
    }
void(__stdcall *real_glGetActiveUniformName)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName) = 0;
    void skibidigfx_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName)
    {
    
    real_glGetActiveUniformName(program,uniformIndex,bufSize,length,uniformName);
    }
GLuint(__stdcall *real_glGetUniformBlockIndex)(GLuint program, const GLchar* uniformBlockName) = 0;
    GLuint skibidigfx_glGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName)
    {
    
    return real_glGetUniformBlockIndex(program,uniformBlockName);
    }
void(__stdcall *real_glGetActiveUniformBlockiv)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)
    {
    
    real_glGetActiveUniformBlockiv(program,uniformBlockIndex,pname,params);
    }
void(__stdcall *real_glGetActiveUniformBlockName)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName) = 0;
    void skibidigfx_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)
    {
    
    real_glGetActiveUniformBlockName(program,uniformBlockIndex,bufSize,length,uniformBlockName);
    }
void(__stdcall *real_glUniformBlockBinding)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) = 0;
    void skibidigfx_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
    {
    
    real_glUniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
    }
void(__stdcall *real_glDrawElementsBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex) = 0;
    void skibidigfx_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex)
    {
    
    real_glDrawElementsBaseVertex(mode,count,type,indices,basevertex);
    }
void(__stdcall *real_glDrawRangeElementsBaseVertex)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex) = 0;
    void skibidigfx_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex)
    {
    
    real_glDrawRangeElementsBaseVertex(mode,start,end,count,type,indices,basevertex);
    }
void(__stdcall *real_glDrawElementsInstancedBaseVertex)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex) = 0;
    void skibidigfx_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex)
    {
    
    real_glDrawElementsInstancedBaseVertex(mode,count,type,indices,instancecount,basevertex);
    }
void(__stdcall *real_glMultiDrawElementsBaseVertex)(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei drawcount, const GLint* basevertex) = 0;
    void skibidigfx_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei drawcount, const GLint* basevertex)
    {
    
    real_glMultiDrawElementsBaseVertex(mode,count,type,constindices,drawcount,basevertex);
    }
void(__stdcall *real_glProvokingVertex)(GLenum mode) = 0;
    void skibidigfx_glProvokingVertex(GLenum mode)
    {
    
    real_glProvokingVertex(mode);
    }
GLsync(__stdcall *real_glFenceSync)(GLenum condition, GLbitfield flags) = 0;
    GLsync skibidigfx_glFenceSync(GLenum condition, GLbitfield flags)
    {
    
    return real_glFenceSync(condition,flags);
    }
GLboolean(__stdcall *real_glIsSync)(GLsync sync) = 0;
    GLboolean skibidigfx_glIsSync(GLsync sync)
    {
    
    return real_glIsSync(sync);
    }
void(__stdcall *real_glDeleteSync)(GLsync sync) = 0;
    void skibidigfx_glDeleteSync(GLsync sync)
    {
    
    real_glDeleteSync(sync);
    }
GLenum(__stdcall *real_glClientWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout) = 0;
    GLenum skibidigfx_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
    {
    
    return real_glClientWaitSync(sync,flags,timeout);
    }
void(__stdcall *real_glWaitSync)(GLsync sync, GLbitfield flags, GLuint64 timeout) = 0;
    void skibidigfx_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
    {
    
    real_glWaitSync(sync,flags,timeout);
    }
void(__stdcall *real_glGetInteger64v)(GLenum pname, GLint64* data) = 0;
    void skibidigfx_glGetInteger64v(GLenum pname, GLint64* data)
    {
    
    real_glGetInteger64v(pname,data);
    }
void(__stdcall *real_glGetSynciv)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values) = 0;
    void skibidigfx_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)
    {
    
    real_glGetSynciv(sync,pname,bufSize,length,values);
    }
void(__stdcall *real_glGetInteger64i_v)(GLenum target, GLuint index, GLint64* data) = 0;
    void skibidigfx_glGetInteger64i_v(GLenum target, GLuint index, GLint64* data)
    {
    
    real_glGetInteger64i_v(target,index,data);
    }
void(__stdcall *real_glGetBufferParameteri64v)(GLenum target, GLenum pname, GLint64* params) = 0;
    void skibidigfx_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64* params)
    {
    
    real_glGetBufferParameteri64v(target,pname,params);
    }
void(__stdcall *real_glFramebufferTexture)(GLenum target, GLenum attachment, GLuint texture, GLint level) = 0;
    void skibidigfx_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
    {
    
    real_glFramebufferTexture(target,attachment,texture,level);
    }
void(__stdcall *real_glTexImage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
    {
    
    real_glTexImage2DMultisample(target,samples,internalformat,width,height,fixedsamplelocations);
    }
void(__stdcall *real_glTexImage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
    {
    
    real_glTexImage3DMultisample(target,samples,internalformat,width,height,depth,fixedsamplelocations);
    }
void(__stdcall *real_glGetMultisamplefv)(GLenum pname, GLuint index, GLfloat* val) = 0;
    void skibidigfx_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat* val)
    {
    
    real_glGetMultisamplefv(pname,index,val);
    }
void(__stdcall *real_glSampleMaski)(GLuint maskNumber, GLbitfield mask) = 0;
    void skibidigfx_glSampleMaski(GLuint maskNumber, GLbitfield mask)
    {
    
    real_glSampleMaski(maskNumber,mask);
    }
void(__stdcall *real_glBindFragDataLocationIndexed)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name) = 0;
    void skibidigfx_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name)
    {
    
    real_glBindFragDataLocationIndexed(program,colorNumber,index,name);
    }
GLint(__stdcall *real_glGetFragDataIndex)(GLuint program, const GLchar* name) = 0;
    GLint skibidigfx_glGetFragDataIndex(GLuint program, const GLchar* name)
    {
    
    return real_glGetFragDataIndex(program,name);
    }
void(__stdcall *real_glGenSamplers)(GLsizei count, GLuint* samplers) = 0;
    void skibidigfx_glGenSamplers(GLsizei count, GLuint* samplers)
    {
    
    real_glGenSamplers(count,samplers);
    }
void(__stdcall *real_glDeleteSamplers)(GLsizei count, const GLuint* samplers) = 0;
    void skibidigfx_glDeleteSamplers(GLsizei count, const GLuint* samplers)
    {
    
    real_glDeleteSamplers(count,samplers);
    }
GLboolean(__stdcall *real_glIsSampler)(GLuint sampler) = 0;
    GLboolean skibidigfx_glIsSampler(GLuint sampler)
    {
    
    return real_glIsSampler(sampler);
    }
void(__stdcall *real_glBindSampler)(GLuint unit, GLuint sampler) = 0;
    void skibidigfx_glBindSampler(GLuint unit, GLuint sampler)
    {
    
    real_glBindSampler(unit,sampler);
    }
void(__stdcall *real_glSamplerParameteri)(GLuint sampler, GLenum pname, GLint param) = 0;
    void skibidigfx_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
    {
    
    real_glSamplerParameteri(sampler,pname,param);
    }
void(__stdcall *real_glSamplerParameteriv)(GLuint sampler, GLenum pname, const GLint* param) = 0;
    void skibidigfx_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint* param)
    {
    
    real_glSamplerParameteriv(sampler,pname,param);
    }
void(__stdcall *real_glSamplerParameterf)(GLuint sampler, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
    {
    
    real_glSamplerParameterf(sampler,pname,param);
    }
void(__stdcall *real_glSamplerParameterfv)(GLuint sampler, GLenum pname, const GLfloat* param) = 0;
    void skibidigfx_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* param)
    {
    
    real_glSamplerParameterfv(sampler,pname,param);
    }
void(__stdcall *real_glSamplerParameterIiv)(GLuint sampler, GLenum pname, const GLint* param) = 0;
    void skibidigfx_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint* param)
    {
    
    real_glSamplerParameterIiv(sampler,pname,param);
    }
void(__stdcall *real_glSamplerParameterIuiv)(GLuint sampler, GLenum pname, const GLuint* param) = 0;
    void skibidigfx_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint* param)
    {
    
    real_glSamplerParameterIuiv(sampler,pname,param);
    }
void(__stdcall *real_glGetSamplerParameteriv)(GLuint sampler, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params)
    {
    
    real_glGetSamplerParameteriv(sampler,pname,params);
    }
void(__stdcall *real_glGetSamplerParameterIiv)(GLuint sampler, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint* params)
    {
    
    real_glGetSamplerParameterIiv(sampler,pname,params);
    }
void(__stdcall *real_glGetSamplerParameterfv)(GLuint sampler, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params)
    {
    
    real_glGetSamplerParameterfv(sampler,pname,params);
    }
void(__stdcall *real_glGetSamplerParameterIuiv)(GLuint sampler, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint* params)
    {
    
    real_glGetSamplerParameterIuiv(sampler,pname,params);
    }
void(__stdcall *real_glQueryCounter)(GLuint id, GLenum target) = 0;
    void skibidigfx_glQueryCounter(GLuint id, GLenum target)
    {
    
    real_glQueryCounter(id,target);
    }
void(__stdcall *real_glGetQueryObjecti64v)(GLuint id, GLenum pname, GLint64* params) = 0;
    void skibidigfx_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64* params)
    {
    
    real_glGetQueryObjecti64v(id,pname,params);
    }
void(__stdcall *real_glGetQueryObjectui64v)(GLuint id, GLenum pname, GLuint64* params) = 0;
    void skibidigfx_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64* params)
    {
    
    real_glGetQueryObjectui64v(id,pname,params);
    }
void(__stdcall *real_glVertexAttribDivisor)(GLuint index, GLuint divisor) = 0;
    void skibidigfx_glVertexAttribDivisor(GLuint index, GLuint divisor)
    {
    
    real_glVertexAttribDivisor(index,divisor);
    }
void(__stdcall *real_glVertexAttribP1ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = 0;
    void skibidigfx_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
    {
    
    real_glVertexAttribP1ui(index,type,normalized,value);
    }
void(__stdcall *real_glVertexAttribP1uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value) = 0;
    void skibidigfx_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
    {
    
    real_glVertexAttribP1uiv(index,type,normalized,value);
    }
void(__stdcall *real_glVertexAttribP2ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = 0;
    void skibidigfx_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
    {
    
    real_glVertexAttribP2ui(index,type,normalized,value);
    }
void(__stdcall *real_glVertexAttribP2uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value) = 0;
    void skibidigfx_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
    {
    
    real_glVertexAttribP2uiv(index,type,normalized,value);
    }
void(__stdcall *real_glVertexAttribP3ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = 0;
    void skibidigfx_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
    {
    
    real_glVertexAttribP3ui(index,type,normalized,value);
    }
void(__stdcall *real_glVertexAttribP3uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value) = 0;
    void skibidigfx_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
    {
    
    real_glVertexAttribP3uiv(index,type,normalized,value);
    }
void(__stdcall *real_glVertexAttribP4ui)(GLuint index, GLenum type, GLboolean normalized, GLuint value) = 0;
    void skibidigfx_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
    {
    
    real_glVertexAttribP4ui(index,type,normalized,value);
    }
void(__stdcall *real_glVertexAttribP4uiv)(GLuint index, GLenum type, GLboolean normalized, const GLuint* value) = 0;
    void skibidigfx_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
    {
    
    real_glVertexAttribP4uiv(index,type,normalized,value);
    }
void(__stdcall *real_glVertexP2ui)(GLenum type, GLuint value) = 0;
    void skibidigfx_glVertexP2ui(GLenum type, GLuint value)
    {
    
    real_glVertexP2ui(type,value);
    }
void(__stdcall *real_glVertexP2uiv)(GLenum type, const GLuint* value) = 0;
    void skibidigfx_glVertexP2uiv(GLenum type, const GLuint* value)
    {
    
    real_glVertexP2uiv(type,value);
    }
void(__stdcall *real_glVertexP3ui)(GLenum type, GLuint value) = 0;
    void skibidigfx_glVertexP3ui(GLenum type, GLuint value)
    {
    
    real_glVertexP3ui(type,value);
    }
void(__stdcall *real_glVertexP3uiv)(GLenum type, const GLuint* value) = 0;
    void skibidigfx_glVertexP3uiv(GLenum type, const GLuint* value)
    {
    
    real_glVertexP3uiv(type,value);
    }
void(__stdcall *real_glVertexP4ui)(GLenum type, GLuint value) = 0;
    void skibidigfx_glVertexP4ui(GLenum type, GLuint value)
    {
    
    real_glVertexP4ui(type,value);
    }
void(__stdcall *real_glVertexP4uiv)(GLenum type, const GLuint* value) = 0;
    void skibidigfx_glVertexP4uiv(GLenum type, const GLuint* value)
    {
    
    real_glVertexP4uiv(type,value);
    }
void(__stdcall *real_glTexCoordP1ui)(GLenum type, GLuint coords) = 0;
    void skibidigfx_glTexCoordP1ui(GLenum type, GLuint coords)
    {
    
    real_glTexCoordP1ui(type,coords);
    }
void(__stdcall *real_glTexCoordP1uiv)(GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glTexCoordP1uiv(GLenum type, const GLuint* coords)
    {
    
    real_glTexCoordP1uiv(type,coords);
    }
void(__stdcall *real_glTexCoordP2ui)(GLenum type, GLuint coords) = 0;
    void skibidigfx_glTexCoordP2ui(GLenum type, GLuint coords)
    {
    
    real_glTexCoordP2ui(type,coords);
    }
void(__stdcall *real_glTexCoordP2uiv)(GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glTexCoordP2uiv(GLenum type, const GLuint* coords)
    {
    
    real_glTexCoordP2uiv(type,coords);
    }
void(__stdcall *real_glTexCoordP3ui)(GLenum type, GLuint coords) = 0;
    void skibidigfx_glTexCoordP3ui(GLenum type, GLuint coords)
    {
    
    real_glTexCoordP3ui(type,coords);
    }
void(__stdcall *real_glTexCoordP3uiv)(GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glTexCoordP3uiv(GLenum type, const GLuint* coords)
    {
    
    real_glTexCoordP3uiv(type,coords);
    }
void(__stdcall *real_glTexCoordP4ui)(GLenum type, GLuint coords) = 0;
    void skibidigfx_glTexCoordP4ui(GLenum type, GLuint coords)
    {
    
    real_glTexCoordP4ui(type,coords);
    }
void(__stdcall *real_glTexCoordP4uiv)(GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glTexCoordP4uiv(GLenum type, const GLuint* coords)
    {
    
    real_glTexCoordP4uiv(type,coords);
    }
void(__stdcall *real_glMultiTexCoordP1ui)(GLenum texture, GLenum type, GLuint coords) = 0;
    void skibidigfx_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
    {
    
    real_glMultiTexCoordP1ui(texture,type,coords);
    }
void(__stdcall *real_glMultiTexCoordP1uiv)(GLenum texture, GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint* coords)
    {
    
    real_glMultiTexCoordP1uiv(texture,type,coords);
    }
void(__stdcall *real_glMultiTexCoordP2ui)(GLenum texture, GLenum type, GLuint coords) = 0;
    void skibidigfx_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
    {
    
    real_glMultiTexCoordP2ui(texture,type,coords);
    }
void(__stdcall *real_glMultiTexCoordP2uiv)(GLenum texture, GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint* coords)
    {
    
    real_glMultiTexCoordP2uiv(texture,type,coords);
    }
void(__stdcall *real_glMultiTexCoordP3ui)(GLenum texture, GLenum type, GLuint coords) = 0;
    void skibidigfx_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
    {
    
    real_glMultiTexCoordP3ui(texture,type,coords);
    }
void(__stdcall *real_glMultiTexCoordP3uiv)(GLenum texture, GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint* coords)
    {
    
    real_glMultiTexCoordP3uiv(texture,type,coords);
    }
void(__stdcall *real_glMultiTexCoordP4ui)(GLenum texture, GLenum type, GLuint coords) = 0;
    void skibidigfx_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
    {
    
    real_glMultiTexCoordP4ui(texture,type,coords);
    }
void(__stdcall *real_glMultiTexCoordP4uiv)(GLenum texture, GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint* coords)
    {
    
    real_glMultiTexCoordP4uiv(texture,type,coords);
    }
void(__stdcall *real_glNormalP3ui)(GLenum type, GLuint coords) = 0;
    void skibidigfx_glNormalP3ui(GLenum type, GLuint coords)
    {
    
    real_glNormalP3ui(type,coords);
    }
void(__stdcall *real_glNormalP3uiv)(GLenum type, const GLuint* coords) = 0;
    void skibidigfx_glNormalP3uiv(GLenum type, const GLuint* coords)
    {
    
    real_glNormalP3uiv(type,coords);
    }
void(__stdcall *real_glColorP3ui)(GLenum type, GLuint color) = 0;
    void skibidigfx_glColorP3ui(GLenum type, GLuint color)
    {
    
    real_glColorP3ui(type,color);
    }
void(__stdcall *real_glColorP3uiv)(GLenum type, const GLuint* color) = 0;
    void skibidigfx_glColorP3uiv(GLenum type, const GLuint* color)
    {
    
    real_glColorP3uiv(type,color);
    }
void(__stdcall *real_glColorP4ui)(GLenum type, GLuint color) = 0;
    void skibidigfx_glColorP4ui(GLenum type, GLuint color)
    {
    
    real_glColorP4ui(type,color);
    }
void(__stdcall *real_glColorP4uiv)(GLenum type, const GLuint* color) = 0;
    void skibidigfx_glColorP4uiv(GLenum type, const GLuint* color)
    {
    
    real_glColorP4uiv(type,color);
    }
void(__stdcall *real_glSecondaryColorP3ui)(GLenum type, GLuint color) = 0;
    void skibidigfx_glSecondaryColorP3ui(GLenum type, GLuint color)
    {
    
    real_glSecondaryColorP3ui(type,color);
    }
void(__stdcall *real_glSecondaryColorP3uiv)(GLenum type, const GLuint* color) = 0;
    void skibidigfx_glSecondaryColorP3uiv(GLenum type, const GLuint* color)
    {
    
    real_glSecondaryColorP3uiv(type,color);
    }
void(__stdcall *real_glMinSampleShading)(GLfloat value) = 0;
    void skibidigfx_glMinSampleShading(GLfloat value)
    {
    
    real_glMinSampleShading(value);
    }
void(__stdcall *real_glBlendEquationi)(GLuint buf, GLenum mode) = 0;
    void skibidigfx_glBlendEquationi(GLuint buf, GLenum mode)
    {
    
    real_glBlendEquationi(buf,mode);
    }
void(__stdcall *real_glBlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha) = 0;
    void skibidigfx_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
    {
    
    real_glBlendEquationSeparatei(buf,modeRGB,modeAlpha);
    }
void(__stdcall *real_glBlendFunci)(GLuint buf, GLenum src, GLenum dst) = 0;
    void skibidigfx_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
    {
    
    real_glBlendFunci(buf,src,dst);
    }
void(__stdcall *real_glBlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) = 0;
    void skibidigfx_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
    {
    
    real_glBlendFuncSeparatei(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);
    }
void(__stdcall *real_glDrawArraysIndirect)(GLenum mode, const void* indirect) = 0;
    void skibidigfx_glDrawArraysIndirect(GLenum mode, const void* indirect)
    {
    
    real_glDrawArraysIndirect(mode,indirect);
    }
void(__stdcall *real_glDrawElementsIndirect)(GLenum mode, GLenum type, const void* indirect) = 0;
    void skibidigfx_glDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect)
    {
    
    real_glDrawElementsIndirect(mode,type,indirect);
    }
void(__stdcall *real_glUniform1d)(GLint location, GLdouble x) = 0;
    void skibidigfx_glUniform1d(GLint location, GLdouble x)
    {
    
    real_glUniform1d(location,x);
    }
void(__stdcall *real_glUniform2d)(GLint location, GLdouble x, GLdouble y) = 0;
    void skibidigfx_glUniform2d(GLint location, GLdouble x, GLdouble y)
    {
    
    real_glUniform2d(location,x,y);
    }
void(__stdcall *real_glUniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glUniform3d(location,x,y,z);
    }
void(__stdcall *real_glUniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glUniform4d(location,x,y,z,w);
    }
void(__stdcall *real_glUniform1dv)(GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glUniform1dv(GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glUniform1dv(location,count,value);
    }
void(__stdcall *real_glUniform2dv)(GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glUniform2dv(GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glUniform2dv(location,count,value);
    }
void(__stdcall *real_glUniform3dv)(GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glUniform3dv(GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glUniform3dv(location,count,value);
    }
void(__stdcall *real_glUniform4dv)(GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glUniform4dv(GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glUniform4dv(location,count,value);
    }
void(__stdcall *real_glUniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix2dv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix3dv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix4dv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix2x3dv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix2x4dv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix3x2dv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix3x4dv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix4x2dv(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glUniformMatrix4x3dv(location,count,transpose,value);
    }
void(__stdcall *real_glGetUniformdv)(GLuint program, GLint location, GLdouble* params) = 0;
    void skibidigfx_glGetUniformdv(GLuint program, GLint location, GLdouble* params)
    {
    
    real_glGetUniformdv(program,location,params);
    }
GLint(__stdcall *real_glGetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar* name) = 0;
    GLint skibidigfx_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar* name)
    {
    
    return real_glGetSubroutineUniformLocation(program,shadertype,name);
    }
GLuint(__stdcall *real_glGetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar* name) = 0;
    GLuint skibidigfx_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar* name)
    {
    
    return real_glGetSubroutineIndex(program,shadertype,name);
    }
void(__stdcall *real_glGetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values) = 0;
    void skibidigfx_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values)
    {
    
    real_glGetActiveSubroutineUniformiv(program,shadertype,index,pname,values);
    }
void(__stdcall *real_glGetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name) = 0;
    void skibidigfx_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name)
    {
    
    real_glGetActiveSubroutineUniformName(program,shadertype,index,bufsize,length,name);
    }
void(__stdcall *real_glGetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name) = 0;
    void skibidigfx_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name)
    {
    
    real_glGetActiveSubroutineName(program,shadertype,index,bufsize,length,name);
    }
void(__stdcall *real_glUniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint* indices) = 0;
    void skibidigfx_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint* indices)
    {
    
    real_glUniformSubroutinesuiv(shadertype,count,indices);
    }
void(__stdcall *real_glGetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint* params) = 0;
    void skibidigfx_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint* params)
    {
    
    real_glGetUniformSubroutineuiv(shadertype,location,params);
    }
void(__stdcall *real_glGetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint* values) = 0;
    void skibidigfx_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint* values)
    {
    
    real_glGetProgramStageiv(program,shadertype,pname,values);
    }
void(__stdcall *real_glPatchParameteri)(GLenum pname, GLint value) = 0;
    void skibidigfx_glPatchParameteri(GLenum pname, GLint value)
    {
    
    real_glPatchParameteri(pname,value);
    }
void(__stdcall *real_glPatchParameterfv)(GLenum pname, const GLfloat* values) = 0;
    void skibidigfx_glPatchParameterfv(GLenum pname, const GLfloat* values)
    {
    
    real_glPatchParameterfv(pname,values);
    }
void(__stdcall *real_glBindTransformFeedback)(GLenum target, GLuint id) = 0;
    void skibidigfx_glBindTransformFeedback(GLenum target, GLuint id)
    {
    
    real_glBindTransformFeedback(target,id);
    }
void(__stdcall *real_glDeleteTransformFeedbacks)(GLsizei n, const GLuint* ids) = 0;
    void skibidigfx_glDeleteTransformFeedbacks(GLsizei n, const GLuint* ids)
    {
    
    real_glDeleteTransformFeedbacks(n,ids);
    }
void(__stdcall *real_glGenTransformFeedbacks)(GLsizei n, GLuint* ids) = 0;
    void skibidigfx_glGenTransformFeedbacks(GLsizei n, GLuint* ids)
    {
    
    real_glGenTransformFeedbacks(n,ids);
    }
GLboolean(__stdcall *real_glIsTransformFeedback)(GLuint id) = 0;
    GLboolean skibidigfx_glIsTransformFeedback(GLuint id)
    {
    
    return real_glIsTransformFeedback(id);
    }
void(__stdcall *real_glPauseTransformFeedback)() = 0;
    void skibidigfx_glPauseTransformFeedback()
    {
    
    real_glPauseTransformFeedback();
    }
void(__stdcall *real_glResumeTransformFeedback)() = 0;
    void skibidigfx_glResumeTransformFeedback()
    {
    
    real_glResumeTransformFeedback();
    }
void(__stdcall *real_glDrawTransformFeedback)(GLenum mode, GLuint id) = 0;
    void skibidigfx_glDrawTransformFeedback(GLenum mode, GLuint id)
    {
    
    real_glDrawTransformFeedback(mode,id);
    }
void(__stdcall *real_glDrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream) = 0;
    void skibidigfx_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
    {
    
    real_glDrawTransformFeedbackStream(mode,id,stream);
    }
void(__stdcall *real_glBeginQueryIndexed)(GLenum target, GLuint index, GLuint id) = 0;
    void skibidigfx_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
    {
    
    real_glBeginQueryIndexed(target,index,id);
    }
void(__stdcall *real_glEndQueryIndexed)(GLenum target, GLuint index) = 0;
    void skibidigfx_glEndQueryIndexed(GLenum target, GLuint index)
    {
    
    real_glEndQueryIndexed(target,index);
    }
void(__stdcall *real_glGetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint* params)
    {
    
    real_glGetQueryIndexediv(target,index,pname,params);
    }
void(__stdcall *real_glReleaseShaderCompiler)() = 0;
    void skibidigfx_glReleaseShaderCompiler()
    {
    
    real_glReleaseShaderCompiler();
    }
void(__stdcall *real_glShaderBinary)(GLsizei count, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length) = 0;
    void skibidigfx_glShaderBinary(GLsizei count, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length)
    {
    
    real_glShaderBinary(count,shaders,binaryformat,binary,length);
    }
void(__stdcall *real_glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision) = 0;
    void skibidigfx_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)
    {
    
    real_glGetShaderPrecisionFormat(shadertype,precisiontype,range,precision);
    }
void(__stdcall *real_glDepthRangef)(GLfloat n, GLfloat f) = 0;
    void skibidigfx_glDepthRangef(GLfloat n, GLfloat f)
    {
    
    real_glDepthRangef(n,f);
    }
void(__stdcall *real_glClearDepthf)(GLfloat d) = 0;
    void skibidigfx_glClearDepthf(GLfloat d)
    {
    
    real_glClearDepthf(d);
    }
void(__stdcall *real_glGetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary) = 0;
    void skibidigfx_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary)
    {
    
    real_glGetProgramBinary(program,bufSize,length,binaryFormat,binary);
    }
void(__stdcall *real_glProgramBinary)(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length) = 0;
    void skibidigfx_glProgramBinary(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length)
    {
    
    real_glProgramBinary(program,binaryFormat,binary,length);
    }
void(__stdcall *real_glProgramParameteri)(GLuint program, GLenum pname, GLint value) = 0;
    void skibidigfx_glProgramParameteri(GLuint program, GLenum pname, GLint value)
    {
    
    real_glProgramParameteri(program,pname,value);
    }
void(__stdcall *real_glUseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program) = 0;
    void skibidigfx_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
    {
    
    real_glUseProgramStages(pipeline,stages,program);
    }
void(__stdcall *real_glActiveShaderProgram)(GLuint pipeline, GLuint program) = 0;
    void skibidigfx_glActiveShaderProgram(GLuint pipeline, GLuint program)
    {
    
    real_glActiveShaderProgram(pipeline,program);
    }
GLuint(__stdcall *real_glCreateShaderProgramv)(GLenum type, GLsizei count, const GLchar** conststrings) = 0;
    GLuint skibidigfx_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar** conststrings)
    {
    
    return real_glCreateShaderProgramv(type,count,conststrings);
    }
void(__stdcall *real_glBindProgramPipeline)(GLuint pipeline) = 0;
    void skibidigfx_glBindProgramPipeline(GLuint pipeline)
    {
    
    real_glBindProgramPipeline(pipeline);
    }
void(__stdcall *real_glDeleteProgramPipelines)(GLsizei n, const GLuint* pipelines) = 0;
    void skibidigfx_glDeleteProgramPipelines(GLsizei n, const GLuint* pipelines)
    {
    
    real_glDeleteProgramPipelines(n,pipelines);
    }
void(__stdcall *real_glGenProgramPipelines)(GLsizei n, GLuint* pipelines) = 0;
    void skibidigfx_glGenProgramPipelines(GLsizei n, GLuint* pipelines)
    {
    
    real_glGenProgramPipelines(n,pipelines);
    }
GLboolean(__stdcall *real_glIsProgramPipeline)(GLuint pipeline) = 0;
    GLboolean skibidigfx_glIsProgramPipeline(GLuint pipeline)
    {
    
    return real_glIsProgramPipeline(pipeline);
    }
void(__stdcall *real_glGetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint* params)
    {
    
    real_glGetProgramPipelineiv(pipeline,pname,params);
    }
void(__stdcall *real_glProgramUniform1i)(GLuint program, GLint location, GLint v0) = 0;
    void skibidigfx_glProgramUniform1i(GLuint program, GLint location, GLint v0)
    {
    
    real_glProgramUniform1i(program,location,v0);
    }
void(__stdcall *real_glProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    real_glProgramUniform1iv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform1f)(GLuint program, GLint location, GLfloat v0) = 0;
    void skibidigfx_glProgramUniform1f(GLuint program, GLint location, GLfloat v0)
    {
    
    real_glProgramUniform1f(program,location,v0);
    }
void(__stdcall *real_glProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glProgramUniform1fv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform1d)(GLuint program, GLint location, GLdouble v0) = 0;
    void skibidigfx_glProgramUniform1d(GLuint program, GLint location, GLdouble v0)
    {
    
    real_glProgramUniform1d(program,location,v0);
    }
void(__stdcall *real_glProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glProgramUniform1dv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform1ui)(GLuint program, GLint location, GLuint v0) = 0;
    void skibidigfx_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
    {
    
    real_glProgramUniform1ui(program,location,v0);
    }
void(__stdcall *real_glProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glProgramUniform1uiv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1) = 0;
    void skibidigfx_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)
    {
    
    real_glProgramUniform2i(program,location,v0,v1);
    }
void(__stdcall *real_glProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    real_glProgramUniform2iv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1) = 0;
    void skibidigfx_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
    {
    
    real_glProgramUniform2f(program,location,v0,v1);
    }
void(__stdcall *real_glProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glProgramUniform2fv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1) = 0;
    void skibidigfx_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)
    {
    
    real_glProgramUniform2d(program,location,v0,v1);
    }
void(__stdcall *real_glProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glProgramUniform2dv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1) = 0;
    void skibidigfx_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
    {
    
    real_glProgramUniform2ui(program,location,v0,v1);
    }
void(__stdcall *real_glProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glProgramUniform2uiv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) = 0;
    void skibidigfx_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
    {
    
    real_glProgramUniform3i(program,location,v0,v1,v2);
    }
void(__stdcall *real_glProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    real_glProgramUniform3iv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = 0;
    void skibidigfx_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
    {
    
    real_glProgramUniform3f(program,location,v0,v1,v2);
    }
void(__stdcall *real_glProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glProgramUniform3fv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) = 0;
    void skibidigfx_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
    {
    
    real_glProgramUniform3d(program,location,v0,v1,v2);
    }
void(__stdcall *real_glProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glProgramUniform3dv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) = 0;
    void skibidigfx_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
    {
    
    real_glProgramUniform3ui(program,location,v0,v1,v2);
    }
void(__stdcall *real_glProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glProgramUniform3uiv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = 0;
    void skibidigfx_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
    {
    
    real_glProgramUniform4i(program,location,v0,v1,v2,v3);
    }
void(__stdcall *real_glProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    real_glProgramUniform4iv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = 0;
    void skibidigfx_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
    {
    
    real_glProgramUniform4f(program,location,v0,v1,v2,v3);
    }
void(__stdcall *real_glProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glProgramUniform4fv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) = 0;
    void skibidigfx_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
    {
    
    real_glProgramUniform4d(program,location,v0,v1,v2,v3);
    }
void(__stdcall *real_glProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glProgramUniform4dv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = 0;
    void skibidigfx_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
    {
    
    real_glProgramUniform4ui(program,location,v0,v1,v2,v3);
    }
void(__stdcall *real_glProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glProgramUniform4uiv(program,location,count,value);
    }
void(__stdcall *real_glProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix2fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix3fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix4fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix2dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix3dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix4dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix2x3fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix3x2fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix2x4fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix4x2fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix3x4fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix4x3fv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix2x3dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix3x2dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix2x4dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix4x2dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix3x4dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix4x3dv(program,location,count,transpose,value);
    }
void(__stdcall *real_glValidateProgramPipeline)(GLuint pipeline) = 0;
    void skibidigfx_glValidateProgramPipeline(GLuint pipeline)
    {
    
    real_glValidateProgramPipeline(pipeline);
    }
void(__stdcall *real_glGetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog) = 0;
    void skibidigfx_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
    {
    
    real_glGetProgramPipelineInfoLog(pipeline,bufSize,length,infoLog);
    }
void(__stdcall *real_glVertexAttribL1d)(GLuint index, GLdouble x) = 0;
    void skibidigfx_glVertexAttribL1d(GLuint index, GLdouble x)
    {
    
    real_glVertexAttribL1d(index,x);
    }
void(__stdcall *real_glVertexAttribL2d)(GLuint index, GLdouble x, GLdouble y) = 0;
    void skibidigfx_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
    {
    
    real_glVertexAttribL2d(index,x,y);
    }
void(__stdcall *real_glVertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glVertexAttribL3d(index,x,y,z);
    }
void(__stdcall *real_glVertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glVertexAttribL4d(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttribL1dv)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribL1dv(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttribL1dv(index,v);
    }
void(__stdcall *real_glVertexAttribL2dv)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribL2dv(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttribL2dv(index,v);
    }
void(__stdcall *real_glVertexAttribL3dv)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribL3dv(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttribL3dv(index,v);
    }
void(__stdcall *real_glVertexAttribL4dv)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribL4dv(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttribL4dv(index,v);
    }
void(__stdcall *real_glVertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glVertexAttribLPointer(index,size,type,stride,pointer);
    }
void(__stdcall *real_glGetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble* params)
    {
    
    real_glGetVertexAttribLdv(index,pname,params);
    }
void(__stdcall *real_glViewportArrayv)(GLuint first, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glViewportArrayv(GLuint first, GLsizei count, const GLfloat* v)
    {
    
    real_glViewportArrayv(first,count,v);
    }
void(__stdcall *real_glViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) = 0;
    void skibidigfx_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
    {
    
    real_glViewportIndexedf(index,x,y,w,h);
    }
void(__stdcall *real_glViewportIndexedfv)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glViewportIndexedfv(GLuint index, const GLfloat* v)
    {
    
    real_glViewportIndexedfv(index,v);
    }
void(__stdcall *real_glScissorArrayv)(GLuint first, GLsizei count, const GLint* v) = 0;
    void skibidigfx_glScissorArrayv(GLuint first, GLsizei count, const GLint* v)
    {
    
    real_glScissorArrayv(first,count,v);
    }
void(__stdcall *real_glScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
    {
    
    real_glScissorIndexed(index,left,bottom,width,height);
    }
void(__stdcall *real_glScissorIndexedv)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glScissorIndexedv(GLuint index, const GLint* v)
    {
    
    real_glScissorIndexedv(index,v);
    }
void(__stdcall *real_glDepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble* v) = 0;
    void skibidigfx_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble* v)
    {
    
    real_glDepthRangeArrayv(first,count,v);
    }
void(__stdcall *real_glDepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f) = 0;
    void skibidigfx_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f)
    {
    
    real_glDepthRangeIndexed(index,n,f);
    }
void(__stdcall *real_glGetFloati_v)(GLenum target, GLuint index, GLfloat* data) = 0;
    void skibidigfx_glGetFloati_v(GLenum target, GLuint index, GLfloat* data)
    {
    
    real_glGetFloati_v(target,index,data);
    }
void(__stdcall *real_glGetDoublei_v)(GLenum target, GLuint index, GLdouble* data) = 0;
    void skibidigfx_glGetDoublei_v(GLenum target, GLuint index, GLdouble* data)
    {
    
    real_glGetDoublei_v(target,index,data);
    }
void(__stdcall *real_glDrawArraysInstancedBaseInstance)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) = 0;
    void skibidigfx_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
    {
    
    real_glDrawArraysInstancedBaseInstance(mode,first,count,instancecount,baseinstance);
    }
void(__stdcall *real_glDrawElementsInstancedBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance) = 0;
    void skibidigfx_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance)
    {
    
    real_glDrawElementsInstancedBaseInstance(mode,count,type,indices,instancecount,baseinstance);
    }
void(__stdcall *real_glDrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) = 0;
    void skibidigfx_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
    {
    
    real_glDrawElementsInstancedBaseVertexBaseInstance(mode,count,type,indices,instancecount,basevertex,baseinstance);
    }
void(__stdcall *real_glGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params) = 0;
    void skibidigfx_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params)
    {
    
    real_glGetInternalformativ(target,internalformat,pname,bufSize,params);
    }
void(__stdcall *real_glGetActiveAtomicCounterBufferiv)(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params)
    {
    
    real_glGetActiveAtomicCounterBufferiv(program,bufferIndex,pname,params);
    }
void(__stdcall *real_glBindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) = 0;
    void skibidigfx_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
    {
    
    real_glBindImageTexture(unit,texture,level,layered,layer,access,format);
    }
void(__stdcall *real_glMemoryBarrier)(GLbitfield barriers) = 0;
    void skibidigfx_glMemoryBarrier(GLbitfield barriers)
    {
    
    real_glMemoryBarrier(barriers);
    }
void(__stdcall *real_glTexStorage1D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) = 0;
    void skibidigfx_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
    {
    
    real_glTexStorage1D(target,levels,internalformat,width);
    }
void(__stdcall *real_glTexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glTexStorage2D(target,levels,internalformat,width,height);
    }
void(__stdcall *real_glTexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = 0;
    void skibidigfx_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    real_glTexStorage3D(target,levels,internalformat,width,height,depth);
    }
void(__stdcall *real_glDrawTransformFeedbackInstanced)(GLenum mode, GLuint id, GLsizei instancecount) = 0;
    void skibidigfx_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount)
    {
    
    real_glDrawTransformFeedbackInstanced(mode,id,instancecount);
    }
void(__stdcall *real_glDrawTransformFeedbackStreamInstanced)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) = 0;
    void skibidigfx_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
    {
    
    real_glDrawTransformFeedbackStreamInstanced(mode,id,stream,instancecount);
    }
void(__stdcall *real_glClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data)
    {
    
    real_glClearBufferData(target,internalformat,format,type,data);
    }
void(__stdcall *real_glClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data)
    {
    
    real_glClearBufferSubData(target,internalformat,offset,size,format,type,data);
    }
void(__stdcall *real_glDispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) = 0;
    void skibidigfx_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
    {
    
    real_glDispatchCompute(num_groups_x,num_groups_y,num_groups_z);
    }
void(__stdcall *real_glDispatchComputeIndirect)(GLintptr indirect) = 0;
    void skibidigfx_glDispatchComputeIndirect(GLintptr indirect)
    {
    
    real_glDispatchComputeIndirect(indirect);
    }
void(__stdcall *real_glCopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) = 0;
    void skibidigfx_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
    {
    
    real_glCopyImageSubData(srcName,srcTarget,srcLevel,srcX,srcY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,srcWidth,srcHeight,srcDepth);
    }
void(__stdcall *real_glFramebufferParameteri)(GLenum target, GLenum pname, GLint param) = 0;
    void skibidigfx_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
    {
    
    real_glFramebufferParameteri(target,pname,param);
    }
void(__stdcall *real_glGetFramebufferParameteriv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetFramebufferParameteriv(target,pname,params);
    }
void(__stdcall *real_glGetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params) = 0;
    void skibidigfx_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params)
    {
    
    real_glGetInternalformati64v(target,internalformat,pname,bufSize,params);
    }
void(__stdcall *real_glInvalidateTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) = 0;
    void skibidigfx_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    real_glInvalidateTexSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth);
    }
void(__stdcall *real_glInvalidateTexImage)(GLuint texture, GLint level) = 0;
    void skibidigfx_glInvalidateTexImage(GLuint texture, GLint level)
    {
    
    real_glInvalidateTexImage(texture,level);
    }
void(__stdcall *real_glInvalidateBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr length) = 0;
    void skibidigfx_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
    {
    
    real_glInvalidateBufferSubData(buffer,offset,length);
    }
void(__stdcall *real_glInvalidateBufferData)(GLuint buffer) = 0;
    void skibidigfx_glInvalidateBufferData(GLuint buffer)
    {
    
    real_glInvalidateBufferData(buffer);
    }
void(__stdcall *real_glInvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum* attachments) = 0;
    void skibidigfx_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments)
    {
    
    real_glInvalidateFramebuffer(target,numAttachments,attachments);
    }
void(__stdcall *real_glInvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glInvalidateSubFramebuffer(target,numAttachments,attachments,x,y,width,height);
    }
void(__stdcall *real_glMultiDrawArraysIndirect)(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawArraysIndirect(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride)
    {
    
    real_glMultiDrawArraysIndirect(mode,indirect,drawcount,stride);
    }
void(__stdcall *real_glMultiDrawElementsIndirect)(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride)
    {
    
    real_glMultiDrawElementsIndirect(mode,type,indirect,drawcount,stride);
    }
void(__stdcall *real_glGetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint* params)
    {
    
    real_glGetProgramInterfaceiv(program,programInterface,pname,params);
    }
GLuint(__stdcall *real_glGetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar* name) = 0;
    GLuint skibidigfx_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar* name)
    {
    
    return real_glGetProgramResourceIndex(program,programInterface,name);
    }
void(__stdcall *real_glGetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name) = 0;
    void skibidigfx_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name)
    {
    
    real_glGetProgramResourceName(program,programInterface,index,bufSize,length,name);
    }
void(__stdcall *real_glGetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params) = 0;
    void skibidigfx_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params)
    {
    
    real_glGetProgramResourceiv(program,programInterface,index,propCount,props,bufSize,length,params);
    }
GLint(__stdcall *real_glGetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar* name) = 0;
    GLint skibidigfx_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar* name)
    {
    
    return real_glGetProgramResourceLocation(program,programInterface,name);
    }
GLint(__stdcall *real_glGetProgramResourceLocationIndex)(GLuint program, GLenum programInterface, const GLchar* name) = 0;
    GLint skibidigfx_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar* name)
    {
    
    return real_glGetProgramResourceLocationIndex(program,programInterface,name);
    }
void(__stdcall *real_glShaderStorageBlockBinding)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) = 0;
    void skibidigfx_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
    {
    
    real_glShaderStorageBlockBinding(program,storageBlockIndex,storageBlockBinding);
    }
void(__stdcall *real_glTexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) = 0;
    void skibidigfx_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    real_glTexBufferRange(target,internalformat,buffer,offset,size);
    }
void(__stdcall *real_glTexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
    {
    
    real_glTexStorage2DMultisample(target,samples,internalformat,width,height,fixedsamplelocations);
    }
void(__stdcall *real_glTexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
    {
    
    real_glTexStorage3DMultisample(target,samples,internalformat,width,height,depth,fixedsamplelocations);
    }
void(__stdcall *real_glTextureView)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) = 0;
    void skibidigfx_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
    {
    
    real_glTextureView(texture,target,origtexture,internalformat,minlevel,numlevels,minlayer,numlayers);
    }
void(__stdcall *real_glBindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = 0;
    void skibidigfx_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
    {
    
    real_glBindVertexBuffer(bindingindex,buffer,offset,stride);
    }
void(__stdcall *real_glVertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
    {
    
    real_glVertexAttribFormat(attribindex,size,type,normalized,relativeoffset);
    }
void(__stdcall *real_glVertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    real_glVertexAttribIFormat(attribindex,size,type,relativeoffset);
    }
void(__stdcall *real_glVertexAttribLFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    real_glVertexAttribLFormat(attribindex,size,type,relativeoffset);
    }
void(__stdcall *real_glVertexAttribBinding)(GLuint attribindex, GLuint bindingindex) = 0;
    void skibidigfx_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
    {
    
    real_glVertexAttribBinding(attribindex,bindingindex);
    }
void(__stdcall *real_glVertexBindingDivisor)(GLuint bindingindex, GLuint divisor) = 0;
    void skibidigfx_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
    {
    
    real_glVertexBindingDivisor(bindingindex,divisor);
    }
void(__stdcall *real_glDebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled) = 0;
    void skibidigfx_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
    {
    
    real_glDebugMessageControl(source,type,severity,count,ids,enabled);
    }
void(__stdcall *real_glDebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf) = 0;
    void skibidigfx_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf)
    {
    
    real_glDebugMessageInsert(source,type,id,severity,length,buf);
    }
void(__stdcall *real_glDebugMessageCallback)(GLDEBUGPROC callback, const void* userParam) = 0;
    void skibidigfx_glDebugMessageCallback(GLDEBUGPROC callback, const void* userParam)
    {
    
    real_glDebugMessageCallback(callback,userParam);
    }
GLuint(__stdcall *real_glGetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog) = 0;
    GLuint skibidigfx_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog)
    {
    
    return real_glGetDebugMessageLog(count,bufSize,sources,types,ids,severities,lengths,messageLog);
    }
void(__stdcall *real_glPushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar* message) = 0;
    void skibidigfx_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar* message)
    {
    
    real_glPushDebugGroup(source,id,length,message);
    }
void(__stdcall *real_glPopDebugGroup)() = 0;
    void skibidigfx_glPopDebugGroup()
    {
    
    real_glPopDebugGroup();
    }
void(__stdcall *real_glObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar* label) = 0;
    void skibidigfx_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar* label)
    {
    
    real_glObjectLabel(identifier,name,length,label);
    }
void(__stdcall *real_glGetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label) = 0;
    void skibidigfx_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label)
    {
    
    real_glGetObjectLabel(identifier,name,bufSize,length,label);
    }
void(__stdcall *real_glObjectPtrLabel)(const void* ptr, GLsizei length, const GLchar* label) = 0;
    void skibidigfx_glObjectPtrLabel(const void* ptr, GLsizei length, const GLchar* label)
    {
    
    real_glObjectPtrLabel(ptr,length,label);
    }
void(__stdcall *real_glGetObjectPtrLabel)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label) = 0;
    void skibidigfx_glGetObjectPtrLabel(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label)
    {
    
    real_glGetObjectPtrLabel(ptr,bufSize,length,label);
    }
void(__stdcall *real_glBufferStorage)(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags) = 0;
    void skibidigfx_glBufferStorage(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags)
    {
    
    real_glBufferStorage(target,size,data,flags);
    }
void(__stdcall *real_glClearTexImage)(GLuint texture, GLint level, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void* data)
    {
    
    real_glClearTexImage(texture,level,format,type,data);
    }
void(__stdcall *real_glClearTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data)
    {
    
    real_glClearTexSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data);
    }
void(__stdcall *real_glBindBuffersBase)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers) = 0;
    void skibidigfx_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint* buffers)
    {
    
    real_glBindBuffersBase(target,first,count,buffers);
    }
void(__stdcall *real_glBindBuffersRange)(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes) = 0;
    void skibidigfx_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes)
    {
    
    real_glBindBuffersRange(target,first,count,buffers,offsets,sizes);
    }
void(__stdcall *real_glBindTextures)(GLuint first, GLsizei count, const GLuint* textures) = 0;
    void skibidigfx_glBindTextures(GLuint first, GLsizei count, const GLuint* textures)
    {
    
    real_glBindTextures(first,count,textures);
    }
void(__stdcall *real_glBindSamplers)(GLuint first, GLsizei count, const GLuint* samplers) = 0;
    void skibidigfx_glBindSamplers(GLuint first, GLsizei count, const GLuint* samplers)
    {
    
    real_glBindSamplers(first,count,samplers);
    }
void(__stdcall *real_glBindImageTextures)(GLuint first, GLsizei count, const GLuint* textures) = 0;
    void skibidigfx_glBindImageTextures(GLuint first, GLsizei count, const GLuint* textures)
    {
    
    real_glBindImageTextures(first,count,textures);
    }
void(__stdcall *real_glBindVertexBuffers)(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides) = 0;
    void skibidigfx_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides)
    {
    
    real_glBindVertexBuffers(first,count,buffers,offsets,strides);
    }
void(__stdcall *real_glClipControl)(GLenum origin, GLenum depth) = 0;
    void skibidigfx_glClipControl(GLenum origin, GLenum depth)
    {
    
    real_glClipControl(origin,depth);
    }
void(__stdcall *real_glCreateTransformFeedbacks)(GLsizei n, GLuint* ids) = 0;
    void skibidigfx_glCreateTransformFeedbacks(GLsizei n, GLuint* ids)
    {
    
    real_glCreateTransformFeedbacks(n,ids);
    }
void(__stdcall *real_glTransformFeedbackBufferBase)(GLuint xfb, GLuint index, GLuint buffer) = 0;
    void skibidigfx_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)
    {
    
    real_glTransformFeedbackBufferBase(xfb,index,buffer);
    }
void(__stdcall *real_glTransformFeedbackBufferRange)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = 0;
    void skibidigfx_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    real_glTransformFeedbackBufferRange(xfb,index,buffer,offset,size);
    }
void(__stdcall *real_glGetTransformFeedbackiv)(GLuint xfb, GLenum pname, GLint* param) = 0;
    void skibidigfx_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint* param)
    {
    
    real_glGetTransformFeedbackiv(xfb,pname,param);
    }
void(__stdcall *real_glGetTransformFeedbacki_v)(GLuint xfb, GLenum pname, GLuint index, GLint* param) = 0;
    void skibidigfx_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint* param)
    {
    
    real_glGetTransformFeedbacki_v(xfb,pname,index,param);
    }
void(__stdcall *real_glGetTransformFeedbacki64_v)(GLuint xfb, GLenum pname, GLuint index, GLint64* param) = 0;
    void skibidigfx_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64* param)
    {
    
    real_glGetTransformFeedbacki64_v(xfb,pname,index,param);
    }
void(__stdcall *real_glCreateBuffers)(GLsizei n, GLuint* buffers) = 0;
    void skibidigfx_glCreateBuffers(GLsizei n, GLuint* buffers)
    {
    
    real_glCreateBuffers(n,buffers);
    }
void(__stdcall *real_glNamedBufferStorage)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags) = 0;
    void skibidigfx_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags)
    {
    
    real_glNamedBufferStorage(buffer,size,data,flags);
    }
void(__stdcall *real_glNamedBufferData)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage) = 0;
    void skibidigfx_glNamedBufferData(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage)
    {
    
    real_glNamedBufferData(buffer,size,data,usage);
    }
void(__stdcall *real_glNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data) = 0;
    void skibidigfx_glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    real_glNamedBufferSubData(buffer,offset,size,data);
    }
void(__stdcall *real_glCopyNamedBufferSubData)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = 0;
    void skibidigfx_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
    {
    
    real_glCopyNamedBufferSubData(readBuffer,writeBuffer,readOffset,writeOffset,size);
    }
void(__stdcall *real_glClearNamedBufferData)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data)
    {
    
    real_glClearNamedBufferData(buffer,internalformat,format,type,data);
    }
void(__stdcall *real_glClearNamedBufferSubData)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data)
    {
    
    real_glClearNamedBufferSubData(buffer,internalformat,offset,size,format,type,data);
    }
void *(__stdcall *real_glMapNamedBuffer)(GLuint buffer, GLenum access) = 0;
    void * skibidigfx_glMapNamedBuffer(GLuint buffer, GLenum access)
    {
    
    return real_glMapNamedBuffer(buffer,access);
    }
void *(__stdcall *real_glMapNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) = 0;
    void * skibidigfx_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
    {
    
    return real_glMapNamedBufferRange(buffer,offset,length,access);
    }
GLboolean(__stdcall *real_glUnmapNamedBuffer)(GLuint buffer) = 0;
    GLboolean skibidigfx_glUnmapNamedBuffer(GLuint buffer)
    {
    
    return real_glUnmapNamedBuffer(buffer);
    }
void(__stdcall *real_glFlushMappedNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length) = 0;
    void skibidigfx_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)
    {
    
    real_glFlushMappedNamedBufferRange(buffer,offset,length);
    }
void(__stdcall *real_glGetNamedBufferParameteriv)(GLuint buffer, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint* params)
    {
    
    real_glGetNamedBufferParameteriv(buffer,pname,params);
    }
void(__stdcall *real_glGetNamedBufferParameteri64v)(GLuint buffer, GLenum pname, GLint64* params) = 0;
    void skibidigfx_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64* params)
    {
    
    real_glGetNamedBufferParameteri64v(buffer,pname,params);
    }
void(__stdcall *real_glGetNamedBufferPointerv)(GLuint buffer, GLenum pname, void** params) = 0;
    void skibidigfx_glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void** params)
    {
    
    real_glGetNamedBufferPointerv(buffer,pname,params);
    }
void(__stdcall *real_glGetNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data) = 0;
    void skibidigfx_glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data)
    {
    
    real_glGetNamedBufferSubData(buffer,offset,size,data);
    }
void(__stdcall *real_glCreateFramebuffers)(GLsizei n, GLuint* framebuffers) = 0;
    void skibidigfx_glCreateFramebuffers(GLsizei n, GLuint* framebuffers)
    {
    
    real_glCreateFramebuffers(n,framebuffers);
    }
void(__stdcall *real_glNamedFramebufferRenderbuffer)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = 0;
    void skibidigfx_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
    {
    
    real_glNamedFramebufferRenderbuffer(framebuffer,attachment,renderbuffertarget,renderbuffer);
    }
void(__stdcall *real_glNamedFramebufferParameteri)(GLuint framebuffer, GLenum pname, GLint param) = 0;
    void skibidigfx_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)
    {
    
    real_glNamedFramebufferParameteri(framebuffer,pname,param);
    }
void(__stdcall *real_glNamedFramebufferTexture)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) = 0;
    void skibidigfx_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
    {
    
    real_glNamedFramebufferTexture(framebuffer,attachment,texture,level);
    }
void(__stdcall *real_glNamedFramebufferTextureLayer)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) = 0;
    void skibidigfx_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    real_glNamedFramebufferTextureLayer(framebuffer,attachment,texture,level,layer);
    }
void(__stdcall *real_glNamedFramebufferDrawBuffer)(GLuint framebuffer, GLenum buf) = 0;
    void skibidigfx_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)
    {
    
    real_glNamedFramebufferDrawBuffer(framebuffer,buf);
    }
void(__stdcall *real_glNamedFramebufferDrawBuffers)(GLuint framebuffer, GLsizei n, const GLenum* bufs) = 0;
    void skibidigfx_glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum* bufs)
    {
    
    real_glNamedFramebufferDrawBuffers(framebuffer,n,bufs);
    }
void(__stdcall *real_glNamedFramebufferReadBuffer)(GLuint framebuffer, GLenum src) = 0;
    void skibidigfx_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src)
    {
    
    real_glNamedFramebufferReadBuffer(framebuffer,src);
    }
void(__stdcall *real_glInvalidateNamedFramebufferData)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments) = 0;
    void skibidigfx_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments)
    {
    
    real_glInvalidateNamedFramebufferData(framebuffer,numAttachments,attachments);
    }
void(__stdcall *real_glInvalidateNamedFramebufferSubData)(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glInvalidateNamedFramebufferSubData(framebuffer,numAttachments,attachments,x,y,width,height);
    }
void(__stdcall *real_glClearNamedFramebufferiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value) = 0;
    void skibidigfx_glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value)
    {
    
    real_glClearNamedFramebufferiv(framebuffer,buffer,drawbuffer,value);
    }
void(__stdcall *real_glClearNamedFramebufferuiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value) = 0;
    void skibidigfx_glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value)
    {
    
    real_glClearNamedFramebufferuiv(framebuffer,buffer,drawbuffer,value);
    }
void(__stdcall *real_glClearNamedFramebufferfv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value) = 0;
    void skibidigfx_glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value)
    {
    
    real_glClearNamedFramebufferfv(framebuffer,buffer,drawbuffer,value);
    }
void(__stdcall *real_glClearNamedFramebufferfi)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) = 0;
    void skibidigfx_glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
    {
    
    real_glClearNamedFramebufferfi(framebuffer,buffer,drawbuffer,depth,stencil);
    }
void(__stdcall *real_glBlitNamedFramebuffer)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = 0;
    void skibidigfx_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
    {
    
    real_glBlitNamedFramebuffer(readFramebuffer,drawFramebuffer,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
    }
GLenum(__stdcall *real_glCheckNamedFramebufferStatus)(GLuint framebuffer, GLenum target) = 0;
    GLenum skibidigfx_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target)
    {
    
    return real_glCheckNamedFramebufferStatus(framebuffer,target);
    }
void(__stdcall *real_glGetNamedFramebufferParameteriv)(GLuint framebuffer, GLenum pname, GLint* param) = 0;
    void skibidigfx_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint* param)
    {
    
    real_glGetNamedFramebufferParameteriv(framebuffer,pname,param);
    }
void(__stdcall *real_glGetNamedFramebufferAttachmentParameteriv)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params)
    {
    
    real_glGetNamedFramebufferAttachmentParameteriv(framebuffer,attachment,pname,params);
    }
void(__stdcall *real_glCreateRenderbuffers)(GLsizei n, GLuint* renderbuffers) = 0;
    void skibidigfx_glCreateRenderbuffers(GLsizei n, GLuint* renderbuffers)
    {
    
    real_glCreateRenderbuffers(n,renderbuffers);
    }
void(__stdcall *real_glNamedRenderbufferStorage)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glNamedRenderbufferStorage(renderbuffer,internalformat,width,height);
    }
void(__stdcall *real_glNamedRenderbufferStorageMultisample)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glNamedRenderbufferStorageMultisample(renderbuffer,samples,internalformat,width,height);
    }
void(__stdcall *real_glGetNamedRenderbufferParameteriv)(GLuint renderbuffer, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint* params)
    {
    
    real_glGetNamedRenderbufferParameteriv(renderbuffer,pname,params);
    }
void(__stdcall *real_glCreateTextures)(GLenum target, GLsizei n, GLuint* textures) = 0;
    void skibidigfx_glCreateTextures(GLenum target, GLsizei n, GLuint* textures)
    {
    
    real_glCreateTextures(target,n,textures);
    }
void(__stdcall *real_glTextureBuffer)(GLuint texture, GLenum internalformat, GLuint buffer) = 0;
    void skibidigfx_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)
    {
    
    real_glTextureBuffer(texture,internalformat,buffer);
    }
void(__stdcall *real_glTextureBufferRange)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) = 0;
    void skibidigfx_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    real_glTextureBufferRange(texture,internalformat,buffer,offset,size);
    }
void(__stdcall *real_glTextureStorage1D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) = 0;
    void skibidigfx_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
    {
    
    real_glTextureStorage1D(texture,levels,internalformat,width);
    }
void(__stdcall *real_glTextureStorage2D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glTextureStorage2D(texture,levels,internalformat,width,height);
    }
void(__stdcall *real_glTextureStorage3D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = 0;
    void skibidigfx_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    real_glTextureStorage3D(texture,levels,internalformat,width,height,depth);
    }
void(__stdcall *real_glTextureStorage2DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
    {
    
    real_glTextureStorage2DMultisample(texture,samples,internalformat,width,height,fixedsamplelocations);
    }
void(__stdcall *real_glTextureStorage3DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
    {
    
    real_glTextureStorage3DMultisample(texture,samples,internalformat,width,height,depth,fixedsamplelocations);
    }
void(__stdcall *real_glTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureSubImage1D(texture,level,xoffset,width,format,type,pixels);
    }
void(__stdcall *real_glTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureSubImage2D(texture,level,xoffset,yoffset,width,height,format,type,pixels);
    }
void(__stdcall *real_glTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureSubImage3D(texture,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
    }
void(__stdcall *real_glCompressedTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTextureSubImage1D(texture,level,xoffset,width,format,imageSize,data);
    }
void(__stdcall *real_glCompressedTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTextureSubImage2D(texture,level,xoffset,yoffset,width,height,format,imageSize,data);
    }
void(__stdcall *real_glCompressedTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTextureSubImage3D(texture,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);
    }
void(__stdcall *real_glCopyTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyTextureSubImage1D(texture,level,xoffset,x,y,width);
    }
void(__stdcall *real_glCopyTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyTextureSubImage2D(texture,level,xoffset,yoffset,x,y,width,height);
    }
void(__stdcall *real_glCopyTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyTextureSubImage3D(texture,level,xoffset,yoffset,zoffset,x,y,width,height);
    }
void(__stdcall *real_glTextureParameterf)(GLuint texture, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glTextureParameterf(GLuint texture, GLenum pname, GLfloat param)
    {
    
    real_glTextureParameterf(texture,pname,param);
    }
void(__stdcall *real_glTextureParameterfv)(GLuint texture, GLenum pname, const GLfloat* param) = 0;
    void skibidigfx_glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat* param)
    {
    
    real_glTextureParameterfv(texture,pname,param);
    }
void(__stdcall *real_glTextureParameteri)(GLuint texture, GLenum pname, GLint param) = 0;
    void skibidigfx_glTextureParameteri(GLuint texture, GLenum pname, GLint param)
    {
    
    real_glTextureParameteri(texture,pname,param);
    }
void(__stdcall *real_glTextureParameterIiv)(GLuint texture, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint* params)
    {
    
    real_glTextureParameterIiv(texture,pname,params);
    }
void(__stdcall *real_glTextureParameterIuiv)(GLuint texture, GLenum pname, const GLuint* params) = 0;
    void skibidigfx_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint* params)
    {
    
    real_glTextureParameterIuiv(texture,pname,params);
    }
void(__stdcall *real_glTextureParameteriv)(GLuint texture, GLenum pname, const GLint* param) = 0;
    void skibidigfx_glTextureParameteriv(GLuint texture, GLenum pname, const GLint* param)
    {
    
    real_glTextureParameteriv(texture,pname,param);
    }
void(__stdcall *real_glGenerateTextureMipmap)(GLuint texture) = 0;
    void skibidigfx_glGenerateTextureMipmap(GLuint texture)
    {
    
    real_glGenerateTextureMipmap(texture);
    }
void(__stdcall *real_glBindTextureUnit)(GLuint unit, GLuint texture) = 0;
    void skibidigfx_glBindTextureUnit(GLuint unit, GLuint texture)
    {
    
    real_glBindTextureUnit(unit,texture);
    }
void(__stdcall *real_glGetTextureImage)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels) = 0;
    void skibidigfx_glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
    {
    
    real_glGetTextureImage(texture,level,format,type,bufSize,pixels);
    }
void(__stdcall *real_glGetCompressedTextureImage)(GLuint texture, GLint level, GLsizei bufSize, void* pixels) = 0;
    void skibidigfx_glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void* pixels)
    {
    
    real_glGetCompressedTextureImage(texture,level,bufSize,pixels);
    }
void(__stdcall *real_glGetTextureLevelParameterfv)(GLuint texture, GLint level, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat* params)
    {
    
    real_glGetTextureLevelParameterfv(texture,level,pname,params);
    }
void(__stdcall *real_glGetTextureLevelParameteriv)(GLuint texture, GLint level, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint* params)
    {
    
    real_glGetTextureLevelParameteriv(texture,level,pname,params);
    }
void(__stdcall *real_glGetTextureParameterfv)(GLuint texture, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat* params)
    {
    
    real_glGetTextureParameterfv(texture,pname,params);
    }
void(__stdcall *real_glGetTextureParameterIiv)(GLuint texture, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint* params)
    {
    
    real_glGetTextureParameterIiv(texture,pname,params);
    }
void(__stdcall *real_glGetTextureParameterIuiv)(GLuint texture, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint* params)
    {
    
    real_glGetTextureParameterIuiv(texture,pname,params);
    }
void(__stdcall *real_glGetTextureParameteriv)(GLuint texture, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTextureParameteriv(GLuint texture, GLenum pname, GLint* params)
    {
    
    real_glGetTextureParameteriv(texture,pname,params);
    }
void(__stdcall *real_glCreateVertexArrays)(GLsizei n, GLuint* arrays) = 0;
    void skibidigfx_glCreateVertexArrays(GLsizei n, GLuint* arrays)
    {
    
    real_glCreateVertexArrays(n,arrays);
    }
void(__stdcall *real_glDisableVertexArrayAttrib)(GLuint vaobj, GLuint index) = 0;
    void skibidigfx_glDisableVertexArrayAttrib(GLuint vaobj, GLuint index)
    {
    
    real_glDisableVertexArrayAttrib(vaobj,index);
    }
void(__stdcall *real_glEnableVertexArrayAttrib)(GLuint vaobj, GLuint index) = 0;
    void skibidigfx_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index)
    {
    
    real_glEnableVertexArrayAttrib(vaobj,index);
    }
void(__stdcall *real_glVertexArrayElementBuffer)(GLuint vaobj, GLuint buffer) = 0;
    void skibidigfx_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer)
    {
    
    real_glVertexArrayElementBuffer(vaobj,buffer);
    }
void(__stdcall *real_glVertexArrayVertexBuffer)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = 0;
    void skibidigfx_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
    {
    
    real_glVertexArrayVertexBuffer(vaobj,bindingindex,buffer,offset,stride);
    }
void(__stdcall *real_glVertexArrayVertexBuffers)(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides) = 0;
    void skibidigfx_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides)
    {
    
    real_glVertexArrayVertexBuffers(vaobj,first,count,buffers,offsets,strides);
    }
void(__stdcall *real_glVertexArrayAttribBinding)(GLuint vaobj, GLuint attribindex, GLuint bindingindex) = 0;
    void skibidigfx_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
    {
    
    real_glVertexArrayAttribBinding(vaobj,attribindex,bindingindex);
    }
void(__stdcall *real_glVertexArrayAttribFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
    {
    
    real_glVertexArrayAttribFormat(vaobj,attribindex,size,type,normalized,relativeoffset);
    }
void(__stdcall *real_glVertexArrayAttribIFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    real_glVertexArrayAttribIFormat(vaobj,attribindex,size,type,relativeoffset);
    }
void(__stdcall *real_glVertexArrayAttribLFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    real_glVertexArrayAttribLFormat(vaobj,attribindex,size,type,relativeoffset);
    }
void(__stdcall *real_glVertexArrayBindingDivisor)(GLuint vaobj, GLuint bindingindex, GLuint divisor) = 0;
    void skibidigfx_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)
    {
    
    real_glVertexArrayBindingDivisor(vaobj,bindingindex,divisor);
    }
void(__stdcall *real_glGetVertexArrayiv)(GLuint vaobj, GLenum pname, GLint* param) = 0;
    void skibidigfx_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint* param)
    {
    
    real_glGetVertexArrayiv(vaobj,pname,param);
    }
void(__stdcall *real_glGetVertexArrayIndexediv)(GLuint vaobj, GLuint index, GLenum pname, GLint* param) = 0;
    void skibidigfx_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint* param)
    {
    
    real_glGetVertexArrayIndexediv(vaobj,index,pname,param);
    }
void(__stdcall *real_glGetVertexArrayIndexed64iv)(GLuint vaobj, GLuint index, GLenum pname, GLint64* param) = 0;
    void skibidigfx_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64* param)
    {
    
    real_glGetVertexArrayIndexed64iv(vaobj,index,pname,param);
    }
void(__stdcall *real_glCreateSamplers)(GLsizei n, GLuint* samplers) = 0;
    void skibidigfx_glCreateSamplers(GLsizei n, GLuint* samplers)
    {
    
    real_glCreateSamplers(n,samplers);
    }
void(__stdcall *real_glCreateProgramPipelines)(GLsizei n, GLuint* pipelines) = 0;
    void skibidigfx_glCreateProgramPipelines(GLsizei n, GLuint* pipelines)
    {
    
    real_glCreateProgramPipelines(n,pipelines);
    }
void(__stdcall *real_glCreateQueries)(GLenum target, GLsizei n, GLuint* ids) = 0;
    void skibidigfx_glCreateQueries(GLenum target, GLsizei n, GLuint* ids)
    {
    
    real_glCreateQueries(target,n,ids);
    }
void(__stdcall *real_glGetQueryBufferObjecti64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = 0;
    void skibidigfx_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
    {
    
    real_glGetQueryBufferObjecti64v(id,buffer,pname,offset);
    }
void(__stdcall *real_glGetQueryBufferObjectiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = 0;
    void skibidigfx_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
    {
    
    real_glGetQueryBufferObjectiv(id,buffer,pname,offset);
    }
void(__stdcall *real_glGetQueryBufferObjectui64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = 0;
    void skibidigfx_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
    {
    
    real_glGetQueryBufferObjectui64v(id,buffer,pname,offset);
    }
void(__stdcall *real_glGetQueryBufferObjectuiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) = 0;
    void skibidigfx_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
    {
    
    real_glGetQueryBufferObjectuiv(id,buffer,pname,offset);
    }
void(__stdcall *real_glMemoryBarrierByRegion)(GLbitfield barriers) = 0;
    void skibidigfx_glMemoryBarrierByRegion(GLbitfield barriers)
    {
    
    real_glMemoryBarrierByRegion(barriers);
    }
void(__stdcall *real_glGetTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels) = 0;
    void skibidigfx_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
    {
    
    real_glGetTextureSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth,format,type,bufSize,pixels);
    }
void(__stdcall *real_glGetCompressedTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels) = 0;
    void skibidigfx_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels)
    {
    
    real_glGetCompressedTextureSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth,bufSize,pixels);
    }
GLenum(__stdcall *real_glGetGraphicsResetStatus)() = 0;
    GLenum skibidigfx_glGetGraphicsResetStatus()
    {
    
    return real_glGetGraphicsResetStatus();
    }
void(__stdcall *real_glGetnCompressedTexImage)(GLenum target, GLint lod, GLsizei bufSize, void* pixels) = 0;
    void skibidigfx_glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void* pixels)
    {
    
    real_glGetnCompressedTexImage(target,lod,bufSize,pixels);
    }
void(__stdcall *real_glGetnTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels) = 0;
    void skibidigfx_glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
    {
    
    real_glGetnTexImage(target,level,format,type,bufSize,pixels);
    }
void(__stdcall *real_glGetnUniformdv)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params) = 0;
    void skibidigfx_glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble* params)
    {
    
    real_glGetnUniformdv(program,location,bufSize,params);
    }
void(__stdcall *real_glGetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params) = 0;
    void skibidigfx_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat* params)
    {
    
    real_glGetnUniformfv(program,location,bufSize,params);
    }
void(__stdcall *real_glGetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint* params) = 0;
    void skibidigfx_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint* params)
    {
    
    real_glGetnUniformiv(program,location,bufSize,params);
    }
void(__stdcall *real_glGetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint* params) = 0;
    void skibidigfx_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint* params)
    {
    
    real_glGetnUniformuiv(program,location,bufSize,params);
    }
void(__stdcall *real_glReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data) = 0;
    void skibidigfx_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data)
    {
    
    real_glReadnPixels(x,y,width,height,format,type,bufSize,data);
    }
void(__stdcall *real_glGetnMapdv)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v) = 0;
    void skibidigfx_glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v)
    {
    
    real_glGetnMapdv(target,query,bufSize,v);
    }
void(__stdcall *real_glGetnMapfv)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v) = 0;
    void skibidigfx_glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v)
    {
    
    real_glGetnMapfv(target,query,bufSize,v);
    }
void(__stdcall *real_glGetnMapiv)(GLenum target, GLenum query, GLsizei bufSize, GLint* v) = 0;
    void skibidigfx_glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint* v)
    {
    
    real_glGetnMapiv(target,query,bufSize,v);
    }
void(__stdcall *real_glGetnPixelMapfv)(GLenum map, GLsizei bufSize, GLfloat* values) = 0;
    void skibidigfx_glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat* values)
    {
    
    real_glGetnPixelMapfv(map,bufSize,values);
    }
void(__stdcall *real_glGetnPixelMapuiv)(GLenum map, GLsizei bufSize, GLuint* values) = 0;
    void skibidigfx_glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint* values)
    {
    
    real_glGetnPixelMapuiv(map,bufSize,values);
    }
void(__stdcall *real_glGetnPixelMapusv)(GLenum map, GLsizei bufSize, GLushort* values) = 0;
    void skibidigfx_glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort* values)
    {
    
    real_glGetnPixelMapusv(map,bufSize,values);
    }
void(__stdcall *real_glGetnPolygonStipple)(GLsizei bufSize, GLubyte* pattern) = 0;
    void skibidigfx_glGetnPolygonStipple(GLsizei bufSize, GLubyte* pattern)
    {
    
    real_glGetnPolygonStipple(bufSize,pattern);
    }
void(__stdcall *real_glGetnColorTable)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table) = 0;
    void skibidigfx_glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table)
    {
    
    real_glGetnColorTable(target,format,type,bufSize,table);
    }
void(__stdcall *real_glGetnConvolutionFilter)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image) = 0;
    void skibidigfx_glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image)
    {
    
    real_glGetnConvolutionFilter(target,format,type,bufSize,image);
    }
void(__stdcall *real_glGetnSeparableFilter)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span) = 0;
    void skibidigfx_glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span)
    {
    
    real_glGetnSeparableFilter(target,format,type,rowBufSize,row,columnBufSize,column,span);
    }
void(__stdcall *real_glGetnHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values) = 0;
    void skibidigfx_glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
    {
    
    real_glGetnHistogram(target,reset,format,type,bufSize,values);
    }
void(__stdcall *real_glGetnMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values) = 0;
    void skibidigfx_glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
    {
    
    real_glGetnMinmax(target,reset,format,type,bufSize,values);
    }
void(__stdcall *real_glTextureBarrier)() = 0;
    void skibidigfx_glTextureBarrier()
    {
    
    real_glTextureBarrier();
    }
void(__stdcall *real_glSpecializeShader)(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue) = 0;
    void skibidigfx_glSpecializeShader(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue)
    {
    
    real_glSpecializeShader(shader,pEntryPoint,numSpecializationConstants,pConstantIndex,pConstantValue);
    }
void(__stdcall *real_glMultiDrawArraysIndirectCount)(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawArraysIndirectCount(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    real_glMultiDrawArraysIndirectCount(mode,indirect,drawcount,maxdrawcount,stride);
    }
void(__stdcall *real_glMultiDrawElementsIndirectCount)(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    real_glMultiDrawElementsIndirectCount(mode,type,indirect,drawcount,maxdrawcount,stride);
    }
void(__stdcall *real_glPolygonOffsetClamp)(GLfloat factor, GLfloat units, GLfloat clamp) = 0;
    void skibidigfx_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp)
    {
    
    real_glPolygonOffsetClamp(factor,units,clamp);
    }
void(__stdcall *real_glPrimitiveBoundingBoxARB)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) = 0;
    void skibidigfx_glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
    {
    
    real_glPrimitiveBoundingBoxARB(minX,minY,minZ,minW,maxX,maxY,maxZ,maxW);
    }
GLuint64(__stdcall *real_glGetTextureHandleARB)(GLuint texture) = 0;
    GLuint64 skibidigfx_glGetTextureHandleARB(GLuint texture)
    {
    
    return real_glGetTextureHandleARB(texture);
    }
GLuint64(__stdcall *real_glGetTextureSamplerHandleARB)(GLuint texture, GLuint sampler) = 0;
    GLuint64 skibidigfx_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
    {
    
    return real_glGetTextureSamplerHandleARB(texture,sampler);
    }
void(__stdcall *real_glMakeTextureHandleResidentARB)(GLuint64 handle) = 0;
    void skibidigfx_glMakeTextureHandleResidentARB(GLuint64 handle)
    {
    
    real_glMakeTextureHandleResidentARB(handle);
    }
void(__stdcall *real_glMakeTextureHandleNonResidentARB)(GLuint64 handle) = 0;
    void skibidigfx_glMakeTextureHandleNonResidentARB(GLuint64 handle)
    {
    
    real_glMakeTextureHandleNonResidentARB(handle);
    }
GLuint64(__stdcall *real_glGetImageHandleARB)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) = 0;
    GLuint64 skibidigfx_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
    {
    
    return real_glGetImageHandleARB(texture,level,layered,layer,format);
    }
void(__stdcall *real_glMakeImageHandleResidentARB)(GLuint64 handle, GLenum access) = 0;
    void skibidigfx_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
    {
    
    real_glMakeImageHandleResidentARB(handle,access);
    }
void(__stdcall *real_glMakeImageHandleNonResidentARB)(GLuint64 handle) = 0;
    void skibidigfx_glMakeImageHandleNonResidentARB(GLuint64 handle)
    {
    
    real_glMakeImageHandleNonResidentARB(handle);
    }
void(__stdcall *real_glUniformHandleui64ARB)(GLint location, GLuint64 value) = 0;
    void skibidigfx_glUniformHandleui64ARB(GLint location, GLuint64 value)
    {
    
    real_glUniformHandleui64ARB(location,value);
    }
void(__stdcall *real_glUniformHandleui64vARB)(GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glUniformHandleui64vARB(location,count,value);
    }
void(__stdcall *real_glProgramUniformHandleui64ARB)(GLuint program, GLint location, GLuint64 value) = 0;
    void skibidigfx_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
    {
    
    real_glProgramUniformHandleui64ARB(program,location,value);
    }
void(__stdcall *real_glProgramUniformHandleui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64* values) = 0;
    void skibidigfx_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* values)
    {
    
    real_glProgramUniformHandleui64vARB(program,location,count,values);
    }
GLboolean(__stdcall *real_glIsTextureHandleResidentARB)(GLuint64 handle) = 0;
    GLboolean skibidigfx_glIsTextureHandleResidentARB(GLuint64 handle)
    {
    
    return real_glIsTextureHandleResidentARB(handle);
    }
GLboolean(__stdcall *real_glIsImageHandleResidentARB)(GLuint64 handle) = 0;
    GLboolean skibidigfx_glIsImageHandleResidentARB(GLuint64 handle)
    {
    
    return real_glIsImageHandleResidentARB(handle);
    }
void(__stdcall *real_glVertexAttribL1ui64ARB)(GLuint index, GLuint64EXT x) = 0;
    void skibidigfx_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
    {
    
    real_glVertexAttribL1ui64ARB(index,x);
    }
void(__stdcall *real_glVertexAttribL1ui64vARB)(GLuint index, const GLuint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT* v)
    {
    
    real_glVertexAttribL1ui64vARB(index,v);
    }
void(__stdcall *real_glGetVertexAttribLui64vARB)(GLuint index, GLenum pname, GLuint64EXT* params) = 0;
    void skibidigfx_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT* params)
    {
    
    real_glGetVertexAttribLui64vARB(index,pname,params);
    }
GLsync(__stdcall *real_glCreateSyncFromCLeventARB)(struct _cl_context* context, struct _cl_event* event, GLbitfield flags) = 0;
    GLsync skibidigfx_glCreateSyncFromCLeventARB(struct _cl_context* context, struct _cl_event* event, GLbitfield flags)
    {
    
    return real_glCreateSyncFromCLeventARB(context,event,flags);
    }
void(__stdcall *real_glClampColorARB)(GLenum target, GLenum clamp) = 0;
    void skibidigfx_glClampColorARB(GLenum target, GLenum clamp)
    {
    
    real_glClampColorARB(target,clamp);
    }
void(__stdcall *real_glDispatchComputeGroupSizeARB)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) = 0;
    void skibidigfx_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
    {
    
    real_glDispatchComputeGroupSizeARB(num_groups_x,num_groups_y,num_groups_z,group_size_x,group_size_y,group_size_z);
    }
void(__stdcall *real_glDebugMessageControlARB)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled) = 0;
    void skibidigfx_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
    {
    
    real_glDebugMessageControlARB(source,type,severity,count,ids,enabled);
    }
void(__stdcall *real_glDebugMessageInsertARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf) = 0;
    void skibidigfx_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf)
    {
    
    real_glDebugMessageInsertARB(source,type,id,severity,length,buf);
    }
void(__stdcall *real_glDebugMessageCallbackARB)(GLDEBUGPROCARB callback, const void* userParam) = 0;
    void skibidigfx_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void* userParam)
    {
    
    real_glDebugMessageCallbackARB(callback,userParam);
    }
GLuint(__stdcall *real_glGetDebugMessageLogARB)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog) = 0;
    GLuint skibidigfx_glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog)
    {
    
    return real_glGetDebugMessageLogARB(count,bufSize,sources,types,ids,severities,lengths,messageLog);
    }
void(__stdcall *real_glDrawBuffersARB)(GLsizei n, const GLenum* bufs) = 0;
    void skibidigfx_glDrawBuffersARB(GLsizei n, const GLenum* bufs)
    {
    
    real_glDrawBuffersARB(n,bufs);
    }
void(__stdcall *real_glBlendEquationiARB)(GLuint buf, GLenum mode) = 0;
    void skibidigfx_glBlendEquationiARB(GLuint buf, GLenum mode)
    {
    
    real_glBlendEquationiARB(buf,mode);
    }
void(__stdcall *real_glBlendEquationSeparateiARB)(GLuint buf, GLenum modeRGB, GLenum modeAlpha) = 0;
    void skibidigfx_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
    {
    
    real_glBlendEquationSeparateiARB(buf,modeRGB,modeAlpha);
    }
void(__stdcall *real_glBlendFunciARB)(GLuint buf, GLenum src, GLenum dst) = 0;
    void skibidigfx_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
    {
    
    real_glBlendFunciARB(buf,src,dst);
    }
void(__stdcall *real_glBlendFuncSeparateiARB)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) = 0;
    void skibidigfx_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
    {
    
    real_glBlendFuncSeparateiARB(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);
    }
void(__stdcall *real_glDrawArraysInstancedARB)(GLenum mode, GLint first, GLsizei count, GLsizei primcount) = 0;
    void skibidigfx_glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
    {
    
    real_glDrawArraysInstancedARB(mode,first,count,primcount);
    }
void(__stdcall *real_glDrawElementsInstancedARB)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount) = 0;
    void skibidigfx_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)
    {
    
    real_glDrawElementsInstancedARB(mode,count,type,indices,primcount);
    }
void(__stdcall *real_glProgramStringARB)(GLenum target, GLenum format, GLsizei len, const void* string) = 0;
    void skibidigfx_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void* string)
    {
    
    real_glProgramStringARB(target,format,len,string);
    }
void(__stdcall *real_glBindProgramARB)(GLenum target, GLuint program) = 0;
    void skibidigfx_glBindProgramARB(GLenum target, GLuint program)
    {
    
    real_glBindProgramARB(target,program);
    }
void(__stdcall *real_glDeleteProgramsARB)(GLsizei n, const GLuint* programs) = 0;
    void skibidigfx_glDeleteProgramsARB(GLsizei n, const GLuint* programs)
    {
    
    real_glDeleteProgramsARB(n,programs);
    }
void(__stdcall *real_glGenProgramsARB)(GLsizei n, GLuint* programs) = 0;
    void skibidigfx_glGenProgramsARB(GLsizei n, GLuint* programs)
    {
    
    real_glGenProgramsARB(n,programs);
    }
void(__stdcall *real_glProgramEnvParameter4dARB)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glProgramEnvParameter4dARB(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramEnvParameter4dvARB)(GLenum target, GLuint index, const GLdouble* params) = 0;
    void skibidigfx_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble* params)
    {
    
    real_glProgramEnvParameter4dvARB(target,index,params);
    }
void(__stdcall *real_glProgramEnvParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glProgramEnvParameter4fARB(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramEnvParameter4fvARB)(GLenum target, GLuint index, const GLfloat* params) = 0;
    void skibidigfx_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat* params)
    {
    
    real_glProgramEnvParameter4fvARB(target,index,params);
    }
void(__stdcall *real_glProgramLocalParameter4dARB)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glProgramLocalParameter4dARB(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramLocalParameter4dvARB)(GLenum target, GLuint index, const GLdouble* params) = 0;
    void skibidigfx_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble* params)
    {
    
    real_glProgramLocalParameter4dvARB(target,index,params);
    }
void(__stdcall *real_glProgramLocalParameter4fARB)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glProgramLocalParameter4fARB(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramLocalParameter4fvARB)(GLenum target, GLuint index, const GLfloat* params) = 0;
    void skibidigfx_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat* params)
    {
    
    real_glProgramLocalParameter4fvARB(target,index,params);
    }
void(__stdcall *real_glGetProgramEnvParameterdvARB)(GLenum target, GLuint index, GLdouble* params) = 0;
    void skibidigfx_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble* params)
    {
    
    real_glGetProgramEnvParameterdvARB(target,index,params);
    }
void(__stdcall *real_glGetProgramEnvParameterfvARB)(GLenum target, GLuint index, GLfloat* params) = 0;
    void skibidigfx_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat* params)
    {
    
    real_glGetProgramEnvParameterfvARB(target,index,params);
    }
void(__stdcall *real_glGetProgramLocalParameterdvARB)(GLenum target, GLuint index, GLdouble* params) = 0;
    void skibidigfx_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble* params)
    {
    
    real_glGetProgramLocalParameterdvARB(target,index,params);
    }
void(__stdcall *real_glGetProgramLocalParameterfvARB)(GLenum target, GLuint index, GLfloat* params) = 0;
    void skibidigfx_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat* params)
    {
    
    real_glGetProgramLocalParameterfvARB(target,index,params);
    }
void(__stdcall *real_glGetProgramivARB)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetProgramivARB(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetProgramivARB(target,pname,params);
    }
void(__stdcall *real_glGetProgramStringARB)(GLenum target, GLenum pname, void* string) = 0;
    void skibidigfx_glGetProgramStringARB(GLenum target, GLenum pname, void* string)
    {
    
    real_glGetProgramStringARB(target,pname,string);
    }
GLboolean(__stdcall *real_glIsProgramARB)(GLuint program) = 0;
    GLboolean skibidigfx_glIsProgramARB(GLuint program)
    {
    
    return real_glIsProgramARB(program);
    }
void(__stdcall *real_glProgramParameteriARB)(GLuint program, GLenum pname, GLint value) = 0;
    void skibidigfx_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
    {
    
    real_glProgramParameteriARB(program,pname,value);
    }
void(__stdcall *real_glFramebufferTextureARB)(GLenum target, GLenum attachment, GLuint texture, GLint level) = 0;
    void skibidigfx_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
    {
    
    real_glFramebufferTextureARB(target,attachment,texture,level);
    }
void(__stdcall *real_glFramebufferTextureLayerARB)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) = 0;
    void skibidigfx_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    real_glFramebufferTextureLayerARB(target,attachment,texture,level,layer);
    }
void(__stdcall *real_glFramebufferTextureFaceARB)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) = 0;
    void skibidigfx_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
    {
    
    real_glFramebufferTextureFaceARB(target,attachment,texture,level,face);
    }
void(__stdcall *real_glSpecializeShaderARB)(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue) = 0;
    void skibidigfx_glSpecializeShaderARB(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue)
    {
    
    real_glSpecializeShaderARB(shader,pEntryPoint,numSpecializationConstants,pConstantIndex,pConstantValue);
    }
void(__stdcall *real_glUniform1i64ARB)(GLint location, GLint64 x) = 0;
    void skibidigfx_glUniform1i64ARB(GLint location, GLint64 x)
    {
    
    real_glUniform1i64ARB(location,x);
    }
void(__stdcall *real_glUniform2i64ARB)(GLint location, GLint64 x, GLint64 y) = 0;
    void skibidigfx_glUniform2i64ARB(GLint location, GLint64 x, GLint64 y)
    {
    
    real_glUniform2i64ARB(location,x,y);
    }
void(__stdcall *real_glUniform3i64ARB)(GLint location, GLint64 x, GLint64 y, GLint64 z) = 0;
    void skibidigfx_glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z)
    {
    
    real_glUniform3i64ARB(location,x,y,z);
    }
void(__stdcall *real_glUniform4i64ARB)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) = 0;
    void skibidigfx_glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
    {
    
    real_glUniform4i64ARB(location,x,y,z,w);
    }
void(__stdcall *real_glUniform1i64vARB)(GLint location, GLsizei count, const GLint64* value) = 0;
    void skibidigfx_glUniform1i64vARB(GLint location, GLsizei count, const GLint64* value)
    {
    
    real_glUniform1i64vARB(location,count,value);
    }
void(__stdcall *real_glUniform2i64vARB)(GLint location, GLsizei count, const GLint64* value) = 0;
    void skibidigfx_glUniform2i64vARB(GLint location, GLsizei count, const GLint64* value)
    {
    
    real_glUniform2i64vARB(location,count,value);
    }
void(__stdcall *real_glUniform3i64vARB)(GLint location, GLsizei count, const GLint64* value) = 0;
    void skibidigfx_glUniform3i64vARB(GLint location, GLsizei count, const GLint64* value)
    {
    
    real_glUniform3i64vARB(location,count,value);
    }
void(__stdcall *real_glUniform4i64vARB)(GLint location, GLsizei count, const GLint64* value) = 0;
    void skibidigfx_glUniform4i64vARB(GLint location, GLsizei count, const GLint64* value)
    {
    
    real_glUniform4i64vARB(location,count,value);
    }
void(__stdcall *real_glUniform1ui64ARB)(GLint location, GLuint64 x) = 0;
    void skibidigfx_glUniform1ui64ARB(GLint location, GLuint64 x)
    {
    
    real_glUniform1ui64ARB(location,x);
    }
void(__stdcall *real_glUniform2ui64ARB)(GLint location, GLuint64 x, GLuint64 y) = 0;
    void skibidigfx_glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y)
    {
    
    real_glUniform2ui64ARB(location,x,y);
    }
void(__stdcall *real_glUniform3ui64ARB)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) = 0;
    void skibidigfx_glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
    {
    
    real_glUniform3ui64ARB(location,x,y,z);
    }
void(__stdcall *real_glUniform4ui64ARB)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) = 0;
    void skibidigfx_glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
    {
    
    real_glUniform4ui64ARB(location,x,y,z,w);
    }
void(__stdcall *real_glUniform1ui64vARB)(GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glUniform1ui64vARB(location,count,value);
    }
void(__stdcall *real_glUniform2ui64vARB)(GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glUniform2ui64vARB(location,count,value);
    }
void(__stdcall *real_glUniform3ui64vARB)(GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glUniform3ui64vARB(location,count,value);
    }
void(__stdcall *real_glUniform4ui64vARB)(GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glUniform4ui64vARB(location,count,value);
    }
void(__stdcall *real_glGetUniformi64vARB)(GLuint program, GLint location, GLint64* params) = 0;
    void skibidigfx_glGetUniformi64vARB(GLuint program, GLint location, GLint64* params)
    {
    
    real_glGetUniformi64vARB(program,location,params);
    }
void(__stdcall *real_glGetUniformui64vARB)(GLuint program, GLint location, GLuint64* params) = 0;
    void skibidigfx_glGetUniformui64vARB(GLuint program, GLint location, GLuint64* params)
    {
    
    real_glGetUniformui64vARB(program,location,params);
    }
void(__stdcall *real_glGetnUniformi64vARB)(GLuint program, GLint location, GLsizei bufSize, GLint64* params) = 0;
    void skibidigfx_glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64* params)
    {
    
    real_glGetnUniformi64vARB(program,location,bufSize,params);
    }
void(__stdcall *real_glGetnUniformui64vARB)(GLuint program, GLint location, GLsizei bufSize, GLuint64* params) = 0;
    void skibidigfx_glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64* params)
    {
    
    real_glGetnUniformui64vARB(program,location,bufSize,params);
    }
void(__stdcall *real_glProgramUniform1i64ARB)(GLuint program, GLint location, GLint64 x) = 0;
    void skibidigfx_glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x)
    {
    
    real_glProgramUniform1i64ARB(program,location,x);
    }
void(__stdcall *real_glProgramUniform2i64ARB)(GLuint program, GLint location, GLint64 x, GLint64 y) = 0;
    void skibidigfx_glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y)
    {
    
    real_glProgramUniform2i64ARB(program,location,x,y);
    }
void(__stdcall *real_glProgramUniform3i64ARB)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) = 0;
    void skibidigfx_glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)
    {
    
    real_glProgramUniform3i64ARB(program,location,x,y,z);
    }
void(__stdcall *real_glProgramUniform4i64ARB)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) = 0;
    void skibidigfx_glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
    {
    
    real_glProgramUniform4i64ARB(program,location,x,y,z,w);
    }
void(__stdcall *real_glProgramUniform1i64vARB)(GLuint program, GLint location, GLsizei count, const GLint64* value) = 0;
    void skibidigfx_glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64* value)
    {
    
    real_glProgramUniform1i64vARB(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2i64vARB)(GLuint program, GLint location, GLsizei count, const GLint64* value) = 0;
    void skibidigfx_glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64* value)
    {
    
    real_glProgramUniform2i64vARB(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3i64vARB)(GLuint program, GLint location, GLsizei count, const GLint64* value) = 0;
    void skibidigfx_glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64* value)
    {
    
    real_glProgramUniform3i64vARB(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4i64vARB)(GLuint program, GLint location, GLsizei count, const GLint64* value) = 0;
    void skibidigfx_glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64* value)
    {
    
    real_glProgramUniform4i64vARB(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform1ui64ARB)(GLuint program, GLint location, GLuint64 x) = 0;
    void skibidigfx_glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x)
    {
    
    real_glProgramUniform1ui64ARB(program,location,x);
    }
void(__stdcall *real_glProgramUniform2ui64ARB)(GLuint program, GLint location, GLuint64 x, GLuint64 y) = 0;
    void skibidigfx_glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y)
    {
    
    real_glProgramUniform2ui64ARB(program,location,x,y);
    }
void(__stdcall *real_glProgramUniform3ui64ARB)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) = 0;
    void skibidigfx_glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
    {
    
    real_glProgramUniform3ui64ARB(program,location,x,y,z);
    }
void(__stdcall *real_glProgramUniform4ui64ARB)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) = 0;
    void skibidigfx_glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
    {
    
    real_glProgramUniform4ui64ARB(program,location,x,y,z,w);
    }
void(__stdcall *real_glProgramUniform1ui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glProgramUniform1ui64vARB(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2ui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glProgramUniform2ui64vARB(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3ui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glProgramUniform3ui64vARB(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4ui64vARB)(GLuint program, GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glProgramUniform4ui64vARB(program,location,count,value);
    }
void(__stdcall *real_glColorTable)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table) = 0;
    void skibidigfx_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table)
    {
    
    real_glColorTable(target,internalformat,width,format,type,table);
    }
void(__stdcall *real_glColorTableParameterfv)(GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glColorTableParameterfv(target,pname,params);
    }
void(__stdcall *real_glColorTableParameteriv)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glColorTableParameteriv(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glColorTableParameteriv(target,pname,params);
    }
void(__stdcall *real_glCopyColorTable)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyColorTable(target,internalformat,x,y,width);
    }
void(__stdcall *real_glGetColorTable)(GLenum target, GLenum format, GLenum type, void* table) = 0;
    void skibidigfx_glGetColorTable(GLenum target, GLenum format, GLenum type, void* table)
    {
    
    real_glGetColorTable(target,format,type,table);
    }
void(__stdcall *real_glGetColorTableParameterfv)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetColorTableParameterfv(target,pname,params);
    }
void(__stdcall *real_glGetColorTableParameteriv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetColorTableParameteriv(target,pname,params);
    }
void(__stdcall *real_glColorSubTable)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data)
    {
    
    real_glColorSubTable(target,start,count,format,type,data);
    }
void(__stdcall *real_glCopyColorSubTable)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyColorSubTable(target,start,x,y,width);
    }
void(__stdcall *real_glConvolutionFilter1D)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image) = 0;
    void skibidigfx_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image)
    {
    
    real_glConvolutionFilter1D(target,internalformat,width,format,type,image);
    }
void(__stdcall *real_glConvolutionFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image) = 0;
    void skibidigfx_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image)
    {
    
    real_glConvolutionFilter2D(target,internalformat,width,height,format,type,image);
    }
void(__stdcall *real_glConvolutionParameterf)(GLenum target, GLenum pname, GLfloat params) = 0;
    void skibidigfx_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
    {
    
    real_glConvolutionParameterf(target,pname,params);
    }
void(__stdcall *real_glConvolutionParameterfv)(GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glConvolutionParameterfv(target,pname,params);
    }
void(__stdcall *real_glConvolutionParameteri)(GLenum target, GLenum pname, GLint params) = 0;
    void skibidigfx_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
    {
    
    real_glConvolutionParameteri(target,pname,params);
    }
void(__stdcall *real_glConvolutionParameteriv)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glConvolutionParameteriv(target,pname,params);
    }
void(__stdcall *real_glCopyConvolutionFilter1D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyConvolutionFilter1D(target,internalformat,x,y,width);
    }
void(__stdcall *real_glCopyConvolutionFilter2D)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyConvolutionFilter2D(target,internalformat,x,y,width,height);
    }
void(__stdcall *real_glGetConvolutionFilter)(GLenum target, GLenum format, GLenum type, void* image) = 0;
    void skibidigfx_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void* image)
    {
    
    real_glGetConvolutionFilter(target,format,type,image);
    }
void(__stdcall *real_glGetConvolutionParameterfv)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetConvolutionParameterfv(target,pname,params);
    }
void(__stdcall *real_glGetConvolutionParameteriv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetConvolutionParameteriv(target,pname,params);
    }
void(__stdcall *real_glGetSeparableFilter)(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span) = 0;
    void skibidigfx_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span)
    {
    
    real_glGetSeparableFilter(target,format,type,row,column,span);
    }
void(__stdcall *real_glSeparableFilter2D)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column) = 0;
    void skibidigfx_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column)
    {
    
    real_glSeparableFilter2D(target,internalformat,width,height,format,type,row,column);
    }
void(__stdcall *real_glGetHistogram)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values) = 0;
    void skibidigfx_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values)
    {
    
    real_glGetHistogram(target,reset,format,type,values);
    }
void(__stdcall *real_glGetHistogramParameterfv)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetHistogramParameterfv(target,pname,params);
    }
void(__stdcall *real_glGetHistogramParameteriv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetHistogramParameteriv(target,pname,params);
    }
void(__stdcall *real_glGetMinmax)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values) = 0;
    void skibidigfx_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values)
    {
    
    real_glGetMinmax(target,reset,format,type,values);
    }
void(__stdcall *real_glGetMinmaxParameterfv)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetMinmaxParameterfv(target,pname,params);
    }
void(__stdcall *real_glGetMinmaxParameteriv)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetMinmaxParameteriv(target,pname,params);
    }
void(__stdcall *real_glHistogram)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) = 0;
    void skibidigfx_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
    {
    
    real_glHistogram(target,width,internalformat,sink);
    }
void(__stdcall *real_glMinmax)(GLenum target, GLenum internalformat, GLboolean sink) = 0;
    void skibidigfx_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
    {
    
    real_glMinmax(target,internalformat,sink);
    }
void(__stdcall *real_glResetHistogram)(GLenum target) = 0;
    void skibidigfx_glResetHistogram(GLenum target)
    {
    
    real_glResetHistogram(target);
    }
void(__stdcall *real_glResetMinmax)(GLenum target) = 0;
    void skibidigfx_glResetMinmax(GLenum target)
    {
    
    real_glResetMinmax(target);
    }
void(__stdcall *real_glMultiDrawArraysIndirectCountARB)(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawArraysIndirectCountARB(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    real_glMultiDrawArraysIndirectCountARB(mode,indirect,drawcount,maxdrawcount,stride);
    }
void(__stdcall *real_glMultiDrawElementsIndirectCountARB)(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    real_glMultiDrawElementsIndirectCountARB(mode,type,indirect,drawcount,maxdrawcount,stride);
    }
void(__stdcall *real_glVertexAttribDivisorARB)(GLuint index, GLuint divisor) = 0;
    void skibidigfx_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
    {
    
    real_glVertexAttribDivisorARB(index,divisor);
    }
void(__stdcall *real_glCurrentPaletteMatrixARB)(GLint index) = 0;
    void skibidigfx_glCurrentPaletteMatrixARB(GLint index)
    {
    
    real_glCurrentPaletteMatrixARB(index);
    }
void(__stdcall *real_glMatrixIndexubvARB)(GLint size, const GLubyte* indices) = 0;
    void skibidigfx_glMatrixIndexubvARB(GLint size, const GLubyte* indices)
    {
    
    real_glMatrixIndexubvARB(size,indices);
    }
void(__stdcall *real_glMatrixIndexusvARB)(GLint size, const GLushort* indices) = 0;
    void skibidigfx_glMatrixIndexusvARB(GLint size, const GLushort* indices)
    {
    
    real_glMatrixIndexusvARB(size,indices);
    }
void(__stdcall *real_glMatrixIndexuivARB)(GLint size, const GLuint* indices) = 0;
    void skibidigfx_glMatrixIndexuivARB(GLint size, const GLuint* indices)
    {
    
    real_glMatrixIndexuivARB(size,indices);
    }
void(__stdcall *real_glMatrixIndexPointerARB)(GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glMatrixIndexPointerARB(size,type,stride,pointer);
    }
void(__stdcall *real_glSampleCoverageARB)(GLfloat value, GLboolean invert) = 0;
    void skibidigfx_glSampleCoverageARB(GLfloat value, GLboolean invert)
    {
    
    real_glSampleCoverageARB(value,invert);
    }
void(__stdcall *real_glActiveTextureARB)(GLenum texture) = 0;
    void skibidigfx_glActiveTextureARB(GLenum texture)
    {
    
    real_glActiveTextureARB(texture);
    }
void(__stdcall *real_glClientActiveTextureARB)(GLenum texture) = 0;
    void skibidigfx_glClientActiveTextureARB(GLenum texture)
    {
    
    real_glClientActiveTextureARB(texture);
    }
void(__stdcall *real_glMultiTexCoord1dARB)(GLenum target, GLdouble s) = 0;
    void skibidigfx_glMultiTexCoord1dARB(GLenum target, GLdouble s)
    {
    
    real_glMultiTexCoord1dARB(target,s);
    }
void(__stdcall *real_glMultiTexCoord1dvARB)(GLenum target, const GLdouble* v) = 0;
    void skibidigfx_glMultiTexCoord1dvARB(GLenum target, const GLdouble* v)
    {
    
    real_glMultiTexCoord1dvARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord1fARB)(GLenum target, GLfloat s) = 0;
    void skibidigfx_glMultiTexCoord1fARB(GLenum target, GLfloat s)
    {
    
    real_glMultiTexCoord1fARB(target,s);
    }
void(__stdcall *real_glMultiTexCoord1fvARB)(GLenum target, const GLfloat* v) = 0;
    void skibidigfx_glMultiTexCoord1fvARB(GLenum target, const GLfloat* v)
    {
    
    real_glMultiTexCoord1fvARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord1iARB)(GLenum target, GLint s) = 0;
    void skibidigfx_glMultiTexCoord1iARB(GLenum target, GLint s)
    {
    
    real_glMultiTexCoord1iARB(target,s);
    }
void(__stdcall *real_glMultiTexCoord1ivARB)(GLenum target, const GLint* v) = 0;
    void skibidigfx_glMultiTexCoord1ivARB(GLenum target, const GLint* v)
    {
    
    real_glMultiTexCoord1ivARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord1sARB)(GLenum target, GLshort s) = 0;
    void skibidigfx_glMultiTexCoord1sARB(GLenum target, GLshort s)
    {
    
    real_glMultiTexCoord1sARB(target,s);
    }
void(__stdcall *real_glMultiTexCoord1svARB)(GLenum target, const GLshort* v) = 0;
    void skibidigfx_glMultiTexCoord1svARB(GLenum target, const GLshort* v)
    {
    
    real_glMultiTexCoord1svARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord2dARB)(GLenum target, GLdouble s, GLdouble t) = 0;
    void skibidigfx_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
    {
    
    real_glMultiTexCoord2dARB(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2dvARB)(GLenum target, const GLdouble* v) = 0;
    void skibidigfx_glMultiTexCoord2dvARB(GLenum target, const GLdouble* v)
    {
    
    real_glMultiTexCoord2dvARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord2fARB)(GLenum target, GLfloat s, GLfloat t) = 0;
    void skibidigfx_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
    {
    
    real_glMultiTexCoord2fARB(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2fvARB)(GLenum target, const GLfloat* v) = 0;
    void skibidigfx_glMultiTexCoord2fvARB(GLenum target, const GLfloat* v)
    {
    
    real_glMultiTexCoord2fvARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord2iARB)(GLenum target, GLint s, GLint t) = 0;
    void skibidigfx_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
    {
    
    real_glMultiTexCoord2iARB(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2ivARB)(GLenum target, const GLint* v) = 0;
    void skibidigfx_glMultiTexCoord2ivARB(GLenum target, const GLint* v)
    {
    
    real_glMultiTexCoord2ivARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord2sARB)(GLenum target, GLshort s, GLshort t) = 0;
    void skibidigfx_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
    {
    
    real_glMultiTexCoord2sARB(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2svARB)(GLenum target, const GLshort* v) = 0;
    void skibidigfx_glMultiTexCoord2svARB(GLenum target, const GLshort* v)
    {
    
    real_glMultiTexCoord2svARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord3dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r) = 0;
    void skibidigfx_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
    {
    
    real_glMultiTexCoord3dARB(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3dvARB)(GLenum target, const GLdouble* v) = 0;
    void skibidigfx_glMultiTexCoord3dvARB(GLenum target, const GLdouble* v)
    {
    
    real_glMultiTexCoord3dvARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord3fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r) = 0;
    void skibidigfx_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
    {
    
    real_glMultiTexCoord3fARB(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3fvARB)(GLenum target, const GLfloat* v) = 0;
    void skibidigfx_glMultiTexCoord3fvARB(GLenum target, const GLfloat* v)
    {
    
    real_glMultiTexCoord3fvARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord3iARB)(GLenum target, GLint s, GLint t, GLint r) = 0;
    void skibidigfx_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
    {
    
    real_glMultiTexCoord3iARB(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3ivARB)(GLenum target, const GLint* v) = 0;
    void skibidigfx_glMultiTexCoord3ivARB(GLenum target, const GLint* v)
    {
    
    real_glMultiTexCoord3ivARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord3sARB)(GLenum target, GLshort s, GLshort t, GLshort r) = 0;
    void skibidigfx_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
    {
    
    real_glMultiTexCoord3sARB(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3svARB)(GLenum target, const GLshort* v) = 0;
    void skibidigfx_glMultiTexCoord3svARB(GLenum target, const GLshort* v)
    {
    
    real_glMultiTexCoord3svARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord4dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) = 0;
    void skibidigfx_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
    {
    
    real_glMultiTexCoord4dARB(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4dvARB)(GLenum target, const GLdouble* v) = 0;
    void skibidigfx_glMultiTexCoord4dvARB(GLenum target, const GLdouble* v)
    {
    
    real_glMultiTexCoord4dvARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord4fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) = 0;
    void skibidigfx_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
    {
    
    real_glMultiTexCoord4fARB(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4fvARB)(GLenum target, const GLfloat* v) = 0;
    void skibidigfx_glMultiTexCoord4fvARB(GLenum target, const GLfloat* v)
    {
    
    real_glMultiTexCoord4fvARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord4iARB)(GLenum target, GLint s, GLint t, GLint r, GLint q) = 0;
    void skibidigfx_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
    {
    
    real_glMultiTexCoord4iARB(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4ivARB)(GLenum target, const GLint* v) = 0;
    void skibidigfx_glMultiTexCoord4ivARB(GLenum target, const GLint* v)
    {
    
    real_glMultiTexCoord4ivARB(target,v);
    }
void(__stdcall *real_glMultiTexCoord4sARB)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) = 0;
    void skibidigfx_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
    {
    
    real_glMultiTexCoord4sARB(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4svARB)(GLenum target, const GLshort* v) = 0;
    void skibidigfx_glMultiTexCoord4svARB(GLenum target, const GLshort* v)
    {
    
    real_glMultiTexCoord4svARB(target,v);
    }
void(__stdcall *real_glGenQueriesARB)(GLsizei n, GLuint* ids) = 0;
    void skibidigfx_glGenQueriesARB(GLsizei n, GLuint* ids)
    {
    
    real_glGenQueriesARB(n,ids);
    }
void(__stdcall *real_glDeleteQueriesARB)(GLsizei n, const GLuint* ids) = 0;
    void skibidigfx_glDeleteQueriesARB(GLsizei n, const GLuint* ids)
    {
    
    real_glDeleteQueriesARB(n,ids);
    }
GLboolean(__stdcall *real_glIsQueryARB)(GLuint id) = 0;
    GLboolean skibidigfx_glIsQueryARB(GLuint id)
    {
    
    return real_glIsQueryARB(id);
    }
void(__stdcall *real_glBeginQueryARB)(GLenum target, GLuint id) = 0;
    void skibidigfx_glBeginQueryARB(GLenum target, GLuint id)
    {
    
    real_glBeginQueryARB(target,id);
    }
void(__stdcall *real_glEndQueryARB)(GLenum target) = 0;
    void skibidigfx_glEndQueryARB(GLenum target)
    {
    
    real_glEndQueryARB(target);
    }
void(__stdcall *real_glGetQueryivARB)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetQueryivARB(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetQueryivARB(target,pname,params);
    }
void(__stdcall *real_glGetQueryObjectivARB)(GLuint id, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint* params)
    {
    
    real_glGetQueryObjectivARB(id,pname,params);
    }
void(__stdcall *real_glGetQueryObjectuivARB)(GLuint id, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint* params)
    {
    
    real_glGetQueryObjectuivARB(id,pname,params);
    }
void(__stdcall *real_glMaxShaderCompilerThreadsARB)(GLuint count) = 0;
    void skibidigfx_glMaxShaderCompilerThreadsARB(GLuint count)
    {
    
    real_glMaxShaderCompilerThreadsARB(count);
    }
void(__stdcall *real_glPointParameterfARB)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glPointParameterfARB(GLenum pname, GLfloat param)
    {
    
    real_glPointParameterfARB(pname,param);
    }
void(__stdcall *real_glPointParameterfvARB)(GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glPointParameterfvARB(GLenum pname, const GLfloat* params)
    {
    
    real_glPointParameterfvARB(pname,params);
    }
GLenum(__stdcall *real_glGetGraphicsResetStatusARB)() = 0;
    GLenum skibidigfx_glGetGraphicsResetStatusARB()
    {
    
    return real_glGetGraphicsResetStatusARB();
    }
void(__stdcall *real_glGetnTexImageARB)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img) = 0;
    void skibidigfx_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img)
    {
    
    real_glGetnTexImageARB(target,level,format,type,bufSize,img);
    }
void(__stdcall *real_glReadnPixelsARB)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data) = 0;
    void skibidigfx_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data)
    {
    
    real_glReadnPixelsARB(x,y,width,height,format,type,bufSize,data);
    }
void(__stdcall *real_glGetnCompressedTexImageARB)(GLenum target, GLint lod, GLsizei bufSize, void* img) = 0;
    void skibidigfx_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void* img)
    {
    
    real_glGetnCompressedTexImageARB(target,lod,bufSize,img);
    }
void(__stdcall *real_glGetnUniformfvARB)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params) = 0;
    void skibidigfx_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat* params)
    {
    
    real_glGetnUniformfvARB(program,location,bufSize,params);
    }
void(__stdcall *real_glGetnUniformivARB)(GLuint program, GLint location, GLsizei bufSize, GLint* params) = 0;
    void skibidigfx_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint* params)
    {
    
    real_glGetnUniformivARB(program,location,bufSize,params);
    }
void(__stdcall *real_glGetnUniformuivARB)(GLuint program, GLint location, GLsizei bufSize, GLuint* params) = 0;
    void skibidigfx_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint* params)
    {
    
    real_glGetnUniformuivARB(program,location,bufSize,params);
    }
void(__stdcall *real_glGetnUniformdvARB)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params) = 0;
    void skibidigfx_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble* params)
    {
    
    real_glGetnUniformdvARB(program,location,bufSize,params);
    }
void(__stdcall *real_glGetnMapdvARB)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v) = 0;
    void skibidigfx_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v)
    {
    
    real_glGetnMapdvARB(target,query,bufSize,v);
    }
void(__stdcall *real_glGetnMapfvARB)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v) = 0;
    void skibidigfx_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v)
    {
    
    real_glGetnMapfvARB(target,query,bufSize,v);
    }
void(__stdcall *real_glGetnMapivARB)(GLenum target, GLenum query, GLsizei bufSize, GLint* v) = 0;
    void skibidigfx_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint* v)
    {
    
    real_glGetnMapivARB(target,query,bufSize,v);
    }
void(__stdcall *real_glGetnPixelMapfvARB)(GLenum map, GLsizei bufSize, GLfloat* values) = 0;
    void skibidigfx_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat* values)
    {
    
    real_glGetnPixelMapfvARB(map,bufSize,values);
    }
void(__stdcall *real_glGetnPixelMapuivARB)(GLenum map, GLsizei bufSize, GLuint* values) = 0;
    void skibidigfx_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint* values)
    {
    
    real_glGetnPixelMapuivARB(map,bufSize,values);
    }
void(__stdcall *real_glGetnPixelMapusvARB)(GLenum map, GLsizei bufSize, GLushort* values) = 0;
    void skibidigfx_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort* values)
    {
    
    real_glGetnPixelMapusvARB(map,bufSize,values);
    }
void(__stdcall *real_glGetnPolygonStippleARB)(GLsizei bufSize, GLubyte* pattern) = 0;
    void skibidigfx_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte* pattern)
    {
    
    real_glGetnPolygonStippleARB(bufSize,pattern);
    }
void(__stdcall *real_glGetnColorTableARB)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table) = 0;
    void skibidigfx_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table)
    {
    
    real_glGetnColorTableARB(target,format,type,bufSize,table);
    }
void(__stdcall *real_glGetnConvolutionFilterARB)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image) = 0;
    void skibidigfx_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image)
    {
    
    real_glGetnConvolutionFilterARB(target,format,type,bufSize,image);
    }
void(__stdcall *real_glGetnSeparableFilterARB)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span) = 0;
    void skibidigfx_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span)
    {
    
    real_glGetnSeparableFilterARB(target,format,type,rowBufSize,row,columnBufSize,column,span);
    }
void(__stdcall *real_glGetnHistogramARB)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values) = 0;
    void skibidigfx_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
    {
    
    real_glGetnHistogramARB(target,reset,format,type,bufSize,values);
    }
void(__stdcall *real_glGetnMinmaxARB)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values) = 0;
    void skibidigfx_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
    {
    
    real_glGetnMinmaxARB(target,reset,format,type,bufSize,values);
    }
void(__stdcall *real_glFramebufferSampleLocationsfvARB)(GLenum target, GLuint start, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    real_glFramebufferSampleLocationsfvARB(target,start,count,v);
    }
void(__stdcall *real_glNamedFramebufferSampleLocationsfvARB)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    real_glNamedFramebufferSampleLocationsfvARB(framebuffer,start,count,v);
    }
void(__stdcall *real_glEvaluateDepthValuesARB)() = 0;
    void skibidigfx_glEvaluateDepthValuesARB()
    {
    
    real_glEvaluateDepthValuesARB();
    }
void(__stdcall *real_glMinSampleShadingARB)(GLfloat value) = 0;
    void skibidigfx_glMinSampleShadingARB(GLfloat value)
    {
    
    real_glMinSampleShadingARB(value);
    }
void(__stdcall *real_glDeleteObjectARB)(GLhandleARB obj) = 0;
    void skibidigfx_glDeleteObjectARB(GLhandleARB obj)
    {
    
    real_glDeleteObjectARB(obj);
    }
GLhandleARB(__stdcall *real_glGetHandleARB)(GLenum pname) = 0;
    GLhandleARB skibidigfx_glGetHandleARB(GLenum pname)
    {
    
    return real_glGetHandleARB(pname);
    }
void(__stdcall *real_glDetachObjectARB)(GLhandleARB containerObj, GLhandleARB attachedObj) = 0;
    void skibidigfx_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
    {
    
    real_glDetachObjectARB(containerObj,attachedObj);
    }
GLhandleARB(__stdcall *real_glCreateShaderObjectARB)(GLenum shaderType) = 0;
    GLhandleARB skibidigfx_glCreateShaderObjectARB(GLenum shaderType)
    {
    
    return real_glCreateShaderObjectARB(shaderType);
    }
void(__stdcall *real_glShaderSourceARB)(GLhandleARB shaderObj, GLsizei count, const GLcharARB** string, const GLint* length) = 0;
    void skibidigfx_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB** string, const GLint* length)
    {
    
    real_glShaderSourceARB(shaderObj,count,string,length);
    }
void(__stdcall *real_glCompileShaderARB)(GLhandleARB shaderObj) = 0;
    void skibidigfx_glCompileShaderARB(GLhandleARB shaderObj)
    {
    
    real_glCompileShaderARB(shaderObj);
    }
GLhandleARB(__stdcall *real_glCreateProgramObjectARB)() = 0;
    GLhandleARB skibidigfx_glCreateProgramObjectARB()
    {
    
    return real_glCreateProgramObjectARB();
    }
void(__stdcall *real_glAttachObjectARB)(GLhandleARB containerObj, GLhandleARB obj) = 0;
    void skibidigfx_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
    {
    
    real_glAttachObjectARB(containerObj,obj);
    }
void(__stdcall *real_glLinkProgramARB)(GLhandleARB programObj) = 0;
    void skibidigfx_glLinkProgramARB(GLhandleARB programObj)
    {
    
    real_glLinkProgramARB(programObj);
    }
void(__stdcall *real_glUseProgramObjectARB)(GLhandleARB programObj) = 0;
    void skibidigfx_glUseProgramObjectARB(GLhandleARB programObj)
    {
    
    real_glUseProgramObjectARB(programObj);
    }
void(__stdcall *real_glValidateProgramARB)(GLhandleARB programObj) = 0;
    void skibidigfx_glValidateProgramARB(GLhandleARB programObj)
    {
    
    real_glValidateProgramARB(programObj);
    }
void(__stdcall *real_glUniform1fARB)(GLint location, GLfloat v0) = 0;
    void skibidigfx_glUniform1fARB(GLint location, GLfloat v0)
    {
    
    real_glUniform1fARB(location,v0);
    }
void(__stdcall *real_glUniform2fARB)(GLint location, GLfloat v0, GLfloat v1) = 0;
    void skibidigfx_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
    {
    
    real_glUniform2fARB(location,v0,v1);
    }
void(__stdcall *real_glUniform3fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = 0;
    void skibidigfx_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
    {
    
    real_glUniform3fARB(location,v0,v1,v2);
    }
void(__stdcall *real_glUniform4fARB)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = 0;
    void skibidigfx_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
    {
    
    real_glUniform4fARB(location,v0,v1,v2,v3);
    }
void(__stdcall *real_glUniform1iARB)(GLint location, GLint v0) = 0;
    void skibidigfx_glUniform1iARB(GLint location, GLint v0)
    {
    
    real_glUniform1iARB(location,v0);
    }
void(__stdcall *real_glUniform2iARB)(GLint location, GLint v0, GLint v1) = 0;
    void skibidigfx_glUniform2iARB(GLint location, GLint v0, GLint v1)
    {
    
    real_glUniform2iARB(location,v0,v1);
    }
void(__stdcall *real_glUniform3iARB)(GLint location, GLint v0, GLint v1, GLint v2) = 0;
    void skibidigfx_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
    {
    
    real_glUniform3iARB(location,v0,v1,v2);
    }
void(__stdcall *real_glUniform4iARB)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = 0;
    void skibidigfx_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
    {
    
    real_glUniform4iARB(location,v0,v1,v2,v3);
    }
void(__stdcall *real_glUniform1fvARB)(GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glUniform1fvARB(GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glUniform1fvARB(location,count,value);
    }
void(__stdcall *real_glUniform2fvARB)(GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glUniform2fvARB(GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glUniform2fvARB(location,count,value);
    }
void(__stdcall *real_glUniform3fvARB)(GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glUniform3fvARB(GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glUniform3fvARB(location,count,value);
    }
void(__stdcall *real_glUniform4fvARB)(GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glUniform4fvARB(GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glUniform4fvARB(location,count,value);
    }
void(__stdcall *real_glUniform1ivARB)(GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glUniform1ivARB(GLint location, GLsizei count, const GLint* value)
    {
    
    real_glUniform1ivARB(location,count,value);
    }
void(__stdcall *real_glUniform2ivARB)(GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glUniform2ivARB(GLint location, GLsizei count, const GLint* value)
    {
    
    real_glUniform2ivARB(location,count,value);
    }
void(__stdcall *real_glUniform3ivARB)(GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glUniform3ivARB(GLint location, GLsizei count, const GLint* value)
    {
    
    real_glUniform3ivARB(location,count,value);
    }
void(__stdcall *real_glUniform4ivARB)(GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glUniform4ivARB(GLint location, GLsizei count, const GLint* value)
    {
    
    real_glUniform4ivARB(location,count,value);
    }
void(__stdcall *real_glUniformMatrix2fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix2fvARB(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix3fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix3fvARB(location,count,transpose,value);
    }
void(__stdcall *real_glUniformMatrix4fvARB)(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glUniformMatrix4fvARB(location,count,transpose,value);
    }
void(__stdcall *real_glGetObjectParameterfvARB)(GLhandleARB obj, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat* params)
    {
    
    real_glGetObjectParameterfvARB(obj,pname,params);
    }
void(__stdcall *real_glGetObjectParameterivARB)(GLhandleARB obj, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint* params)
    {
    
    real_glGetObjectParameterivARB(obj,pname,params);
    }
void(__stdcall *real_glGetInfoLogARB)(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog) = 0;
    void skibidigfx_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* infoLog)
    {
    
    real_glGetInfoLogARB(obj,maxLength,length,infoLog);
    }
void(__stdcall *real_glGetAttachedObjectsARB)(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj) = 0;
    void skibidigfx_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei* count, GLhandleARB* obj)
    {
    
    real_glGetAttachedObjectsARB(containerObj,maxCount,count,obj);
    }
GLint(__stdcall *real_glGetUniformLocationARB)(GLhandleARB programObj, const GLcharARB* name) = 0;
    GLint skibidigfx_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB* name)
    {
    
    return real_glGetUniformLocationARB(programObj,name);
    }
void(__stdcall *real_glGetActiveUniformARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name) = 0;
    void skibidigfx_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
    {
    
    real_glGetActiveUniformARB(programObj,index,maxLength,length,size,type,name);
    }
void(__stdcall *real_glGetUniformfvARB)(GLhandleARB programObj, GLint location, GLfloat* params) = 0;
    void skibidigfx_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat* params)
    {
    
    real_glGetUniformfvARB(programObj,location,params);
    }
void(__stdcall *real_glGetUniformivARB)(GLhandleARB programObj, GLint location, GLint* params) = 0;
    void skibidigfx_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint* params)
    {
    
    real_glGetUniformivARB(programObj,location,params);
    }
void(__stdcall *real_glGetShaderSourceARB)(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source) = 0;
    void skibidigfx_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei* length, GLcharARB* source)
    {
    
    real_glGetShaderSourceARB(obj,maxLength,length,source);
    }
void(__stdcall *real_glNamedStringARB)(GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar* string) = 0;
    void skibidigfx_glNamedStringARB(GLenum type, GLint namelen, const GLchar* name, GLint stringlen, const GLchar* string)
    {
    
    real_glNamedStringARB(type,namelen,name,stringlen,string);
    }
void(__stdcall *real_glDeleteNamedStringARB)(GLint namelen, const GLchar* name) = 0;
    void skibidigfx_glDeleteNamedStringARB(GLint namelen, const GLchar* name)
    {
    
    real_glDeleteNamedStringARB(namelen,name);
    }
void(__stdcall *real_glCompileShaderIncludeARB)(GLuint shader, GLsizei count, const GLchar** constpath, const GLint* length) = 0;
    void skibidigfx_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar** constpath, const GLint* length)
    {
    
    real_glCompileShaderIncludeARB(shader,count,constpath,length);
    }
GLboolean(__stdcall *real_glIsNamedStringARB)(GLint namelen, const GLchar* name) = 0;
    GLboolean skibidigfx_glIsNamedStringARB(GLint namelen, const GLchar* name)
    {
    
    return real_glIsNamedStringARB(namelen,name);
    }
void(__stdcall *real_glGetNamedStringARB)(GLint namelen, const GLchar* name, GLsizei bufSize, GLint* stringlen, GLchar* string) = 0;
    void skibidigfx_glGetNamedStringARB(GLint namelen, const GLchar* name, GLsizei bufSize, GLint* stringlen, GLchar* string)
    {
    
    real_glGetNamedStringARB(namelen,name,bufSize,stringlen,string);
    }
void(__stdcall *real_glGetNamedStringivARB)(GLint namelen, const GLchar* name, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedStringivARB(GLint namelen, const GLchar* name, GLenum pname, GLint* params)
    {
    
    real_glGetNamedStringivARB(namelen,name,pname,params);
    }
void(__stdcall *real_glBufferPageCommitmentARB)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) = 0;
    void skibidigfx_glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
    {
    
    real_glBufferPageCommitmentARB(target,offset,size,commit);
    }
void(__stdcall *real_glNamedBufferPageCommitmentEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) = 0;
    void skibidigfx_glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
    {
    
    real_glNamedBufferPageCommitmentEXT(buffer,offset,size,commit);
    }
void(__stdcall *real_glNamedBufferPageCommitmentARB)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) = 0;
    void skibidigfx_glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
    {
    
    real_glNamedBufferPageCommitmentARB(buffer,offset,size,commit);
    }
void(__stdcall *real_glTexPageCommitmentARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) = 0;
    void skibidigfx_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
    {
    
    real_glTexPageCommitmentARB(target,level,xoffset,yoffset,zoffset,width,height,depth,commit);
    }
void(__stdcall *real_glTexBufferARB)(GLenum target, GLenum internalformat, GLuint buffer) = 0;
    void skibidigfx_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    real_glTexBufferARB(target,internalformat,buffer);
    }
void(__stdcall *real_glCompressedTexImage3DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexImage3DARB(target,level,internalformat,width,height,depth,border,imageSize,data);
    }
void(__stdcall *real_glCompressedTexImage2DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexImage2DARB(target,level,internalformat,width,height,border,imageSize,data);
    }
void(__stdcall *real_glCompressedTexImage1DARB)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexImage1DARB(target,level,internalformat,width,border,imageSize,data);
    }
void(__stdcall *real_glCompressedTexSubImage3DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexSubImage3DARB(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data);
    }
void(__stdcall *real_glCompressedTexSubImage2DARB)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexSubImage2DARB(target,level,xoffset,yoffset,width,height,format,imageSize,data);
    }
void(__stdcall *real_glCompressedTexSubImage1DARB)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data) = 0;
    void skibidigfx_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data)
    {
    
    real_glCompressedTexSubImage1DARB(target,level,xoffset,width,format,imageSize,data);
    }
void(__stdcall *real_glGetCompressedTexImageARB)(GLenum target, GLint level, void* img) = 0;
    void skibidigfx_glGetCompressedTexImageARB(GLenum target, GLint level, void* img)
    {
    
    real_glGetCompressedTexImageARB(target,level,img);
    }
void(__stdcall *real_glLoadTransposeMatrixfARB)(const GLfloat* m) = 0;
    void skibidigfx_glLoadTransposeMatrixfARB(const GLfloat* m)
    {
    
    real_glLoadTransposeMatrixfARB(m);
    }
void(__stdcall *real_glLoadTransposeMatrixdARB)(const GLdouble* m) = 0;
    void skibidigfx_glLoadTransposeMatrixdARB(const GLdouble* m)
    {
    
    real_glLoadTransposeMatrixdARB(m);
    }
void(__stdcall *real_glMultTransposeMatrixfARB)(const GLfloat* m) = 0;
    void skibidigfx_glMultTransposeMatrixfARB(const GLfloat* m)
    {
    
    real_glMultTransposeMatrixfARB(m);
    }
void(__stdcall *real_glMultTransposeMatrixdARB)(const GLdouble* m) = 0;
    void skibidigfx_glMultTransposeMatrixdARB(const GLdouble* m)
    {
    
    real_glMultTransposeMatrixdARB(m);
    }
void(__stdcall *real_glWeightbvARB)(GLint size, const GLbyte* weights) = 0;
    void skibidigfx_glWeightbvARB(GLint size, const GLbyte* weights)
    {
    
    real_glWeightbvARB(size,weights);
    }
void(__stdcall *real_glWeightsvARB)(GLint size, const GLshort* weights) = 0;
    void skibidigfx_glWeightsvARB(GLint size, const GLshort* weights)
    {
    
    real_glWeightsvARB(size,weights);
    }
void(__stdcall *real_glWeightivARB)(GLint size, const GLint* weights) = 0;
    void skibidigfx_glWeightivARB(GLint size, const GLint* weights)
    {
    
    real_glWeightivARB(size,weights);
    }
void(__stdcall *real_glWeightfvARB)(GLint size, const GLfloat* weights) = 0;
    void skibidigfx_glWeightfvARB(GLint size, const GLfloat* weights)
    {
    
    real_glWeightfvARB(size,weights);
    }
void(__stdcall *real_glWeightdvARB)(GLint size, const GLdouble* weights) = 0;
    void skibidigfx_glWeightdvARB(GLint size, const GLdouble* weights)
    {
    
    real_glWeightdvARB(size,weights);
    }
void(__stdcall *real_glWeightubvARB)(GLint size, const GLubyte* weights) = 0;
    void skibidigfx_glWeightubvARB(GLint size, const GLubyte* weights)
    {
    
    real_glWeightubvARB(size,weights);
    }
void(__stdcall *real_glWeightusvARB)(GLint size, const GLushort* weights) = 0;
    void skibidigfx_glWeightusvARB(GLint size, const GLushort* weights)
    {
    
    real_glWeightusvARB(size,weights);
    }
void(__stdcall *real_glWeightuivARB)(GLint size, const GLuint* weights) = 0;
    void skibidigfx_glWeightuivARB(GLint size, const GLuint* weights)
    {
    
    real_glWeightuivARB(size,weights);
    }
void(__stdcall *real_glWeightPointerARB)(GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glWeightPointerARB(size,type,stride,pointer);
    }
void(__stdcall *real_glVertexBlendARB)(GLint count) = 0;
    void skibidigfx_glVertexBlendARB(GLint count)
    {
    
    real_glVertexBlendARB(count);
    }
void(__stdcall *real_glBindBufferARB)(GLenum target, GLuint buffer) = 0;
    void skibidigfx_glBindBufferARB(GLenum target, GLuint buffer)
    {
    
    real_glBindBufferARB(target,buffer);
    }
void(__stdcall *real_glDeleteBuffersARB)(GLsizei n, const GLuint* buffers) = 0;
    void skibidigfx_glDeleteBuffersARB(GLsizei n, const GLuint* buffers)
    {
    
    real_glDeleteBuffersARB(n,buffers);
    }
void(__stdcall *real_glGenBuffersARB)(GLsizei n, GLuint* buffers) = 0;
    void skibidigfx_glGenBuffersARB(GLsizei n, GLuint* buffers)
    {
    
    real_glGenBuffersARB(n,buffers);
    }
GLboolean(__stdcall *real_glIsBufferARB)(GLuint buffer) = 0;
    GLboolean skibidigfx_glIsBufferARB(GLuint buffer)
    {
    
    return real_glIsBufferARB(buffer);
    }
void(__stdcall *real_glBufferDataARB)(GLenum target, GLsizeiptrARB size, const void* data, GLenum usage) = 0;
    void skibidigfx_glBufferDataARB(GLenum target, GLsizeiptrARB size, const void* data, GLenum usage)
    {
    
    real_glBufferDataARB(target,size,data,usage);
    }
void(__stdcall *real_glBufferSubDataARB)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void* data) = 0;
    void skibidigfx_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void* data)
    {
    
    real_glBufferSubDataARB(target,offset,size,data);
    }
void(__stdcall *real_glGetBufferSubDataARB)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data) = 0;
    void skibidigfx_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void* data)
    {
    
    real_glGetBufferSubDataARB(target,offset,size,data);
    }
void *(__stdcall *real_glMapBufferARB)(GLenum target, GLenum access) = 0;
    void * skibidigfx_glMapBufferARB(GLenum target, GLenum access)
    {
    
    return real_glMapBufferARB(target,access);
    }
GLboolean(__stdcall *real_glUnmapBufferARB)(GLenum target) = 0;
    GLboolean skibidigfx_glUnmapBufferARB(GLenum target)
    {
    
    return real_glUnmapBufferARB(target);
    }
void(__stdcall *real_glGetBufferParameterivARB)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetBufferParameterivARB(target,pname,params);
    }
void(__stdcall *real_glGetBufferPointervARB)(GLenum target, GLenum pname, void** params) = 0;
    void skibidigfx_glGetBufferPointervARB(GLenum target, GLenum pname, void** params)
    {
    
    real_glGetBufferPointervARB(target,pname,params);
    }
void(__stdcall *real_glVertexAttrib1dARB)(GLuint index, GLdouble x) = 0;
    void skibidigfx_glVertexAttrib1dARB(GLuint index, GLdouble x)
    {
    
    real_glVertexAttrib1dARB(index,x);
    }
void(__stdcall *real_glVertexAttrib1dvARB)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib1dvARB(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib1dvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib1fARB)(GLuint index, GLfloat x) = 0;
    void skibidigfx_glVertexAttrib1fARB(GLuint index, GLfloat x)
    {
    
    real_glVertexAttrib1fARB(index,x);
    }
void(__stdcall *real_glVertexAttrib1fvARB)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib1fvARB(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib1fvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib1sARB)(GLuint index, GLshort x) = 0;
    void skibidigfx_glVertexAttrib1sARB(GLuint index, GLshort x)
    {
    
    real_glVertexAttrib1sARB(index,x);
    }
void(__stdcall *real_glVertexAttrib1svARB)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib1svARB(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib1svARB(index,v);
    }
void(__stdcall *real_glVertexAttrib2dARB)(GLuint index, GLdouble x, GLdouble y) = 0;
    void skibidigfx_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
    {
    
    real_glVertexAttrib2dARB(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2dvARB)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib2dvARB(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib2dvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib2fARB)(GLuint index, GLfloat x, GLfloat y) = 0;
    void skibidigfx_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
    {
    
    real_glVertexAttrib2fARB(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2fvARB)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib2fvARB(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib2fvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib2sARB)(GLuint index, GLshort x, GLshort y) = 0;
    void skibidigfx_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
    {
    
    real_glVertexAttrib2sARB(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2svARB)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib2svARB(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib2svARB(index,v);
    }
void(__stdcall *real_glVertexAttrib3dARB)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glVertexAttrib3dARB(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3dvARB)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib3dvARB(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib3dvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib3fARB)(GLuint index, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glVertexAttrib3fARB(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3fvARB)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib3fvARB(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib3fvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib3sARB)(GLuint index, GLshort x, GLshort y, GLshort z) = 0;
    void skibidigfx_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
    {
    
    real_glVertexAttrib3sARB(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3svARB)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib3svARB(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib3svARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4NbvARB)(GLuint index, const GLbyte* v) = 0;
    void skibidigfx_glVertexAttrib4NbvARB(GLuint index, const GLbyte* v)
    {
    
    real_glVertexAttrib4NbvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4NivARB)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttrib4NivARB(GLuint index, const GLint* v)
    {
    
    real_glVertexAttrib4NivARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4NsvARB)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib4NsvARB(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib4NsvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4NubARB)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) = 0;
    void skibidigfx_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
    {
    
    real_glVertexAttrib4NubARB(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4NubvARB)(GLuint index, const GLubyte* v) = 0;
    void skibidigfx_glVertexAttrib4NubvARB(GLuint index, const GLubyte* v)
    {
    
    real_glVertexAttrib4NubvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4NuivARB)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttrib4NuivARB(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttrib4NuivARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4NusvARB)(GLuint index, const GLushort* v) = 0;
    void skibidigfx_glVertexAttrib4NusvARB(GLuint index, const GLushort* v)
    {
    
    real_glVertexAttrib4NusvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4bvARB)(GLuint index, const GLbyte* v) = 0;
    void skibidigfx_glVertexAttrib4bvARB(GLuint index, const GLbyte* v)
    {
    
    real_glVertexAttrib4bvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4dARB)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glVertexAttrib4dARB(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4dvARB)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib4dvARB(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib4dvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4fARB)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glVertexAttrib4fARB(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4fvARB)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib4fvARB(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib4fvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4ivARB)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttrib4ivARB(GLuint index, const GLint* v)
    {
    
    real_glVertexAttrib4ivARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4sARB)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) = 0;
    void skibidigfx_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    real_glVertexAttrib4sARB(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4svARB)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib4svARB(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib4svARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4ubvARB)(GLuint index, const GLubyte* v) = 0;
    void skibidigfx_glVertexAttrib4ubvARB(GLuint index, const GLubyte* v)
    {
    
    real_glVertexAttrib4ubvARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4uivARB)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttrib4uivARB(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttrib4uivARB(index,v);
    }
void(__stdcall *real_glVertexAttrib4usvARB)(GLuint index, const GLushort* v) = 0;
    void skibidigfx_glVertexAttrib4usvARB(GLuint index, const GLushort* v)
    {
    
    real_glVertexAttrib4usvARB(index,v);
    }
void(__stdcall *real_glVertexAttribPointerARB)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer)
    {
    
    real_glVertexAttribPointerARB(index,size,type,normalized,stride,pointer);
    }
void(__stdcall *real_glEnableVertexAttribArrayARB)(GLuint index) = 0;
    void skibidigfx_glEnableVertexAttribArrayARB(GLuint index)
    {
    
    real_glEnableVertexAttribArrayARB(index);
    }
void(__stdcall *real_glDisableVertexAttribArrayARB)(GLuint index) = 0;
    void skibidigfx_glDisableVertexAttribArrayARB(GLuint index)
    {
    
    real_glDisableVertexAttribArrayARB(index);
    }
void(__stdcall *real_glGetVertexAttribdvARB)(GLuint index, GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble* params)
    {
    
    real_glGetVertexAttribdvARB(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribfvARB)(GLuint index, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat* params)
    {
    
    real_glGetVertexAttribfvARB(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribivARB)(GLuint index, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint* params)
    {
    
    real_glGetVertexAttribivARB(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribPointervARB)(GLuint index, GLenum pname, void** pointer) = 0;
    void skibidigfx_glGetVertexAttribPointervARB(GLuint index, GLenum pname, void** pointer)
    {
    
    real_glGetVertexAttribPointervARB(index,pname,pointer);
    }
void(__stdcall *real_glBindAttribLocationARB)(GLhandleARB programObj, GLuint index, const GLcharARB* name) = 0;
    void skibidigfx_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB* name)
    {
    
    real_glBindAttribLocationARB(programObj,index,name);
    }
void(__stdcall *real_glGetActiveAttribARB)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name) = 0;
    void skibidigfx_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLcharARB* name)
    {
    
    real_glGetActiveAttribARB(programObj,index,maxLength,length,size,type,name);
    }
GLint(__stdcall *real_glGetAttribLocationARB)(GLhandleARB programObj, const GLcharARB* name) = 0;
    GLint skibidigfx_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB* name)
    {
    
    return real_glGetAttribLocationARB(programObj,name);
    }
void(__stdcall *real_glWindowPos2dARB)(GLdouble x, GLdouble y) = 0;
    void skibidigfx_glWindowPos2dARB(GLdouble x, GLdouble y)
    {
    
    real_glWindowPos2dARB(x,y);
    }
void(__stdcall *real_glWindowPos2dvARB)(const GLdouble* v) = 0;
    void skibidigfx_glWindowPos2dvARB(const GLdouble* v)
    {
    
    real_glWindowPos2dvARB(v);
    }
void(__stdcall *real_glWindowPos2fARB)(GLfloat x, GLfloat y) = 0;
    void skibidigfx_glWindowPos2fARB(GLfloat x, GLfloat y)
    {
    
    real_glWindowPos2fARB(x,y);
    }
void(__stdcall *real_glWindowPos2fvARB)(const GLfloat* v) = 0;
    void skibidigfx_glWindowPos2fvARB(const GLfloat* v)
    {
    
    real_glWindowPos2fvARB(v);
    }
void(__stdcall *real_glWindowPos2iARB)(GLint x, GLint y) = 0;
    void skibidigfx_glWindowPos2iARB(GLint x, GLint y)
    {
    
    real_glWindowPos2iARB(x,y);
    }
void(__stdcall *real_glWindowPos2ivARB)(const GLint* v) = 0;
    void skibidigfx_glWindowPos2ivARB(const GLint* v)
    {
    
    real_glWindowPos2ivARB(v);
    }
void(__stdcall *real_glWindowPos2sARB)(GLshort x, GLshort y) = 0;
    void skibidigfx_glWindowPos2sARB(GLshort x, GLshort y)
    {
    
    real_glWindowPos2sARB(x,y);
    }
void(__stdcall *real_glWindowPos2svARB)(const GLshort* v) = 0;
    void skibidigfx_glWindowPos2svARB(const GLshort* v)
    {
    
    real_glWindowPos2svARB(v);
    }
void(__stdcall *real_glWindowPos3dARB)(GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glWindowPos3dARB(x,y,z);
    }
void(__stdcall *real_glWindowPos3dvARB)(const GLdouble* v) = 0;
    void skibidigfx_glWindowPos3dvARB(const GLdouble* v)
    {
    
    real_glWindowPos3dvARB(v);
    }
void(__stdcall *real_glWindowPos3fARB)(GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glWindowPos3fARB(x,y,z);
    }
void(__stdcall *real_glWindowPos3fvARB)(const GLfloat* v) = 0;
    void skibidigfx_glWindowPos3fvARB(const GLfloat* v)
    {
    
    real_glWindowPos3fvARB(v);
    }
void(__stdcall *real_glWindowPos3iARB)(GLint x, GLint y, GLint z) = 0;
    void skibidigfx_glWindowPos3iARB(GLint x, GLint y, GLint z)
    {
    
    real_glWindowPos3iARB(x,y,z);
    }
void(__stdcall *real_glWindowPos3ivARB)(const GLint* v) = 0;
    void skibidigfx_glWindowPos3ivARB(const GLint* v)
    {
    
    real_glWindowPos3ivARB(v);
    }
void(__stdcall *real_glWindowPos3sARB)(GLshort x, GLshort y, GLshort z) = 0;
    void skibidigfx_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
    {
    
    real_glWindowPos3sARB(x,y,z);
    }
void(__stdcall *real_glWindowPos3svARB)(const GLshort* v) = 0;
    void skibidigfx_glWindowPos3svARB(const GLshort* v)
    {
    
    real_glWindowPos3svARB(v);
    }
void(__stdcall *real_glBlendBarrierKHR)() = 0;
    void skibidigfx_glBlendBarrierKHR()
    {
    
    real_glBlendBarrierKHR();
    }
void(__stdcall *real_glMaxShaderCompilerThreadsKHR)(GLuint count) = 0;
    void skibidigfx_glMaxShaderCompilerThreadsKHR(GLuint count)
    {
    
    real_glMaxShaderCompilerThreadsKHR(count);
    }
void(__stdcall *real_glMultiTexCoord1bOES)(GLenum texture, GLbyte s) = 0;
    void skibidigfx_glMultiTexCoord1bOES(GLenum texture, GLbyte s)
    {
    
    real_glMultiTexCoord1bOES(texture,s);
    }
void(__stdcall *real_glMultiTexCoord1bvOES)(GLenum texture, const GLbyte* coords) = 0;
    void skibidigfx_glMultiTexCoord1bvOES(GLenum texture, const GLbyte* coords)
    {
    
    real_glMultiTexCoord1bvOES(texture,coords);
    }
void(__stdcall *real_glMultiTexCoord2bOES)(GLenum texture, GLbyte s, GLbyte t) = 0;
    void skibidigfx_glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)
    {
    
    real_glMultiTexCoord2bOES(texture,s,t);
    }
void(__stdcall *real_glMultiTexCoord2bvOES)(GLenum texture, const GLbyte* coords) = 0;
    void skibidigfx_glMultiTexCoord2bvOES(GLenum texture, const GLbyte* coords)
    {
    
    real_glMultiTexCoord2bvOES(texture,coords);
    }
void(__stdcall *real_glMultiTexCoord3bOES)(GLenum texture, GLbyte s, GLbyte t, GLbyte r) = 0;
    void skibidigfx_glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r)
    {
    
    real_glMultiTexCoord3bOES(texture,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3bvOES)(GLenum texture, const GLbyte* coords) = 0;
    void skibidigfx_glMultiTexCoord3bvOES(GLenum texture, const GLbyte* coords)
    {
    
    real_glMultiTexCoord3bvOES(texture,coords);
    }
void(__stdcall *real_glMultiTexCoord4bOES)(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) = 0;
    void skibidigfx_glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)
    {
    
    real_glMultiTexCoord4bOES(texture,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4bvOES)(GLenum texture, const GLbyte* coords) = 0;
    void skibidigfx_glMultiTexCoord4bvOES(GLenum texture, const GLbyte* coords)
    {
    
    real_glMultiTexCoord4bvOES(texture,coords);
    }
void(__stdcall *real_glTexCoord1bOES)(GLbyte s) = 0;
    void skibidigfx_glTexCoord1bOES(GLbyte s)
    {
    
    real_glTexCoord1bOES(s);
    }
void(__stdcall *real_glTexCoord1bvOES)(const GLbyte* coords) = 0;
    void skibidigfx_glTexCoord1bvOES(const GLbyte* coords)
    {
    
    real_glTexCoord1bvOES(coords);
    }
void(__stdcall *real_glTexCoord2bOES)(GLbyte s, GLbyte t) = 0;
    void skibidigfx_glTexCoord2bOES(GLbyte s, GLbyte t)
    {
    
    real_glTexCoord2bOES(s,t);
    }
void(__stdcall *real_glTexCoord2bvOES)(const GLbyte* coords) = 0;
    void skibidigfx_glTexCoord2bvOES(const GLbyte* coords)
    {
    
    real_glTexCoord2bvOES(coords);
    }
void(__stdcall *real_glTexCoord3bOES)(GLbyte s, GLbyte t, GLbyte r) = 0;
    void skibidigfx_glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r)
    {
    
    real_glTexCoord3bOES(s,t,r);
    }
void(__stdcall *real_glTexCoord3bvOES)(const GLbyte* coords) = 0;
    void skibidigfx_glTexCoord3bvOES(const GLbyte* coords)
    {
    
    real_glTexCoord3bvOES(coords);
    }
void(__stdcall *real_glTexCoord4bOES)(GLbyte s, GLbyte t, GLbyte r, GLbyte q) = 0;
    void skibidigfx_glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q)
    {
    
    real_glTexCoord4bOES(s,t,r,q);
    }
void(__stdcall *real_glTexCoord4bvOES)(const GLbyte* coords) = 0;
    void skibidigfx_glTexCoord4bvOES(const GLbyte* coords)
    {
    
    real_glTexCoord4bvOES(coords);
    }
void(__stdcall *real_glVertex2bOES)(GLbyte x, GLbyte y) = 0;
    void skibidigfx_glVertex2bOES(GLbyte x, GLbyte y)
    {
    
    real_glVertex2bOES(x,y);
    }
void(__stdcall *real_glVertex2bvOES)(const GLbyte* coords) = 0;
    void skibidigfx_glVertex2bvOES(const GLbyte* coords)
    {
    
    real_glVertex2bvOES(coords);
    }
void(__stdcall *real_glVertex3bOES)(GLbyte x, GLbyte y, GLbyte z) = 0;
    void skibidigfx_glVertex3bOES(GLbyte x, GLbyte y, GLbyte z)
    {
    
    real_glVertex3bOES(x,y,z);
    }
void(__stdcall *real_glVertex3bvOES)(const GLbyte* coords) = 0;
    void skibidigfx_glVertex3bvOES(const GLbyte* coords)
    {
    
    real_glVertex3bvOES(coords);
    }
void(__stdcall *real_glVertex4bOES)(GLbyte x, GLbyte y, GLbyte z, GLbyte w) = 0;
    void skibidigfx_glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w)
    {
    
    real_glVertex4bOES(x,y,z,w);
    }
void(__stdcall *real_glVertex4bvOES)(const GLbyte* coords) = 0;
    void skibidigfx_glVertex4bvOES(const GLbyte* coords)
    {
    
    real_glVertex4bvOES(coords);
    }
void(__stdcall *real_glAlphaFuncxOES)(GLenum func, GLfixed ref) = 0;
    void skibidigfx_glAlphaFuncxOES(GLenum func, GLfixed ref)
    {
    
    real_glAlphaFuncxOES(func,ref);
    }
void(__stdcall *real_glClearColorxOES)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) = 0;
    void skibidigfx_glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
    {
    
    real_glClearColorxOES(red,green,blue,alpha);
    }
void(__stdcall *real_glClearDepthxOES)(GLfixed depth) = 0;
    void skibidigfx_glClearDepthxOES(GLfixed depth)
    {
    
    real_glClearDepthxOES(depth);
    }
void(__stdcall *real_glClipPlanexOES)(GLenum plane, const GLfixed* equation) = 0;
    void skibidigfx_glClipPlanexOES(GLenum plane, const GLfixed* equation)
    {
    
    real_glClipPlanexOES(plane,equation);
    }
void(__stdcall *real_glColor4xOES)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) = 0;
    void skibidigfx_glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
    {
    
    real_glColor4xOES(red,green,blue,alpha);
    }
void(__stdcall *real_glDepthRangexOES)(GLfixed n, GLfixed f) = 0;
    void skibidigfx_glDepthRangexOES(GLfixed n, GLfixed f)
    {
    
    real_glDepthRangexOES(n,f);
    }
void(__stdcall *real_glFogxOES)(GLenum pname, GLfixed param) = 0;
    void skibidigfx_glFogxOES(GLenum pname, GLfixed param)
    {
    
    real_glFogxOES(pname,param);
    }
void(__stdcall *real_glFogxvOES)(GLenum pname, const GLfixed* param) = 0;
    void skibidigfx_glFogxvOES(GLenum pname, const GLfixed* param)
    {
    
    real_glFogxvOES(pname,param);
    }
void(__stdcall *real_glFrustumxOES)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) = 0;
    void skibidigfx_glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
    {
    
    real_glFrustumxOES(l,r,b,t,n,f);
    }
void(__stdcall *real_glGetClipPlanexOES)(GLenum plane, GLfixed* equation) = 0;
    void skibidigfx_glGetClipPlanexOES(GLenum plane, GLfixed* equation)
    {
    
    real_glGetClipPlanexOES(plane,equation);
    }
void(__stdcall *real_glGetFixedvOES)(GLenum pname, GLfixed* params) = 0;
    void skibidigfx_glGetFixedvOES(GLenum pname, GLfixed* params)
    {
    
    real_glGetFixedvOES(pname,params);
    }
void(__stdcall *real_glGetTexEnvxvOES)(GLenum target, GLenum pname, GLfixed* params) = 0;
    void skibidigfx_glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed* params)
    {
    
    real_glGetTexEnvxvOES(target,pname,params);
    }
void(__stdcall *real_glGetTexParameterxvOES)(GLenum target, GLenum pname, GLfixed* params) = 0;
    void skibidigfx_glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed* params)
    {
    
    real_glGetTexParameterxvOES(target,pname,params);
    }
void(__stdcall *real_glLightModelxOES)(GLenum pname, GLfixed param) = 0;
    void skibidigfx_glLightModelxOES(GLenum pname, GLfixed param)
    {
    
    real_glLightModelxOES(pname,param);
    }
void(__stdcall *real_glLightModelxvOES)(GLenum pname, const GLfixed* param) = 0;
    void skibidigfx_glLightModelxvOES(GLenum pname, const GLfixed* param)
    {
    
    real_glLightModelxvOES(pname,param);
    }
void(__stdcall *real_glLightxOES)(GLenum light, GLenum pname, GLfixed param) = 0;
    void skibidigfx_glLightxOES(GLenum light, GLenum pname, GLfixed param)
    {
    
    real_glLightxOES(light,pname,param);
    }
void(__stdcall *real_glLightxvOES)(GLenum light, GLenum pname, const GLfixed* params) = 0;
    void skibidigfx_glLightxvOES(GLenum light, GLenum pname, const GLfixed* params)
    {
    
    real_glLightxvOES(light,pname,params);
    }
void(__stdcall *real_glLineWidthxOES)(GLfixed width) = 0;
    void skibidigfx_glLineWidthxOES(GLfixed width)
    {
    
    real_glLineWidthxOES(width);
    }
void(__stdcall *real_glLoadMatrixxOES)(const GLfixed* m) = 0;
    void skibidigfx_glLoadMatrixxOES(const GLfixed* m)
    {
    
    real_glLoadMatrixxOES(m);
    }
void(__stdcall *real_glMaterialxOES)(GLenum face, GLenum pname, GLfixed param) = 0;
    void skibidigfx_glMaterialxOES(GLenum face, GLenum pname, GLfixed param)
    {
    
    real_glMaterialxOES(face,pname,param);
    }
void(__stdcall *real_glMaterialxvOES)(GLenum face, GLenum pname, const GLfixed* param) = 0;
    void skibidigfx_glMaterialxvOES(GLenum face, GLenum pname, const GLfixed* param)
    {
    
    real_glMaterialxvOES(face,pname,param);
    }
void(__stdcall *real_glMultMatrixxOES)(const GLfixed* m) = 0;
    void skibidigfx_glMultMatrixxOES(const GLfixed* m)
    {
    
    real_glMultMatrixxOES(m);
    }
void(__stdcall *real_glMultiTexCoord4xOES)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) = 0;
    void skibidigfx_glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
    {
    
    real_glMultiTexCoord4xOES(texture,s,t,r,q);
    }
void(__stdcall *real_glNormal3xOES)(GLfixed nx, GLfixed ny, GLfixed nz) = 0;
    void skibidigfx_glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz)
    {
    
    real_glNormal3xOES(nx,ny,nz);
    }
void(__stdcall *real_glOrthoxOES)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) = 0;
    void skibidigfx_glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)
    {
    
    real_glOrthoxOES(l,r,b,t,n,f);
    }
void(__stdcall *real_glPointParameterxvOES)(GLenum pname, const GLfixed* params) = 0;
    void skibidigfx_glPointParameterxvOES(GLenum pname, const GLfixed* params)
    {
    
    real_glPointParameterxvOES(pname,params);
    }
void(__stdcall *real_glPointSizexOES)(GLfixed size) = 0;
    void skibidigfx_glPointSizexOES(GLfixed size)
    {
    
    real_glPointSizexOES(size);
    }
void(__stdcall *real_glPolygonOffsetxOES)(GLfixed factor, GLfixed units) = 0;
    void skibidigfx_glPolygonOffsetxOES(GLfixed factor, GLfixed units)
    {
    
    real_glPolygonOffsetxOES(factor,units);
    }
void(__stdcall *real_glRotatexOES)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) = 0;
    void skibidigfx_glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
    {
    
    real_glRotatexOES(angle,x,y,z);
    }
void(__stdcall *real_glScalexOES)(GLfixed x, GLfixed y, GLfixed z) = 0;
    void skibidigfx_glScalexOES(GLfixed x, GLfixed y, GLfixed z)
    {
    
    real_glScalexOES(x,y,z);
    }
void(__stdcall *real_glTexEnvxOES)(GLenum target, GLenum pname, GLfixed param) = 0;
    void skibidigfx_glTexEnvxOES(GLenum target, GLenum pname, GLfixed param)
    {
    
    real_glTexEnvxOES(target,pname,param);
    }
void(__stdcall *real_glTexEnvxvOES)(GLenum target, GLenum pname, const GLfixed* params) = 0;
    void skibidigfx_glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed* params)
    {
    
    real_glTexEnvxvOES(target,pname,params);
    }
void(__stdcall *real_glTexParameterxOES)(GLenum target, GLenum pname, GLfixed param) = 0;
    void skibidigfx_glTexParameterxOES(GLenum target, GLenum pname, GLfixed param)
    {
    
    real_glTexParameterxOES(target,pname,param);
    }
void(__stdcall *real_glTexParameterxvOES)(GLenum target, GLenum pname, const GLfixed* params) = 0;
    void skibidigfx_glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed* params)
    {
    
    real_glTexParameterxvOES(target,pname,params);
    }
void(__stdcall *real_glTranslatexOES)(GLfixed x, GLfixed y, GLfixed z) = 0;
    void skibidigfx_glTranslatexOES(GLfixed x, GLfixed y, GLfixed z)
    {
    
    real_glTranslatexOES(x,y,z);
    }
void(__stdcall *real_glAccumxOES)(GLenum op, GLfixed value) = 0;
    void skibidigfx_glAccumxOES(GLenum op, GLfixed value)
    {
    
    real_glAccumxOES(op,value);
    }
void(__stdcall *real_glBitmapxOES)(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte* bitmap) = 0;
    void skibidigfx_glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte* bitmap)
    {
    
    real_glBitmapxOES(width,height,xorig,yorig,xmove,ymove,bitmap);
    }
void(__stdcall *real_glBlendColorxOES)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) = 0;
    void skibidigfx_glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
    {
    
    real_glBlendColorxOES(red,green,blue,alpha);
    }
void(__stdcall *real_glClearAccumxOES)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) = 0;
    void skibidigfx_glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
    {
    
    real_glClearAccumxOES(red,green,blue,alpha);
    }
void(__stdcall *real_glColor3xOES)(GLfixed red, GLfixed green, GLfixed blue) = 0;
    void skibidigfx_glColor3xOES(GLfixed red, GLfixed green, GLfixed blue)
    {
    
    real_glColor3xOES(red,green,blue);
    }
void(__stdcall *real_glColor3xvOES)(const GLfixed* components) = 0;
    void skibidigfx_glColor3xvOES(const GLfixed* components)
    {
    
    real_glColor3xvOES(components);
    }
void(__stdcall *real_glColor4xvOES)(const GLfixed* components) = 0;
    void skibidigfx_glColor4xvOES(const GLfixed* components)
    {
    
    real_glColor4xvOES(components);
    }
void(__stdcall *real_glConvolutionParameterxOES)(GLenum target, GLenum pname, GLfixed param) = 0;
    void skibidigfx_glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param)
    {
    
    real_glConvolutionParameterxOES(target,pname,param);
    }
void(__stdcall *real_glConvolutionParameterxvOES)(GLenum target, GLenum pname, const GLfixed* params) = 0;
    void skibidigfx_glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed* params)
    {
    
    real_glConvolutionParameterxvOES(target,pname,params);
    }
void(__stdcall *real_glEvalCoord1xOES)(GLfixed u) = 0;
    void skibidigfx_glEvalCoord1xOES(GLfixed u)
    {
    
    real_glEvalCoord1xOES(u);
    }
void(__stdcall *real_glEvalCoord1xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glEvalCoord1xvOES(const GLfixed* coords)
    {
    
    real_glEvalCoord1xvOES(coords);
    }
void(__stdcall *real_glEvalCoord2xOES)(GLfixed u, GLfixed v) = 0;
    void skibidigfx_glEvalCoord2xOES(GLfixed u, GLfixed v)
    {
    
    real_glEvalCoord2xOES(u,v);
    }
void(__stdcall *real_glEvalCoord2xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glEvalCoord2xvOES(const GLfixed* coords)
    {
    
    real_glEvalCoord2xvOES(coords);
    }
void(__stdcall *real_glFeedbackBufferxOES)(GLsizei n, GLenum type, const GLfixed* buffer) = 0;
    void skibidigfx_glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed* buffer)
    {
    
    real_glFeedbackBufferxOES(n,type,buffer);
    }
void(__stdcall *real_glGetConvolutionParameterxvOES)(GLenum target, GLenum pname, GLfixed* params) = 0;
    void skibidigfx_glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed* params)
    {
    
    real_glGetConvolutionParameterxvOES(target,pname,params);
    }
void(__stdcall *real_glGetHistogramParameterxvOES)(GLenum target, GLenum pname, GLfixed* params) = 0;
    void skibidigfx_glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed* params)
    {
    
    real_glGetHistogramParameterxvOES(target,pname,params);
    }
void(__stdcall *real_glGetLightxOES)(GLenum light, GLenum pname, GLfixed* params) = 0;
    void skibidigfx_glGetLightxOES(GLenum light, GLenum pname, GLfixed* params)
    {
    
    real_glGetLightxOES(light,pname,params);
    }
void(__stdcall *real_glGetMapxvOES)(GLenum target, GLenum query, GLfixed* v) = 0;
    void skibidigfx_glGetMapxvOES(GLenum target, GLenum query, GLfixed* v)
    {
    
    real_glGetMapxvOES(target,query,v);
    }
void(__stdcall *real_glGetMaterialxOES)(GLenum face, GLenum pname, GLfixed param) = 0;
    void skibidigfx_glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param)
    {
    
    real_glGetMaterialxOES(face,pname,param);
    }
void(__stdcall *real_glGetPixelMapxv)(GLenum map, GLint size, GLfixed* values) = 0;
    void skibidigfx_glGetPixelMapxv(GLenum map, GLint size, GLfixed* values)
    {
    
    real_glGetPixelMapxv(map,size,values);
    }
void(__stdcall *real_glGetTexGenxvOES)(GLenum coord, GLenum pname, GLfixed* params) = 0;
    void skibidigfx_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed* params)
    {
    
    real_glGetTexGenxvOES(coord,pname,params);
    }
void(__stdcall *real_glGetTexLevelParameterxvOES)(GLenum target, GLint level, GLenum pname, GLfixed* params) = 0;
    void skibidigfx_glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed* params)
    {
    
    real_glGetTexLevelParameterxvOES(target,level,pname,params);
    }
void(__stdcall *real_glIndexxOES)(GLfixed component) = 0;
    void skibidigfx_glIndexxOES(GLfixed component)
    {
    
    real_glIndexxOES(component);
    }
void(__stdcall *real_glIndexxvOES)(const GLfixed* component) = 0;
    void skibidigfx_glIndexxvOES(const GLfixed* component)
    {
    
    real_glIndexxvOES(component);
    }
void(__stdcall *real_glLoadTransposeMatrixxOES)(const GLfixed* m) = 0;
    void skibidigfx_glLoadTransposeMatrixxOES(const GLfixed* m)
    {
    
    real_glLoadTransposeMatrixxOES(m);
    }
void(__stdcall *real_glMap1xOES)(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) = 0;
    void skibidigfx_glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)
    {
    
    real_glMap1xOES(target,u1,u2,stride,order,points);
    }
void(__stdcall *real_glMap2xOES)(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) = 0;
    void skibidigfx_glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)
    {
    
    real_glMap2xOES(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
    }
void(__stdcall *real_glMapGrid1xOES)(GLint n, GLfixed u1, GLfixed u2) = 0;
    void skibidigfx_glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2)
    {
    
    real_glMapGrid1xOES(n,u1,u2);
    }
void(__stdcall *real_glMapGrid2xOES)(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) = 0;
    void skibidigfx_glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)
    {
    
    real_glMapGrid2xOES(n,u1,u2,v1,v2);
    }
void(__stdcall *real_glMultTransposeMatrixxOES)(const GLfixed* m) = 0;
    void skibidigfx_glMultTransposeMatrixxOES(const GLfixed* m)
    {
    
    real_glMultTransposeMatrixxOES(m);
    }
void(__stdcall *real_glMultiTexCoord1xOES)(GLenum texture, GLfixed s) = 0;
    void skibidigfx_glMultiTexCoord1xOES(GLenum texture, GLfixed s)
    {
    
    real_glMultiTexCoord1xOES(texture,s);
    }
void(__stdcall *real_glMultiTexCoord1xvOES)(GLenum texture, const GLfixed* coords) = 0;
    void skibidigfx_glMultiTexCoord1xvOES(GLenum texture, const GLfixed* coords)
    {
    
    real_glMultiTexCoord1xvOES(texture,coords);
    }
void(__stdcall *real_glMultiTexCoord2xOES)(GLenum texture, GLfixed s, GLfixed t) = 0;
    void skibidigfx_glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t)
    {
    
    real_glMultiTexCoord2xOES(texture,s,t);
    }
void(__stdcall *real_glMultiTexCoord2xvOES)(GLenum texture, const GLfixed* coords) = 0;
    void skibidigfx_glMultiTexCoord2xvOES(GLenum texture, const GLfixed* coords)
    {
    
    real_glMultiTexCoord2xvOES(texture,coords);
    }
void(__stdcall *real_glMultiTexCoord3xOES)(GLenum texture, GLfixed s, GLfixed t, GLfixed r) = 0;
    void skibidigfx_glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r)
    {
    
    real_glMultiTexCoord3xOES(texture,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3xvOES)(GLenum texture, const GLfixed* coords) = 0;
    void skibidigfx_glMultiTexCoord3xvOES(GLenum texture, const GLfixed* coords)
    {
    
    real_glMultiTexCoord3xvOES(texture,coords);
    }
void(__stdcall *real_glMultiTexCoord4xvOES)(GLenum texture, const GLfixed* coords) = 0;
    void skibidigfx_glMultiTexCoord4xvOES(GLenum texture, const GLfixed* coords)
    {
    
    real_glMultiTexCoord4xvOES(texture,coords);
    }
void(__stdcall *real_glNormal3xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glNormal3xvOES(const GLfixed* coords)
    {
    
    real_glNormal3xvOES(coords);
    }
void(__stdcall *real_glPassThroughxOES)(GLfixed token) = 0;
    void skibidigfx_glPassThroughxOES(GLfixed token)
    {
    
    real_glPassThroughxOES(token);
    }
void(__stdcall *real_glPixelMapx)(GLenum map, GLint size, const GLfixed* values) = 0;
    void skibidigfx_glPixelMapx(GLenum map, GLint size, const GLfixed* values)
    {
    
    real_glPixelMapx(map,size,values);
    }
void(__stdcall *real_glPixelStorex)(GLenum pname, GLfixed param) = 0;
    void skibidigfx_glPixelStorex(GLenum pname, GLfixed param)
    {
    
    real_glPixelStorex(pname,param);
    }
void(__stdcall *real_glPixelTransferxOES)(GLenum pname, GLfixed param) = 0;
    void skibidigfx_glPixelTransferxOES(GLenum pname, GLfixed param)
    {
    
    real_glPixelTransferxOES(pname,param);
    }
void(__stdcall *real_glPixelZoomxOES)(GLfixed xfactor, GLfixed yfactor) = 0;
    void skibidigfx_glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor)
    {
    
    real_glPixelZoomxOES(xfactor,yfactor);
    }
void(__stdcall *real_glPrioritizeTexturesxOES)(GLsizei n, const GLuint* textures, const GLfixed* priorities) = 0;
    void skibidigfx_glPrioritizeTexturesxOES(GLsizei n, const GLuint* textures, const GLfixed* priorities)
    {
    
    real_glPrioritizeTexturesxOES(n,textures,priorities);
    }
void(__stdcall *real_glRasterPos2xOES)(GLfixed x, GLfixed y) = 0;
    void skibidigfx_glRasterPos2xOES(GLfixed x, GLfixed y)
    {
    
    real_glRasterPos2xOES(x,y);
    }
void(__stdcall *real_glRasterPos2xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glRasterPos2xvOES(const GLfixed* coords)
    {
    
    real_glRasterPos2xvOES(coords);
    }
void(__stdcall *real_glRasterPos3xOES)(GLfixed x, GLfixed y, GLfixed z) = 0;
    void skibidigfx_glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z)
    {
    
    real_glRasterPos3xOES(x,y,z);
    }
void(__stdcall *real_glRasterPos3xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glRasterPos3xvOES(const GLfixed* coords)
    {
    
    real_glRasterPos3xvOES(coords);
    }
void(__stdcall *real_glRasterPos4xOES)(GLfixed x, GLfixed y, GLfixed z, GLfixed w) = 0;
    void skibidigfx_glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w)
    {
    
    real_glRasterPos4xOES(x,y,z,w);
    }
void(__stdcall *real_glRasterPos4xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glRasterPos4xvOES(const GLfixed* coords)
    {
    
    real_glRasterPos4xvOES(coords);
    }
void(__stdcall *real_glRectxOES)(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) = 0;
    void skibidigfx_glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)
    {
    
    real_glRectxOES(x1,y1,x2,y2);
    }
void(__stdcall *real_glRectxvOES)(const GLfixed* v1, const GLfixed* v2) = 0;
    void skibidigfx_glRectxvOES(const GLfixed* v1, const GLfixed* v2)
    {
    
    real_glRectxvOES(v1,v2);
    }
void(__stdcall *real_glTexCoord1xOES)(GLfixed s) = 0;
    void skibidigfx_glTexCoord1xOES(GLfixed s)
    {
    
    real_glTexCoord1xOES(s);
    }
void(__stdcall *real_glTexCoord1xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glTexCoord1xvOES(const GLfixed* coords)
    {
    
    real_glTexCoord1xvOES(coords);
    }
void(__stdcall *real_glTexCoord2xOES)(GLfixed s, GLfixed t) = 0;
    void skibidigfx_glTexCoord2xOES(GLfixed s, GLfixed t)
    {
    
    real_glTexCoord2xOES(s,t);
    }
void(__stdcall *real_glTexCoord2xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glTexCoord2xvOES(const GLfixed* coords)
    {
    
    real_glTexCoord2xvOES(coords);
    }
void(__stdcall *real_glTexCoord3xOES)(GLfixed s, GLfixed t, GLfixed r) = 0;
    void skibidigfx_glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r)
    {
    
    real_glTexCoord3xOES(s,t,r);
    }
void(__stdcall *real_glTexCoord3xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glTexCoord3xvOES(const GLfixed* coords)
    {
    
    real_glTexCoord3xvOES(coords);
    }
void(__stdcall *real_glTexCoord4xOES)(GLfixed s, GLfixed t, GLfixed r, GLfixed q) = 0;
    void skibidigfx_glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q)
    {
    
    real_glTexCoord4xOES(s,t,r,q);
    }
void(__stdcall *real_glTexCoord4xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glTexCoord4xvOES(const GLfixed* coords)
    {
    
    real_glTexCoord4xvOES(coords);
    }
void(__stdcall *real_glTexGenxOES)(GLenum coord, GLenum pname, GLfixed param) = 0;
    void skibidigfx_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
    {
    
    real_glTexGenxOES(coord,pname,param);
    }
void(__stdcall *real_glTexGenxvOES)(GLenum coord, GLenum pname, const GLfixed* params) = 0;
    void skibidigfx_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed* params)
    {
    
    real_glTexGenxvOES(coord,pname,params);
    }
void(__stdcall *real_glVertex2xOES)(GLfixed x) = 0;
    void skibidigfx_glVertex2xOES(GLfixed x)
    {
    
    real_glVertex2xOES(x);
    }
void(__stdcall *real_glVertex2xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glVertex2xvOES(const GLfixed* coords)
    {
    
    real_glVertex2xvOES(coords);
    }
void(__stdcall *real_glVertex3xOES)(GLfixed x, GLfixed y) = 0;
    void skibidigfx_glVertex3xOES(GLfixed x, GLfixed y)
    {
    
    real_glVertex3xOES(x,y);
    }
void(__stdcall *real_glVertex3xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glVertex3xvOES(const GLfixed* coords)
    {
    
    real_glVertex3xvOES(coords);
    }
void(__stdcall *real_glVertex4xOES)(GLfixed x, GLfixed y, GLfixed z) = 0;
    void skibidigfx_glVertex4xOES(GLfixed x, GLfixed y, GLfixed z)
    {
    
    real_glVertex4xOES(x,y,z);
    }
void(__stdcall *real_glVertex4xvOES)(const GLfixed* coords) = 0;
    void skibidigfx_glVertex4xvOES(const GLfixed* coords)
    {
    
    real_glVertex4xvOES(coords);
    }
GLbitfield(__stdcall *real_glQueryMatrixxOES)(GLfixed* mantissa, GLint* exponent) = 0;
    GLbitfield skibidigfx_glQueryMatrixxOES(GLfixed* mantissa, GLint* exponent)
    {
    
    return real_glQueryMatrixxOES(mantissa,exponent);
    }
void(__stdcall *real_glClearDepthfOES)(GLclampf depth) = 0;
    void skibidigfx_glClearDepthfOES(GLclampf depth)
    {
    
    real_glClearDepthfOES(depth);
    }
void(__stdcall *real_glClipPlanefOES)(GLenum plane, const GLfloat* equation) = 0;
    void skibidigfx_glClipPlanefOES(GLenum plane, const GLfloat* equation)
    {
    
    real_glClipPlanefOES(plane,equation);
    }
void(__stdcall *real_glDepthRangefOES)(GLclampf n, GLclampf f) = 0;
    void skibidigfx_glDepthRangefOES(GLclampf n, GLclampf f)
    {
    
    real_glDepthRangefOES(n,f);
    }
void(__stdcall *real_glFrustumfOES)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) = 0;
    void skibidigfx_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
    {
    
    real_glFrustumfOES(l,r,b,t,n,f);
    }
void(__stdcall *real_glGetClipPlanefOES)(GLenum plane, GLfloat* equation) = 0;
    void skibidigfx_glGetClipPlanefOES(GLenum plane, GLfloat* equation)
    {
    
    real_glGetClipPlanefOES(plane,equation);
    }
void(__stdcall *real_glOrthofOES)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) = 0;
    void skibidigfx_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
    {
    
    real_glOrthofOES(l,r,b,t,n,f);
    }
void(__stdcall *real_glTbufferMask3DFX)(GLuint mask) = 0;
    void skibidigfx_glTbufferMask3DFX(GLuint mask)
    {
    
    real_glTbufferMask3DFX(mask);
    }
void(__stdcall *real_glDebugMessageEnableAMD)(GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled) = 0;
    void skibidigfx_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
    {
    
    real_glDebugMessageEnableAMD(category,severity,count,ids,enabled);
    }
void(__stdcall *real_glDebugMessageInsertAMD)(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf) = 0;
    void skibidigfx_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf)
    {
    
    real_glDebugMessageInsertAMD(category,severity,id,length,buf);
    }
void(__stdcall *real_glDebugMessageCallbackAMD)(GLDEBUGPROCAMD callback, void* userParam) = 0;
    void skibidigfx_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void* userParam)
    {
    
    real_glDebugMessageCallbackAMD(callback,userParam);
    }
GLuint(__stdcall *real_glGetDebugMessageLogAMD)(GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message) = 0;
    GLuint skibidigfx_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message)
    {
    
    return real_glGetDebugMessageLogAMD(count,bufsize,categories,severities,ids,lengths,message);
    }
void(__stdcall *real_glBlendFuncIndexedAMD)(GLuint buf, GLenum src, GLenum dst) = 0;
    void skibidigfx_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
    {
    
    real_glBlendFuncIndexedAMD(buf,src,dst);
    }
void(__stdcall *real_glBlendFuncSeparateIndexedAMD)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) = 0;
    void skibidigfx_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
    {
    
    real_glBlendFuncSeparateIndexedAMD(buf,srcRGB,dstRGB,srcAlpha,dstAlpha);
    }
void(__stdcall *real_glBlendEquationIndexedAMD)(GLuint buf, GLenum mode) = 0;
    void skibidigfx_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
    {
    
    real_glBlendEquationIndexedAMD(buf,mode);
    }
void(__stdcall *real_glBlendEquationSeparateIndexedAMD)(GLuint buf, GLenum modeRGB, GLenum modeAlpha) = 0;
    void skibidigfx_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
    {
    
    real_glBlendEquationSeparateIndexedAMD(buf,modeRGB,modeAlpha);
    }
void(__stdcall *real_glRenderbufferStorageMultisampleAdvancedAMD)(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glRenderbufferStorageMultisampleAdvancedAMD(target,samples,storageSamples,internalformat,width,height);
    }
void(__stdcall *real_glNamedRenderbufferStorageMultisampleAdvancedAMD)(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer,samples,storageSamples,internalformat,width,height);
    }
void(__stdcall *real_glFramebufferSamplePositionsfvAMD)(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat* values) = 0;
    void skibidigfx_glFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat* values)
    {
    
    real_glFramebufferSamplePositionsfvAMD(target,numsamples,pixelindex,values);
    }
void(__stdcall *real_glNamedFramebufferSamplePositionsfvAMD)(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat* values) = 0;
    void skibidigfx_glNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat* values)
    {
    
    real_glNamedFramebufferSamplePositionsfvAMD(framebuffer,numsamples,pixelindex,values);
    }
void(__stdcall *real_glGetFramebufferParameterfvAMD)(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values) = 0;
    void skibidigfx_glGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values)
    {
    
    real_glGetFramebufferParameterfvAMD(target,pname,numsamples,pixelindex,size,values);
    }
void(__stdcall *real_glGetNamedFramebufferParameterfvAMD)(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values) = 0;
    void skibidigfx_glGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat* values)
    {
    
    real_glGetNamedFramebufferParameterfvAMD(framebuffer,pname,numsamples,pixelindex,size,values);
    }
void(__stdcall *real_glUniform1i64NV)(GLint location, GLint64EXT x) = 0;
    void skibidigfx_glUniform1i64NV(GLint location, GLint64EXT x)
    {
    
    real_glUniform1i64NV(location,x);
    }
void(__stdcall *real_glUniform2i64NV)(GLint location, GLint64EXT x, GLint64EXT y) = 0;
    void skibidigfx_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
    {
    
    real_glUniform2i64NV(location,x,y);
    }
void(__stdcall *real_glUniform3i64NV)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) = 0;
    void skibidigfx_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
    {
    
    real_glUniform3i64NV(location,x,y,z);
    }
void(__stdcall *real_glUniform4i64NV)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) = 0;
    void skibidigfx_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
    {
    
    real_glUniform4i64NV(location,x,y,z,w);
    }
void(__stdcall *real_glUniform1i64vNV)(GLint location, GLsizei count, const GLint64EXT* value) = 0;
    void skibidigfx_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    real_glUniform1i64vNV(location,count,value);
    }
void(__stdcall *real_glUniform2i64vNV)(GLint location, GLsizei count, const GLint64EXT* value) = 0;
    void skibidigfx_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    real_glUniform2i64vNV(location,count,value);
    }
void(__stdcall *real_glUniform3i64vNV)(GLint location, GLsizei count, const GLint64EXT* value) = 0;
    void skibidigfx_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    real_glUniform3i64vNV(location,count,value);
    }
void(__stdcall *real_glUniform4i64vNV)(GLint location, GLsizei count, const GLint64EXT* value) = 0;
    void skibidigfx_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    real_glUniform4i64vNV(location,count,value);
    }
void(__stdcall *real_glUniform1ui64NV)(GLint location, GLuint64EXT x) = 0;
    void skibidigfx_glUniform1ui64NV(GLint location, GLuint64EXT x)
    {
    
    real_glUniform1ui64NV(location,x);
    }
void(__stdcall *real_glUniform2ui64NV)(GLint location, GLuint64EXT x, GLuint64EXT y) = 0;
    void skibidigfx_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
    {
    
    real_glUniform2ui64NV(location,x,y);
    }
void(__stdcall *real_glUniform3ui64NV)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) = 0;
    void skibidigfx_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
    {
    
    real_glUniform3ui64NV(location,x,y,z);
    }
void(__stdcall *real_glUniform4ui64NV)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) = 0;
    void skibidigfx_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
    {
    
    real_glUniform4ui64NV(location,x,y,z,w);
    }
void(__stdcall *real_glUniform1ui64vNV)(GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glUniform1ui64vNV(location,count,value);
    }
void(__stdcall *real_glUniform2ui64vNV)(GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glUniform2ui64vNV(location,count,value);
    }
void(__stdcall *real_glUniform3ui64vNV)(GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glUniform3ui64vNV(location,count,value);
    }
void(__stdcall *real_glUniform4ui64vNV)(GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glUniform4ui64vNV(location,count,value);
    }
void(__stdcall *real_glGetUniformi64vNV)(GLuint program, GLint location, GLint64EXT* params) = 0;
    void skibidigfx_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT* params)
    {
    
    real_glGetUniformi64vNV(program,location,params);
    }
void(__stdcall *real_glGetUniformui64vNV)(GLuint program, GLint location, GLuint64EXT* params) = 0;
    void skibidigfx_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT* params)
    {
    
    real_glGetUniformui64vNV(program,location,params);
    }
void(__stdcall *real_glProgramUniform1i64NV)(GLuint program, GLint location, GLint64EXT x) = 0;
    void skibidigfx_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
    {
    
    real_glProgramUniform1i64NV(program,location,x);
    }
void(__stdcall *real_glProgramUniform2i64NV)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) = 0;
    void skibidigfx_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
    {
    
    real_glProgramUniform2i64NV(program,location,x,y);
    }
void(__stdcall *real_glProgramUniform3i64NV)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) = 0;
    void skibidigfx_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
    {
    
    real_glProgramUniform3i64NV(program,location,x,y,z);
    }
void(__stdcall *real_glProgramUniform4i64NV)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) = 0;
    void skibidigfx_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
    {
    
    real_glProgramUniform4i64NV(program,location,x,y,z,w);
    }
void(__stdcall *real_glProgramUniform1i64vNV)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value) = 0;
    void skibidigfx_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    real_glProgramUniform1i64vNV(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2i64vNV)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value) = 0;
    void skibidigfx_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    real_glProgramUniform2i64vNV(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3i64vNV)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value) = 0;
    void skibidigfx_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    real_glProgramUniform3i64vNV(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4i64vNV)(GLuint program, GLint location, GLsizei count, const GLint64EXT* value) = 0;
    void skibidigfx_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT* value)
    {
    
    real_glProgramUniform4i64vNV(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform1ui64NV)(GLuint program, GLint location, GLuint64EXT x) = 0;
    void skibidigfx_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
    {
    
    real_glProgramUniform1ui64NV(program,location,x);
    }
void(__stdcall *real_glProgramUniform2ui64NV)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) = 0;
    void skibidigfx_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
    {
    
    real_glProgramUniform2ui64NV(program,location,x,y);
    }
void(__stdcall *real_glProgramUniform3ui64NV)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) = 0;
    void skibidigfx_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
    {
    
    real_glProgramUniform3ui64NV(program,location,x,y,z);
    }
void(__stdcall *real_glProgramUniform4ui64NV)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) = 0;
    void skibidigfx_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
    {
    
    real_glProgramUniform4ui64NV(program,location,x,y,z,w);
    }
void(__stdcall *real_glProgramUniform1ui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glProgramUniform1ui64vNV(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2ui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glProgramUniform2ui64vNV(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3ui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glProgramUniform3ui64vNV(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4ui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glProgramUniform4ui64vNV(program,location,count,value);
    }
void(__stdcall *real_glVertexAttribParameteriAMD)(GLuint index, GLenum pname, GLint param) = 0;
    void skibidigfx_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)
    {
    
    real_glVertexAttribParameteriAMD(index,pname,param);
    }
void(__stdcall *real_glMultiDrawArraysIndirectAMD)(GLenum mode, const void* indirect, GLsizei primcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawArraysIndirectAMD(GLenum mode, const void* indirect, GLsizei primcount, GLsizei stride)
    {
    
    real_glMultiDrawArraysIndirectAMD(mode,indirect,primcount,stride);
    }
void(__stdcall *real_glMultiDrawElementsIndirectAMD)(GLenum mode, GLenum type, const void* indirect, GLsizei primcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void* indirect, GLsizei primcount, GLsizei stride)
    {
    
    real_glMultiDrawElementsIndirectAMD(mode,type,indirect,primcount,stride);
    }
void(__stdcall *real_glGenNamesAMD)(GLenum identifier, GLuint num, GLuint* names) = 0;
    void skibidigfx_glGenNamesAMD(GLenum identifier, GLuint num, GLuint* names)
    {
    
    real_glGenNamesAMD(identifier,num,names);
    }
void(__stdcall *real_glDeleteNamesAMD)(GLenum identifier, GLuint num, const GLuint* names) = 0;
    void skibidigfx_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint* names)
    {
    
    real_glDeleteNamesAMD(identifier,num,names);
    }
GLboolean(__stdcall *real_glIsNameAMD)(GLenum identifier, GLuint name) = 0;
    GLboolean skibidigfx_glIsNameAMD(GLenum identifier, GLuint name)
    {
    
    return real_glIsNameAMD(identifier,name);
    }
void(__stdcall *real_glQueryObjectParameteruiAMD)(GLenum target, GLuint id, GLenum pname, GLuint param) = 0;
    void skibidigfx_glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param)
    {
    
    real_glQueryObjectParameteruiAMD(target,id,pname,param);
    }
void(__stdcall *real_glGetPerfMonitorGroupsAMD)(GLint* numGroups, GLsizei groupsSize, GLuint* groups) = 0;
    void skibidigfx_glGetPerfMonitorGroupsAMD(GLint* numGroups, GLsizei groupsSize, GLuint* groups)
    {
    
    real_glGetPerfMonitorGroupsAMD(numGroups,groupsSize,groups);
    }
void(__stdcall *real_glGetPerfMonitorCountersAMD)(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters) = 0;
    void skibidigfx_glGetPerfMonitorCountersAMD(GLuint group, GLint* numCounters, GLint* maxActiveCounters, GLsizei counterSize, GLuint* counters)
    {
    
    real_glGetPerfMonitorCountersAMD(group,numCounters,maxActiveCounters,counterSize,counters);
    }
void(__stdcall *real_glGetPerfMonitorGroupStringAMD)(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString) = 0;
    void skibidigfx_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei* length, GLchar* groupString)
    {
    
    real_glGetPerfMonitorGroupStringAMD(group,bufSize,length,groupString);
    }
void(__stdcall *real_glGetPerfMonitorCounterStringAMD)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString) = 0;
    void skibidigfx_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei* length, GLchar* counterString)
    {
    
    real_glGetPerfMonitorCounterStringAMD(group,counter,bufSize,length,counterString);
    }
void(__stdcall *real_glGetPerfMonitorCounterInfoAMD)(GLuint group, GLuint counter, GLenum pname, void* data) = 0;
    void skibidigfx_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void* data)
    {
    
    real_glGetPerfMonitorCounterInfoAMD(group,counter,pname,data);
    }
void(__stdcall *real_glGenPerfMonitorsAMD)(GLsizei n, GLuint* monitors) = 0;
    void skibidigfx_glGenPerfMonitorsAMD(GLsizei n, GLuint* monitors)
    {
    
    real_glGenPerfMonitorsAMD(n,monitors);
    }
void(__stdcall *real_glDeletePerfMonitorsAMD)(GLsizei n, GLuint* monitors) = 0;
    void skibidigfx_glDeletePerfMonitorsAMD(GLsizei n, GLuint* monitors)
    {
    
    real_glDeletePerfMonitorsAMD(n,monitors);
    }
void(__stdcall *real_glSelectPerfMonitorCountersAMD)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList) = 0;
    void skibidigfx_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint* counterList)
    {
    
    real_glSelectPerfMonitorCountersAMD(monitor,enable,group,numCounters,counterList);
    }
void(__stdcall *real_glBeginPerfMonitorAMD)(GLuint monitor) = 0;
    void skibidigfx_glBeginPerfMonitorAMD(GLuint monitor)
    {
    
    real_glBeginPerfMonitorAMD(monitor);
    }
void(__stdcall *real_glEndPerfMonitorAMD)(GLuint monitor) = 0;
    void skibidigfx_glEndPerfMonitorAMD(GLuint monitor)
    {
    
    real_glEndPerfMonitorAMD(monitor);
    }
void(__stdcall *real_glGetPerfMonitorCounterDataAMD)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten) = 0;
    void skibidigfx_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint* data, GLint* bytesWritten)
    {
    
    real_glGetPerfMonitorCounterDataAMD(monitor,pname,dataSize,data,bytesWritten);
    }
void(__stdcall *real_glSetMultisamplefvAMD)(GLenum pname, GLuint index, const GLfloat* val) = 0;
    void skibidigfx_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat* val)
    {
    
    real_glSetMultisamplefvAMD(pname,index,val);
    }
void(__stdcall *real_glTexStorageSparseAMD)(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) = 0;
    void skibidigfx_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
    {
    
    real_glTexStorageSparseAMD(target,internalFormat,width,height,depth,layers,flags);
    }
void(__stdcall *real_glTextureStorageSparseAMD)(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) = 0;
    void skibidigfx_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
    {
    
    real_glTextureStorageSparseAMD(texture,target,internalFormat,width,height,depth,layers,flags);
    }
void(__stdcall *real_glStencilOpValueAMD)(GLenum face, GLuint value) = 0;
    void skibidigfx_glStencilOpValueAMD(GLenum face, GLuint value)
    {
    
    real_glStencilOpValueAMD(face,value);
    }
void(__stdcall *real_glTessellationFactorAMD)(GLfloat factor) = 0;
    void skibidigfx_glTessellationFactorAMD(GLfloat factor)
    {
    
    real_glTessellationFactorAMD(factor);
    }
void(__stdcall *real_glTessellationModeAMD)(GLenum mode) = 0;
    void skibidigfx_glTessellationModeAMD(GLenum mode)
    {
    
    real_glTessellationModeAMD(mode);
    }
void(__stdcall *real_glElementPointerAPPLE)(GLenum type, const void* pointer) = 0;
    void skibidigfx_glElementPointerAPPLE(GLenum type, const void* pointer)
    {
    
    real_glElementPointerAPPLE(type,pointer);
    }
void(__stdcall *real_glDrawElementArrayAPPLE)(GLenum mode, GLint first, GLsizei count) = 0;
    void skibidigfx_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
    {
    
    real_glDrawElementArrayAPPLE(mode,first,count);
    }
void(__stdcall *real_glDrawRangeElementArrayAPPLE)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) = 0;
    void skibidigfx_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
    {
    
    real_glDrawRangeElementArrayAPPLE(mode,start,end,first,count);
    }
void(__stdcall *real_glMultiDrawElementArrayAPPLE)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount) = 0;
    void skibidigfx_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
    {
    
    real_glMultiDrawElementArrayAPPLE(mode,first,count,primcount);
    }
void(__stdcall *real_glMultiDrawRangeElementArrayAPPLE)(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount) = 0;
    void skibidigfx_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei* count, GLsizei primcount)
    {
    
    real_glMultiDrawRangeElementArrayAPPLE(mode,start,end,first,count,primcount);
    }
void(__stdcall *real_glGenFencesAPPLE)(GLsizei n, GLuint* fences) = 0;
    void skibidigfx_glGenFencesAPPLE(GLsizei n, GLuint* fences)
    {
    
    real_glGenFencesAPPLE(n,fences);
    }
void(__stdcall *real_glDeleteFencesAPPLE)(GLsizei n, const GLuint* fences) = 0;
    void skibidigfx_glDeleteFencesAPPLE(GLsizei n, const GLuint* fences)
    {
    
    real_glDeleteFencesAPPLE(n,fences);
    }
void(__stdcall *real_glSetFenceAPPLE)(GLuint fence) = 0;
    void skibidigfx_glSetFenceAPPLE(GLuint fence)
    {
    
    real_glSetFenceAPPLE(fence);
    }
GLboolean(__stdcall *real_glIsFenceAPPLE)(GLuint fence) = 0;
    GLboolean skibidigfx_glIsFenceAPPLE(GLuint fence)
    {
    
    return real_glIsFenceAPPLE(fence);
    }
GLboolean(__stdcall *real_glTestFenceAPPLE)(GLuint fence) = 0;
    GLboolean skibidigfx_glTestFenceAPPLE(GLuint fence)
    {
    
    return real_glTestFenceAPPLE(fence);
    }
void(__stdcall *real_glFinishFenceAPPLE)(GLuint fence) = 0;
    void skibidigfx_glFinishFenceAPPLE(GLuint fence)
    {
    
    real_glFinishFenceAPPLE(fence);
    }
GLboolean(__stdcall *real_glTestObjectAPPLE)(GLenum object, GLuint name) = 0;
    GLboolean skibidigfx_glTestObjectAPPLE(GLenum object, GLuint name)
    {
    
    return real_glTestObjectAPPLE(object,name);
    }
void(__stdcall *real_glFinishObjectAPPLE)(GLenum object, GLint name) = 0;
    void skibidigfx_glFinishObjectAPPLE(GLenum object, GLint name)
    {
    
    real_glFinishObjectAPPLE(object,name);
    }
void(__stdcall *real_glBufferParameteriAPPLE)(GLenum target, GLenum pname, GLint param) = 0;
    void skibidigfx_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
    {
    
    real_glBufferParameteriAPPLE(target,pname,param);
    }
void(__stdcall *real_glFlushMappedBufferRangeAPPLE)(GLenum target, GLintptr offset, GLsizeiptr size) = 0;
    void skibidigfx_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
    {
    
    real_glFlushMappedBufferRangeAPPLE(target,offset,size);
    }
GLenum(__stdcall *real_glObjectPurgeableAPPLE)(GLenum objectType, GLuint name, GLenum option) = 0;
    GLenum skibidigfx_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
    {
    
    return real_glObjectPurgeableAPPLE(objectType,name,option);
    }
GLenum(__stdcall *real_glObjectUnpurgeableAPPLE)(GLenum objectType, GLuint name, GLenum option) = 0;
    GLenum skibidigfx_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
    {
    
    return real_glObjectUnpurgeableAPPLE(objectType,name,option);
    }
void(__stdcall *real_glGetObjectParameterivAPPLE)(GLenum objectType, GLuint name, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint* params)
    {
    
    real_glGetObjectParameterivAPPLE(objectType,name,pname,params);
    }
void(__stdcall *real_glTextureRangeAPPLE)(GLenum target, GLsizei length, const void* pointer) = 0;
    void skibidigfx_glTextureRangeAPPLE(GLenum target, GLsizei length, const void* pointer)
    {
    
    real_glTextureRangeAPPLE(target,length,pointer);
    }
void(__stdcall *real_glGetTexParameterPointervAPPLE)(GLenum target, GLenum pname, void** params) = 0;
    void skibidigfx_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void** params)
    {
    
    real_glGetTexParameterPointervAPPLE(target,pname,params);
    }
void(__stdcall *real_glBindVertexArrayAPPLE)(GLuint array) = 0;
    void skibidigfx_glBindVertexArrayAPPLE(GLuint array)
    {
    
    real_glBindVertexArrayAPPLE(array);
    }
void(__stdcall *real_glDeleteVertexArraysAPPLE)(GLsizei n, const GLuint* arrays) = 0;
    void skibidigfx_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint* arrays)
    {
    
    real_glDeleteVertexArraysAPPLE(n,arrays);
    }
void(__stdcall *real_glGenVertexArraysAPPLE)(GLsizei n, GLuint* arrays) = 0;
    void skibidigfx_glGenVertexArraysAPPLE(GLsizei n, GLuint* arrays)
    {
    
    real_glGenVertexArraysAPPLE(n,arrays);
    }
GLboolean(__stdcall *real_glIsVertexArrayAPPLE)(GLuint array) = 0;
    GLboolean skibidigfx_glIsVertexArrayAPPLE(GLuint array)
    {
    
    return real_glIsVertexArrayAPPLE(array);
    }
void(__stdcall *real_glVertexArrayRangeAPPLE)(GLsizei length, void* pointer) = 0;
    void skibidigfx_glVertexArrayRangeAPPLE(GLsizei length, void* pointer)
    {
    
    real_glVertexArrayRangeAPPLE(length,pointer);
    }
void(__stdcall *real_glFlushVertexArrayRangeAPPLE)(GLsizei length, void* pointer) = 0;
    void skibidigfx_glFlushVertexArrayRangeAPPLE(GLsizei length, void* pointer)
    {
    
    real_glFlushVertexArrayRangeAPPLE(length,pointer);
    }
void(__stdcall *real_glVertexArrayParameteriAPPLE)(GLenum pname, GLint param) = 0;
    void skibidigfx_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
    {
    
    real_glVertexArrayParameteriAPPLE(pname,param);
    }
void(__stdcall *real_glEnableVertexAttribAPPLE)(GLuint index, GLenum pname) = 0;
    void skibidigfx_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
    {
    
    real_glEnableVertexAttribAPPLE(index,pname);
    }
void(__stdcall *real_glDisableVertexAttribAPPLE)(GLuint index, GLenum pname) = 0;
    void skibidigfx_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
    {
    
    real_glDisableVertexAttribAPPLE(index,pname);
    }
GLboolean(__stdcall *real_glIsVertexAttribEnabledAPPLE)(GLuint index, GLenum pname) = 0;
    GLboolean skibidigfx_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
    {
    
    return real_glIsVertexAttribEnabledAPPLE(index,pname);
    }
void(__stdcall *real_glMapVertexAttrib1dAPPLE)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points) = 0;
    void skibidigfx_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points)
    {
    
    real_glMapVertexAttrib1dAPPLE(index,size,u1,u2,stride,order,points);
    }
void(__stdcall *real_glMapVertexAttrib1fAPPLE)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points) = 0;
    void skibidigfx_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points)
    {
    
    real_glMapVertexAttrib1fAPPLE(index,size,u1,u2,stride,order,points);
    }
void(__stdcall *real_glMapVertexAttrib2dAPPLE)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points) = 0;
    void skibidigfx_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points)
    {
    
    real_glMapVertexAttrib2dAPPLE(index,size,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
    }
void(__stdcall *real_glMapVertexAttrib2fAPPLE)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points) = 0;
    void skibidigfx_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points)
    {
    
    real_glMapVertexAttrib2fAPPLE(index,size,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points);
    }
void(__stdcall *real_glDrawBuffersATI)(GLsizei n, const GLenum* bufs) = 0;
    void skibidigfx_glDrawBuffersATI(GLsizei n, const GLenum* bufs)
    {
    
    real_glDrawBuffersATI(n,bufs);
    }
void(__stdcall *real_glElementPointerATI)(GLenum type, const void* pointer) = 0;
    void skibidigfx_glElementPointerATI(GLenum type, const void* pointer)
    {
    
    real_glElementPointerATI(type,pointer);
    }
void(__stdcall *real_glDrawElementArrayATI)(GLenum mode, GLsizei count) = 0;
    void skibidigfx_glDrawElementArrayATI(GLenum mode, GLsizei count)
    {
    
    real_glDrawElementArrayATI(mode,count);
    }
void(__stdcall *real_glDrawRangeElementArrayATI)(GLenum mode, GLuint start, GLuint end, GLsizei count) = 0;
    void skibidigfx_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
    {
    
    real_glDrawRangeElementArrayATI(mode,start,end,count);
    }
void(__stdcall *real_glTexBumpParameterivATI)(GLenum pname, const GLint* param) = 0;
    void skibidigfx_glTexBumpParameterivATI(GLenum pname, const GLint* param)
    {
    
    real_glTexBumpParameterivATI(pname,param);
    }
void(__stdcall *real_glTexBumpParameterfvATI)(GLenum pname, const GLfloat* param) = 0;
    void skibidigfx_glTexBumpParameterfvATI(GLenum pname, const GLfloat* param)
    {
    
    real_glTexBumpParameterfvATI(pname,param);
    }
void(__stdcall *real_glGetTexBumpParameterivATI)(GLenum pname, GLint* param) = 0;
    void skibidigfx_glGetTexBumpParameterivATI(GLenum pname, GLint* param)
    {
    
    real_glGetTexBumpParameterivATI(pname,param);
    }
void(__stdcall *real_glGetTexBumpParameterfvATI)(GLenum pname, GLfloat* param) = 0;
    void skibidigfx_glGetTexBumpParameterfvATI(GLenum pname, GLfloat* param)
    {
    
    real_glGetTexBumpParameterfvATI(pname,param);
    }
GLuint(__stdcall *real_glGenFragmentShadersATI)(GLuint range) = 0;
    GLuint skibidigfx_glGenFragmentShadersATI(GLuint range)
    {
    
    return real_glGenFragmentShadersATI(range);
    }
void(__stdcall *real_glBindFragmentShaderATI)(GLuint id) = 0;
    void skibidigfx_glBindFragmentShaderATI(GLuint id)
    {
    
    real_glBindFragmentShaderATI(id);
    }
void(__stdcall *real_glDeleteFragmentShaderATI)(GLuint id) = 0;
    void skibidigfx_glDeleteFragmentShaderATI(GLuint id)
    {
    
    real_glDeleteFragmentShaderATI(id);
    }
void(__stdcall *real_glBeginFragmentShaderATI)() = 0;
    void skibidigfx_glBeginFragmentShaderATI()
    {
    
    real_glBeginFragmentShaderATI();
    }
void(__stdcall *real_glEndFragmentShaderATI)() = 0;
    void skibidigfx_glEndFragmentShaderATI()
    {
    
    real_glEndFragmentShaderATI();
    }
void(__stdcall *real_glPassTexCoordATI)(GLuint dst, GLuint coord, GLenum swizzle) = 0;
    void skibidigfx_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
    {
    
    real_glPassTexCoordATI(dst,coord,swizzle);
    }
void(__stdcall *real_glSampleMapATI)(GLuint dst, GLuint interp, GLenum swizzle) = 0;
    void skibidigfx_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
    {
    
    real_glSampleMapATI(dst,interp,swizzle);
    }
void(__stdcall *real_glColorFragmentOp1ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) = 0;
    void skibidigfx_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
    {
    
    real_glColorFragmentOp1ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod);
    }
void(__stdcall *real_glColorFragmentOp2ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) = 0;
    void skibidigfx_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
    {
    
    real_glColorFragmentOp2ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod);
    }
void(__stdcall *real_glColorFragmentOp3ATI)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) = 0;
    void skibidigfx_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
    {
    
    real_glColorFragmentOp3ATI(op,dst,dstMask,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod,arg3,arg3Rep,arg3Mod);
    }
void(__stdcall *real_glAlphaFragmentOp1ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) = 0;
    void skibidigfx_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
    {
    
    real_glAlphaFragmentOp1ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod);
    }
void(__stdcall *real_glAlphaFragmentOp2ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) = 0;
    void skibidigfx_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
    {
    
    real_glAlphaFragmentOp2ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod);
    }
void(__stdcall *real_glAlphaFragmentOp3ATI)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) = 0;
    void skibidigfx_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
    {
    
    real_glAlphaFragmentOp3ATI(op,dst,dstMod,arg1,arg1Rep,arg1Mod,arg2,arg2Rep,arg2Mod,arg3,arg3Rep,arg3Mod);
    }
void(__stdcall *real_glSetFragmentShaderConstantATI)(GLuint dst, const GLfloat* value) = 0;
    void skibidigfx_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat* value)
    {
    
    real_glSetFragmentShaderConstantATI(dst,value);
    }
void *(__stdcall *real_glMapObjectBufferATI)(GLuint buffer) = 0;
    void * skibidigfx_glMapObjectBufferATI(GLuint buffer)
    {
    
    return real_glMapObjectBufferATI(buffer);
    }
void(__stdcall *real_glUnmapObjectBufferATI)(GLuint buffer) = 0;
    void skibidigfx_glUnmapObjectBufferATI(GLuint buffer)
    {
    
    real_glUnmapObjectBufferATI(buffer);
    }
void(__stdcall *real_glPNTrianglesiATI)(GLenum pname, GLint param) = 0;
    void skibidigfx_glPNTrianglesiATI(GLenum pname, GLint param)
    {
    
    real_glPNTrianglesiATI(pname,param);
    }
void(__stdcall *real_glPNTrianglesfATI)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glPNTrianglesfATI(GLenum pname, GLfloat param)
    {
    
    real_glPNTrianglesfATI(pname,param);
    }
void(__stdcall *real_glStencilOpSeparateATI)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) = 0;
    void skibidigfx_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
    {
    
    real_glStencilOpSeparateATI(face,sfail,dpfail,dppass);
    }
void(__stdcall *real_glStencilFuncSeparateATI)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) = 0;
    void skibidigfx_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
    {
    
    real_glStencilFuncSeparateATI(frontfunc,backfunc,ref,mask);
    }
GLuint(__stdcall *real_glNewObjectBufferATI)(GLsizei size, const void* pointer, GLenum usage) = 0;
    GLuint skibidigfx_glNewObjectBufferATI(GLsizei size, const void* pointer, GLenum usage)
    {
    
    return real_glNewObjectBufferATI(size,pointer,usage);
    }
GLboolean(__stdcall *real_glIsObjectBufferATI)(GLuint buffer) = 0;
    GLboolean skibidigfx_glIsObjectBufferATI(GLuint buffer)
    {
    
    return real_glIsObjectBufferATI(buffer);
    }
void(__stdcall *real_glUpdateObjectBufferATI)(GLuint buffer, GLuint offset, GLsizei size, const void* pointer, GLenum preserve) = 0;
    void skibidigfx_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void* pointer, GLenum preserve)
    {
    
    real_glUpdateObjectBufferATI(buffer,offset,size,pointer,preserve);
    }
void(__stdcall *real_glGetObjectBufferfvATI)(GLuint buffer, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat* params)
    {
    
    real_glGetObjectBufferfvATI(buffer,pname,params);
    }
void(__stdcall *real_glGetObjectBufferivATI)(GLuint buffer, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint* params)
    {
    
    real_glGetObjectBufferivATI(buffer,pname,params);
    }
void(__stdcall *real_glFreeObjectBufferATI)(GLuint buffer) = 0;
    void skibidigfx_glFreeObjectBufferATI(GLuint buffer)
    {
    
    real_glFreeObjectBufferATI(buffer);
    }
void(__stdcall *real_glArrayObjectATI)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) = 0;
    void skibidigfx_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
    {
    
    real_glArrayObjectATI(array,size,type,stride,buffer,offset);
    }
void(__stdcall *real_glGetArrayObjectfvATI)(GLenum array, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat* params)
    {
    
    real_glGetArrayObjectfvATI(array,pname,params);
    }
void(__stdcall *real_glGetArrayObjectivATI)(GLenum array, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint* params)
    {
    
    real_glGetArrayObjectivATI(array,pname,params);
    }
void(__stdcall *real_glVariantArrayObjectATI)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) = 0;
    void skibidigfx_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
    {
    
    real_glVariantArrayObjectATI(id,type,stride,buffer,offset);
    }
void(__stdcall *real_glGetVariantArrayObjectfvATI)(GLuint id, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat* params)
    {
    
    real_glGetVariantArrayObjectfvATI(id,pname,params);
    }
void(__stdcall *real_glGetVariantArrayObjectivATI)(GLuint id, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint* params)
    {
    
    real_glGetVariantArrayObjectivATI(id,pname,params);
    }
void(__stdcall *real_glVertexAttribArrayObjectATI)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) = 0;
    void skibidigfx_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
    {
    
    real_glVertexAttribArrayObjectATI(index,size,type,normalized,stride,buffer,offset);
    }
void(__stdcall *real_glGetVertexAttribArrayObjectfvATI)(GLuint index, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat* params)
    {
    
    real_glGetVertexAttribArrayObjectfvATI(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribArrayObjectivATI)(GLuint index, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint* params)
    {
    
    real_glGetVertexAttribArrayObjectivATI(index,pname,params);
    }
void(__stdcall *real_glVertexStream1sATI)(GLenum stream, GLshort x) = 0;
    void skibidigfx_glVertexStream1sATI(GLenum stream, GLshort x)
    {
    
    real_glVertexStream1sATI(stream,x);
    }
void(__stdcall *real_glVertexStream1svATI)(GLenum stream, const GLshort* coords) = 0;
    void skibidigfx_glVertexStream1svATI(GLenum stream, const GLshort* coords)
    {
    
    real_glVertexStream1svATI(stream,coords);
    }
void(__stdcall *real_glVertexStream1iATI)(GLenum stream, GLint x) = 0;
    void skibidigfx_glVertexStream1iATI(GLenum stream, GLint x)
    {
    
    real_glVertexStream1iATI(stream,x);
    }
void(__stdcall *real_glVertexStream1ivATI)(GLenum stream, const GLint* coords) = 0;
    void skibidigfx_glVertexStream1ivATI(GLenum stream, const GLint* coords)
    {
    
    real_glVertexStream1ivATI(stream,coords);
    }
void(__stdcall *real_glVertexStream1fATI)(GLenum stream, GLfloat x) = 0;
    void skibidigfx_glVertexStream1fATI(GLenum stream, GLfloat x)
    {
    
    real_glVertexStream1fATI(stream,x);
    }
void(__stdcall *real_glVertexStream1fvATI)(GLenum stream, const GLfloat* coords) = 0;
    void skibidigfx_glVertexStream1fvATI(GLenum stream, const GLfloat* coords)
    {
    
    real_glVertexStream1fvATI(stream,coords);
    }
void(__stdcall *real_glVertexStream1dATI)(GLenum stream, GLdouble x) = 0;
    void skibidigfx_glVertexStream1dATI(GLenum stream, GLdouble x)
    {
    
    real_glVertexStream1dATI(stream,x);
    }
void(__stdcall *real_glVertexStream1dvATI)(GLenum stream, const GLdouble* coords) = 0;
    void skibidigfx_glVertexStream1dvATI(GLenum stream, const GLdouble* coords)
    {
    
    real_glVertexStream1dvATI(stream,coords);
    }
void(__stdcall *real_glVertexStream2sATI)(GLenum stream, GLshort x, GLshort y) = 0;
    void skibidigfx_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
    {
    
    real_glVertexStream2sATI(stream,x,y);
    }
void(__stdcall *real_glVertexStream2svATI)(GLenum stream, const GLshort* coords) = 0;
    void skibidigfx_glVertexStream2svATI(GLenum stream, const GLshort* coords)
    {
    
    real_glVertexStream2svATI(stream,coords);
    }
void(__stdcall *real_glVertexStream2iATI)(GLenum stream, GLint x, GLint y) = 0;
    void skibidigfx_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
    {
    
    real_glVertexStream2iATI(stream,x,y);
    }
void(__stdcall *real_glVertexStream2ivATI)(GLenum stream, const GLint* coords) = 0;
    void skibidigfx_glVertexStream2ivATI(GLenum stream, const GLint* coords)
    {
    
    real_glVertexStream2ivATI(stream,coords);
    }
void(__stdcall *real_glVertexStream2fATI)(GLenum stream, GLfloat x, GLfloat y) = 0;
    void skibidigfx_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
    {
    
    real_glVertexStream2fATI(stream,x,y);
    }
void(__stdcall *real_glVertexStream2fvATI)(GLenum stream, const GLfloat* coords) = 0;
    void skibidigfx_glVertexStream2fvATI(GLenum stream, const GLfloat* coords)
    {
    
    real_glVertexStream2fvATI(stream,coords);
    }
void(__stdcall *real_glVertexStream2dATI)(GLenum stream, GLdouble x, GLdouble y) = 0;
    void skibidigfx_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
    {
    
    real_glVertexStream2dATI(stream,x,y);
    }
void(__stdcall *real_glVertexStream2dvATI)(GLenum stream, const GLdouble* coords) = 0;
    void skibidigfx_glVertexStream2dvATI(GLenum stream, const GLdouble* coords)
    {
    
    real_glVertexStream2dvATI(stream,coords);
    }
void(__stdcall *real_glVertexStream3sATI)(GLenum stream, GLshort x, GLshort y, GLshort z) = 0;
    void skibidigfx_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
    {
    
    real_glVertexStream3sATI(stream,x,y,z);
    }
void(__stdcall *real_glVertexStream3svATI)(GLenum stream, const GLshort* coords) = 0;
    void skibidigfx_glVertexStream3svATI(GLenum stream, const GLshort* coords)
    {
    
    real_glVertexStream3svATI(stream,coords);
    }
void(__stdcall *real_glVertexStream3iATI)(GLenum stream, GLint x, GLint y, GLint z) = 0;
    void skibidigfx_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
    {
    
    real_glVertexStream3iATI(stream,x,y,z);
    }
void(__stdcall *real_glVertexStream3ivATI)(GLenum stream, const GLint* coords) = 0;
    void skibidigfx_glVertexStream3ivATI(GLenum stream, const GLint* coords)
    {
    
    real_glVertexStream3ivATI(stream,coords);
    }
void(__stdcall *real_glVertexStream3fATI)(GLenum stream, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glVertexStream3fATI(stream,x,y,z);
    }
void(__stdcall *real_glVertexStream3fvATI)(GLenum stream, const GLfloat* coords) = 0;
    void skibidigfx_glVertexStream3fvATI(GLenum stream, const GLfloat* coords)
    {
    
    real_glVertexStream3fvATI(stream,coords);
    }
void(__stdcall *real_glVertexStream3dATI)(GLenum stream, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glVertexStream3dATI(stream,x,y,z);
    }
void(__stdcall *real_glVertexStream3dvATI)(GLenum stream, const GLdouble* coords) = 0;
    void skibidigfx_glVertexStream3dvATI(GLenum stream, const GLdouble* coords)
    {
    
    real_glVertexStream3dvATI(stream,coords);
    }
void(__stdcall *real_glVertexStream4sATI)(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) = 0;
    void skibidigfx_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    real_glVertexStream4sATI(stream,x,y,z,w);
    }
void(__stdcall *real_glVertexStream4svATI)(GLenum stream, const GLshort* coords) = 0;
    void skibidigfx_glVertexStream4svATI(GLenum stream, const GLshort* coords)
    {
    
    real_glVertexStream4svATI(stream,coords);
    }
void(__stdcall *real_glVertexStream4iATI)(GLenum stream, GLint x, GLint y, GLint z, GLint w) = 0;
    void skibidigfx_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
    {
    
    real_glVertexStream4iATI(stream,x,y,z,w);
    }
void(__stdcall *real_glVertexStream4ivATI)(GLenum stream, const GLint* coords) = 0;
    void skibidigfx_glVertexStream4ivATI(GLenum stream, const GLint* coords)
    {
    
    real_glVertexStream4ivATI(stream,coords);
    }
void(__stdcall *real_glVertexStream4fATI)(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glVertexStream4fATI(stream,x,y,z,w);
    }
void(__stdcall *real_glVertexStream4fvATI)(GLenum stream, const GLfloat* coords) = 0;
    void skibidigfx_glVertexStream4fvATI(GLenum stream, const GLfloat* coords)
    {
    
    real_glVertexStream4fvATI(stream,coords);
    }
void(__stdcall *real_glVertexStream4dATI)(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glVertexStream4dATI(stream,x,y,z,w);
    }
void(__stdcall *real_glVertexStream4dvATI)(GLenum stream, const GLdouble* coords) = 0;
    void skibidigfx_glVertexStream4dvATI(GLenum stream, const GLdouble* coords)
    {
    
    real_glVertexStream4dvATI(stream,coords);
    }
void(__stdcall *real_glNormalStream3bATI)(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) = 0;
    void skibidigfx_glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
    {
    
    real_glNormalStream3bATI(stream,nx,ny,nz);
    }
void(__stdcall *real_glNormalStream3bvATI)(GLenum stream, const GLbyte* coords) = 0;
    void skibidigfx_glNormalStream3bvATI(GLenum stream, const GLbyte* coords)
    {
    
    real_glNormalStream3bvATI(stream,coords);
    }
void(__stdcall *real_glNormalStream3sATI)(GLenum stream, GLshort nx, GLshort ny, GLshort nz) = 0;
    void skibidigfx_glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)
    {
    
    real_glNormalStream3sATI(stream,nx,ny,nz);
    }
void(__stdcall *real_glNormalStream3svATI)(GLenum stream, const GLshort* coords) = 0;
    void skibidigfx_glNormalStream3svATI(GLenum stream, const GLshort* coords)
    {
    
    real_glNormalStream3svATI(stream,coords);
    }
void(__stdcall *real_glNormalStream3iATI)(GLenum stream, GLint nx, GLint ny, GLint nz) = 0;
    void skibidigfx_glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)
    {
    
    real_glNormalStream3iATI(stream,nx,ny,nz);
    }
void(__stdcall *real_glNormalStream3ivATI)(GLenum stream, const GLint* coords) = 0;
    void skibidigfx_glNormalStream3ivATI(GLenum stream, const GLint* coords)
    {
    
    real_glNormalStream3ivATI(stream,coords);
    }
void(__stdcall *real_glNormalStream3fATI)(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) = 0;
    void skibidigfx_glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
    {
    
    real_glNormalStream3fATI(stream,nx,ny,nz);
    }
void(__stdcall *real_glNormalStream3fvATI)(GLenum stream, const GLfloat* coords) = 0;
    void skibidigfx_glNormalStream3fvATI(GLenum stream, const GLfloat* coords)
    {
    
    real_glNormalStream3fvATI(stream,coords);
    }
void(__stdcall *real_glNormalStream3dATI)(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) = 0;
    void skibidigfx_glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
    {
    
    real_glNormalStream3dATI(stream,nx,ny,nz);
    }
void(__stdcall *real_glNormalStream3dvATI)(GLenum stream, const GLdouble* coords) = 0;
    void skibidigfx_glNormalStream3dvATI(GLenum stream, const GLdouble* coords)
    {
    
    real_glNormalStream3dvATI(stream,coords);
    }
void(__stdcall *real_glClientActiveVertexStreamATI)(GLenum stream) = 0;
    void skibidigfx_glClientActiveVertexStreamATI(GLenum stream)
    {
    
    real_glClientActiveVertexStreamATI(stream);
    }
void(__stdcall *real_glVertexBlendEnviATI)(GLenum pname, GLint param) = 0;
    void skibidigfx_glVertexBlendEnviATI(GLenum pname, GLint param)
    {
    
    real_glVertexBlendEnviATI(pname,param);
    }
void(__stdcall *real_glVertexBlendEnvfATI)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
    {
    
    real_glVertexBlendEnvfATI(pname,param);
    }
void(__stdcall *real_glEGLImageTargetTexStorageEXT)(GLenum target, GLeglImageOES image, const GLint* attrib_list) = 0;
    void skibidigfx_glEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint* attrib_list)
    {
    
    real_glEGLImageTargetTexStorageEXT(target,image,attrib_list);
    }
void(__stdcall *real_glEGLImageTargetTextureStorageEXT)(GLuint texture, GLeglImageOES image, const GLint* attrib_list) = 0;
    void skibidigfx_glEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint* attrib_list)
    {
    
    real_glEGLImageTargetTextureStorageEXT(texture,image,attrib_list);
    }
void(__stdcall *real_glUniformBufferEXT)(GLuint program, GLint location, GLuint buffer) = 0;
    void skibidigfx_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
    {
    
    real_glUniformBufferEXT(program,location,buffer);
    }
GLint(__stdcall *real_glGetUniformBufferSizeEXT)(GLuint program, GLint location) = 0;
    GLint skibidigfx_glGetUniformBufferSizeEXT(GLuint program, GLint location)
    {
    
    return real_glGetUniformBufferSizeEXT(program,location);
    }
GLintptr(__stdcall *real_glGetUniformOffsetEXT)(GLuint program, GLint location) = 0;
    GLintptr skibidigfx_glGetUniformOffsetEXT(GLuint program, GLint location)
    {
    
    return real_glGetUniformOffsetEXT(program,location);
    }
void(__stdcall *real_glBlendColorEXT)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = 0;
    void skibidigfx_glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
    {
    
    real_glBlendColorEXT(red,green,blue,alpha);
    }
void(__stdcall *real_glBlendEquationSeparateEXT)(GLenum modeRGB, GLenum modeAlpha) = 0;
    void skibidigfx_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
    {
    
    real_glBlendEquationSeparateEXT(modeRGB,modeAlpha);
    }
void(__stdcall *real_glBlendFuncSeparateEXT)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) = 0;
    void skibidigfx_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
    {
    
    real_glBlendFuncSeparateEXT(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha);
    }
void(__stdcall *real_glBlendEquationEXT)(GLenum mode) = 0;
    void skibidigfx_glBlendEquationEXT(GLenum mode)
    {
    
    real_glBlendEquationEXT(mode);
    }
void(__stdcall *real_glColorSubTableEXT)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void* data)
    {
    
    real_glColorSubTableEXT(target,start,count,format,type,data);
    }
void(__stdcall *real_glCopyColorSubTableEXT)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyColorSubTableEXT(target,start,x,y,width);
    }
void(__stdcall *real_glLockArraysEXT)(GLint first, GLsizei count) = 0;
    void skibidigfx_glLockArraysEXT(GLint first, GLsizei count)
    {
    
    real_glLockArraysEXT(first,count);
    }
void(__stdcall *real_glUnlockArraysEXT)() = 0;
    void skibidigfx_glUnlockArraysEXT()
    {
    
    real_glUnlockArraysEXT();
    }
void(__stdcall *real_glConvolutionFilter1DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image) = 0;
    void skibidigfx_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* image)
    {
    
    real_glConvolutionFilter1DEXT(target,internalformat,width,format,type,image);
    }
void(__stdcall *real_glConvolutionFilter2DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image) = 0;
    void skibidigfx_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* image)
    {
    
    real_glConvolutionFilter2DEXT(target,internalformat,width,height,format,type,image);
    }
void(__stdcall *real_glConvolutionParameterfEXT)(GLenum target, GLenum pname, GLfloat params) = 0;
    void skibidigfx_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params)
    {
    
    real_glConvolutionParameterfEXT(target,pname,params);
    }
void(__stdcall *real_glConvolutionParameterfvEXT)(GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glConvolutionParameterfvEXT(target,pname,params);
    }
void(__stdcall *real_glConvolutionParameteriEXT)(GLenum target, GLenum pname, GLint params) = 0;
    void skibidigfx_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params)
    {
    
    real_glConvolutionParameteriEXT(target,pname,params);
    }
void(__stdcall *real_glConvolutionParameterivEXT)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glConvolutionParameterivEXT(target,pname,params);
    }
void(__stdcall *real_glCopyConvolutionFilter1DEXT)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyConvolutionFilter1DEXT(target,internalformat,x,y,width);
    }
void(__stdcall *real_glCopyConvolutionFilter2DEXT)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyConvolutionFilter2DEXT(target,internalformat,x,y,width,height);
    }
void(__stdcall *real_glGetConvolutionFilterEXT)(GLenum target, GLenum format, GLenum type, void* image) = 0;
    void skibidigfx_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void* image)
    {
    
    real_glGetConvolutionFilterEXT(target,format,type,image);
    }
void(__stdcall *real_glGetConvolutionParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetConvolutionParameterfvEXT(target,pname,params);
    }
void(__stdcall *real_glGetConvolutionParameterivEXT)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetConvolutionParameterivEXT(target,pname,params);
    }
void(__stdcall *real_glGetSeparableFilterEXT)(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span) = 0;
    void skibidigfx_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void* row, void* column, void* span)
    {
    
    real_glGetSeparableFilterEXT(target,format,type,row,column,span);
    }
void(__stdcall *real_glSeparableFilter2DEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column) = 0;
    void skibidigfx_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* row, const void* column)
    {
    
    real_glSeparableFilter2DEXT(target,internalformat,width,height,format,type,row,column);
    }
void(__stdcall *real_glTangent3bEXT)(GLbyte tx, GLbyte ty, GLbyte tz) = 0;
    void skibidigfx_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
    {
    
    real_glTangent3bEXT(tx,ty,tz);
    }
void(__stdcall *real_glTangent3bvEXT)(const GLbyte* v) = 0;
    void skibidigfx_glTangent3bvEXT(const GLbyte* v)
    {
    
    real_glTangent3bvEXT(v);
    }
void(__stdcall *real_glTangent3dEXT)(GLdouble tx, GLdouble ty, GLdouble tz) = 0;
    void skibidigfx_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
    {
    
    real_glTangent3dEXT(tx,ty,tz);
    }
void(__stdcall *real_glTangent3dvEXT)(const GLdouble* v) = 0;
    void skibidigfx_glTangent3dvEXT(const GLdouble* v)
    {
    
    real_glTangent3dvEXT(v);
    }
void(__stdcall *real_glTangent3fEXT)(GLfloat tx, GLfloat ty, GLfloat tz) = 0;
    void skibidigfx_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
    {
    
    real_glTangent3fEXT(tx,ty,tz);
    }
void(__stdcall *real_glTangent3fvEXT)(const GLfloat* v) = 0;
    void skibidigfx_glTangent3fvEXT(const GLfloat* v)
    {
    
    real_glTangent3fvEXT(v);
    }
void(__stdcall *real_glTangent3iEXT)(GLint tx, GLint ty, GLint tz) = 0;
    void skibidigfx_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
    {
    
    real_glTangent3iEXT(tx,ty,tz);
    }
void(__stdcall *real_glTangent3ivEXT)(const GLint* v) = 0;
    void skibidigfx_glTangent3ivEXT(const GLint* v)
    {
    
    real_glTangent3ivEXT(v);
    }
void(__stdcall *real_glTangent3sEXT)(GLshort tx, GLshort ty, GLshort tz) = 0;
    void skibidigfx_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
    {
    
    real_glTangent3sEXT(tx,ty,tz);
    }
void(__stdcall *real_glTangent3svEXT)(const GLshort* v) = 0;
    void skibidigfx_glTangent3svEXT(const GLshort* v)
    {
    
    real_glTangent3svEXT(v);
    }
void(__stdcall *real_glBinormal3bEXT)(GLbyte bx, GLbyte by, GLbyte bz) = 0;
    void skibidigfx_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
    {
    
    real_glBinormal3bEXT(bx,by,bz);
    }
void(__stdcall *real_glBinormal3bvEXT)(const GLbyte* v) = 0;
    void skibidigfx_glBinormal3bvEXT(const GLbyte* v)
    {
    
    real_glBinormal3bvEXT(v);
    }
void(__stdcall *real_glBinormal3dEXT)(GLdouble bx, GLdouble by, GLdouble bz) = 0;
    void skibidigfx_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
    {
    
    real_glBinormal3dEXT(bx,by,bz);
    }
void(__stdcall *real_glBinormal3dvEXT)(const GLdouble* v) = 0;
    void skibidigfx_glBinormal3dvEXT(const GLdouble* v)
    {
    
    real_glBinormal3dvEXT(v);
    }
void(__stdcall *real_glBinormal3fEXT)(GLfloat bx, GLfloat by, GLfloat bz) = 0;
    void skibidigfx_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
    {
    
    real_glBinormal3fEXT(bx,by,bz);
    }
void(__stdcall *real_glBinormal3fvEXT)(const GLfloat* v) = 0;
    void skibidigfx_glBinormal3fvEXT(const GLfloat* v)
    {
    
    real_glBinormal3fvEXT(v);
    }
void(__stdcall *real_glBinormal3iEXT)(GLint bx, GLint by, GLint bz) = 0;
    void skibidigfx_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
    {
    
    real_glBinormal3iEXT(bx,by,bz);
    }
void(__stdcall *real_glBinormal3ivEXT)(const GLint* v) = 0;
    void skibidigfx_glBinormal3ivEXT(const GLint* v)
    {
    
    real_glBinormal3ivEXT(v);
    }
void(__stdcall *real_glBinormal3sEXT)(GLshort bx, GLshort by, GLshort bz) = 0;
    void skibidigfx_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
    {
    
    real_glBinormal3sEXT(bx,by,bz);
    }
void(__stdcall *real_glBinormal3svEXT)(const GLshort* v) = 0;
    void skibidigfx_glBinormal3svEXT(const GLshort* v)
    {
    
    real_glBinormal3svEXT(v);
    }
void(__stdcall *real_glTangentPointerEXT)(GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glTangentPointerEXT(GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glTangentPointerEXT(type,stride,pointer);
    }
void(__stdcall *real_glBinormalPointerEXT)(GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glBinormalPointerEXT(GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glBinormalPointerEXT(type,stride,pointer);
    }
void(__stdcall *real_glCopyTexImage1DEXT)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = 0;
    void skibidigfx_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
    {
    
    real_glCopyTexImage1DEXT(target,level,internalformat,x,y,width,border);
    }
void(__stdcall *real_glCopyTexImage2DEXT)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = 0;
    void skibidigfx_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
    {
    
    real_glCopyTexImage2DEXT(target,level,internalformat,x,y,width,height,border);
    }
void(__stdcall *real_glCopyTexSubImage1DEXT)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyTexSubImage1DEXT(target,level,xoffset,x,y,width);
    }
void(__stdcall *real_glCopyTexSubImage2DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyTexSubImage2DEXT(target,level,xoffset,yoffset,x,y,width,height);
    }
void(__stdcall *real_glCopyTexSubImage3DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyTexSubImage3DEXT(target,level,xoffset,yoffset,zoffset,x,y,width,height);
    }
void(__stdcall *real_glCullParameterdvEXT)(GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glCullParameterdvEXT(GLenum pname, GLdouble* params)
    {
    
    real_glCullParameterdvEXT(pname,params);
    }
void(__stdcall *real_glCullParameterfvEXT)(GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glCullParameterfvEXT(GLenum pname, GLfloat* params)
    {
    
    real_glCullParameterfvEXT(pname,params);
    }
void(__stdcall *real_glLabelObjectEXT)(GLenum type, GLuint object, GLsizei length, const GLchar* label) = 0;
    void skibidigfx_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar* label)
    {
    
    real_glLabelObjectEXT(type,object,length,label);
    }
void(__stdcall *real_glGetObjectLabelEXT)(GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar* label) = 0;
    void skibidigfx_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei* length, GLchar* label)
    {
    
    real_glGetObjectLabelEXT(type,object,bufSize,length,label);
    }
void(__stdcall *real_glInsertEventMarkerEXT)(GLsizei length, const GLchar* marker) = 0;
    void skibidigfx_glInsertEventMarkerEXT(GLsizei length, const GLchar* marker)
    {
    
    real_glInsertEventMarkerEXT(length,marker);
    }
void(__stdcall *real_glPushGroupMarkerEXT)(GLsizei length, const GLchar* marker) = 0;
    void skibidigfx_glPushGroupMarkerEXT(GLsizei length, const GLchar* marker)
    {
    
    real_glPushGroupMarkerEXT(length,marker);
    }
void(__stdcall *real_glPopGroupMarkerEXT)() = 0;
    void skibidigfx_glPopGroupMarkerEXT()
    {
    
    real_glPopGroupMarkerEXT();
    }
void(__stdcall *real_glDepthBoundsEXT)(GLclampd zmin, GLclampd zmax) = 0;
    void skibidigfx_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
    {
    
    real_glDepthBoundsEXT(zmin,zmax);
    }
void(__stdcall *real_glMatrixLoadfEXT)(GLenum mode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixLoadfEXT(GLenum mode, const GLfloat* m)
    {
    
    real_glMatrixLoadfEXT(mode,m);
    }
void(__stdcall *real_glMatrixLoaddEXT)(GLenum mode, const GLdouble* m) = 0;
    void skibidigfx_glMatrixLoaddEXT(GLenum mode, const GLdouble* m)
    {
    
    real_glMatrixLoaddEXT(mode,m);
    }
void(__stdcall *real_glMatrixMultfEXT)(GLenum mode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixMultfEXT(GLenum mode, const GLfloat* m)
    {
    
    real_glMatrixMultfEXT(mode,m);
    }
void(__stdcall *real_glMatrixMultdEXT)(GLenum mode, const GLdouble* m) = 0;
    void skibidigfx_glMatrixMultdEXT(GLenum mode, const GLdouble* m)
    {
    
    real_glMatrixMultdEXT(mode,m);
    }
void(__stdcall *real_glMatrixLoadIdentityEXT)(GLenum mode) = 0;
    void skibidigfx_glMatrixLoadIdentityEXT(GLenum mode)
    {
    
    real_glMatrixLoadIdentityEXT(mode);
    }
void(__stdcall *real_glMatrixRotatefEXT)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glMatrixRotatefEXT(mode,angle,x,y,z);
    }
void(__stdcall *real_glMatrixRotatedEXT)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glMatrixRotatedEXT(mode,angle,x,y,z);
    }
void(__stdcall *real_glMatrixScalefEXT)(GLenum mode, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glMatrixScalefEXT(mode,x,y,z);
    }
void(__stdcall *real_glMatrixScaledEXT)(GLenum mode, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glMatrixScaledEXT(mode,x,y,z);
    }
void(__stdcall *real_glMatrixTranslatefEXT)(GLenum mode, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glMatrixTranslatefEXT(mode,x,y,z);
    }
void(__stdcall *real_glMatrixTranslatedEXT)(GLenum mode, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glMatrixTranslatedEXT(mode,x,y,z);
    }
void(__stdcall *real_glMatrixFrustumEXT)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = 0;
    void skibidigfx_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
    {
    
    real_glMatrixFrustumEXT(mode,left,right,bottom,top,zNear,zFar);
    }
void(__stdcall *real_glMatrixOrthoEXT)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = 0;
    void skibidigfx_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
    {
    
    real_glMatrixOrthoEXT(mode,left,right,bottom,top,zNear,zFar);
    }
void(__stdcall *real_glMatrixPopEXT)(GLenum mode) = 0;
    void skibidigfx_glMatrixPopEXT(GLenum mode)
    {
    
    real_glMatrixPopEXT(mode);
    }
void(__stdcall *real_glMatrixPushEXT)(GLenum mode) = 0;
    void skibidigfx_glMatrixPushEXT(GLenum mode)
    {
    
    real_glMatrixPushEXT(mode);
    }
void(__stdcall *real_glClientAttribDefaultEXT)(GLbitfield mask) = 0;
    void skibidigfx_glClientAttribDefaultEXT(GLbitfield mask)
    {
    
    real_glClientAttribDefaultEXT(mask);
    }
void(__stdcall *real_glPushClientAttribDefaultEXT)(GLbitfield mask) = 0;
    void skibidigfx_glPushClientAttribDefaultEXT(GLbitfield mask)
    {
    
    real_glPushClientAttribDefaultEXT(mask);
    }
void(__stdcall *real_glTextureParameterfEXT)(GLuint texture, GLenum target, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
    {
    
    real_glTextureParameterfEXT(texture,target,pname,param);
    }
void(__stdcall *real_glTextureParameterfvEXT)(GLuint texture, GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glTextureParameterfvEXT(texture,target,pname,params);
    }
void(__stdcall *real_glTextureParameteriEXT)(GLuint texture, GLenum target, GLenum pname, GLint param) = 0;
    void skibidigfx_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
    {
    
    real_glTextureParameteriEXT(texture,target,pname,param);
    }
void(__stdcall *real_glTextureParameterivEXT)(GLuint texture, GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glTextureParameterivEXT(texture,target,pname,params);
    }
void(__stdcall *real_glTextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureImage1DEXT(texture,target,level,internalformat,width,border,format,type,pixels);
    }
void(__stdcall *real_glTextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureImage2DEXT(texture,target,level,internalformat,width,height,border,format,type,pixels);
    }
void(__stdcall *real_glTextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureSubImage1DEXT(texture,target,level,xoffset,width,format,type,pixels);
    }
void(__stdcall *real_glTextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,width,height,format,type,pixels);
    }
void(__stdcall *real_glCopyTextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = 0;
    void skibidigfx_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
    {
    
    real_glCopyTextureImage1DEXT(texture,target,level,internalformat,x,y,width,border);
    }
void(__stdcall *real_glCopyTextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = 0;
    void skibidigfx_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
    {
    
    real_glCopyTextureImage2DEXT(texture,target,level,internalformat,x,y,width,height,border);
    }
void(__stdcall *real_glCopyTextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyTextureSubImage1DEXT(texture,target,level,xoffset,x,y,width);
    }
void(__stdcall *real_glCopyTextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,x,y,width,height);
    }
void(__stdcall *real_glGetTextureImageEXT)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels) = 0;
    void skibidigfx_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void* pixels)
    {
    
    real_glGetTextureImageEXT(texture,target,level,format,type,pixels);
    }
void(__stdcall *real_glGetTextureParameterfvEXT)(GLuint texture, GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetTextureParameterfvEXT(texture,target,pname,params);
    }
void(__stdcall *real_glGetTextureParameterivEXT)(GLuint texture, GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetTextureParameterivEXT(texture,target,pname,params);
    }
void(__stdcall *real_glGetTextureLevelParameterfvEXT)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat* params)
    {
    
    real_glGetTextureLevelParameterfvEXT(texture,target,level,pname,params);
    }
void(__stdcall *real_glGetTextureLevelParameterivEXT)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint* params)
    {
    
    real_glGetTextureLevelParameterivEXT(texture,target,level,pname,params);
    }
void(__stdcall *real_glTextureImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureImage3DEXT(texture,target,level,internalformat,width,height,depth,border,format,type,pixels);
    }
void(__stdcall *real_glTextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
    }
void(__stdcall *real_glCopyTextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,x,y,width,height);
    }
void(__stdcall *real_glBindMultiTextureEXT)(GLenum texunit, GLenum target, GLuint texture) = 0;
    void skibidigfx_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
    {
    
    real_glBindMultiTextureEXT(texunit,target,texture);
    }
void(__stdcall *real_glMultiTexCoordPointerEXT)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glMultiTexCoordPointerEXT(texunit,size,type,stride,pointer);
    }
void(__stdcall *real_glMultiTexEnvfEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
    {
    
    real_glMultiTexEnvfEXT(texunit,target,pname,param);
    }
void(__stdcall *real_glMultiTexEnvfvEXT)(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glMultiTexEnvfvEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glMultiTexEnviEXT)(GLenum texunit, GLenum target, GLenum pname, GLint param) = 0;
    void skibidigfx_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
    {
    
    real_glMultiTexEnviEXT(texunit,target,pname,param);
    }
void(__stdcall *real_glMultiTexEnvivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glMultiTexEnvivEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glMultiTexGendEXT)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) = 0;
    void skibidigfx_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
    {
    
    real_glMultiTexGendEXT(texunit,coord,pname,param);
    }
void(__stdcall *real_glMultiTexGendvEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params) = 0;
    void skibidigfx_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble* params)
    {
    
    real_glMultiTexGendvEXT(texunit,coord,pname,params);
    }
void(__stdcall *real_glMultiTexGenfEXT)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
    {
    
    real_glMultiTexGenfEXT(texunit,coord,pname,param);
    }
void(__stdcall *real_glMultiTexGenfvEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat* params)
    {
    
    real_glMultiTexGenfvEXT(texunit,coord,pname,params);
    }
void(__stdcall *real_glMultiTexGeniEXT)(GLenum texunit, GLenum coord, GLenum pname, GLint param) = 0;
    void skibidigfx_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
    {
    
    real_glMultiTexGeniEXT(texunit,coord,pname,param);
    }
void(__stdcall *real_glMultiTexGenivEXT)(GLenum texunit, GLenum coord, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint* params)
    {
    
    real_glMultiTexGenivEXT(texunit,coord,pname,params);
    }
void(__stdcall *real_glGetMultiTexEnvfvEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetMultiTexEnvfvEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glGetMultiTexEnvivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetMultiTexEnvivEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glGetMultiTexGendvEXT)(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble* params)
    {
    
    real_glGetMultiTexGendvEXT(texunit,coord,pname,params);
    }
void(__stdcall *real_glGetMultiTexGenfvEXT)(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat* params)
    {
    
    real_glGetMultiTexGenfvEXT(texunit,coord,pname,params);
    }
void(__stdcall *real_glGetMultiTexGenivEXT)(GLenum texunit, GLenum coord, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint* params)
    {
    
    real_glGetMultiTexGenivEXT(texunit,coord,pname,params);
    }
void(__stdcall *real_glMultiTexParameteriEXT)(GLenum texunit, GLenum target, GLenum pname, GLint param) = 0;
    void skibidigfx_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
    {
    
    real_glMultiTexParameteriEXT(texunit,target,pname,param);
    }
void(__stdcall *real_glMultiTexParameterivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glMultiTexParameterivEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glMultiTexParameterfEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
    {
    
    real_glMultiTexParameterfEXT(texunit,target,pname,param);
    }
void(__stdcall *real_glMultiTexParameterfvEXT)(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glMultiTexParameterfvEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glMultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glMultiTexImage1DEXT(texunit,target,level,internalformat,width,border,format,type,pixels);
    }
void(__stdcall *real_glMultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glMultiTexImage2DEXT(texunit,target,level,internalformat,width,height,border,format,type,pixels);
    }
void(__stdcall *real_glMultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glMultiTexSubImage1DEXT(texunit,target,level,xoffset,width,format,type,pixels);
    }
void(__stdcall *real_glMultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,width,height,format,type,pixels);
    }
void(__stdcall *real_glCopyMultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) = 0;
    void skibidigfx_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
    {
    
    real_glCopyMultiTexImage1DEXT(texunit,target,level,internalformat,x,y,width,border);
    }
void(__stdcall *real_glCopyMultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = 0;
    void skibidigfx_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
    {
    
    real_glCopyMultiTexImage2DEXT(texunit,target,level,internalformat,x,y,width,height,border);
    }
void(__stdcall *real_glCopyMultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyMultiTexSubImage1DEXT(texunit,target,level,xoffset,x,y,width);
    }
void(__stdcall *real_glCopyMultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,x,y,width,height);
    }
void(__stdcall *real_glGetMultiTexImageEXT)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void* pixels) = 0;
    void skibidigfx_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void* pixels)
    {
    
    real_glGetMultiTexImageEXT(texunit,target,level,format,type,pixels);
    }
void(__stdcall *real_glGetMultiTexParameterfvEXT)(GLenum texunit, GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetMultiTexParameterfvEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glGetMultiTexParameterivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetMultiTexParameterivEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glGetMultiTexLevelParameterfvEXT)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat* params)
    {
    
    real_glGetMultiTexLevelParameterfvEXT(texunit,target,level,pname,params);
    }
void(__stdcall *real_glGetMultiTexLevelParameterivEXT)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint* params)
    {
    
    real_glGetMultiTexLevelParameterivEXT(texunit,target,level,pname,params);
    }
void(__stdcall *real_glMultiTexImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glMultiTexImage3DEXT(texunit,target,level,internalformat,width,height,depth,border,format,type,pixels);
    }
void(__stdcall *real_glMultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
    }
void(__stdcall *real_glCopyMultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glCopyMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,x,y,width,height);
    }
void(__stdcall *real_glEnableClientStateIndexedEXT)(GLenum array, GLuint index) = 0;
    void skibidigfx_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
    {
    
    real_glEnableClientStateIndexedEXT(array,index);
    }
void(__stdcall *real_glDisableClientStateIndexedEXT)(GLenum array, GLuint index) = 0;
    void skibidigfx_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
    {
    
    real_glDisableClientStateIndexedEXT(array,index);
    }
void(__stdcall *real_glGetFloatIndexedvEXT)(GLenum target, GLuint index, GLfloat* data) = 0;
    void skibidigfx_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat* data)
    {
    
    real_glGetFloatIndexedvEXT(target,index,data);
    }
void(__stdcall *real_glGetDoubleIndexedvEXT)(GLenum target, GLuint index, GLdouble* data) = 0;
    void skibidigfx_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble* data)
    {
    
    real_glGetDoubleIndexedvEXT(target,index,data);
    }
void(__stdcall *real_glGetPointerIndexedvEXT)(GLenum target, GLuint index, void** data) = 0;
    void skibidigfx_glGetPointerIndexedvEXT(GLenum target, GLuint index, void** data)
    {
    
    real_glGetPointerIndexedvEXT(target,index,data);
    }
void(__stdcall *real_glEnableIndexedEXT)(GLenum target, GLuint index) = 0;
    void skibidigfx_glEnableIndexedEXT(GLenum target, GLuint index)
    {
    
    real_glEnableIndexedEXT(target,index);
    }
void(__stdcall *real_glDisableIndexedEXT)(GLenum target, GLuint index) = 0;
    void skibidigfx_glDisableIndexedEXT(GLenum target, GLuint index)
    {
    
    real_glDisableIndexedEXT(target,index);
    }
GLboolean(__stdcall *real_glIsEnabledIndexedEXT)(GLenum target, GLuint index) = 0;
    GLboolean skibidigfx_glIsEnabledIndexedEXT(GLenum target, GLuint index)
    {
    
    return real_glIsEnabledIndexedEXT(target,index);
    }
void(__stdcall *real_glGetIntegerIndexedvEXT)(GLenum target, GLuint index, GLint* data) = 0;
    void skibidigfx_glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint* data)
    {
    
    real_glGetIntegerIndexedvEXT(target,index,data);
    }
void(__stdcall *real_glGetBooleanIndexedvEXT)(GLenum target, GLuint index, GLboolean* data) = 0;
    void skibidigfx_glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean* data)
    {
    
    real_glGetBooleanIndexedvEXT(target,index,data);
    }
void(__stdcall *real_glCompressedTextureImage3DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedTextureImage3DEXT(texture,target,level,internalformat,width,height,depth,border,imageSize,bits);
    }
void(__stdcall *real_glCompressedTextureImage2DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedTextureImage2DEXT(texture,target,level,internalformat,width,height,border,imageSize,bits);
    }
void(__stdcall *real_glCompressedTextureImage1DEXT)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedTextureImage1DEXT(texture,target,level,internalformat,width,border,imageSize,bits);
    }
void(__stdcall *real_glCompressedTextureSubImage3DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedTextureSubImage3DEXT(texture,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,bits);
    }
void(__stdcall *real_glCompressedTextureSubImage2DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedTextureSubImage2DEXT(texture,target,level,xoffset,yoffset,width,height,format,imageSize,bits);
    }
void(__stdcall *real_glCompressedTextureSubImage1DEXT)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedTextureSubImage1DEXT(texture,target,level,xoffset,width,format,imageSize,bits);
    }
void(__stdcall *real_glGetCompressedTextureImageEXT)(GLuint texture, GLenum target, GLint lod, void* img) = 0;
    void skibidigfx_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void* img)
    {
    
    real_glGetCompressedTextureImageEXT(texture,target,lod,img);
    }
void(__stdcall *real_glCompressedMultiTexImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedMultiTexImage3DEXT(texunit,target,level,internalformat,width,height,depth,border,imageSize,bits);
    }
void(__stdcall *real_glCompressedMultiTexImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedMultiTexImage2DEXT(texunit,target,level,internalformat,width,height,border,imageSize,bits);
    }
void(__stdcall *real_glCompressedMultiTexImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedMultiTexImage1DEXT(texunit,target,level,internalformat,width,border,imageSize,bits);
    }
void(__stdcall *real_glCompressedMultiTexSubImage3DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedMultiTexSubImage3DEXT(texunit,target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,bits);
    }
void(__stdcall *real_glCompressedMultiTexSubImage2DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedMultiTexSubImage2DEXT(texunit,target,level,xoffset,yoffset,width,height,format,imageSize,bits);
    }
void(__stdcall *real_glCompressedMultiTexSubImage1DEXT)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits) = 0;
    void skibidigfx_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* bits)
    {
    
    real_glCompressedMultiTexSubImage1DEXT(texunit,target,level,xoffset,width,format,imageSize,bits);
    }
void(__stdcall *real_glGetCompressedMultiTexImageEXT)(GLenum texunit, GLenum target, GLint lod, void* img) = 0;
    void skibidigfx_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void* img)
    {
    
    real_glGetCompressedMultiTexImageEXT(texunit,target,lod,img);
    }
void(__stdcall *real_glMatrixLoadTransposefEXT)(GLenum mode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat* m)
    {
    
    real_glMatrixLoadTransposefEXT(mode,m);
    }
void(__stdcall *real_glMatrixLoadTransposedEXT)(GLenum mode, const GLdouble* m) = 0;
    void skibidigfx_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble* m)
    {
    
    real_glMatrixLoadTransposedEXT(mode,m);
    }
void(__stdcall *real_glMatrixMultTransposefEXT)(GLenum mode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixMultTransposefEXT(GLenum mode, const GLfloat* m)
    {
    
    real_glMatrixMultTransposefEXT(mode,m);
    }
void(__stdcall *real_glMatrixMultTransposedEXT)(GLenum mode, const GLdouble* m) = 0;
    void skibidigfx_glMatrixMultTransposedEXT(GLenum mode, const GLdouble* m)
    {
    
    real_glMatrixMultTransposedEXT(mode,m);
    }
void(__stdcall *real_glNamedBufferDataEXT)(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage) = 0;
    void skibidigfx_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage)
    {
    
    real_glNamedBufferDataEXT(buffer,size,data,usage);
    }
void(__stdcall *real_glNamedBufferSubDataEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data) = 0;
    void skibidigfx_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    real_glNamedBufferSubDataEXT(buffer,offset,size,data);
    }
void *(__stdcall *real_glMapNamedBufferEXT)(GLuint buffer, GLenum access) = 0;
    void * skibidigfx_glMapNamedBufferEXT(GLuint buffer, GLenum access)
    {
    
    return real_glMapNamedBufferEXT(buffer,access);
    }
GLboolean(__stdcall *real_glUnmapNamedBufferEXT)(GLuint buffer) = 0;
    GLboolean skibidigfx_glUnmapNamedBufferEXT(GLuint buffer)
    {
    
    return real_glUnmapNamedBufferEXT(buffer);
    }
void(__stdcall *real_glGetNamedBufferParameterivEXT)(GLuint buffer, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint* params)
    {
    
    real_glGetNamedBufferParameterivEXT(buffer,pname,params);
    }
void(__stdcall *real_glGetNamedBufferPointervEXT)(GLuint buffer, GLenum pname, void** params) = 0;
    void skibidigfx_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void** params)
    {
    
    real_glGetNamedBufferPointervEXT(buffer,pname,params);
    }
void(__stdcall *real_glGetNamedBufferSubDataEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data) = 0;
    void skibidigfx_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data)
    {
    
    real_glGetNamedBufferSubDataEXT(buffer,offset,size,data);
    }
void(__stdcall *real_glProgramUniform1fEXT)(GLuint program, GLint location, GLfloat v0) = 0;
    void skibidigfx_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
    {
    
    real_glProgramUniform1fEXT(program,location,v0);
    }
void(__stdcall *real_glProgramUniform2fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1) = 0;
    void skibidigfx_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
    {
    
    real_glProgramUniform2fEXT(program,location,v0,v1);
    }
void(__stdcall *real_glProgramUniform3fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) = 0;
    void skibidigfx_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
    {
    
    real_glProgramUniform3fEXT(program,location,v0,v1,v2);
    }
void(__stdcall *real_glProgramUniform4fEXT)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) = 0;
    void skibidigfx_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
    {
    
    real_glProgramUniform4fEXT(program,location,v0,v1,v2,v3);
    }
void(__stdcall *real_glProgramUniform1iEXT)(GLuint program, GLint location, GLint v0) = 0;
    void skibidigfx_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
    {
    
    real_glProgramUniform1iEXT(program,location,v0);
    }
void(__stdcall *real_glProgramUniform2iEXT)(GLuint program, GLint location, GLint v0, GLint v1) = 0;
    void skibidigfx_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
    {
    
    real_glProgramUniform2iEXT(program,location,v0,v1);
    }
void(__stdcall *real_glProgramUniform3iEXT)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) = 0;
    void skibidigfx_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
    {
    
    real_glProgramUniform3iEXT(program,location,v0,v1,v2);
    }
void(__stdcall *real_glProgramUniform4iEXT)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) = 0;
    void skibidigfx_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
    {
    
    real_glProgramUniform4iEXT(program,location,v0,v1,v2,v3);
    }
void(__stdcall *real_glProgramUniform1fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glProgramUniform1fvEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glProgramUniform2fvEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glProgramUniform3fvEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4fvEXT)(GLuint program, GLint location, GLsizei count, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat* value)
    {
    
    real_glProgramUniform4fvEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform1ivEXT)(GLuint program, GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    real_glProgramUniform1ivEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2ivEXT)(GLuint program, GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    real_glProgramUniform2ivEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3ivEXT)(GLuint program, GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    real_glProgramUniform3ivEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4ivEXT)(GLuint program, GLint location, GLsizei count, const GLint* value) = 0;
    void skibidigfx_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint* value)
    {
    
    real_glProgramUniform4ivEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniformMatrix2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix2fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix3fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix4fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2x3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix2x3fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3x2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix3x2fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2x4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix2x4fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4x2fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix4x2fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3x4fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix3x4fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4x3fvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value) = 0;
    void skibidigfx_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
    {
    
    real_glProgramUniformMatrix4x3fvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glTextureBufferEXT)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) = 0;
    void skibidigfx_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    real_glTextureBufferEXT(texture,target,internalformat,buffer);
    }
void(__stdcall *real_glMultiTexBufferEXT)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) = 0;
    void skibidigfx_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    real_glMultiTexBufferEXT(texunit,target,internalformat,buffer);
    }
void(__stdcall *real_glTextureParameterIivEXT)(GLuint texture, GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glTextureParameterIivEXT(texture,target,pname,params);
    }
void(__stdcall *real_glTextureParameterIuivEXT)(GLuint texture, GLenum target, GLenum pname, const GLuint* params) = 0;
    void skibidigfx_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint* params)
    {
    
    real_glTextureParameterIuivEXT(texture,target,pname,params);
    }
void(__stdcall *real_glGetTextureParameterIivEXT)(GLuint texture, GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetTextureParameterIivEXT(texture,target,pname,params);
    }
void(__stdcall *real_glGetTextureParameterIuivEXT)(GLuint texture, GLenum target, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint* params)
    {
    
    real_glGetTextureParameterIuivEXT(texture,target,pname,params);
    }
void(__stdcall *real_glMultiTexParameterIivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glMultiTexParameterIivEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glMultiTexParameterIuivEXT)(GLenum texunit, GLenum target, GLenum pname, const GLuint* params) = 0;
    void skibidigfx_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint* params)
    {
    
    real_glMultiTexParameterIuivEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glGetMultiTexParameterIivEXT)(GLenum texunit, GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetMultiTexParameterIivEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glGetMultiTexParameterIuivEXT)(GLenum texunit, GLenum target, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint* params)
    {
    
    real_glGetMultiTexParameterIuivEXT(texunit,target,pname,params);
    }
void(__stdcall *real_glProgramUniform1uiEXT)(GLuint program, GLint location, GLuint v0) = 0;
    void skibidigfx_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
    {
    
    real_glProgramUniform1uiEXT(program,location,v0);
    }
void(__stdcall *real_glProgramUniform2uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1) = 0;
    void skibidigfx_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
    {
    
    real_glProgramUniform2uiEXT(program,location,v0,v1);
    }
void(__stdcall *real_glProgramUniform3uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) = 0;
    void skibidigfx_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
    {
    
    real_glProgramUniform3uiEXT(program,location,v0,v1,v2);
    }
void(__stdcall *real_glProgramUniform4uiEXT)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = 0;
    void skibidigfx_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
    {
    
    real_glProgramUniform4uiEXT(program,location,v0,v1,v2,v3);
    }
void(__stdcall *real_glProgramUniform1uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glProgramUniform1uivEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glProgramUniform2uivEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glProgramUniform3uivEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4uivEXT)(GLuint program, GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glProgramUniform4uivEXT(program,location,count,value);
    }
void(__stdcall *real_glNamedProgramLocalParameters4fvEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params) = 0;
    void skibidigfx_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat* params)
    {
    
    real_glNamedProgramLocalParameters4fvEXT(program,target,index,count,params);
    }
void(__stdcall *real_glNamedProgramLocalParameterI4iEXT)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) = 0;
    void skibidigfx_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    real_glNamedProgramLocalParameterI4iEXT(program,target,index,x,y,z,w);
    }
void(__stdcall *real_glNamedProgramLocalParameterI4ivEXT)(GLuint program, GLenum target, GLuint index, const GLint* params) = 0;
    void skibidigfx_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint* params)
    {
    
    real_glNamedProgramLocalParameterI4ivEXT(program,target,index,params);
    }
void(__stdcall *real_glNamedProgramLocalParametersI4ivEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params) = 0;
    void skibidigfx_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint* params)
    {
    
    real_glNamedProgramLocalParametersI4ivEXT(program,target,index,count,params);
    }
void(__stdcall *real_glNamedProgramLocalParameterI4uiEXT)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = 0;
    void skibidigfx_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    real_glNamedProgramLocalParameterI4uiEXT(program,target,index,x,y,z,w);
    }
void(__stdcall *real_glNamedProgramLocalParameterI4uivEXT)(GLuint program, GLenum target, GLuint index, const GLuint* params) = 0;
    void skibidigfx_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint* params)
    {
    
    real_glNamedProgramLocalParameterI4uivEXT(program,target,index,params);
    }
void(__stdcall *real_glNamedProgramLocalParametersI4uivEXT)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params) = 0;
    void skibidigfx_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint* params)
    {
    
    real_glNamedProgramLocalParametersI4uivEXT(program,target,index,count,params);
    }
void(__stdcall *real_glGetNamedProgramLocalParameterIivEXT)(GLuint program, GLenum target, GLuint index, GLint* params) = 0;
    void skibidigfx_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint* params)
    {
    
    real_glGetNamedProgramLocalParameterIivEXT(program,target,index,params);
    }
void(__stdcall *real_glGetNamedProgramLocalParameterIuivEXT)(GLuint program, GLenum target, GLuint index, GLuint* params) = 0;
    void skibidigfx_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint* params)
    {
    
    real_glGetNamedProgramLocalParameterIuivEXT(program,target,index,params);
    }
void(__stdcall *real_glEnableClientStateiEXT)(GLenum array, GLuint index) = 0;
    void skibidigfx_glEnableClientStateiEXT(GLenum array, GLuint index)
    {
    
    real_glEnableClientStateiEXT(array,index);
    }
void(__stdcall *real_glDisableClientStateiEXT)(GLenum array, GLuint index) = 0;
    void skibidigfx_glDisableClientStateiEXT(GLenum array, GLuint index)
    {
    
    real_glDisableClientStateiEXT(array,index);
    }
void(__stdcall *real_glGetFloati_vEXT)(GLenum pname, GLuint index, GLfloat* params) = 0;
    void skibidigfx_glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat* params)
    {
    
    real_glGetFloati_vEXT(pname,index,params);
    }
void(__stdcall *real_glGetDoublei_vEXT)(GLenum pname, GLuint index, GLdouble* params) = 0;
    void skibidigfx_glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble* params)
    {
    
    real_glGetDoublei_vEXT(pname,index,params);
    }
void(__stdcall *real_glGetPointeri_vEXT)(GLenum pname, GLuint index, void** params) = 0;
    void skibidigfx_glGetPointeri_vEXT(GLenum pname, GLuint index, void** params)
    {
    
    real_glGetPointeri_vEXT(pname,index,params);
    }
void(__stdcall *real_glNamedProgramStringEXT)(GLuint program, GLenum target, GLenum format, GLsizei len, const void* string) = 0;
    void skibidigfx_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void* string)
    {
    
    real_glNamedProgramStringEXT(program,target,format,len,string);
    }
void(__stdcall *real_glNamedProgramLocalParameter4dEXT)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glNamedProgramLocalParameter4dEXT(program,target,index,x,y,z,w);
    }
void(__stdcall *real_glNamedProgramLocalParameter4dvEXT)(GLuint program, GLenum target, GLuint index, const GLdouble* params) = 0;
    void skibidigfx_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble* params)
    {
    
    real_glNamedProgramLocalParameter4dvEXT(program,target,index,params);
    }
void(__stdcall *real_glNamedProgramLocalParameter4fEXT)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glNamedProgramLocalParameter4fEXT(program,target,index,x,y,z,w);
    }
void(__stdcall *real_glNamedProgramLocalParameter4fvEXT)(GLuint program, GLenum target, GLuint index, const GLfloat* params) = 0;
    void skibidigfx_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat* params)
    {
    
    real_glNamedProgramLocalParameter4fvEXT(program,target,index,params);
    }
void(__stdcall *real_glGetNamedProgramLocalParameterdvEXT)(GLuint program, GLenum target, GLuint index, GLdouble* params) = 0;
    void skibidigfx_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble* params)
    {
    
    real_glGetNamedProgramLocalParameterdvEXT(program,target,index,params);
    }
void(__stdcall *real_glGetNamedProgramLocalParameterfvEXT)(GLuint program, GLenum target, GLuint index, GLfloat* params) = 0;
    void skibidigfx_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat* params)
    {
    
    real_glGetNamedProgramLocalParameterfvEXT(program,target,index,params);
    }
void(__stdcall *real_glGetNamedProgramivEXT)(GLuint program, GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetNamedProgramivEXT(program,target,pname,params);
    }
void(__stdcall *real_glGetNamedProgramStringEXT)(GLuint program, GLenum target, GLenum pname, void* string) = 0;
    void skibidigfx_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void* string)
    {
    
    real_glGetNamedProgramStringEXT(program,target,pname,string);
    }
void(__stdcall *real_glNamedRenderbufferStorageEXT)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glNamedRenderbufferStorageEXT(renderbuffer,internalformat,width,height);
    }
void(__stdcall *real_glGetNamedRenderbufferParameterivEXT)(GLuint renderbuffer, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint* params)
    {
    
    real_glGetNamedRenderbufferParameterivEXT(renderbuffer,pname,params);
    }
void(__stdcall *real_glNamedRenderbufferStorageMultisampleEXT)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glNamedRenderbufferStorageMultisampleEXT(renderbuffer,samples,internalformat,width,height);
    }
void(__stdcall *real_glNamedRenderbufferStorageMultisampleCoverageEXT)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer,coverageSamples,colorSamples,internalformat,width,height);
    }
GLenum(__stdcall *real_glCheckNamedFramebufferStatusEXT)(GLuint framebuffer, GLenum target) = 0;
    GLenum skibidigfx_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
    {
    
    return real_glCheckNamedFramebufferStatusEXT(framebuffer,target);
    }
void(__stdcall *real_glNamedFramebufferTexture1DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = 0;
    void skibidigfx_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    real_glNamedFramebufferTexture1DEXT(framebuffer,attachment,textarget,texture,level);
    }
void(__stdcall *real_glNamedFramebufferTexture2DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = 0;
    void skibidigfx_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    real_glNamedFramebufferTexture2DEXT(framebuffer,attachment,textarget,texture,level);
    }
void(__stdcall *real_glNamedFramebufferTexture3DEXT)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) = 0;
    void skibidigfx_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
    {
    
    real_glNamedFramebufferTexture3DEXT(framebuffer,attachment,textarget,texture,level,zoffset);
    }
void(__stdcall *real_glNamedFramebufferRenderbufferEXT)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = 0;
    void skibidigfx_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
    {
    
    real_glNamedFramebufferRenderbufferEXT(framebuffer,attachment,renderbuffertarget,renderbuffer);
    }
void(__stdcall *real_glGetNamedFramebufferAttachmentParameterivEXT)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params)
    {
    
    real_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer,attachment,pname,params);
    }
void(__stdcall *real_glGenerateTextureMipmapEXT)(GLuint texture, GLenum target) = 0;
    void skibidigfx_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
    {
    
    real_glGenerateTextureMipmapEXT(texture,target);
    }
void(__stdcall *real_glGenerateMultiTexMipmapEXT)(GLenum texunit, GLenum target) = 0;
    void skibidigfx_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
    {
    
    real_glGenerateMultiTexMipmapEXT(texunit,target);
    }
void(__stdcall *real_glFramebufferDrawBufferEXT)(GLuint framebuffer, GLenum mode) = 0;
    void skibidigfx_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
    {
    
    real_glFramebufferDrawBufferEXT(framebuffer,mode);
    }
void(__stdcall *real_glFramebufferDrawBuffersEXT)(GLuint framebuffer, GLsizei n, const GLenum* bufs) = 0;
    void skibidigfx_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum* bufs)
    {
    
    real_glFramebufferDrawBuffersEXT(framebuffer,n,bufs);
    }
void(__stdcall *real_glFramebufferReadBufferEXT)(GLuint framebuffer, GLenum mode) = 0;
    void skibidigfx_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
    {
    
    real_glFramebufferReadBufferEXT(framebuffer,mode);
    }
void(__stdcall *real_glGetFramebufferParameterivEXT)(GLuint framebuffer, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint* params)
    {
    
    real_glGetFramebufferParameterivEXT(framebuffer,pname,params);
    }
void(__stdcall *real_glNamedCopyBufferSubDataEXT)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = 0;
    void skibidigfx_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
    {
    
    real_glNamedCopyBufferSubDataEXT(readBuffer,writeBuffer,readOffset,writeOffset,size);
    }
void(__stdcall *real_glNamedFramebufferTextureEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) = 0;
    void skibidigfx_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
    {
    
    real_glNamedFramebufferTextureEXT(framebuffer,attachment,texture,level);
    }
void(__stdcall *real_glNamedFramebufferTextureLayerEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) = 0;
    void skibidigfx_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    real_glNamedFramebufferTextureLayerEXT(framebuffer,attachment,texture,level,layer);
    }
void(__stdcall *real_glNamedFramebufferTextureFaceEXT)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) = 0;
    void skibidigfx_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
    {
    
    real_glNamedFramebufferTextureFaceEXT(framebuffer,attachment,texture,level,face);
    }
void(__stdcall *real_glTextureRenderbufferEXT)(GLuint texture, GLenum target, GLuint renderbuffer) = 0;
    void skibidigfx_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
    {
    
    real_glTextureRenderbufferEXT(texture,target,renderbuffer);
    }
void(__stdcall *real_glMultiTexRenderbufferEXT)(GLenum texunit, GLenum target, GLuint renderbuffer) = 0;
    void skibidigfx_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
    {
    
    real_glMultiTexRenderbufferEXT(texunit,target,renderbuffer);
    }
void(__stdcall *real_glVertexArrayVertexOffsetEXT)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayVertexOffsetEXT(vaobj,buffer,size,type,stride,offset);
    }
void(__stdcall *real_glVertexArrayColorOffsetEXT)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayColorOffsetEXT(vaobj,buffer,size,type,stride,offset);
    }
void(__stdcall *real_glVertexArrayEdgeFlagOffsetEXT)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayEdgeFlagOffsetEXT(vaobj,buffer,stride,offset);
    }
void(__stdcall *real_glVertexArrayIndexOffsetEXT)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayIndexOffsetEXT(vaobj,buffer,type,stride,offset);
    }
void(__stdcall *real_glVertexArrayNormalOffsetEXT)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayNormalOffsetEXT(vaobj,buffer,type,stride,offset);
    }
void(__stdcall *real_glVertexArrayTexCoordOffsetEXT)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayTexCoordOffsetEXT(vaobj,buffer,size,type,stride,offset);
    }
void(__stdcall *real_glVertexArrayMultiTexCoordOffsetEXT)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayMultiTexCoordOffsetEXT(vaobj,buffer,texunit,size,type,stride,offset);
    }
void(__stdcall *real_glVertexArrayFogCoordOffsetEXT)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayFogCoordOffsetEXT(vaobj,buffer,type,stride,offset);
    }
void(__stdcall *real_glVertexArraySecondaryColorOffsetEXT)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArraySecondaryColorOffsetEXT(vaobj,buffer,size,type,stride,offset);
    }
void(__stdcall *real_glVertexArrayVertexAttribOffsetEXT)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayVertexAttribOffsetEXT(vaobj,buffer,index,size,type,normalized,stride,offset);
    }
void(__stdcall *real_glVertexArrayVertexAttribIOffsetEXT)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayVertexAttribIOffsetEXT(vaobj,buffer,index,size,type,stride,offset);
    }
void(__stdcall *real_glEnableVertexArrayEXT)(GLuint vaobj, GLenum array) = 0;
    void skibidigfx_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
    {
    
    real_glEnableVertexArrayEXT(vaobj,array);
    }
void(__stdcall *real_glDisableVertexArrayEXT)(GLuint vaobj, GLenum array) = 0;
    void skibidigfx_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
    {
    
    real_glDisableVertexArrayEXT(vaobj,array);
    }
void(__stdcall *real_glEnableVertexArrayAttribEXT)(GLuint vaobj, GLuint index) = 0;
    void skibidigfx_glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
    {
    
    real_glEnableVertexArrayAttribEXT(vaobj,index);
    }
void(__stdcall *real_glDisableVertexArrayAttribEXT)(GLuint vaobj, GLuint index) = 0;
    void skibidigfx_glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
    {
    
    real_glDisableVertexArrayAttribEXT(vaobj,index);
    }
void(__stdcall *real_glGetVertexArrayIntegervEXT)(GLuint vaobj, GLenum pname, GLint* param) = 0;
    void skibidigfx_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint* param)
    {
    
    real_glGetVertexArrayIntegervEXT(vaobj,pname,param);
    }
void(__stdcall *real_glGetVertexArrayPointervEXT)(GLuint vaobj, GLenum pname, void** param) = 0;
    void skibidigfx_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void** param)
    {
    
    real_glGetVertexArrayPointervEXT(vaobj,pname,param);
    }
void(__stdcall *real_glGetVertexArrayIntegeri_vEXT)(GLuint vaobj, GLuint index, GLenum pname, GLint* param) = 0;
    void skibidigfx_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint* param)
    {
    
    real_glGetVertexArrayIntegeri_vEXT(vaobj,index,pname,param);
    }
void(__stdcall *real_glGetVertexArrayPointeri_vEXT)(GLuint vaobj, GLuint index, GLenum pname, void** param) = 0;
    void skibidigfx_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void** param)
    {
    
    real_glGetVertexArrayPointeri_vEXT(vaobj,index,pname,param);
    }
void *(__stdcall *real_glMapNamedBufferRangeEXT)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) = 0;
    void * skibidigfx_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
    {
    
    return real_glMapNamedBufferRangeEXT(buffer,offset,length,access);
    }
void(__stdcall *real_glFlushMappedNamedBufferRangeEXT)(GLuint buffer, GLintptr offset, GLsizeiptr length) = 0;
    void skibidigfx_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
    {
    
    real_glFlushMappedNamedBufferRangeEXT(buffer,offset,length);
    }
void(__stdcall *real_glNamedBufferStorageEXT)(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags) = 0;
    void skibidigfx_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags)
    {
    
    real_glNamedBufferStorageEXT(buffer,size,data,flags);
    }
void(__stdcall *real_glClearNamedBufferDataEXT)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data)
    {
    
    real_glClearNamedBufferDataEXT(buffer,internalformat,format,type,data);
    }
void(__stdcall *real_glClearNamedBufferSubDataEXT)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data) = 0;
    void skibidigfx_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data)
    {
    
    real_glClearNamedBufferSubDataEXT(buffer,internalformat,offset,size,format,type,data);
    }
void(__stdcall *real_glNamedFramebufferParameteriEXT)(GLuint framebuffer, GLenum pname, GLint param) = 0;
    void skibidigfx_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
    {
    
    real_glNamedFramebufferParameteriEXT(framebuffer,pname,param);
    }
void(__stdcall *real_glGetNamedFramebufferParameterivEXT)(GLuint framebuffer, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint* params)
    {
    
    real_glGetNamedFramebufferParameterivEXT(framebuffer,pname,params);
    }
void(__stdcall *real_glProgramUniform1dEXT)(GLuint program, GLint location, GLdouble x) = 0;
    void skibidigfx_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
    {
    
    real_glProgramUniform1dEXT(program,location,x);
    }
void(__stdcall *real_glProgramUniform2dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y) = 0;
    void skibidigfx_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
    {
    
    real_glProgramUniform2dEXT(program,location,x,y);
    }
void(__stdcall *real_glProgramUniform3dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glProgramUniform3dEXT(program,location,x,y,z);
    }
void(__stdcall *real_glProgramUniform4dEXT)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glProgramUniform4dEXT(program,location,x,y,z,w);
    }
void(__stdcall *real_glProgramUniform1dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glProgramUniform1dvEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform2dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glProgramUniform2dvEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform3dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glProgramUniform3dvEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniform4dvEXT)(GLuint program, GLint location, GLsizei count, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble* value)
    {
    
    real_glProgramUniform4dvEXT(program,location,count,value);
    }
void(__stdcall *real_glProgramUniformMatrix2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix2dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix3dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix4dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2x3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix2x3dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix2x4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix2x4dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3x2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix3x2dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix3x4dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix3x4dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4x2dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix4x2dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glProgramUniformMatrix4x3dvEXT)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value) = 0;
    void skibidigfx_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
    {
    
    real_glProgramUniformMatrix4x3dvEXT(program,location,count,transpose,value);
    }
void(__stdcall *real_glTextureBufferRangeEXT)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) = 0;
    void skibidigfx_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    real_glTextureBufferRangeEXT(texture,target,internalformat,buffer,offset,size);
    }
void(__stdcall *real_glTextureStorage1DEXT)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) = 0;
    void skibidigfx_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
    {
    
    real_glTextureStorage1DEXT(texture,target,levels,internalformat,width);
    }
void(__stdcall *real_glTextureStorage2DEXT)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glTextureStorage2DEXT(texture,target,levels,internalformat,width,height);
    }
void(__stdcall *real_glTextureStorage3DEXT)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) = 0;
    void skibidigfx_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    real_glTextureStorage3DEXT(texture,target,levels,internalformat,width,height,depth);
    }
void(__stdcall *real_glTextureStorage2DMultisampleEXT)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
    {
    
    real_glTextureStorage2DMultisampleEXT(texture,target,samples,internalformat,width,height,fixedsamplelocations);
    }
void(__stdcall *real_glTextureStorage3DMultisampleEXT)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
    {
    
    real_glTextureStorage3DMultisampleEXT(texture,target,samples,internalformat,width,height,depth,fixedsamplelocations);
    }
void(__stdcall *real_glVertexArrayBindVertexBufferEXT)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) = 0;
    void skibidigfx_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
    {
    
    real_glVertexArrayBindVertexBufferEXT(vaobj,bindingindex,buffer,offset,stride);
    }
void(__stdcall *real_glVertexArrayVertexAttribFormatEXT)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
    {
    
    real_glVertexArrayVertexAttribFormatEXT(vaobj,attribindex,size,type,normalized,relativeoffset);
    }
void(__stdcall *real_glVertexArrayVertexAttribIFormatEXT)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    real_glVertexArrayVertexAttribIFormatEXT(vaobj,attribindex,size,type,relativeoffset);
    }
void(__stdcall *real_glVertexArrayVertexAttribLFormatEXT)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) = 0;
    void skibidigfx_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
    {
    
    real_glVertexArrayVertexAttribLFormatEXT(vaobj,attribindex,size,type,relativeoffset);
    }
void(__stdcall *real_glVertexArrayVertexAttribBindingEXT)(GLuint vaobj, GLuint attribindex, GLuint bindingindex) = 0;
    void skibidigfx_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
    {
    
    real_glVertexArrayVertexAttribBindingEXT(vaobj,attribindex,bindingindex);
    }
void(__stdcall *real_glVertexArrayVertexBindingDivisorEXT)(GLuint vaobj, GLuint bindingindex, GLuint divisor) = 0;
    void skibidigfx_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
    {
    
    real_glVertexArrayVertexBindingDivisorEXT(vaobj,bindingindex,divisor);
    }
void(__stdcall *real_glVertexArrayVertexAttribLOffsetEXT)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) = 0;
    void skibidigfx_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
    {
    
    real_glVertexArrayVertexAttribLOffsetEXT(vaobj,buffer,index,size,type,stride,offset);
    }
void(__stdcall *real_glTexturePageCommitmentEXT)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) = 0;
    void skibidigfx_glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
    {
    
    real_glTexturePageCommitmentEXT(texture,level,xoffset,yoffset,zoffset,width,height,depth,commit);
    }
void(__stdcall *real_glVertexArrayVertexAttribDivisorEXT)(GLuint vaobj, GLuint index, GLuint divisor) = 0;
    void skibidigfx_glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor)
    {
    
    real_glVertexArrayVertexAttribDivisorEXT(vaobj,index,divisor);
    }
void(__stdcall *real_glColorMaskIndexedEXT)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) = 0;
    void skibidigfx_glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
    {
    
    real_glColorMaskIndexedEXT(index,r,g,b,a);
    }
void(__stdcall *real_glDrawArraysInstancedEXT)(GLenum mode, GLint start, GLsizei count, GLsizei primcount) = 0;
    void skibidigfx_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
    {
    
    real_glDrawArraysInstancedEXT(mode,start,count,primcount);
    }
void(__stdcall *real_glDrawElementsInstancedEXT)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount) = 0;
    void skibidigfx_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)
    {
    
    real_glDrawElementsInstancedEXT(mode,count,type,indices,primcount);
    }
void(__stdcall *real_glDrawRangeElementsEXT)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices) = 0;
    void skibidigfx_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices)
    {
    
    real_glDrawRangeElementsEXT(mode,start,end,count,type,indices);
    }
void(__stdcall *real_glBufferStorageExternalEXT)(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) = 0;
    void skibidigfx_glBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
    {
    
    real_glBufferStorageExternalEXT(target,offset,size,clientBuffer,flags);
    }
void(__stdcall *real_glNamedBufferStorageExternalEXT)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) = 0;
    void skibidigfx_glNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags)
    {
    
    real_glNamedBufferStorageExternalEXT(buffer,offset,size,clientBuffer,flags);
    }
void(__stdcall *real_glFogCoordfEXT)(GLfloat coord) = 0;
    void skibidigfx_glFogCoordfEXT(GLfloat coord)
    {
    
    real_glFogCoordfEXT(coord);
    }
void(__stdcall *real_glFogCoordfvEXT)(const GLfloat* coord) = 0;
    void skibidigfx_glFogCoordfvEXT(const GLfloat* coord)
    {
    
    real_glFogCoordfvEXT(coord);
    }
void(__stdcall *real_glFogCoorddEXT)(GLdouble coord) = 0;
    void skibidigfx_glFogCoorddEXT(GLdouble coord)
    {
    
    real_glFogCoorddEXT(coord);
    }
void(__stdcall *real_glFogCoorddvEXT)(const GLdouble* coord) = 0;
    void skibidigfx_glFogCoorddvEXT(const GLdouble* coord)
    {
    
    real_glFogCoorddvEXT(coord);
    }
void(__stdcall *real_glFogCoordPointerEXT)(GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glFogCoordPointerEXT(GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glFogCoordPointerEXT(type,stride,pointer);
    }
void(__stdcall *real_glBlitFramebufferEXT)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = 0;
    void skibidigfx_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
    {
    
    real_glBlitFramebufferEXT(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
    }
void(__stdcall *real_glRenderbufferStorageMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glRenderbufferStorageMultisampleEXT(target,samples,internalformat,width,height);
    }
GLboolean(__stdcall *real_glIsRenderbufferEXT)(GLuint renderbuffer) = 0;
    GLboolean skibidigfx_glIsRenderbufferEXT(GLuint renderbuffer)
    {
    
    return real_glIsRenderbufferEXT(renderbuffer);
    }
void(__stdcall *real_glBindRenderbufferEXT)(GLenum target, GLuint renderbuffer) = 0;
    void skibidigfx_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
    {
    
    real_glBindRenderbufferEXT(target,renderbuffer);
    }
void(__stdcall *real_glDeleteRenderbuffersEXT)(GLsizei n, const GLuint* renderbuffers) = 0;
    void skibidigfx_glDeleteRenderbuffersEXT(GLsizei n, const GLuint* renderbuffers)
    {
    
    real_glDeleteRenderbuffersEXT(n,renderbuffers);
    }
void(__stdcall *real_glGenRenderbuffersEXT)(GLsizei n, GLuint* renderbuffers) = 0;
    void skibidigfx_glGenRenderbuffersEXT(GLsizei n, GLuint* renderbuffers)
    {
    
    real_glGenRenderbuffersEXT(n,renderbuffers);
    }
void(__stdcall *real_glRenderbufferStorageEXT)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glRenderbufferStorageEXT(target,internalformat,width,height);
    }
void(__stdcall *real_glGetRenderbufferParameterivEXT)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetRenderbufferParameterivEXT(target,pname,params);
    }
GLboolean(__stdcall *real_glIsFramebufferEXT)(GLuint framebuffer) = 0;
    GLboolean skibidigfx_glIsFramebufferEXT(GLuint framebuffer)
    {
    
    return real_glIsFramebufferEXT(framebuffer);
    }
void(__stdcall *real_glBindFramebufferEXT)(GLenum target, GLuint framebuffer) = 0;
    void skibidigfx_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
    {
    
    real_glBindFramebufferEXT(target,framebuffer);
    }
void(__stdcall *real_glDeleteFramebuffersEXT)(GLsizei n, const GLuint* framebuffers) = 0;
    void skibidigfx_glDeleteFramebuffersEXT(GLsizei n, const GLuint* framebuffers)
    {
    
    real_glDeleteFramebuffersEXT(n,framebuffers);
    }
void(__stdcall *real_glGenFramebuffersEXT)(GLsizei n, GLuint* framebuffers) = 0;
    void skibidigfx_glGenFramebuffersEXT(GLsizei n, GLuint* framebuffers)
    {
    
    real_glGenFramebuffersEXT(n,framebuffers);
    }
GLenum(__stdcall *real_glCheckFramebufferStatusEXT)(GLenum target) = 0;
    GLenum skibidigfx_glCheckFramebufferStatusEXT(GLenum target)
    {
    
    return real_glCheckFramebufferStatusEXT(target);
    }
void(__stdcall *real_glFramebufferTexture1DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = 0;
    void skibidigfx_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    real_glFramebufferTexture1DEXT(target,attachment,textarget,texture,level);
    }
void(__stdcall *real_glFramebufferTexture2DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) = 0;
    void skibidigfx_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
    {
    
    real_glFramebufferTexture2DEXT(target,attachment,textarget,texture,level);
    }
void(__stdcall *real_glFramebufferTexture3DEXT)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) = 0;
    void skibidigfx_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
    {
    
    real_glFramebufferTexture3DEXT(target,attachment,textarget,texture,level,zoffset);
    }
void(__stdcall *real_glFramebufferRenderbufferEXT)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) = 0;
    void skibidigfx_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
    {
    
    real_glFramebufferRenderbufferEXT(target,attachment,renderbuffertarget,renderbuffer);
    }
void(__stdcall *real_glGetFramebufferAttachmentParameterivEXT)(GLenum target, GLenum attachment, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint* params)
    {
    
    real_glGetFramebufferAttachmentParameterivEXT(target,attachment,pname,params);
    }
void(__stdcall *real_glGenerateMipmapEXT)(GLenum target) = 0;
    void skibidigfx_glGenerateMipmapEXT(GLenum target)
    {
    
    real_glGenerateMipmapEXT(target);
    }
void(__stdcall *real_glProgramParameteriEXT)(GLuint program, GLenum pname, GLint value) = 0;
    void skibidigfx_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
    {
    
    real_glProgramParameteriEXT(program,pname,value);
    }
void(__stdcall *real_glProgramEnvParameters4fvEXT)(GLenum target, GLuint index, GLsizei count, const GLfloat* params) = 0;
    void skibidigfx_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat* params)
    {
    
    real_glProgramEnvParameters4fvEXT(target,index,count,params);
    }
void(__stdcall *real_glProgramLocalParameters4fvEXT)(GLenum target, GLuint index, GLsizei count, const GLfloat* params) = 0;
    void skibidigfx_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat* params)
    {
    
    real_glProgramLocalParameters4fvEXT(target,index,count,params);
    }
void(__stdcall *real_glGetUniformuivEXT)(GLuint program, GLint location, GLuint* params) = 0;
    void skibidigfx_glGetUniformuivEXT(GLuint program, GLint location, GLuint* params)
    {
    
    real_glGetUniformuivEXT(program,location,params);
    }
void(__stdcall *real_glBindFragDataLocationEXT)(GLuint program, GLuint color, const GLchar* name) = 0;
    void skibidigfx_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar* name)
    {
    
    real_glBindFragDataLocationEXT(program,color,name);
    }
GLint(__stdcall *real_glGetFragDataLocationEXT)(GLuint program, const GLchar* name) = 0;
    GLint skibidigfx_glGetFragDataLocationEXT(GLuint program, const GLchar* name)
    {
    
    return real_glGetFragDataLocationEXT(program,name);
    }
void(__stdcall *real_glUniform1uiEXT)(GLint location, GLuint v0) = 0;
    void skibidigfx_glUniform1uiEXT(GLint location, GLuint v0)
    {
    
    real_glUniform1uiEXT(location,v0);
    }
void(__stdcall *real_glUniform2uiEXT)(GLint location, GLuint v0, GLuint v1) = 0;
    void skibidigfx_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
    {
    
    real_glUniform2uiEXT(location,v0,v1);
    }
void(__stdcall *real_glUniform3uiEXT)(GLint location, GLuint v0, GLuint v1, GLuint v2) = 0;
    void skibidigfx_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
    {
    
    real_glUniform3uiEXT(location,v0,v1,v2);
    }
void(__stdcall *real_glUniform4uiEXT)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) = 0;
    void skibidigfx_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
    {
    
    real_glUniform4uiEXT(location,v0,v1,v2,v3);
    }
void(__stdcall *real_glUniform1uivEXT)(GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glUniform1uivEXT(GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glUniform1uivEXT(location,count,value);
    }
void(__stdcall *real_glUniform2uivEXT)(GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glUniform2uivEXT(GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glUniform2uivEXT(location,count,value);
    }
void(__stdcall *real_glUniform3uivEXT)(GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glUniform3uivEXT(GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glUniform3uivEXT(location,count,value);
    }
void(__stdcall *real_glUniform4uivEXT)(GLint location, GLsizei count, const GLuint* value) = 0;
    void skibidigfx_glUniform4uivEXT(GLint location, GLsizei count, const GLuint* value)
    {
    
    real_glUniform4uivEXT(location,count,value);
    }
void(__stdcall *real_glGetHistogramEXT)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values) = 0;
    void skibidigfx_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values)
    {
    
    real_glGetHistogramEXT(target,reset,format,type,values);
    }
void(__stdcall *real_glGetHistogramParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetHistogramParameterfvEXT(target,pname,params);
    }
void(__stdcall *real_glGetHistogramParameterivEXT)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetHistogramParameterivEXT(target,pname,params);
    }
void(__stdcall *real_glGetMinmaxEXT)(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values) = 0;
    void skibidigfx_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void* values)
    {
    
    real_glGetMinmaxEXT(target,reset,format,type,values);
    }
void(__stdcall *real_glGetMinmaxParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetMinmaxParameterfvEXT(target,pname,params);
    }
void(__stdcall *real_glGetMinmaxParameterivEXT)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetMinmaxParameterivEXT(target,pname,params);
    }
void(__stdcall *real_glHistogramEXT)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) = 0;
    void skibidigfx_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
    {
    
    real_glHistogramEXT(target,width,internalformat,sink);
    }
void(__stdcall *real_glMinmaxEXT)(GLenum target, GLenum internalformat, GLboolean sink) = 0;
    void skibidigfx_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
    {
    
    real_glMinmaxEXT(target,internalformat,sink);
    }
void(__stdcall *real_glResetHistogramEXT)(GLenum target) = 0;
    void skibidigfx_glResetHistogramEXT(GLenum target)
    {
    
    real_glResetHistogramEXT(target);
    }
void(__stdcall *real_glResetMinmaxEXT)(GLenum target) = 0;
    void skibidigfx_glResetMinmaxEXT(GLenum target)
    {
    
    real_glResetMinmaxEXT(target);
    }
void(__stdcall *real_glIndexFuncEXT)(GLenum func, GLclampf ref) = 0;
    void skibidigfx_glIndexFuncEXT(GLenum func, GLclampf ref)
    {
    
    real_glIndexFuncEXT(func,ref);
    }
void(__stdcall *real_glIndexMaterialEXT)(GLenum face, GLenum mode) = 0;
    void skibidigfx_glIndexMaterialEXT(GLenum face, GLenum mode)
    {
    
    real_glIndexMaterialEXT(face,mode);
    }
void(__stdcall *real_glApplyTextureEXT)(GLenum mode) = 0;
    void skibidigfx_glApplyTextureEXT(GLenum mode)
    {
    
    real_glApplyTextureEXT(mode);
    }
void(__stdcall *real_glTextureLightEXT)(GLenum pname) = 0;
    void skibidigfx_glTextureLightEXT(GLenum pname)
    {
    
    real_glTextureLightEXT(pname);
    }
void(__stdcall *real_glTextureMaterialEXT)(GLenum face, GLenum mode) = 0;
    void skibidigfx_glTextureMaterialEXT(GLenum face, GLenum mode)
    {
    
    real_glTextureMaterialEXT(face,mode);
    }
void(__stdcall *real_glGetUnsignedBytevEXT)(GLenum pname, GLubyte* data) = 0;
    void skibidigfx_glGetUnsignedBytevEXT(GLenum pname, GLubyte* data)
    {
    
    real_glGetUnsignedBytevEXT(pname,data);
    }
void(__stdcall *real_glGetUnsignedBytei_vEXT)(GLenum target, GLuint index, GLubyte* data) = 0;
    void skibidigfx_glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte* data)
    {
    
    real_glGetUnsignedBytei_vEXT(target,index,data);
    }
void(__stdcall *real_glDeleteMemoryObjectsEXT)(GLsizei n, const GLuint* memoryObjects) = 0;
    void skibidigfx_glDeleteMemoryObjectsEXT(GLsizei n, const GLuint* memoryObjects)
    {
    
    real_glDeleteMemoryObjectsEXT(n,memoryObjects);
    }
GLboolean(__stdcall *real_glIsMemoryObjectEXT)(GLuint memoryObject) = 0;
    GLboolean skibidigfx_glIsMemoryObjectEXT(GLuint memoryObject)
    {
    
    return real_glIsMemoryObjectEXT(memoryObject);
    }
void(__stdcall *real_glCreateMemoryObjectsEXT)(GLsizei n, GLuint* memoryObjects) = 0;
    void skibidigfx_glCreateMemoryObjectsEXT(GLsizei n, GLuint* memoryObjects)
    {
    
    real_glCreateMemoryObjectsEXT(n,memoryObjects);
    }
void(__stdcall *real_glMemoryObjectParameterivEXT)(GLuint memoryObject, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint* params)
    {
    
    real_glMemoryObjectParameterivEXT(memoryObject,pname,params);
    }
void(__stdcall *real_glGetMemoryObjectParameterivEXT)(GLuint memoryObject, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint* params)
    {
    
    real_glGetMemoryObjectParameterivEXT(memoryObject,pname,params);
    }
void(__stdcall *real_glTexStorageMem2DEXT)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
    {
    
    real_glTexStorageMem2DEXT(target,levels,internalFormat,width,height,memory,offset);
    }
void(__stdcall *real_glTexStorageMem2DMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
    {
    
    real_glTexStorageMem2DMultisampleEXT(target,samples,internalFormat,width,height,fixedSampleLocations,memory,offset);
    }
void(__stdcall *real_glTexStorageMem3DEXT)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
    {
    
    real_glTexStorageMem3DEXT(target,levels,internalFormat,width,height,depth,memory,offset);
    }
void(__stdcall *real_glTexStorageMem3DMultisampleEXT)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
    {
    
    real_glTexStorageMem3DMultisampleEXT(target,samples,internalFormat,width,height,depth,fixedSampleLocations,memory,offset);
    }
void(__stdcall *real_glBufferStorageMemEXT)(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)
    {
    
    real_glBufferStorageMemEXT(target,size,memory,offset);
    }
void(__stdcall *real_glTextureStorageMem2DEXT)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
    {
    
    real_glTextureStorageMem2DEXT(texture,levels,internalFormat,width,height,memory,offset);
    }
void(__stdcall *real_glTextureStorageMem2DMultisampleEXT)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
    {
    
    real_glTextureStorageMem2DMultisampleEXT(texture,samples,internalFormat,width,height,fixedSampleLocations,memory,offset);
    }
void(__stdcall *real_glTextureStorageMem3DEXT)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
    {
    
    real_glTextureStorageMem3DEXT(texture,levels,internalFormat,width,height,depth,memory,offset);
    }
void(__stdcall *real_glTextureStorageMem3DMultisampleEXT)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
    {
    
    real_glTextureStorageMem3DMultisampleEXT(texture,samples,internalFormat,width,height,depth,fixedSampleLocations,memory,offset);
    }
void(__stdcall *real_glNamedBufferStorageMemEXT)(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)
    {
    
    real_glNamedBufferStorageMemEXT(buffer,size,memory,offset);
    }
void(__stdcall *real_glTexStorageMem1DEXT)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
    {
    
    real_glTexStorageMem1DEXT(target,levels,internalFormat,width,memory,offset);
    }
void(__stdcall *real_glTextureStorageMem1DEXT)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
    {
    
    real_glTextureStorageMem1DEXT(texture,levels,internalFormat,width,memory,offset);
    }
void(__stdcall *real_glImportMemoryFdEXT)(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) = 0;
    void skibidigfx_glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
    {
    
    real_glImportMemoryFdEXT(memory,size,handleType,fd);
    }
void(__stdcall *real_glImportMemoryWin32HandleEXT)(GLuint memory, GLuint64 size, GLenum handleType, void* handle) = 0;
    void skibidigfx_glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void* handle)
    {
    
    real_glImportMemoryWin32HandleEXT(memory,size,handleType,handle);
    }
void(__stdcall *real_glImportMemoryWin32NameEXT)(GLuint memory, GLuint64 size, GLenum handleType, const void* name) = 0;
    void skibidigfx_glImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void* name)
    {
    
    real_glImportMemoryWin32NameEXT(memory,size,handleType,name);
    }
void(__stdcall *real_glMultiDrawArraysEXT)(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount) = 0;
    void skibidigfx_glMultiDrawArraysEXT(GLenum mode, const GLint* first, const GLsizei* count, GLsizei primcount)
    {
    
    real_glMultiDrawArraysEXT(mode,first,count,primcount);
    }
void(__stdcall *real_glMultiDrawElementsEXT)(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei primcount) = 0;
    void skibidigfx_glMultiDrawElementsEXT(GLenum mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei primcount)
    {
    
    real_glMultiDrawElementsEXT(mode,count,type,constindices,primcount);
    }
void(__stdcall *real_glSampleMaskEXT)(GLclampf value, GLboolean invert) = 0;
    void skibidigfx_glSampleMaskEXT(GLclampf value, GLboolean invert)
    {
    
    real_glSampleMaskEXT(value,invert);
    }
void(__stdcall *real_glSamplePatternEXT)(GLenum pattern) = 0;
    void skibidigfx_glSamplePatternEXT(GLenum pattern)
    {
    
    real_glSamplePatternEXT(pattern);
    }
void(__stdcall *real_glColorTableEXT)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void* table) = 0;
    void skibidigfx_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void* table)
    {
    
    real_glColorTableEXT(target,internalFormat,width,format,type,table);
    }
void(__stdcall *real_glGetColorTableEXT)(GLenum target, GLenum format, GLenum type, void* data) = 0;
    void skibidigfx_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void* data)
    {
    
    real_glGetColorTableEXT(target,format,type,data);
    }
void(__stdcall *real_glGetColorTableParameterivEXT)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetColorTableParameterivEXT(target,pname,params);
    }
void(__stdcall *real_glGetColorTableParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetColorTableParameterfvEXT(target,pname,params);
    }
void(__stdcall *real_glPixelTransformParameteriEXT)(GLenum target, GLenum pname, GLint param) = 0;
    void skibidigfx_glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)
    {
    
    real_glPixelTransformParameteriEXT(target,pname,param);
    }
void(__stdcall *real_glPixelTransformParameterfEXT)(GLenum target, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)
    {
    
    real_glPixelTransformParameterfEXT(target,pname,param);
    }
void(__stdcall *real_glPixelTransformParameterivEXT)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glPixelTransformParameterivEXT(target,pname,params);
    }
void(__stdcall *real_glPixelTransformParameterfvEXT)(GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glPixelTransformParameterfvEXT(target,pname,params);
    }
void(__stdcall *real_glGetPixelTransformParameterivEXT)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetPixelTransformParameterivEXT(target,pname,params);
    }
void(__stdcall *real_glGetPixelTransformParameterfvEXT)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetPixelTransformParameterfvEXT(target,pname,params);
    }
void(__stdcall *real_glPointParameterfEXT)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glPointParameterfEXT(GLenum pname, GLfloat param)
    {
    
    real_glPointParameterfEXT(pname,param);
    }
void(__stdcall *real_glPointParameterfvEXT)(GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glPointParameterfvEXT(GLenum pname, const GLfloat* params)
    {
    
    real_glPointParameterfvEXT(pname,params);
    }
void(__stdcall *real_glPolygonOffsetEXT)(GLfloat factor, GLfloat bias) = 0;
    void skibidigfx_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
    {
    
    real_glPolygonOffsetEXT(factor,bias);
    }
void(__stdcall *real_glPolygonOffsetClampEXT)(GLfloat factor, GLfloat units, GLfloat clamp) = 0;
    void skibidigfx_glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp)
    {
    
    real_glPolygonOffsetClampEXT(factor,units,clamp);
    }
void(__stdcall *real_glProvokingVertexEXT)(GLenum mode) = 0;
    void skibidigfx_glProvokingVertexEXT(GLenum mode)
    {
    
    real_glProvokingVertexEXT(mode);
    }
void(__stdcall *real_glRasterSamplesEXT)(GLuint samples, GLboolean fixedsamplelocations) = 0;
    void skibidigfx_glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations)
    {
    
    real_glRasterSamplesEXT(samples,fixedsamplelocations);
    }
void(__stdcall *real_glSecondaryColor3bEXT)(GLbyte red, GLbyte green, GLbyte blue) = 0;
    void skibidigfx_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
    {
    
    real_glSecondaryColor3bEXT(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3bvEXT)(const GLbyte* v) = 0;
    void skibidigfx_glSecondaryColor3bvEXT(const GLbyte* v)
    {
    
    real_glSecondaryColor3bvEXT(v);
    }
void(__stdcall *real_glSecondaryColor3dEXT)(GLdouble red, GLdouble green, GLdouble blue) = 0;
    void skibidigfx_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
    {
    
    real_glSecondaryColor3dEXT(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3dvEXT)(const GLdouble* v) = 0;
    void skibidigfx_glSecondaryColor3dvEXT(const GLdouble* v)
    {
    
    real_glSecondaryColor3dvEXT(v);
    }
void(__stdcall *real_glSecondaryColor3fEXT)(GLfloat red, GLfloat green, GLfloat blue) = 0;
    void skibidigfx_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
    {
    
    real_glSecondaryColor3fEXT(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3fvEXT)(const GLfloat* v) = 0;
    void skibidigfx_glSecondaryColor3fvEXT(const GLfloat* v)
    {
    
    real_glSecondaryColor3fvEXT(v);
    }
void(__stdcall *real_glSecondaryColor3iEXT)(GLint red, GLint green, GLint blue) = 0;
    void skibidigfx_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
    {
    
    real_glSecondaryColor3iEXT(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3ivEXT)(const GLint* v) = 0;
    void skibidigfx_glSecondaryColor3ivEXT(const GLint* v)
    {
    
    real_glSecondaryColor3ivEXT(v);
    }
void(__stdcall *real_glSecondaryColor3sEXT)(GLshort red, GLshort green, GLshort blue) = 0;
    void skibidigfx_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
    {
    
    real_glSecondaryColor3sEXT(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3svEXT)(const GLshort* v) = 0;
    void skibidigfx_glSecondaryColor3svEXT(const GLshort* v)
    {
    
    real_glSecondaryColor3svEXT(v);
    }
void(__stdcall *real_glSecondaryColor3ubEXT)(GLubyte red, GLubyte green, GLubyte blue) = 0;
    void skibidigfx_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
    {
    
    real_glSecondaryColor3ubEXT(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3ubvEXT)(const GLubyte* v) = 0;
    void skibidigfx_glSecondaryColor3ubvEXT(const GLubyte* v)
    {
    
    real_glSecondaryColor3ubvEXT(v);
    }
void(__stdcall *real_glSecondaryColor3uiEXT)(GLuint red, GLuint green, GLuint blue) = 0;
    void skibidigfx_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
    {
    
    real_glSecondaryColor3uiEXT(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3uivEXT)(const GLuint* v) = 0;
    void skibidigfx_glSecondaryColor3uivEXT(const GLuint* v)
    {
    
    real_glSecondaryColor3uivEXT(v);
    }
void(__stdcall *real_glSecondaryColor3usEXT)(GLushort red, GLushort green, GLushort blue) = 0;
    void skibidigfx_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
    {
    
    real_glSecondaryColor3usEXT(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3usvEXT)(const GLushort* v) = 0;
    void skibidigfx_glSecondaryColor3usvEXT(const GLushort* v)
    {
    
    real_glSecondaryColor3usvEXT(v);
    }
void(__stdcall *real_glSecondaryColorPointerEXT)(GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glSecondaryColorPointerEXT(size,type,stride,pointer);
    }
void(__stdcall *real_glGenSemaphoresEXT)(GLsizei n, GLuint* semaphores) = 0;
    void skibidigfx_glGenSemaphoresEXT(GLsizei n, GLuint* semaphores)
    {
    
    real_glGenSemaphoresEXT(n,semaphores);
    }
void(__stdcall *real_glDeleteSemaphoresEXT)(GLsizei n, const GLuint* semaphores) = 0;
    void skibidigfx_glDeleteSemaphoresEXT(GLsizei n, const GLuint* semaphores)
    {
    
    real_glDeleteSemaphoresEXT(n,semaphores);
    }
GLboolean(__stdcall *real_glIsSemaphoreEXT)(GLuint semaphore) = 0;
    GLboolean skibidigfx_glIsSemaphoreEXT(GLuint semaphore)
    {
    
    return real_glIsSemaphoreEXT(semaphore);
    }
void(__stdcall *real_glSemaphoreParameterui64vEXT)(GLuint semaphore, GLenum pname, const GLuint64* params) = 0;
    void skibidigfx_glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64* params)
    {
    
    real_glSemaphoreParameterui64vEXT(semaphore,pname,params);
    }
void(__stdcall *real_glGetSemaphoreParameterui64vEXT)(GLuint semaphore, GLenum pname, GLuint64* params) = 0;
    void skibidigfx_glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64* params)
    {
    
    real_glGetSemaphoreParameterui64vEXT(semaphore,pname,params);
    }
void(__stdcall *real_glWaitSemaphoreEXT)(GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint* textures, const GLenum* srcLayouts) = 0;
    void skibidigfx_glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint* textures, const GLenum* srcLayouts)
    {
    
    real_glWaitSemaphoreEXT(semaphore,numBufferBarriers,buffers,numTextureBarriers,textures,srcLayouts);
    }
void(__stdcall *real_glSignalSemaphoreEXT)(GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint* textures, const GLenum* dstLayouts) = 0;
    void skibidigfx_glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint* buffers, GLuint numTextureBarriers, const GLuint* textures, const GLenum* dstLayouts)
    {
    
    real_glSignalSemaphoreEXT(semaphore,numBufferBarriers,buffers,numTextureBarriers,textures,dstLayouts);
    }
void(__stdcall *real_glImportSemaphoreFdEXT)(GLuint semaphore, GLenum handleType, GLint fd) = 0;
    void skibidigfx_glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd)
    {
    
    real_glImportSemaphoreFdEXT(semaphore,handleType,fd);
    }
void(__stdcall *real_glImportSemaphoreWin32HandleEXT)(GLuint semaphore, GLenum handleType, void* handle) = 0;
    void skibidigfx_glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void* handle)
    {
    
    real_glImportSemaphoreWin32HandleEXT(semaphore,handleType,handle);
    }
void(__stdcall *real_glImportSemaphoreWin32NameEXT)(GLuint semaphore, GLenum handleType, const void* name) = 0;
    void skibidigfx_glImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void* name)
    {
    
    real_glImportSemaphoreWin32NameEXT(semaphore,handleType,name);
    }
void(__stdcall *real_glUseShaderProgramEXT)(GLenum type, GLuint program) = 0;
    void skibidigfx_glUseShaderProgramEXT(GLenum type, GLuint program)
    {
    
    real_glUseShaderProgramEXT(type,program);
    }
void(__stdcall *real_glActiveProgramEXT)(GLuint program) = 0;
    void skibidigfx_glActiveProgramEXT(GLuint program)
    {
    
    real_glActiveProgramEXT(program);
    }
GLuint(__stdcall *real_glCreateShaderProgramEXT)(GLenum type, const GLchar* string) = 0;
    GLuint skibidigfx_glCreateShaderProgramEXT(GLenum type, const GLchar* string)
    {
    
    return real_glCreateShaderProgramEXT(type,string);
    }
void(__stdcall *real_glFramebufferFetchBarrierEXT)() = 0;
    void skibidigfx_glFramebufferFetchBarrierEXT()
    {
    
    real_glFramebufferFetchBarrierEXT();
    }
void(__stdcall *real_glBindImageTextureEXT)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) = 0;
    void skibidigfx_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
    {
    
    real_glBindImageTextureEXT(index,texture,level,layered,layer,access,format);
    }
void(__stdcall *real_glMemoryBarrierEXT)(GLbitfield barriers) = 0;
    void skibidigfx_glMemoryBarrierEXT(GLbitfield barriers)
    {
    
    real_glMemoryBarrierEXT(barriers);
    }
void(__stdcall *real_glStencilClearTagEXT)(GLsizei stencilTagBits, GLuint stencilClearTag) = 0;
    void skibidigfx_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
    {
    
    real_glStencilClearTagEXT(stencilTagBits,stencilClearTag);
    }
void(__stdcall *real_glActiveStencilFaceEXT)(GLenum face) = 0;
    void skibidigfx_glActiveStencilFaceEXT(GLenum face)
    {
    
    real_glActiveStencilFaceEXT(face);
    }
void(__stdcall *real_glTexSubImage1DEXT)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTexSubImage1DEXT(target,level,xoffset,width,format,type,pixels);
    }
void(__stdcall *real_glTexSubImage2DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTexSubImage2DEXT(target,level,xoffset,yoffset,width,height,format,type,pixels);
    }
void(__stdcall *real_glTexImage3DEXT)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTexImage3DEXT(target,level,internalformat,width,height,depth,border,format,type,pixels);
    }
void(__stdcall *real_glTexSubImage3DEXT)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTexSubImage3DEXT(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels);
    }
void(__stdcall *real_glFramebufferTextureLayerEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) = 0;
    void skibidigfx_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
    {
    
    real_glFramebufferTextureLayerEXT(target,attachment,texture,level,layer);
    }
void(__stdcall *real_glTexBufferEXT)(GLenum target, GLenum internalformat, GLuint buffer) = 0;
    void skibidigfx_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
    {
    
    real_glTexBufferEXT(target,internalformat,buffer);
    }
void(__stdcall *real_glTexParameterIivEXT)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glTexParameterIivEXT(target,pname,params);
    }
void(__stdcall *real_glTexParameterIuivEXT)(GLenum target, GLenum pname, const GLuint* params) = 0;
    void skibidigfx_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint* params)
    {
    
    real_glTexParameterIuivEXT(target,pname,params);
    }
void(__stdcall *real_glGetTexParameterIivEXT)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetTexParameterIivEXT(target,pname,params);
    }
void(__stdcall *real_glGetTexParameterIuivEXT)(GLenum target, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint* params)
    {
    
    real_glGetTexParameterIuivEXT(target,pname,params);
    }
void(__stdcall *real_glClearColorIiEXT)(GLint red, GLint green, GLint blue, GLint alpha) = 0;
    void skibidigfx_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
    {
    
    real_glClearColorIiEXT(red,green,blue,alpha);
    }
void(__stdcall *real_glClearColorIuiEXT)(GLuint red, GLuint green, GLuint blue, GLuint alpha) = 0;
    void skibidigfx_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
    {
    
    real_glClearColorIuiEXT(red,green,blue,alpha);
    }
GLboolean(__stdcall *real_glAreTexturesResidentEXT)(GLsizei n, const GLuint* textures, GLboolean* residences) = 0;
    GLboolean skibidigfx_glAreTexturesResidentEXT(GLsizei n, const GLuint* textures, GLboolean* residences)
    {
    
    return real_glAreTexturesResidentEXT(n,textures,residences);
    }
void(__stdcall *real_glBindTextureEXT)(GLenum target, GLuint texture) = 0;
    void skibidigfx_glBindTextureEXT(GLenum target, GLuint texture)
    {
    
    real_glBindTextureEXT(target,texture);
    }
void(__stdcall *real_glDeleteTexturesEXT)(GLsizei n, const GLuint* textures) = 0;
    void skibidigfx_glDeleteTexturesEXT(GLsizei n, const GLuint* textures)
    {
    
    real_glDeleteTexturesEXT(n,textures);
    }
void(__stdcall *real_glGenTexturesEXT)(GLsizei n, GLuint* textures) = 0;
    void skibidigfx_glGenTexturesEXT(GLsizei n, GLuint* textures)
    {
    
    real_glGenTexturesEXT(n,textures);
    }
GLboolean(__stdcall *real_glIsTextureEXT)(GLuint texture) = 0;
    GLboolean skibidigfx_glIsTextureEXT(GLuint texture)
    {
    
    return real_glIsTextureEXT(texture);
    }
void(__stdcall *real_glPrioritizeTexturesEXT)(GLsizei n, const GLuint* textures, const GLclampf* priorities) = 0;
    void skibidigfx_glPrioritizeTexturesEXT(GLsizei n, const GLuint* textures, const GLclampf* priorities)
    {
    
    real_glPrioritizeTexturesEXT(n,textures,priorities);
    }
void(__stdcall *real_glTextureNormalEXT)(GLenum mode) = 0;
    void skibidigfx_glTextureNormalEXT(GLenum mode)
    {
    
    real_glTextureNormalEXT(mode);
    }
void(__stdcall *real_glGetQueryObjecti64vEXT)(GLuint id, GLenum pname, GLint64* params) = 0;
    void skibidigfx_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64* params)
    {
    
    real_glGetQueryObjecti64vEXT(id,pname,params);
    }
void(__stdcall *real_glGetQueryObjectui64vEXT)(GLuint id, GLenum pname, GLuint64* params) = 0;
    void skibidigfx_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64* params)
    {
    
    real_glGetQueryObjectui64vEXT(id,pname,params);
    }
void(__stdcall *real_glBeginTransformFeedbackEXT)(GLenum primitiveMode) = 0;
    void skibidigfx_glBeginTransformFeedbackEXT(GLenum primitiveMode)
    {
    
    real_glBeginTransformFeedbackEXT(primitiveMode);
    }
void(__stdcall *real_glEndTransformFeedbackEXT)() = 0;
    void skibidigfx_glEndTransformFeedbackEXT()
    {
    
    real_glEndTransformFeedbackEXT();
    }
void(__stdcall *real_glBindBufferRangeEXT)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = 0;
    void skibidigfx_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    real_glBindBufferRangeEXT(target,index,buffer,offset,size);
    }
void(__stdcall *real_glBindBufferOffsetEXT)(GLenum target, GLuint index, GLuint buffer, GLintptr offset) = 0;
    void skibidigfx_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
    {
    
    real_glBindBufferOffsetEXT(target,index,buffer,offset);
    }
void(__stdcall *real_glBindBufferBaseEXT)(GLenum target, GLuint index, GLuint buffer) = 0;
    void skibidigfx_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
    {
    
    real_glBindBufferBaseEXT(target,index,buffer);
    }
void(__stdcall *real_glTransformFeedbackVaryingsEXT)(GLuint program, GLsizei count, const GLchar** constvaryings, GLenum bufferMode) = 0;
    void skibidigfx_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar** constvaryings, GLenum bufferMode)
    {
    
    real_glTransformFeedbackVaryingsEXT(program,count,constvaryings,bufferMode);
    }
void(__stdcall *real_glGetTransformFeedbackVaryingEXT)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name) = 0;
    void skibidigfx_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)
    {
    
    real_glGetTransformFeedbackVaryingEXT(program,index,bufSize,length,size,type,name);
    }
void(__stdcall *real_glArrayElementEXT)(GLint i) = 0;
    void skibidigfx_glArrayElementEXT(GLint i)
    {
    
    real_glArrayElementEXT(i);
    }
void(__stdcall *real_glColorPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer) = 0;
    void skibidigfx_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    real_glColorPointerEXT(size,type,stride,count,pointer);
    }
void(__stdcall *real_glDrawArraysEXT)(GLenum mode, GLint first, GLsizei count) = 0;
    void skibidigfx_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
    {
    
    real_glDrawArraysEXT(mode,first,count);
    }
void(__stdcall *real_glEdgeFlagPointerEXT)(GLsizei stride, GLsizei count, const GLboolean* pointer) = 0;
    void skibidigfx_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean* pointer)
    {
    
    real_glEdgeFlagPointerEXT(stride,count,pointer);
    }
void(__stdcall *real_glGetPointervEXT)(GLenum pname, void** params) = 0;
    void skibidigfx_glGetPointervEXT(GLenum pname, void** params)
    {
    
    real_glGetPointervEXT(pname,params);
    }
void(__stdcall *real_glIndexPointerEXT)(GLenum type, GLsizei stride, GLsizei count, const void* pointer) = 0;
    void skibidigfx_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    real_glIndexPointerEXT(type,stride,count,pointer);
    }
void(__stdcall *real_glNormalPointerEXT)(GLenum type, GLsizei stride, GLsizei count, const void* pointer) = 0;
    void skibidigfx_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    real_glNormalPointerEXT(type,stride,count,pointer);
    }
void(__stdcall *real_glTexCoordPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer) = 0;
    void skibidigfx_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    real_glTexCoordPointerEXT(size,type,stride,count,pointer);
    }
void(__stdcall *real_glVertexPointerEXT)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer) = 0;
    void skibidigfx_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void* pointer)
    {
    
    real_glVertexPointerEXT(size,type,stride,count,pointer);
    }
void(__stdcall *real_glVertexAttribL1dEXT)(GLuint index, GLdouble x) = 0;
    void skibidigfx_glVertexAttribL1dEXT(GLuint index, GLdouble x)
    {
    
    real_glVertexAttribL1dEXT(index,x);
    }
void(__stdcall *real_glVertexAttribL2dEXT)(GLuint index, GLdouble x, GLdouble y) = 0;
    void skibidigfx_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
    {
    
    real_glVertexAttribL2dEXT(index,x,y);
    }
void(__stdcall *real_glVertexAttribL3dEXT)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glVertexAttribL3dEXT(index,x,y,z);
    }
void(__stdcall *real_glVertexAttribL4dEXT)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glVertexAttribL4dEXT(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttribL1dvEXT)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribL1dvEXT(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttribL1dvEXT(index,v);
    }
void(__stdcall *real_glVertexAttribL2dvEXT)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribL2dvEXT(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttribL2dvEXT(index,v);
    }
void(__stdcall *real_glVertexAttribL3dvEXT)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribL3dvEXT(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttribL3dvEXT(index,v);
    }
void(__stdcall *real_glVertexAttribL4dvEXT)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribL4dvEXT(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttribL4dvEXT(index,v);
    }
void(__stdcall *real_glVertexAttribLPointerEXT)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glVertexAttribLPointerEXT(index,size,type,stride,pointer);
    }
void(__stdcall *real_glGetVertexAttribLdvEXT)(GLuint index, GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble* params)
    {
    
    real_glGetVertexAttribLdvEXT(index,pname,params);
    }
void(__stdcall *real_glBeginVertexShaderEXT)() = 0;
    void skibidigfx_glBeginVertexShaderEXT()
    {
    
    real_glBeginVertexShaderEXT();
    }
void(__stdcall *real_glEndVertexShaderEXT)() = 0;
    void skibidigfx_glEndVertexShaderEXT()
    {
    
    real_glEndVertexShaderEXT();
    }
void(__stdcall *real_glBindVertexShaderEXT)(GLuint id) = 0;
    void skibidigfx_glBindVertexShaderEXT(GLuint id)
    {
    
    real_glBindVertexShaderEXT(id);
    }
GLuint(__stdcall *real_glGenVertexShadersEXT)(GLuint range) = 0;
    GLuint skibidigfx_glGenVertexShadersEXT(GLuint range)
    {
    
    return real_glGenVertexShadersEXT(range);
    }
void(__stdcall *real_glDeleteVertexShaderEXT)(GLuint id) = 0;
    void skibidigfx_glDeleteVertexShaderEXT(GLuint id)
    {
    
    real_glDeleteVertexShaderEXT(id);
    }
void(__stdcall *real_glShaderOp1EXT)(GLenum op, GLuint res, GLuint arg1) = 0;
    void skibidigfx_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
    {
    
    real_glShaderOp1EXT(op,res,arg1);
    }
void(__stdcall *real_glShaderOp2EXT)(GLenum op, GLuint res, GLuint arg1, GLuint arg2) = 0;
    void skibidigfx_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
    {
    
    real_glShaderOp2EXT(op,res,arg1,arg2);
    }
void(__stdcall *real_glShaderOp3EXT)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) = 0;
    void skibidigfx_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
    {
    
    real_glShaderOp3EXT(op,res,arg1,arg2,arg3);
    }
void(__stdcall *real_glSwizzleEXT)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) = 0;
    void skibidigfx_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
    {
    
    real_glSwizzleEXT(res,in,outX,outY,outZ,outW);
    }
void(__stdcall *real_glWriteMaskEXT)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) = 0;
    void skibidigfx_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
    {
    
    real_glWriteMaskEXT(res,in,outX,outY,outZ,outW);
    }
void(__stdcall *real_glInsertComponentEXT)(GLuint res, GLuint src, GLuint num) = 0;
    void skibidigfx_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
    {
    
    real_glInsertComponentEXT(res,src,num);
    }
void(__stdcall *real_glExtractComponentEXT)(GLuint res, GLuint src, GLuint num) = 0;
    void skibidigfx_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
    {
    
    real_glExtractComponentEXT(res,src,num);
    }
GLuint(__stdcall *real_glGenSymbolsEXT)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) = 0;
    GLuint skibidigfx_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
    {
    
    return real_glGenSymbolsEXT(datatype,storagetype,range,components);
    }
void(__stdcall *real_glSetInvariantEXT)(GLuint id, GLenum type, const void* addr) = 0;
    void skibidigfx_glSetInvariantEXT(GLuint id, GLenum type, const void* addr)
    {
    
    real_glSetInvariantEXT(id,type,addr);
    }
void(__stdcall *real_glSetLocalConstantEXT)(GLuint id, GLenum type, const void* addr) = 0;
    void skibidigfx_glSetLocalConstantEXT(GLuint id, GLenum type, const void* addr)
    {
    
    real_glSetLocalConstantEXT(id,type,addr);
    }
void(__stdcall *real_glVariantbvEXT)(GLuint id, const GLbyte* addr) = 0;
    void skibidigfx_glVariantbvEXT(GLuint id, const GLbyte* addr)
    {
    
    real_glVariantbvEXT(id,addr);
    }
void(__stdcall *real_glVariantsvEXT)(GLuint id, const GLshort* addr) = 0;
    void skibidigfx_glVariantsvEXT(GLuint id, const GLshort* addr)
    {
    
    real_glVariantsvEXT(id,addr);
    }
void(__stdcall *real_glVariantivEXT)(GLuint id, const GLint* addr) = 0;
    void skibidigfx_glVariantivEXT(GLuint id, const GLint* addr)
    {
    
    real_glVariantivEXT(id,addr);
    }
void(__stdcall *real_glVariantfvEXT)(GLuint id, const GLfloat* addr) = 0;
    void skibidigfx_glVariantfvEXT(GLuint id, const GLfloat* addr)
    {
    
    real_glVariantfvEXT(id,addr);
    }
void(__stdcall *real_glVariantdvEXT)(GLuint id, const GLdouble* addr) = 0;
    void skibidigfx_glVariantdvEXT(GLuint id, const GLdouble* addr)
    {
    
    real_glVariantdvEXT(id,addr);
    }
void(__stdcall *real_glVariantubvEXT)(GLuint id, const GLubyte* addr) = 0;
    void skibidigfx_glVariantubvEXT(GLuint id, const GLubyte* addr)
    {
    
    real_glVariantubvEXT(id,addr);
    }
void(__stdcall *real_glVariantusvEXT)(GLuint id, const GLushort* addr) = 0;
    void skibidigfx_glVariantusvEXT(GLuint id, const GLushort* addr)
    {
    
    real_glVariantusvEXT(id,addr);
    }
void(__stdcall *real_glVariantuivEXT)(GLuint id, const GLuint* addr) = 0;
    void skibidigfx_glVariantuivEXT(GLuint id, const GLuint* addr)
    {
    
    real_glVariantuivEXT(id,addr);
    }
void(__stdcall *real_glVariantPointerEXT)(GLuint id, GLenum type, GLuint stride, const void* addr) = 0;
    void skibidigfx_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void* addr)
    {
    
    real_glVariantPointerEXT(id,type,stride,addr);
    }
void(__stdcall *real_glEnableVariantClientStateEXT)(GLuint id) = 0;
    void skibidigfx_glEnableVariantClientStateEXT(GLuint id)
    {
    
    real_glEnableVariantClientStateEXT(id);
    }
void(__stdcall *real_glDisableVariantClientStateEXT)(GLuint id) = 0;
    void skibidigfx_glDisableVariantClientStateEXT(GLuint id)
    {
    
    real_glDisableVariantClientStateEXT(id);
    }
GLuint(__stdcall *real_glBindLightParameterEXT)(GLenum light, GLenum value) = 0;
    GLuint skibidigfx_glBindLightParameterEXT(GLenum light, GLenum value)
    {
    
    return real_glBindLightParameterEXT(light,value);
    }
GLuint(__stdcall *real_glBindMaterialParameterEXT)(GLenum face, GLenum value) = 0;
    GLuint skibidigfx_glBindMaterialParameterEXT(GLenum face, GLenum value)
    {
    
    return real_glBindMaterialParameterEXT(face,value);
    }
GLuint(__stdcall *real_glBindTexGenParameterEXT)(GLenum unit, GLenum coord, GLenum value) = 0;
    GLuint skibidigfx_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
    {
    
    return real_glBindTexGenParameterEXT(unit,coord,value);
    }
GLuint(__stdcall *real_glBindTextureUnitParameterEXT)(GLenum unit, GLenum value) = 0;
    GLuint skibidigfx_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
    {
    
    return real_glBindTextureUnitParameterEXT(unit,value);
    }
GLuint(__stdcall *real_glBindParameterEXT)(GLenum value) = 0;
    GLuint skibidigfx_glBindParameterEXT(GLenum value)
    {
    
    return real_glBindParameterEXT(value);
    }
GLboolean(__stdcall *real_glIsVariantEnabledEXT)(GLuint id, GLenum cap) = 0;
    GLboolean skibidigfx_glIsVariantEnabledEXT(GLuint id, GLenum cap)
    {
    
    return real_glIsVariantEnabledEXT(id,cap);
    }
void(__stdcall *real_glGetVariantBooleanvEXT)(GLuint id, GLenum value, GLboolean* data) = 0;
    void skibidigfx_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean* data)
    {
    
    real_glGetVariantBooleanvEXT(id,value,data);
    }
void(__stdcall *real_glGetVariantIntegervEXT)(GLuint id, GLenum value, GLint* data) = 0;
    void skibidigfx_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint* data)
    {
    
    real_glGetVariantIntegervEXT(id,value,data);
    }
void(__stdcall *real_glGetVariantFloatvEXT)(GLuint id, GLenum value, GLfloat* data) = 0;
    void skibidigfx_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat* data)
    {
    
    real_glGetVariantFloatvEXT(id,value,data);
    }
void(__stdcall *real_glGetVariantPointervEXT)(GLuint id, GLenum value, void** data) = 0;
    void skibidigfx_glGetVariantPointervEXT(GLuint id, GLenum value, void** data)
    {
    
    real_glGetVariantPointervEXT(id,value,data);
    }
void(__stdcall *real_glGetInvariantBooleanvEXT)(GLuint id, GLenum value, GLboolean* data) = 0;
    void skibidigfx_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean* data)
    {
    
    real_glGetInvariantBooleanvEXT(id,value,data);
    }
void(__stdcall *real_glGetInvariantIntegervEXT)(GLuint id, GLenum value, GLint* data) = 0;
    void skibidigfx_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint* data)
    {
    
    real_glGetInvariantIntegervEXT(id,value,data);
    }
void(__stdcall *real_glGetInvariantFloatvEXT)(GLuint id, GLenum value, GLfloat* data) = 0;
    void skibidigfx_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat* data)
    {
    
    real_glGetInvariantFloatvEXT(id,value,data);
    }
void(__stdcall *real_glGetLocalConstantBooleanvEXT)(GLuint id, GLenum value, GLboolean* data) = 0;
    void skibidigfx_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean* data)
    {
    
    real_glGetLocalConstantBooleanvEXT(id,value,data);
    }
void(__stdcall *real_glGetLocalConstantIntegervEXT)(GLuint id, GLenum value, GLint* data) = 0;
    void skibidigfx_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint* data)
    {
    
    real_glGetLocalConstantIntegervEXT(id,value,data);
    }
void(__stdcall *real_glGetLocalConstantFloatvEXT)(GLuint id, GLenum value, GLfloat* data) = 0;
    void skibidigfx_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat* data)
    {
    
    real_glGetLocalConstantFloatvEXT(id,value,data);
    }
void(__stdcall *real_glVertexWeightfEXT)(GLfloat weight) = 0;
    void skibidigfx_glVertexWeightfEXT(GLfloat weight)
    {
    
    real_glVertexWeightfEXT(weight);
    }
void(__stdcall *real_glVertexWeightfvEXT)(const GLfloat* weight) = 0;
    void skibidigfx_glVertexWeightfvEXT(const GLfloat* weight)
    {
    
    real_glVertexWeightfvEXT(weight);
    }
void(__stdcall *real_glVertexWeightPointerEXT)(GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glVertexWeightPointerEXT(size,type,stride,pointer);
    }
GLboolean(__stdcall *real_glAcquireKeyedMutexWin32EXT)(GLuint memory, GLuint64 key, GLuint timeout) = 0;
    GLboolean skibidigfx_glAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout)
    {
    
    return real_glAcquireKeyedMutexWin32EXT(memory,key,timeout);
    }
GLboolean(__stdcall *real_glReleaseKeyedMutexWin32EXT)(GLuint memory, GLuint64 key) = 0;
    GLboolean skibidigfx_glReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key)
    {
    
    return real_glReleaseKeyedMutexWin32EXT(memory,key);
    }
void(__stdcall *real_glWindowRectanglesEXT)(GLenum mode, GLsizei count, const GLint* box) = 0;
    void skibidigfx_glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint* box)
    {
    
    real_glWindowRectanglesEXT(mode,count,box);
    }
GLsync(__stdcall *real_glImportSyncEXT)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) = 0;
    GLsync skibidigfx_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
    {
    
    return real_glImportSyncEXT(external_sync_type,external_sync,flags);
    }
void(__stdcall *real_glFrameTerminatorGREMEDY)() = 0;
    void skibidigfx_glFrameTerminatorGREMEDY()
    {
    
    real_glFrameTerminatorGREMEDY();
    }
void(__stdcall *real_glStringMarkerGREMEDY)(GLsizei len, const void* string) = 0;
    void skibidigfx_glStringMarkerGREMEDY(GLsizei len, const void* string)
    {
    
    real_glStringMarkerGREMEDY(len,string);
    }
void(__stdcall *real_glImageTransformParameteriHP)(GLenum target, GLenum pname, GLint param) = 0;
    void skibidigfx_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
    {
    
    real_glImageTransformParameteriHP(target,pname,param);
    }
void(__stdcall *real_glImageTransformParameterfHP)(GLenum target, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
    {
    
    real_glImageTransformParameterfHP(target,pname,param);
    }
void(__stdcall *real_glImageTransformParameterivHP)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glImageTransformParameterivHP(target,pname,params);
    }
void(__stdcall *real_glImageTransformParameterfvHP)(GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glImageTransformParameterfvHP(target,pname,params);
    }
void(__stdcall *real_glGetImageTransformParameterivHP)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetImageTransformParameterivHP(target,pname,params);
    }
void(__stdcall *real_glGetImageTransformParameterfvHP)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetImageTransformParameterfvHP(target,pname,params);
    }
void(__stdcall *real_glMultiModeDrawArraysIBM)(const GLenum* mode, const GLint* first, const GLsizei* count, GLsizei primcount, GLint modestride) = 0;
    void skibidigfx_glMultiModeDrawArraysIBM(const GLenum* mode, const GLint* first, const GLsizei* count, GLsizei primcount, GLint modestride)
    {
    
    real_glMultiModeDrawArraysIBM(mode,first,count,primcount,modestride);
    }
void(__stdcall *real_glMultiModeDrawElementsIBM)(const GLenum* mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei primcount, GLint modestride) = 0;
    void skibidigfx_glMultiModeDrawElementsIBM(const GLenum* mode, const GLsizei* count, GLenum type, const void** constindices, GLsizei primcount, GLint modestride)
    {
    
    real_glMultiModeDrawElementsIBM(mode,count,type,constindices,primcount,modestride);
    }
void(__stdcall *real_glFlushStaticDataIBM)(GLenum target) = 0;
    void skibidigfx_glFlushStaticDataIBM(GLenum target)
    {
    
    real_glFlushStaticDataIBM(target);
    }
void(__stdcall *real_glColorPointerListIBM)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride) = 0;
    void skibidigfx_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    real_glColorPointerListIBM(size,type,stride,pointer,ptrstride);
    }
void(__stdcall *real_glSecondaryColorPointerListIBM)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride) = 0;
    void skibidigfx_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    real_glSecondaryColorPointerListIBM(size,type,stride,pointer,ptrstride);
    }
void(__stdcall *real_glEdgeFlagPointerListIBM)(GLint stride, const GLboolean** pointer, GLint ptrstride) = 0;
    void skibidigfx_glEdgeFlagPointerListIBM(GLint stride, const GLboolean** pointer, GLint ptrstride)
    {
    
    real_glEdgeFlagPointerListIBM(stride,pointer,ptrstride);
    }
void(__stdcall *real_glFogCoordPointerListIBM)(GLenum type, GLint stride, const void** pointer, GLint ptrstride) = 0;
    void skibidigfx_glFogCoordPointerListIBM(GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    real_glFogCoordPointerListIBM(type,stride,pointer,ptrstride);
    }
void(__stdcall *real_glIndexPointerListIBM)(GLenum type, GLint stride, const void** pointer, GLint ptrstride) = 0;
    void skibidigfx_glIndexPointerListIBM(GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    real_glIndexPointerListIBM(type,stride,pointer,ptrstride);
    }
void(__stdcall *real_glNormalPointerListIBM)(GLenum type, GLint stride, const void** pointer, GLint ptrstride) = 0;
    void skibidigfx_glNormalPointerListIBM(GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    real_glNormalPointerListIBM(type,stride,pointer,ptrstride);
    }
void(__stdcall *real_glTexCoordPointerListIBM)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride) = 0;
    void skibidigfx_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    real_glTexCoordPointerListIBM(size,type,stride,pointer,ptrstride);
    }
void(__stdcall *real_glVertexPointerListIBM)(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride) = 0;
    void skibidigfx_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void** pointer, GLint ptrstride)
    {
    
    real_glVertexPointerListIBM(size,type,stride,pointer,ptrstride);
    }
void(__stdcall *real_glBlendFuncSeparateINGR)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) = 0;
    void skibidigfx_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
    {
    
    real_glBlendFuncSeparateINGR(sfactorRGB,dfactorRGB,sfactorAlpha,dfactorAlpha);
    }
void(__stdcall *real_glApplyFramebufferAttachmentCMAAINTEL)() = 0;
    void skibidigfx_glApplyFramebufferAttachmentCMAAINTEL()
    {
    
    real_glApplyFramebufferAttachmentCMAAINTEL();
    }
void(__stdcall *real_glSyncTextureINTEL)(GLuint texture) = 0;
    void skibidigfx_glSyncTextureINTEL(GLuint texture)
    {
    
    real_glSyncTextureINTEL(texture);
    }
void(__stdcall *real_glUnmapTexture2DINTEL)(GLuint texture, GLint level) = 0;
    void skibidigfx_glUnmapTexture2DINTEL(GLuint texture, GLint level)
    {
    
    real_glUnmapTexture2DINTEL(texture,level);
    }
void *(__stdcall *real_glMapTexture2DINTEL)(GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum* layout) = 0;
    void * skibidigfx_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint* stride, GLenum* layout)
    {
    
    return real_glMapTexture2DINTEL(texture,level,access,stride,layout);
    }
void(__stdcall *real_glVertexPointervINTEL)(GLint size, GLenum type, const void** pointer) = 0;
    void skibidigfx_glVertexPointervINTEL(GLint size, GLenum type, const void** pointer)
    {
    
    real_glVertexPointervINTEL(size,type,pointer);
    }
void(__stdcall *real_glNormalPointervINTEL)(GLenum type, const void** pointer) = 0;
    void skibidigfx_glNormalPointervINTEL(GLenum type, const void** pointer)
    {
    
    real_glNormalPointervINTEL(type,pointer);
    }
void(__stdcall *real_glColorPointervINTEL)(GLint size, GLenum type, const void** pointer) = 0;
    void skibidigfx_glColorPointervINTEL(GLint size, GLenum type, const void** pointer)
    {
    
    real_glColorPointervINTEL(size,type,pointer);
    }
void(__stdcall *real_glTexCoordPointervINTEL)(GLint size, GLenum type, const void** pointer) = 0;
    void skibidigfx_glTexCoordPointervINTEL(GLint size, GLenum type, const void** pointer)
    {
    
    real_glTexCoordPointervINTEL(size,type,pointer);
    }
void(__stdcall *real_glBeginPerfQueryINTEL)(GLuint queryHandle) = 0;
    void skibidigfx_glBeginPerfQueryINTEL(GLuint queryHandle)
    {
    
    real_glBeginPerfQueryINTEL(queryHandle);
    }
void(__stdcall *real_glCreatePerfQueryINTEL)(GLuint queryId, GLuint* queryHandle) = 0;
    void skibidigfx_glCreatePerfQueryINTEL(GLuint queryId, GLuint* queryHandle)
    {
    
    real_glCreatePerfQueryINTEL(queryId,queryHandle);
    }
void(__stdcall *real_glDeletePerfQueryINTEL)(GLuint queryHandle) = 0;
    void skibidigfx_glDeletePerfQueryINTEL(GLuint queryHandle)
    {
    
    real_glDeletePerfQueryINTEL(queryHandle);
    }
void(__stdcall *real_glEndPerfQueryINTEL)(GLuint queryHandle) = 0;
    void skibidigfx_glEndPerfQueryINTEL(GLuint queryHandle)
    {
    
    real_glEndPerfQueryINTEL(queryHandle);
    }
void(__stdcall *real_glGetFirstPerfQueryIdINTEL)(GLuint* queryId) = 0;
    void skibidigfx_glGetFirstPerfQueryIdINTEL(GLuint* queryId)
    {
    
    real_glGetFirstPerfQueryIdINTEL(queryId);
    }
void(__stdcall *real_glGetNextPerfQueryIdINTEL)(GLuint queryId, GLuint* nextQueryId) = 0;
    void skibidigfx_glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint* nextQueryId)
    {
    
    real_glGetNextPerfQueryIdINTEL(queryId,nextQueryId);
    }
void(__stdcall *real_glGetPerfCounterInfoINTEL)(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar* counterDesc, GLuint* counterOffset, GLuint* counterDataSize, GLuint* counterTypeEnum, GLuint* counterDataTypeEnum, GLuint64* rawCounterMaxValue) = 0;
    void skibidigfx_glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar* counterName, GLuint counterDescLength, GLchar* counterDesc, GLuint* counterOffset, GLuint* counterDataSize, GLuint* counterTypeEnum, GLuint* counterDataTypeEnum, GLuint64* rawCounterMaxValue)
    {
    
    real_glGetPerfCounterInfoINTEL(queryId,counterId,counterNameLength,counterName,counterDescLength,counterDesc,counterOffset,counterDataSize,counterTypeEnum,counterDataTypeEnum,rawCounterMaxValue);
    }
void(__stdcall *real_glGetPerfQueryDataINTEL)(GLuint queryHandle, GLuint flags, GLsizei dataSize, void* data, GLuint* bytesWritten) = 0;
    void skibidigfx_glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void* data, GLuint* bytesWritten)
    {
    
    real_glGetPerfQueryDataINTEL(queryHandle,flags,dataSize,data,bytesWritten);
    }
void(__stdcall *real_glGetPerfQueryIdByNameINTEL)(GLchar* queryName, GLuint* queryId) = 0;
    void skibidigfx_glGetPerfQueryIdByNameINTEL(GLchar* queryName, GLuint* queryId)
    {
    
    real_glGetPerfQueryIdByNameINTEL(queryName,queryId);
    }
void(__stdcall *real_glGetPerfQueryInfoINTEL)(GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint* dataSize, GLuint* noCounters, GLuint* noInstances, GLuint* capsMask) = 0;
    void skibidigfx_glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar* queryName, GLuint* dataSize, GLuint* noCounters, GLuint* noInstances, GLuint* capsMask)
    {
    
    real_glGetPerfQueryInfoINTEL(queryId,queryNameLength,queryName,dataSize,noCounters,noInstances,capsMask);
    }
void(__stdcall *real_glResizeBuffersMESA)() = 0;
    void skibidigfx_glResizeBuffersMESA()
    {
    
    real_glResizeBuffersMESA();
    }
void(__stdcall *real_glWindowPos2dMESA)(GLdouble x, GLdouble y) = 0;
    void skibidigfx_glWindowPos2dMESA(GLdouble x, GLdouble y)
    {
    
    real_glWindowPos2dMESA(x,y);
    }
void(__stdcall *real_glWindowPos2dvMESA)(const GLdouble* v) = 0;
    void skibidigfx_glWindowPos2dvMESA(const GLdouble* v)
    {
    
    real_glWindowPos2dvMESA(v);
    }
void(__stdcall *real_glWindowPos2fMESA)(GLfloat x, GLfloat y) = 0;
    void skibidigfx_glWindowPos2fMESA(GLfloat x, GLfloat y)
    {
    
    real_glWindowPos2fMESA(x,y);
    }
void(__stdcall *real_glWindowPos2fvMESA)(const GLfloat* v) = 0;
    void skibidigfx_glWindowPos2fvMESA(const GLfloat* v)
    {
    
    real_glWindowPos2fvMESA(v);
    }
void(__stdcall *real_glWindowPos2iMESA)(GLint x, GLint y) = 0;
    void skibidigfx_glWindowPos2iMESA(GLint x, GLint y)
    {
    
    real_glWindowPos2iMESA(x,y);
    }
void(__stdcall *real_glWindowPos2ivMESA)(const GLint* v) = 0;
    void skibidigfx_glWindowPos2ivMESA(const GLint* v)
    {
    
    real_glWindowPos2ivMESA(v);
    }
void(__stdcall *real_glWindowPos2sMESA)(GLshort x, GLshort y) = 0;
    void skibidigfx_glWindowPos2sMESA(GLshort x, GLshort y)
    {
    
    real_glWindowPos2sMESA(x,y);
    }
void(__stdcall *real_glWindowPos2svMESA)(const GLshort* v) = 0;
    void skibidigfx_glWindowPos2svMESA(const GLshort* v)
    {
    
    real_glWindowPos2svMESA(v);
    }
void(__stdcall *real_glWindowPos3dMESA)(GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glWindowPos3dMESA(x,y,z);
    }
void(__stdcall *real_glWindowPos3dvMESA)(const GLdouble* v) = 0;
    void skibidigfx_glWindowPos3dvMESA(const GLdouble* v)
    {
    
    real_glWindowPos3dvMESA(v);
    }
void(__stdcall *real_glWindowPos3fMESA)(GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glWindowPos3fMESA(x,y,z);
    }
void(__stdcall *real_glWindowPos3fvMESA)(const GLfloat* v) = 0;
    void skibidigfx_glWindowPos3fvMESA(const GLfloat* v)
    {
    
    real_glWindowPos3fvMESA(v);
    }
void(__stdcall *real_glWindowPos3iMESA)(GLint x, GLint y, GLint z) = 0;
    void skibidigfx_glWindowPos3iMESA(GLint x, GLint y, GLint z)
    {
    
    real_glWindowPos3iMESA(x,y,z);
    }
void(__stdcall *real_glWindowPos3ivMESA)(const GLint* v) = 0;
    void skibidigfx_glWindowPos3ivMESA(const GLint* v)
    {
    
    real_glWindowPos3ivMESA(v);
    }
void(__stdcall *real_glWindowPos3sMESA)(GLshort x, GLshort y, GLshort z) = 0;
    void skibidigfx_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
    {
    
    real_glWindowPos3sMESA(x,y,z);
    }
void(__stdcall *real_glWindowPos3svMESA)(const GLshort* v) = 0;
    void skibidigfx_glWindowPos3svMESA(const GLshort* v)
    {
    
    real_glWindowPos3svMESA(v);
    }
void(__stdcall *real_glWindowPos4dMESA)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glWindowPos4dMESA(x,y,z,w);
    }
void(__stdcall *real_glWindowPos4dvMESA)(const GLdouble* v) = 0;
    void skibidigfx_glWindowPos4dvMESA(const GLdouble* v)
    {
    
    real_glWindowPos4dvMESA(v);
    }
void(__stdcall *real_glWindowPos4fMESA)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glWindowPos4fMESA(x,y,z,w);
    }
void(__stdcall *real_glWindowPos4fvMESA)(const GLfloat* v) = 0;
    void skibidigfx_glWindowPos4fvMESA(const GLfloat* v)
    {
    
    real_glWindowPos4fvMESA(v);
    }
void(__stdcall *real_glWindowPos4iMESA)(GLint x, GLint y, GLint z, GLint w) = 0;
    void skibidigfx_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
    {
    
    real_glWindowPos4iMESA(x,y,z,w);
    }
void(__stdcall *real_glWindowPos4ivMESA)(const GLint* v) = 0;
    void skibidigfx_glWindowPos4ivMESA(const GLint* v)
    {
    
    real_glWindowPos4ivMESA(v);
    }
void(__stdcall *real_glWindowPos4sMESA)(GLshort x, GLshort y, GLshort z, GLshort w) = 0;
    void skibidigfx_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    real_glWindowPos4sMESA(x,y,z,w);
    }
void(__stdcall *real_glWindowPos4svMESA)(const GLshort* v) = 0;
    void skibidigfx_glWindowPos4svMESA(const GLshort* v)
    {
    
    real_glWindowPos4svMESA(v);
    }
void(__stdcall *real_glBeginConditionalRenderNVX)(GLuint id) = 0;
    void skibidigfx_glBeginConditionalRenderNVX(GLuint id)
    {
    
    real_glBeginConditionalRenderNVX(id);
    }
void(__stdcall *real_glEndConditionalRenderNVX)() = 0;
    void skibidigfx_glEndConditionalRenderNVX()
    {
    
    real_glEndConditionalRenderNVX();
    }
void(__stdcall *real_glLGPUNamedBufferSubDataNVX)(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data) = 0;
    void skibidigfx_glLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    real_glLGPUNamedBufferSubDataNVX(gpuMask,buffer,offset,size,data);
    }
void(__stdcall *real_glLGPUCopyImageSubDataNVX)(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) = 0;
    void skibidigfx_glLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    real_glLGPUCopyImageSubDataNVX(sourceGpu,destinationGpuMask,srcName,srcTarget,srcLevel,srcX,srxY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,width,height,depth);
    }
void(__stdcall *real_glLGPUInterlockNVX)() = 0;
    void skibidigfx_glLGPUInterlockNVX()
    {
    
    real_glLGPUInterlockNVX();
    }
void(__stdcall *real_glAlphaToCoverageDitherControlNV)(GLenum mode) = 0;
    void skibidigfx_glAlphaToCoverageDitherControlNV(GLenum mode)
    {
    
    real_glAlphaToCoverageDitherControlNV(mode);
    }
void(__stdcall *real_glMultiDrawArraysIndirectBindlessNV)(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) = 0;
    void skibidigfx_glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
    {
    
    real_glMultiDrawArraysIndirectBindlessNV(mode,indirect,drawCount,stride,vertexBufferCount);
    }
void(__stdcall *real_glMultiDrawElementsIndirectBindlessNV)(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) = 0;
    void skibidigfx_glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)
    {
    
    real_glMultiDrawElementsIndirectBindlessNV(mode,type,indirect,drawCount,stride,vertexBufferCount);
    }
void(__stdcall *real_glMultiDrawArraysIndirectBindlessCountNV)(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) = 0;
    void skibidigfx_glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
    {
    
    real_glMultiDrawArraysIndirectBindlessCountNV(mode,indirect,drawCount,maxDrawCount,stride,vertexBufferCount);
    }
void(__stdcall *real_glMultiDrawElementsIndirectBindlessCountNV)(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) = 0;
    void skibidigfx_glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void* indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)
    {
    
    real_glMultiDrawElementsIndirectBindlessCountNV(mode,type,indirect,drawCount,maxDrawCount,stride,vertexBufferCount);
    }
GLuint64(__stdcall *real_glGetTextureHandleNV)(GLuint texture) = 0;
    GLuint64 skibidigfx_glGetTextureHandleNV(GLuint texture)
    {
    
    return real_glGetTextureHandleNV(texture);
    }
GLuint64(__stdcall *real_glGetTextureSamplerHandleNV)(GLuint texture, GLuint sampler) = 0;
    GLuint64 skibidigfx_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
    {
    
    return real_glGetTextureSamplerHandleNV(texture,sampler);
    }
void(__stdcall *real_glMakeTextureHandleResidentNV)(GLuint64 handle) = 0;
    void skibidigfx_glMakeTextureHandleResidentNV(GLuint64 handle)
    {
    
    real_glMakeTextureHandleResidentNV(handle);
    }
void(__stdcall *real_glMakeTextureHandleNonResidentNV)(GLuint64 handle) = 0;
    void skibidigfx_glMakeTextureHandleNonResidentNV(GLuint64 handle)
    {
    
    real_glMakeTextureHandleNonResidentNV(handle);
    }
GLuint64(__stdcall *real_glGetImageHandleNV)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) = 0;
    GLuint64 skibidigfx_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
    {
    
    return real_glGetImageHandleNV(texture,level,layered,layer,format);
    }
void(__stdcall *real_glMakeImageHandleResidentNV)(GLuint64 handle, GLenum access) = 0;
    void skibidigfx_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
    {
    
    real_glMakeImageHandleResidentNV(handle,access);
    }
void(__stdcall *real_glMakeImageHandleNonResidentNV)(GLuint64 handle) = 0;
    void skibidigfx_glMakeImageHandleNonResidentNV(GLuint64 handle)
    {
    
    real_glMakeImageHandleNonResidentNV(handle);
    }
void(__stdcall *real_glUniformHandleui64NV)(GLint location, GLuint64 value) = 0;
    void skibidigfx_glUniformHandleui64NV(GLint location, GLuint64 value)
    {
    
    real_glUniformHandleui64NV(location,value);
    }
void(__stdcall *real_glUniformHandleui64vNV)(GLint location, GLsizei count, const GLuint64* value) = 0;
    void skibidigfx_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64* value)
    {
    
    real_glUniformHandleui64vNV(location,count,value);
    }
void(__stdcall *real_glProgramUniformHandleui64NV)(GLuint program, GLint location, GLuint64 value) = 0;
    void skibidigfx_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
    {
    
    real_glProgramUniformHandleui64NV(program,location,value);
    }
void(__stdcall *real_glProgramUniformHandleui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64* values) = 0;
    void skibidigfx_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64* values)
    {
    
    real_glProgramUniformHandleui64vNV(program,location,count,values);
    }
GLboolean(__stdcall *real_glIsTextureHandleResidentNV)(GLuint64 handle) = 0;
    GLboolean skibidigfx_glIsTextureHandleResidentNV(GLuint64 handle)
    {
    
    return real_glIsTextureHandleResidentNV(handle);
    }
GLboolean(__stdcall *real_glIsImageHandleResidentNV)(GLuint64 handle) = 0;
    GLboolean skibidigfx_glIsImageHandleResidentNV(GLuint64 handle)
    {
    
    return real_glIsImageHandleResidentNV(handle);
    }
void(__stdcall *real_glBlendParameteriNV)(GLenum pname, GLint value) = 0;
    void skibidigfx_glBlendParameteriNV(GLenum pname, GLint value)
    {
    
    real_glBlendParameteriNV(pname,value);
    }
void(__stdcall *real_glBlendBarrierNV)() = 0;
    void skibidigfx_glBlendBarrierNV()
    {
    
    real_glBlendBarrierNV();
    }
void(__stdcall *real_glViewportPositionWScaleNV)(GLuint index, GLfloat xcoeff, GLfloat ycoeff) = 0;
    void skibidigfx_glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff)
    {
    
    real_glViewportPositionWScaleNV(index,xcoeff,ycoeff);
    }
void(__stdcall *real_glCreateStatesNV)(GLsizei n, GLuint* states) = 0;
    void skibidigfx_glCreateStatesNV(GLsizei n, GLuint* states)
    {
    
    real_glCreateStatesNV(n,states);
    }
void(__stdcall *real_glDeleteStatesNV)(GLsizei n, const GLuint* states) = 0;
    void skibidigfx_glDeleteStatesNV(GLsizei n, const GLuint* states)
    {
    
    real_glDeleteStatesNV(n,states);
    }
GLboolean(__stdcall *real_glIsStateNV)(GLuint state) = 0;
    GLboolean skibidigfx_glIsStateNV(GLuint state)
    {
    
    return real_glIsStateNV(state);
    }
void(__stdcall *real_glStateCaptureNV)(GLuint state, GLenum mode) = 0;
    void skibidigfx_glStateCaptureNV(GLuint state, GLenum mode)
    {
    
    real_glStateCaptureNV(state,mode);
    }
GLuint(__stdcall *real_glGetCommandHeaderNV)(GLenum tokenID, GLuint size) = 0;
    GLuint skibidigfx_glGetCommandHeaderNV(GLenum tokenID, GLuint size)
    {
    
    return real_glGetCommandHeaderNV(tokenID,size);
    }
GLushort(__stdcall *real_glGetStageIndexNV)(GLenum shadertype) = 0;
    GLushort skibidigfx_glGetStageIndexNV(GLenum shadertype)
    {
    
    return real_glGetStageIndexNV(shadertype);
    }
void(__stdcall *real_glDrawCommandsNV)(GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count) = 0;
    void skibidigfx_glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, GLuint count)
    {
    
    real_glDrawCommandsNV(primitiveMode,buffer,indirects,sizes,count);
    }
void(__stdcall *real_glDrawCommandsAddressNV)(GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count) = 0;
    void skibidigfx_glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64* indirects, const GLsizei* sizes, GLuint count)
    {
    
    real_glDrawCommandsAddressNV(primitiveMode,indirects,sizes,count);
    }
void(__stdcall *real_glDrawCommandsStatesNV)(GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count) = 0;
    void skibidigfx_glDrawCommandsStatesNV(GLuint buffer, const GLintptr* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
    {
    
    real_glDrawCommandsStatesNV(buffer,indirects,sizes,states,fbos,count);
    }
void(__stdcall *real_glDrawCommandsStatesAddressNV)(const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count) = 0;
    void skibidigfx_glDrawCommandsStatesAddressNV(const GLuint64* indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
    {
    
    real_glDrawCommandsStatesAddressNV(indirects,sizes,states,fbos,count);
    }
void(__stdcall *real_glCreateCommandListsNV)(GLsizei n, GLuint* lists) = 0;
    void skibidigfx_glCreateCommandListsNV(GLsizei n, GLuint* lists)
    {
    
    real_glCreateCommandListsNV(n,lists);
    }
void(__stdcall *real_glDeleteCommandListsNV)(GLsizei n, const GLuint* lists) = 0;
    void skibidigfx_glDeleteCommandListsNV(GLsizei n, const GLuint* lists)
    {
    
    real_glDeleteCommandListsNV(n,lists);
    }
GLboolean(__stdcall *real_glIsCommandListNV)(GLuint list) = 0;
    GLboolean skibidigfx_glIsCommandListNV(GLuint list)
    {
    
    return real_glIsCommandListNV(list);
    }
void(__stdcall *real_glListDrawCommandsStatesClientNV)(GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count) = 0;
    void skibidigfx_glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void** indirects, const GLsizei* sizes, const GLuint* states, const GLuint* fbos, GLuint count)
    {
    
    real_glListDrawCommandsStatesClientNV(list,segment,indirects,sizes,states,fbos,count);
    }
void(__stdcall *real_glCommandListSegmentsNV)(GLuint list, GLuint segments) = 0;
    void skibidigfx_glCommandListSegmentsNV(GLuint list, GLuint segments)
    {
    
    real_glCommandListSegmentsNV(list,segments);
    }
void(__stdcall *real_glCompileCommandListNV)(GLuint list) = 0;
    void skibidigfx_glCompileCommandListNV(GLuint list)
    {
    
    real_glCompileCommandListNV(list);
    }
void(__stdcall *real_glCallCommandListNV)(GLuint list) = 0;
    void skibidigfx_glCallCommandListNV(GLuint list)
    {
    
    real_glCallCommandListNV(list);
    }
void(__stdcall *real_glBeginConditionalRenderNV)(GLuint id, GLenum mode) = 0;
    void skibidigfx_glBeginConditionalRenderNV(GLuint id, GLenum mode)
    {
    
    real_glBeginConditionalRenderNV(id,mode);
    }
void(__stdcall *real_glEndConditionalRenderNV)() = 0;
    void skibidigfx_glEndConditionalRenderNV()
    {
    
    real_glEndConditionalRenderNV();
    }
void(__stdcall *real_glSubpixelPrecisionBiasNV)(GLuint xbits, GLuint ybits) = 0;
    void skibidigfx_glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits)
    {
    
    real_glSubpixelPrecisionBiasNV(xbits,ybits);
    }
void(__stdcall *real_glConservativeRasterParameterfNV)(GLenum pname, GLfloat value) = 0;
    void skibidigfx_glConservativeRasterParameterfNV(GLenum pname, GLfloat value)
    {
    
    real_glConservativeRasterParameterfNV(pname,value);
    }
void(__stdcall *real_glConservativeRasterParameteriNV)(GLenum pname, GLint param) = 0;
    void skibidigfx_glConservativeRasterParameteriNV(GLenum pname, GLint param)
    {
    
    real_glConservativeRasterParameteriNV(pname,param);
    }
void(__stdcall *real_glCopyImageSubDataNV)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) = 0;
    void skibidigfx_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
    {
    
    real_glCopyImageSubDataNV(srcName,srcTarget,srcLevel,srcX,srcY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,width,height,depth);
    }
void(__stdcall *real_glDepthRangedNV)(GLdouble zNear, GLdouble zFar) = 0;
    void skibidigfx_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
    {
    
    real_glDepthRangedNV(zNear,zFar);
    }
void(__stdcall *real_glClearDepthdNV)(GLdouble depth) = 0;
    void skibidigfx_glClearDepthdNV(GLdouble depth)
    {
    
    real_glClearDepthdNV(depth);
    }
void(__stdcall *real_glDepthBoundsdNV)(GLdouble zmin, GLdouble zmax) = 0;
    void skibidigfx_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
    {
    
    real_glDepthBoundsdNV(zmin,zmax);
    }
void(__stdcall *real_glDrawTextureNV)(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) = 0;
    void skibidigfx_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
    {
    
    real_glDrawTextureNV(texture,sampler,x0,y0,x1,y1,z,s0,t0,s1,t1);
    }
void(__stdcall *real_glDrawVkImageNV)(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) = 0;
    void skibidigfx_glDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
    {
    
    real_glDrawVkImageNV(vkImage,sampler,x0,y0,x1,y1,z,s0,t0,s1,t1);
    }
GLVULKANPROCNV(__stdcall *real_glGetVkProcAddrNV)(const GLchar* name) = 0;
    GLVULKANPROCNV skibidigfx_glGetVkProcAddrNV(const GLchar* name)
    {
    
    return real_glGetVkProcAddrNV(name);
    }
void(__stdcall *real_glWaitVkSemaphoreNV)(GLuint64 vkSemaphore) = 0;
    void skibidigfx_glWaitVkSemaphoreNV(GLuint64 vkSemaphore)
    {
    
    real_glWaitVkSemaphoreNV(vkSemaphore);
    }
void(__stdcall *real_glSignalVkSemaphoreNV)(GLuint64 vkSemaphore) = 0;
    void skibidigfx_glSignalVkSemaphoreNV(GLuint64 vkSemaphore)
    {
    
    real_glSignalVkSemaphoreNV(vkSemaphore);
    }
void(__stdcall *real_glSignalVkFenceNV)(GLuint64 vkFence) = 0;
    void skibidigfx_glSignalVkFenceNV(GLuint64 vkFence)
    {
    
    real_glSignalVkFenceNV(vkFence);
    }
void(__stdcall *real_glMapControlPointsNV)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points) = 0;
    void skibidigfx_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void* points)
    {
    
    real_glMapControlPointsNV(target,index,type,ustride,vstride,uorder,vorder,packed,points);
    }
void(__stdcall *real_glMapParameterivNV)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glMapParameterivNV(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glMapParameterivNV(target,pname,params);
    }
void(__stdcall *real_glMapParameterfvNV)(GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glMapParameterfvNV(target,pname,params);
    }
void(__stdcall *real_glGetMapControlPointsNV)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points) = 0;
    void skibidigfx_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void* points)
    {
    
    real_glGetMapControlPointsNV(target,index,type,ustride,vstride,packed,points);
    }
void(__stdcall *real_glGetMapParameterivNV)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMapParameterivNV(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetMapParameterivNV(target,pname,params);
    }
void(__stdcall *real_glGetMapParameterfvNV)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetMapParameterfvNV(target,pname,params);
    }
void(__stdcall *real_glGetMapAttribParameterivNV)(GLenum target, GLuint index, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint* params)
    {
    
    real_glGetMapAttribParameterivNV(target,index,pname,params);
    }
void(__stdcall *real_glGetMapAttribParameterfvNV)(GLenum target, GLuint index, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* params)
    {
    
    real_glGetMapAttribParameterfvNV(target,index,pname,params);
    }
void(__stdcall *real_glEvalMapsNV)(GLenum target, GLenum mode) = 0;
    void skibidigfx_glEvalMapsNV(GLenum target, GLenum mode)
    {
    
    real_glEvalMapsNV(target,mode);
    }
void(__stdcall *real_glGetMultisamplefvNV)(GLenum pname, GLuint index, GLfloat* val) = 0;
    void skibidigfx_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat* val)
    {
    
    real_glGetMultisamplefvNV(pname,index,val);
    }
void(__stdcall *real_glSampleMaskIndexedNV)(GLuint index, GLbitfield mask) = 0;
    void skibidigfx_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
    {
    
    real_glSampleMaskIndexedNV(index,mask);
    }
void(__stdcall *real_glTexRenderbufferNV)(GLenum target, GLuint renderbuffer) = 0;
    void skibidigfx_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
    {
    
    real_glTexRenderbufferNV(target,renderbuffer);
    }
void(__stdcall *real_glDeleteFencesNV)(GLsizei n, const GLuint* fences) = 0;
    void skibidigfx_glDeleteFencesNV(GLsizei n, const GLuint* fences)
    {
    
    real_glDeleteFencesNV(n,fences);
    }
void(__stdcall *real_glGenFencesNV)(GLsizei n, GLuint* fences) = 0;
    void skibidigfx_glGenFencesNV(GLsizei n, GLuint* fences)
    {
    
    real_glGenFencesNV(n,fences);
    }
GLboolean(__stdcall *real_glIsFenceNV)(GLuint fence) = 0;
    GLboolean skibidigfx_glIsFenceNV(GLuint fence)
    {
    
    return real_glIsFenceNV(fence);
    }
GLboolean(__stdcall *real_glTestFenceNV)(GLuint fence) = 0;
    GLboolean skibidigfx_glTestFenceNV(GLuint fence)
    {
    
    return real_glTestFenceNV(fence);
    }
void(__stdcall *real_glGetFenceivNV)(GLuint fence, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetFenceivNV(GLuint fence, GLenum pname, GLint* params)
    {
    
    real_glGetFenceivNV(fence,pname,params);
    }
void(__stdcall *real_glFinishFenceNV)(GLuint fence) = 0;
    void skibidigfx_glFinishFenceNV(GLuint fence)
    {
    
    real_glFinishFenceNV(fence);
    }
void(__stdcall *real_glSetFenceNV)(GLuint fence, GLenum condition) = 0;
    void skibidigfx_glSetFenceNV(GLuint fence, GLenum condition)
    {
    
    real_glSetFenceNV(fence,condition);
    }
void(__stdcall *real_glFragmentCoverageColorNV)(GLuint color) = 0;
    void skibidigfx_glFragmentCoverageColorNV(GLuint color)
    {
    
    real_glFragmentCoverageColorNV(color);
    }
void(__stdcall *real_glProgramNamedParameter4fNV)(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glProgramNamedParameter4fNV(id,len,name,x,y,z,w);
    }
void(__stdcall *real_glProgramNamedParameter4fvNV)(GLuint id, GLsizei len, const GLubyte* name, const GLfloat* v) = 0;
    void skibidigfx_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte* name, const GLfloat* v)
    {
    
    real_glProgramNamedParameter4fvNV(id,len,name,v);
    }
void(__stdcall *real_glProgramNamedParameter4dNV)(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glProgramNamedParameter4dNV(id,len,name,x,y,z,w);
    }
void(__stdcall *real_glProgramNamedParameter4dvNV)(GLuint id, GLsizei len, const GLubyte* name, const GLdouble* v) = 0;
    void skibidigfx_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte* name, const GLdouble* v)
    {
    
    real_glProgramNamedParameter4dvNV(id,len,name,v);
    }
void(__stdcall *real_glGetProgramNamedParameterfvNV)(GLuint id, GLsizei len, const GLubyte* name, GLfloat* params) = 0;
    void skibidigfx_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte* name, GLfloat* params)
    {
    
    real_glGetProgramNamedParameterfvNV(id,len,name,params);
    }
void(__stdcall *real_glGetProgramNamedParameterdvNV)(GLuint id, GLsizei len, const GLubyte* name, GLdouble* params) = 0;
    void skibidigfx_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte* name, GLdouble* params)
    {
    
    real_glGetProgramNamedParameterdvNV(id,len,name,params);
    }
void(__stdcall *real_glCoverageModulationTableNV)(GLsizei n, const GLfloat* v) = 0;
    void skibidigfx_glCoverageModulationTableNV(GLsizei n, const GLfloat* v)
    {
    
    real_glCoverageModulationTableNV(n,v);
    }
void(__stdcall *real_glGetCoverageModulationTableNV)(GLsizei bufsize, GLfloat* v) = 0;
    void skibidigfx_glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat* v)
    {
    
    real_glGetCoverageModulationTableNV(bufsize,v);
    }
void(__stdcall *real_glCoverageModulationNV)(GLenum components) = 0;
    void skibidigfx_glCoverageModulationNV(GLenum components)
    {
    
    real_glCoverageModulationNV(components);
    }
void(__stdcall *real_glRenderbufferStorageMultisampleCoverageNV)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
    {
    
    real_glRenderbufferStorageMultisampleCoverageNV(target,coverageSamples,colorSamples,internalformat,width,height);
    }
void(__stdcall *real_glProgramVertexLimitNV)(GLenum target, GLint limit) = 0;
    void skibidigfx_glProgramVertexLimitNV(GLenum target, GLint limit)
    {
    
    real_glProgramVertexLimitNV(target,limit);
    }
void(__stdcall *real_glFramebufferTextureEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level) = 0;
    void skibidigfx_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
    {
    
    real_glFramebufferTextureEXT(target,attachment,texture,level);
    }
void(__stdcall *real_glFramebufferTextureFaceEXT)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) = 0;
    void skibidigfx_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
    {
    
    real_glFramebufferTextureFaceEXT(target,attachment,texture,level,face);
    }
void(__stdcall *real_glRenderGpuMaskNV)(GLbitfield mask) = 0;
    void skibidigfx_glRenderGpuMaskNV(GLbitfield mask)
    {
    
    real_glRenderGpuMaskNV(mask);
    }
void(__stdcall *real_glMulticastBufferSubDataNV)(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data) = 0;
    void skibidigfx_glMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
    {
    
    real_glMulticastBufferSubDataNV(gpuMask,buffer,offset,size,data);
    }
void(__stdcall *real_glMulticastCopyBufferSubDataNV)(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) = 0;
    void skibidigfx_glMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
    {
    
    real_glMulticastCopyBufferSubDataNV(readGpu,writeGpuMask,readBuffer,writeBuffer,readOffset,writeOffset,size);
    }
void(__stdcall *real_glMulticastCopyImageSubDataNV)(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) = 0;
    void skibidigfx_glMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
    {
    
    real_glMulticastCopyImageSubDataNV(srcGpu,dstGpuMask,srcName,srcTarget,srcLevel,srcX,srcY,srcZ,dstName,dstTarget,dstLevel,dstX,dstY,dstZ,srcWidth,srcHeight,srcDepth);
    }
void(__stdcall *real_glMulticastBlitFramebufferNV)(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) = 0;
    void skibidigfx_glMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
    {
    
    real_glMulticastBlitFramebufferNV(srcGpu,dstGpu,srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
    }
void(__stdcall *real_glMulticastFramebufferSampleLocationsfvNV)(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    real_glMulticastFramebufferSampleLocationsfvNV(gpu,framebuffer,start,count,v);
    }
void(__stdcall *real_glMulticastBarrierNV)() = 0;
    void skibidigfx_glMulticastBarrierNV()
    {
    
    real_glMulticastBarrierNV();
    }
void(__stdcall *real_glMulticastWaitSyncNV)(GLuint signalGpu, GLbitfield waitGpuMask) = 0;
    void skibidigfx_glMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask)
    {
    
    real_glMulticastWaitSyncNV(signalGpu,waitGpuMask);
    }
void(__stdcall *real_glMulticastGetQueryObjectivNV)(GLuint gpu, GLuint id, GLenum pname, GLint* params) = 0;
    void skibidigfx_glMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint* params)
    {
    
    real_glMulticastGetQueryObjectivNV(gpu,id,pname,params);
    }
void(__stdcall *real_glMulticastGetQueryObjectuivNV)(GLuint gpu, GLuint id, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint* params)
    {
    
    real_glMulticastGetQueryObjectuivNV(gpu,id,pname,params);
    }
void(__stdcall *real_glMulticastGetQueryObjecti64vNV)(GLuint gpu, GLuint id, GLenum pname, GLint64* params) = 0;
    void skibidigfx_glMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64* params)
    {
    
    real_glMulticastGetQueryObjecti64vNV(gpu,id,pname,params);
    }
void(__stdcall *real_glMulticastGetQueryObjectui64vNV)(GLuint gpu, GLuint id, GLenum pname, GLuint64* params) = 0;
    void skibidigfx_glMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64* params)
    {
    
    real_glMulticastGetQueryObjectui64vNV(gpu,id,pname,params);
    }
void(__stdcall *real_glProgramLocalParameterI4iNV)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) = 0;
    void skibidigfx_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    real_glProgramLocalParameterI4iNV(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramLocalParameterI4ivNV)(GLenum target, GLuint index, const GLint* params) = 0;
    void skibidigfx_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint* params)
    {
    
    real_glProgramLocalParameterI4ivNV(target,index,params);
    }
void(__stdcall *real_glProgramLocalParametersI4ivNV)(GLenum target, GLuint index, GLsizei count, const GLint* params) = 0;
    void skibidigfx_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint* params)
    {
    
    real_glProgramLocalParametersI4ivNV(target,index,count,params);
    }
void(__stdcall *real_glProgramLocalParameterI4uiNV)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = 0;
    void skibidigfx_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    real_glProgramLocalParameterI4uiNV(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramLocalParameterI4uivNV)(GLenum target, GLuint index, const GLuint* params) = 0;
    void skibidigfx_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint* params)
    {
    
    real_glProgramLocalParameterI4uivNV(target,index,params);
    }
void(__stdcall *real_glProgramLocalParametersI4uivNV)(GLenum target, GLuint index, GLsizei count, const GLuint* params) = 0;
    void skibidigfx_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint* params)
    {
    
    real_glProgramLocalParametersI4uivNV(target,index,count,params);
    }
void(__stdcall *real_glProgramEnvParameterI4iNV)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) = 0;
    void skibidigfx_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    real_glProgramEnvParameterI4iNV(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramEnvParameterI4ivNV)(GLenum target, GLuint index, const GLint* params) = 0;
    void skibidigfx_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint* params)
    {
    
    real_glProgramEnvParameterI4ivNV(target,index,params);
    }
void(__stdcall *real_glProgramEnvParametersI4ivNV)(GLenum target, GLuint index, GLsizei count, const GLint* params) = 0;
    void skibidigfx_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint* params)
    {
    
    real_glProgramEnvParametersI4ivNV(target,index,count,params);
    }
void(__stdcall *real_glProgramEnvParameterI4uiNV)(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = 0;
    void skibidigfx_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    real_glProgramEnvParameterI4uiNV(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramEnvParameterI4uivNV)(GLenum target, GLuint index, const GLuint* params) = 0;
    void skibidigfx_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint* params)
    {
    
    real_glProgramEnvParameterI4uivNV(target,index,params);
    }
void(__stdcall *real_glProgramEnvParametersI4uivNV)(GLenum target, GLuint index, GLsizei count, const GLuint* params) = 0;
    void skibidigfx_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint* params)
    {
    
    real_glProgramEnvParametersI4uivNV(target,index,count,params);
    }
void(__stdcall *real_glGetProgramLocalParameterIivNV)(GLenum target, GLuint index, GLint* params) = 0;
    void skibidigfx_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint* params)
    {
    
    real_glGetProgramLocalParameterIivNV(target,index,params);
    }
void(__stdcall *real_glGetProgramLocalParameterIuivNV)(GLenum target, GLuint index, GLuint* params) = 0;
    void skibidigfx_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint* params)
    {
    
    real_glGetProgramLocalParameterIuivNV(target,index,params);
    }
void(__stdcall *real_glGetProgramEnvParameterIivNV)(GLenum target, GLuint index, GLint* params) = 0;
    void skibidigfx_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint* params)
    {
    
    real_glGetProgramEnvParameterIivNV(target,index,params);
    }
void(__stdcall *real_glGetProgramEnvParameterIuivNV)(GLenum target, GLuint index, GLuint* params) = 0;
    void skibidigfx_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint* params)
    {
    
    real_glGetProgramEnvParameterIuivNV(target,index,params);
    }
void(__stdcall *real_glProgramSubroutineParametersuivNV)(GLenum target, GLsizei count, const GLuint* params) = 0;
    void skibidigfx_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint* params)
    {
    
    real_glProgramSubroutineParametersuivNV(target,count,params);
    }
void(__stdcall *real_glGetProgramSubroutineParameteruivNV)(GLenum target, GLuint index, GLuint* param) = 0;
    void skibidigfx_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint* param)
    {
    
    real_glGetProgramSubroutineParameteruivNV(target,index,param);
    }
void(__stdcall *real_glVertex2hNV)(GLhalfNV x, GLhalfNV y) = 0;
    void skibidigfx_glVertex2hNV(GLhalfNV x, GLhalfNV y)
    {
    
    real_glVertex2hNV(x,y);
    }
void(__stdcall *real_glVertex2hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glVertex2hvNV(const GLhalfNV* v)
    {
    
    real_glVertex2hvNV(v);
    }
void(__stdcall *real_glVertex3hNV)(GLhalfNV x, GLhalfNV y, GLhalfNV z) = 0;
    void skibidigfx_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
    {
    
    real_glVertex3hNV(x,y,z);
    }
void(__stdcall *real_glVertex3hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glVertex3hvNV(const GLhalfNV* v)
    {
    
    real_glVertex3hvNV(v);
    }
void(__stdcall *real_glVertex4hNV)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) = 0;
    void skibidigfx_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
    {
    
    real_glVertex4hNV(x,y,z,w);
    }
void(__stdcall *real_glVertex4hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glVertex4hvNV(const GLhalfNV* v)
    {
    
    real_glVertex4hvNV(v);
    }
void(__stdcall *real_glNormal3hNV)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) = 0;
    void skibidigfx_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
    {
    
    real_glNormal3hNV(nx,ny,nz);
    }
void(__stdcall *real_glNormal3hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glNormal3hvNV(const GLhalfNV* v)
    {
    
    real_glNormal3hvNV(v);
    }
void(__stdcall *real_glColor3hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue) = 0;
    void skibidigfx_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
    {
    
    real_glColor3hNV(red,green,blue);
    }
void(__stdcall *real_glColor3hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glColor3hvNV(const GLhalfNV* v)
    {
    
    real_glColor3hvNV(v);
    }
void(__stdcall *real_glColor4hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) = 0;
    void skibidigfx_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
    {
    
    real_glColor4hNV(red,green,blue,alpha);
    }
void(__stdcall *real_glColor4hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glColor4hvNV(const GLhalfNV* v)
    {
    
    real_glColor4hvNV(v);
    }
void(__stdcall *real_glTexCoord1hNV)(GLhalfNV s) = 0;
    void skibidigfx_glTexCoord1hNV(GLhalfNV s)
    {
    
    real_glTexCoord1hNV(s);
    }
void(__stdcall *real_glTexCoord1hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glTexCoord1hvNV(const GLhalfNV* v)
    {
    
    real_glTexCoord1hvNV(v);
    }
void(__stdcall *real_glTexCoord2hNV)(GLhalfNV s, GLhalfNV t) = 0;
    void skibidigfx_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
    {
    
    real_glTexCoord2hNV(s,t);
    }
void(__stdcall *real_glTexCoord2hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glTexCoord2hvNV(const GLhalfNV* v)
    {
    
    real_glTexCoord2hvNV(v);
    }
void(__stdcall *real_glTexCoord3hNV)(GLhalfNV s, GLhalfNV t, GLhalfNV r) = 0;
    void skibidigfx_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
    {
    
    real_glTexCoord3hNV(s,t,r);
    }
void(__stdcall *real_glTexCoord3hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glTexCoord3hvNV(const GLhalfNV* v)
    {
    
    real_glTexCoord3hvNV(v);
    }
void(__stdcall *real_glTexCoord4hNV)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) = 0;
    void skibidigfx_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
    {
    
    real_glTexCoord4hNV(s,t,r,q);
    }
void(__stdcall *real_glTexCoord4hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glTexCoord4hvNV(const GLhalfNV* v)
    {
    
    real_glTexCoord4hvNV(v);
    }
void(__stdcall *real_glMultiTexCoord1hNV)(GLenum target, GLhalfNV s) = 0;
    void skibidigfx_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
    {
    
    real_glMultiTexCoord1hNV(target,s);
    }
void(__stdcall *real_glMultiTexCoord1hvNV)(GLenum target, const GLhalfNV* v) = 0;
    void skibidigfx_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV* v)
    {
    
    real_glMultiTexCoord1hvNV(target,v);
    }
void(__stdcall *real_glMultiTexCoord2hNV)(GLenum target, GLhalfNV s, GLhalfNV t) = 0;
    void skibidigfx_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
    {
    
    real_glMultiTexCoord2hNV(target,s,t);
    }
void(__stdcall *real_glMultiTexCoord2hvNV)(GLenum target, const GLhalfNV* v) = 0;
    void skibidigfx_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV* v)
    {
    
    real_glMultiTexCoord2hvNV(target,v);
    }
void(__stdcall *real_glMultiTexCoord3hNV)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) = 0;
    void skibidigfx_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
    {
    
    real_glMultiTexCoord3hNV(target,s,t,r);
    }
void(__stdcall *real_glMultiTexCoord3hvNV)(GLenum target, const GLhalfNV* v) = 0;
    void skibidigfx_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV* v)
    {
    
    real_glMultiTexCoord3hvNV(target,v);
    }
void(__stdcall *real_glMultiTexCoord4hNV)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) = 0;
    void skibidigfx_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
    {
    
    real_glMultiTexCoord4hNV(target,s,t,r,q);
    }
void(__stdcall *real_glMultiTexCoord4hvNV)(GLenum target, const GLhalfNV* v) = 0;
    void skibidigfx_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV* v)
    {
    
    real_glMultiTexCoord4hvNV(target,v);
    }
void(__stdcall *real_glFogCoordhNV)(GLhalfNV fog) = 0;
    void skibidigfx_glFogCoordhNV(GLhalfNV fog)
    {
    
    real_glFogCoordhNV(fog);
    }
void(__stdcall *real_glFogCoordhvNV)(const GLhalfNV* fog) = 0;
    void skibidigfx_glFogCoordhvNV(const GLhalfNV* fog)
    {
    
    real_glFogCoordhvNV(fog);
    }
void(__stdcall *real_glSecondaryColor3hNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue) = 0;
    void skibidigfx_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
    {
    
    real_glSecondaryColor3hNV(red,green,blue);
    }
void(__stdcall *real_glSecondaryColor3hvNV)(const GLhalfNV* v) = 0;
    void skibidigfx_glSecondaryColor3hvNV(const GLhalfNV* v)
    {
    
    real_glSecondaryColor3hvNV(v);
    }
void(__stdcall *real_glVertexWeighthNV)(GLhalfNV weight) = 0;
    void skibidigfx_glVertexWeighthNV(GLhalfNV weight)
    {
    
    real_glVertexWeighthNV(weight);
    }
void(__stdcall *real_glVertexWeighthvNV)(const GLhalfNV* weight) = 0;
    void skibidigfx_glVertexWeighthvNV(const GLhalfNV* weight)
    {
    
    real_glVertexWeighthvNV(weight);
    }
void(__stdcall *real_glVertexAttrib1hNV)(GLuint index, GLhalfNV x) = 0;
    void skibidigfx_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
    {
    
    real_glVertexAttrib1hNV(index,x);
    }
void(__stdcall *real_glVertexAttrib1hvNV)(GLuint index, const GLhalfNV* v) = 0;
    void skibidigfx_glVertexAttrib1hvNV(GLuint index, const GLhalfNV* v)
    {
    
    real_glVertexAttrib1hvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib2hNV)(GLuint index, GLhalfNV x, GLhalfNV y) = 0;
    void skibidigfx_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
    {
    
    real_glVertexAttrib2hNV(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2hvNV)(GLuint index, const GLhalfNV* v) = 0;
    void skibidigfx_glVertexAttrib2hvNV(GLuint index, const GLhalfNV* v)
    {
    
    real_glVertexAttrib2hvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib3hNV)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) = 0;
    void skibidigfx_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
    {
    
    real_glVertexAttrib3hNV(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3hvNV)(GLuint index, const GLhalfNV* v) = 0;
    void skibidigfx_glVertexAttrib3hvNV(GLuint index, const GLhalfNV* v)
    {
    
    real_glVertexAttrib3hvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib4hNV)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) = 0;
    void skibidigfx_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
    {
    
    real_glVertexAttrib4hNV(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4hvNV)(GLuint index, const GLhalfNV* v) = 0;
    void skibidigfx_glVertexAttrib4hvNV(GLuint index, const GLhalfNV* v)
    {
    
    real_glVertexAttrib4hvNV(index,v);
    }
void(__stdcall *real_glVertexAttribs1hvNV)(GLuint index, GLsizei n, const GLhalfNV* v) = 0;
    void skibidigfx_glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV* v)
    {
    
    real_glVertexAttribs1hvNV(index,n,v);
    }
void(__stdcall *real_glVertexAttribs2hvNV)(GLuint index, GLsizei n, const GLhalfNV* v) = 0;
    void skibidigfx_glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV* v)
    {
    
    real_glVertexAttribs2hvNV(index,n,v);
    }
void(__stdcall *real_glVertexAttribs3hvNV)(GLuint index, GLsizei n, const GLhalfNV* v) = 0;
    void skibidigfx_glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV* v)
    {
    
    real_glVertexAttribs3hvNV(index,n,v);
    }
void(__stdcall *real_glVertexAttribs4hvNV)(GLuint index, GLsizei n, const GLhalfNV* v) = 0;
    void skibidigfx_glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV* v)
    {
    
    real_glVertexAttribs4hvNV(index,n,v);
    }
void(__stdcall *real_glGetInternalformatSampleivNV)(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params) = 0;
    void skibidigfx_glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint* params)
    {
    
    real_glGetInternalformatSampleivNV(target,internalformat,samples,pname,bufSize,params);
    }
void(__stdcall *real_glGetMemoryObjectDetachedResourcesuivNV)(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint* params) = 0;
    void skibidigfx_glGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint* params)
    {
    
    real_glGetMemoryObjectDetachedResourcesuivNV(memory,pname,first,count,params);
    }
void(__stdcall *real_glResetMemoryObjectParameterNV)(GLuint memory, GLenum pname) = 0;
    void skibidigfx_glResetMemoryObjectParameterNV(GLuint memory, GLenum pname)
    {
    
    real_glResetMemoryObjectParameterNV(memory,pname);
    }
void(__stdcall *real_glTexAttachMemoryNV)(GLenum target, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset)
    {
    
    real_glTexAttachMemoryNV(target,memory,offset);
    }
void(__stdcall *real_glBufferAttachMemoryNV)(GLenum target, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset)
    {
    
    real_glBufferAttachMemoryNV(target,memory,offset);
    }
void(__stdcall *real_glTextureAttachMemoryNV)(GLuint texture, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset)
    {
    
    real_glTextureAttachMemoryNV(texture,memory,offset);
    }
void(__stdcall *real_glNamedBufferAttachMemoryNV)(GLuint buffer, GLuint memory, GLuint64 offset) = 0;
    void skibidigfx_glNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset)
    {
    
    real_glNamedBufferAttachMemoryNV(buffer,memory,offset);
    }
void(__stdcall *real_glDrawMeshTasksNV)(GLuint first, GLuint count) = 0;
    void skibidigfx_glDrawMeshTasksNV(GLuint first, GLuint count)
    {
    
    real_glDrawMeshTasksNV(first,count);
    }
void(__stdcall *real_glDrawMeshTasksIndirectNV)(GLintptr indirect) = 0;
    void skibidigfx_glDrawMeshTasksIndirectNV(GLintptr indirect)
    {
    
    real_glDrawMeshTasksIndirectNV(indirect);
    }
void(__stdcall *real_glMultiDrawMeshTasksIndirectNV)(GLintptr indirect, GLsizei drawcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride)
    {
    
    real_glMultiDrawMeshTasksIndirectNV(indirect,drawcount,stride);
    }
void(__stdcall *real_glMultiDrawMeshTasksIndirectCountNV)(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) = 0;
    void skibidigfx_glMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
    {
    
    real_glMultiDrawMeshTasksIndirectCountNV(indirect,drawcount,maxdrawcount,stride);
    }
void(__stdcall *real_glGenOcclusionQueriesNV)(GLsizei n, GLuint* ids) = 0;
    void skibidigfx_glGenOcclusionQueriesNV(GLsizei n, GLuint* ids)
    {
    
    real_glGenOcclusionQueriesNV(n,ids);
    }
void(__stdcall *real_glDeleteOcclusionQueriesNV)(GLsizei n, const GLuint* ids) = 0;
    void skibidigfx_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint* ids)
    {
    
    real_glDeleteOcclusionQueriesNV(n,ids);
    }
GLboolean(__stdcall *real_glIsOcclusionQueryNV)(GLuint id) = 0;
    GLboolean skibidigfx_glIsOcclusionQueryNV(GLuint id)
    {
    
    return real_glIsOcclusionQueryNV(id);
    }
void(__stdcall *real_glBeginOcclusionQueryNV)(GLuint id) = 0;
    void skibidigfx_glBeginOcclusionQueryNV(GLuint id)
    {
    
    real_glBeginOcclusionQueryNV(id);
    }
void(__stdcall *real_glEndOcclusionQueryNV)() = 0;
    void skibidigfx_glEndOcclusionQueryNV()
    {
    
    real_glEndOcclusionQueryNV();
    }
void(__stdcall *real_glGetOcclusionQueryivNV)(GLuint id, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint* params)
    {
    
    real_glGetOcclusionQueryivNV(id,pname,params);
    }
void(__stdcall *real_glGetOcclusionQueryuivNV)(GLuint id, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint* params)
    {
    
    real_glGetOcclusionQueryuivNV(id,pname,params);
    }
void(__stdcall *real_glProgramBufferParametersfvNV)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat* params) = 0;
    void skibidigfx_glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat* params)
    {
    
    real_glProgramBufferParametersfvNV(target,bindingIndex,wordIndex,count,params);
    }
void(__stdcall *real_glProgramBufferParametersIivNV)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint* params) = 0;
    void skibidigfx_glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint* params)
    {
    
    real_glProgramBufferParametersIivNV(target,bindingIndex,wordIndex,count,params);
    }
void(__stdcall *real_glProgramBufferParametersIuivNV)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint* params) = 0;
    void skibidigfx_glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint* params)
    {
    
    real_glProgramBufferParametersIuivNV(target,bindingIndex,wordIndex,count,params);
    }
GLuint(__stdcall *real_glGenPathsNV)(GLsizei range) = 0;
    GLuint skibidigfx_glGenPathsNV(GLsizei range)
    {
    
    return real_glGenPathsNV(range);
    }
void(__stdcall *real_glDeletePathsNV)(GLuint path, GLsizei range) = 0;
    void skibidigfx_glDeletePathsNV(GLuint path, GLsizei range)
    {
    
    real_glDeletePathsNV(path,range);
    }
GLboolean(__stdcall *real_glIsPathNV)(GLuint path) = 0;
    GLboolean skibidigfx_glIsPathNV(GLuint path)
    {
    
    return real_glIsPathNV(path);
    }
void(__stdcall *real_glPathCommandsNV)(GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords) = 0;
    void skibidigfx_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords)
    {
    
    real_glPathCommandsNV(path,numCommands,commands,numCoords,coordType,coords);
    }
void(__stdcall *real_glPathCoordsNV)(GLuint path, GLsizei numCoords, GLenum coordType, const void* coords) = 0;
    void skibidigfx_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void* coords)
    {
    
    real_glPathCoordsNV(path,numCoords,coordType,coords);
    }
void(__stdcall *real_glPathSubCommandsNV)(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords) = 0;
    void skibidigfx_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte* commands, GLsizei numCoords, GLenum coordType, const void* coords)
    {
    
    real_glPathSubCommandsNV(path,commandStart,commandsToDelete,numCommands,commands,numCoords,coordType,coords);
    }
void(__stdcall *real_glPathSubCoordsNV)(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void* coords) = 0;
    void skibidigfx_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void* coords)
    {
    
    real_glPathSubCoordsNV(path,coordStart,numCoords,coordType,coords);
    }
void(__stdcall *real_glPathStringNV)(GLuint path, GLenum format, GLsizei length, const void* pathString) = 0;
    void skibidigfx_glPathStringNV(GLuint path, GLenum format, GLsizei length, const void* pathString)
    {
    
    real_glPathStringNV(path,format,length,pathString);
    }
void(__stdcall *real_glPathGlyphsNV)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = 0;
    void skibidigfx_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void* charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
    {
    
    real_glPathGlyphsNV(firstPathName,fontTarget,fontName,fontStyle,numGlyphs,type,charcodes,handleMissingGlyphs,pathParameterTemplate,emScale);
    }
void(__stdcall *real_glPathGlyphRangeNV)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = 0;
    void skibidigfx_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
    {
    
    real_glPathGlyphRangeNV(firstPathName,fontTarget,fontName,fontStyle,firstGlyph,numGlyphs,handleMissingGlyphs,pathParameterTemplate,emScale);
    }
void(__stdcall *real_glWeightPathsNV)(GLuint resultPath, GLsizei numPaths, const GLuint* paths, const GLfloat* weights) = 0;
    void skibidigfx_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint* paths, const GLfloat* weights)
    {
    
    real_glWeightPathsNV(resultPath,numPaths,paths,weights);
    }
void(__stdcall *real_glCopyPathNV)(GLuint resultPath, GLuint srcPath) = 0;
    void skibidigfx_glCopyPathNV(GLuint resultPath, GLuint srcPath)
    {
    
    real_glCopyPathNV(resultPath,srcPath);
    }
void(__stdcall *real_glInterpolatePathsNV)(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) = 0;
    void skibidigfx_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
    {
    
    real_glInterpolatePathsNV(resultPath,pathA,pathB,weight);
    }
void(__stdcall *real_glTransformPathNV)(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues) = 0;
    void skibidigfx_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat* transformValues)
    {
    
    real_glTransformPathNV(resultPath,srcPath,transformType,transformValues);
    }
void(__stdcall *real_glPathParameterivNV)(GLuint path, GLenum pname, const GLint* value) = 0;
    void skibidigfx_glPathParameterivNV(GLuint path, GLenum pname, const GLint* value)
    {
    
    real_glPathParameterivNV(path,pname,value);
    }
void(__stdcall *real_glPathParameteriNV)(GLuint path, GLenum pname, GLint value) = 0;
    void skibidigfx_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
    {
    
    real_glPathParameteriNV(path,pname,value);
    }
void(__stdcall *real_glPathParameterfvNV)(GLuint path, GLenum pname, const GLfloat* value) = 0;
    void skibidigfx_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat* value)
    {
    
    real_glPathParameterfvNV(path,pname,value);
    }
void(__stdcall *real_glPathParameterfNV)(GLuint path, GLenum pname, GLfloat value) = 0;
    void skibidigfx_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
    {
    
    real_glPathParameterfNV(path,pname,value);
    }
void(__stdcall *real_glPathDashArrayNV)(GLuint path, GLsizei dashCount, const GLfloat* dashArray) = 0;
    void skibidigfx_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat* dashArray)
    {
    
    real_glPathDashArrayNV(path,dashCount,dashArray);
    }
void(__stdcall *real_glPathStencilFuncNV)(GLenum func, GLint ref, GLuint mask) = 0;
    void skibidigfx_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
    {
    
    real_glPathStencilFuncNV(func,ref,mask);
    }
void(__stdcall *real_glPathStencilDepthOffsetNV)(GLfloat factor, GLfloat units) = 0;
    void skibidigfx_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
    {
    
    real_glPathStencilDepthOffsetNV(factor,units);
    }
void(__stdcall *real_glStencilFillPathNV)(GLuint path, GLenum fillMode, GLuint mask) = 0;
    void skibidigfx_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
    {
    
    real_glStencilFillPathNV(path,fillMode,mask);
    }
void(__stdcall *real_glStencilStrokePathNV)(GLuint path, GLint reference, GLuint mask) = 0;
    void skibidigfx_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
    {
    
    real_glStencilStrokePathNV(path,reference,mask);
    }
void(__stdcall *real_glStencilFillPathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat* transformValues) = 0;
    void skibidigfx_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat* transformValues)
    {
    
    real_glStencilFillPathInstancedNV(numPaths,pathNameType,paths,pathBase,fillMode,mask,transformType,transformValues);
    }
void(__stdcall *real_glStencilStrokePathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat* transformValues) = 0;
    void skibidigfx_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat* transformValues)
    {
    
    real_glStencilStrokePathInstancedNV(numPaths,pathNameType,paths,pathBase,reference,mask,transformType,transformValues);
    }
void(__stdcall *real_glPathCoverDepthFuncNV)(GLenum func) = 0;
    void skibidigfx_glPathCoverDepthFuncNV(GLenum func)
    {
    
    real_glPathCoverDepthFuncNV(func);
    }
void(__stdcall *real_glCoverFillPathNV)(GLuint path, GLenum coverMode) = 0;
    void skibidigfx_glCoverFillPathNV(GLuint path, GLenum coverMode)
    {
    
    real_glCoverFillPathNV(path,coverMode);
    }
void(__stdcall *real_glCoverStrokePathNV)(GLuint path, GLenum coverMode) = 0;
    void skibidigfx_glCoverStrokePathNV(GLuint path, GLenum coverMode)
    {
    
    real_glCoverStrokePathNV(path,coverMode);
    }
void(__stdcall *real_glCoverFillPathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues) = 0;
    void skibidigfx_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues)
    {
    
    real_glCoverFillPathInstancedNV(numPaths,pathNameType,paths,pathBase,coverMode,transformType,transformValues);
    }
void(__stdcall *real_glCoverStrokePathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues) = 0;
    void skibidigfx_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat* transformValues)
    {
    
    real_glCoverStrokePathInstancedNV(numPaths,pathNameType,paths,pathBase,coverMode,transformType,transformValues);
    }
void(__stdcall *real_glGetPathParameterivNV)(GLuint path, GLenum pname, GLint* value) = 0;
    void skibidigfx_glGetPathParameterivNV(GLuint path, GLenum pname, GLint* value)
    {
    
    real_glGetPathParameterivNV(path,pname,value);
    }
void(__stdcall *real_glGetPathParameterfvNV)(GLuint path, GLenum pname, GLfloat* value) = 0;
    void skibidigfx_glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat* value)
    {
    
    real_glGetPathParameterfvNV(path,pname,value);
    }
void(__stdcall *real_glGetPathCommandsNV)(GLuint path, GLubyte* commands) = 0;
    void skibidigfx_glGetPathCommandsNV(GLuint path, GLubyte* commands)
    {
    
    real_glGetPathCommandsNV(path,commands);
    }
void(__stdcall *real_glGetPathCoordsNV)(GLuint path, GLfloat* coords) = 0;
    void skibidigfx_glGetPathCoordsNV(GLuint path, GLfloat* coords)
    {
    
    real_glGetPathCoordsNV(path,coords);
    }
void(__stdcall *real_glGetPathDashArrayNV)(GLuint path, GLfloat* dashArray) = 0;
    void skibidigfx_glGetPathDashArrayNV(GLuint path, GLfloat* dashArray)
    {
    
    real_glGetPathDashArrayNV(path,dashArray);
    }
void(__stdcall *real_glGetPathMetricsNV)(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLsizei stride, GLfloat* metrics) = 0;
    void skibidigfx_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLsizei stride, GLfloat* metrics)
    {
    
    real_glGetPathMetricsNV(metricQueryMask,numPaths,pathNameType,paths,pathBase,stride,metrics);
    }
void(__stdcall *real_glGetPathMetricRangeNV)(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics) = 0;
    void skibidigfx_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat* metrics)
    {
    
    real_glGetPathMetricRangeNV(metricQueryMask,firstPathName,numPaths,stride,metrics);
    }
void(__stdcall *real_glGetPathSpacingNV)(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat* returnedSpacing) = 0;
    void skibidigfx_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat* returnedSpacing)
    {
    
    real_glGetPathSpacingNV(pathListMode,numPaths,pathNameType,paths,pathBase,advanceScale,kerningScale,transformType,returnedSpacing);
    }
GLboolean(__stdcall *real_glIsPointInFillPathNV)(GLuint path, GLuint mask, GLfloat x, GLfloat y) = 0;
    GLboolean skibidigfx_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
    {
    
    return real_glIsPointInFillPathNV(path,mask,x,y);
    }
GLboolean(__stdcall *real_glIsPointInStrokePathNV)(GLuint path, GLfloat x, GLfloat y) = 0;
    GLboolean skibidigfx_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
    {
    
    return real_glIsPointInStrokePathNV(path,x,y);
    }
GLfloat(__stdcall *real_glGetPathLengthNV)(GLuint path, GLsizei startSegment, GLsizei numSegments) = 0;
    GLfloat skibidigfx_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
    {
    
    return real_glGetPathLengthNV(path,startSegment,numSegments);
    }
GLboolean(__stdcall *real_glPointAlongPathNV)(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat* y, GLfloat* tangentX, GLfloat* tangentY) = 0;
    GLboolean skibidigfx_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat* x, GLfloat* y, GLfloat* tangentX, GLfloat* tangentY)
    {
    
    return real_glPointAlongPathNV(path,startSegment,numSegments,distance,x,y,tangentX,tangentY);
    }
void(__stdcall *real_glMatrixLoad3x2fNV)(GLenum matrixMode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    real_glMatrixLoad3x2fNV(matrixMode,m);
    }
void(__stdcall *real_glMatrixLoad3x3fNV)(GLenum matrixMode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    real_glMatrixLoad3x3fNV(matrixMode,m);
    }
void(__stdcall *real_glMatrixLoadTranspose3x3fNV)(GLenum matrixMode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    real_glMatrixLoadTranspose3x3fNV(matrixMode,m);
    }
void(__stdcall *real_glMatrixMult3x2fNV)(GLenum matrixMode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    real_glMatrixMult3x2fNV(matrixMode,m);
    }
void(__stdcall *real_glMatrixMult3x3fNV)(GLenum matrixMode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    real_glMatrixMult3x3fNV(matrixMode,m);
    }
void(__stdcall *real_glMatrixMultTranspose3x3fNV)(GLenum matrixMode, const GLfloat* m) = 0;
    void skibidigfx_glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat* m)
    {
    
    real_glMatrixMultTranspose3x3fNV(matrixMode,m);
    }
void(__stdcall *real_glStencilThenCoverFillPathNV)(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) = 0;
    void skibidigfx_glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)
    {
    
    real_glStencilThenCoverFillPathNV(path,fillMode,mask,coverMode);
    }
void(__stdcall *real_glStencilThenCoverStrokePathNV)(GLuint path, GLint reference, GLuint mask, GLenum coverMode) = 0;
    void skibidigfx_glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode)
    {
    
    real_glStencilThenCoverStrokePathNV(path,reference,mask,coverMode);
    }
void(__stdcall *real_glStencilThenCoverFillPathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues) = 0;
    void skibidigfx_glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues)
    {
    
    real_glStencilThenCoverFillPathInstancedNV(numPaths,pathNameType,paths,pathBase,fillMode,mask,coverMode,transformType,transformValues);
    }
void(__stdcall *real_glStencilThenCoverStrokePathInstancedNV)(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues) = 0;
    void skibidigfx_glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void* paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat* transformValues)
    {
    
    real_glStencilThenCoverStrokePathInstancedNV(numPaths,pathNameType,paths,pathBase,reference,mask,coverMode,transformType,transformValues);
    }
GLenum(__stdcall *real_glPathGlyphIndexRangeNV)(GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) = 0;
    GLenum skibidigfx_glPathGlyphIndexRangeNV(GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])
    {
    
    return real_glPathGlyphIndexRangeNV(fontTarget,fontName,fontStyle,pathParameterTemplate,emScale,baseAndCount);
    }
GLenum(__stdcall *real_glPathGlyphIndexArrayNV)(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = 0;
    GLenum skibidigfx_glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void* fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
    {
    
    return real_glPathGlyphIndexArrayNV(firstPathName,fontTarget,fontName,fontStyle,firstGlyphIndex,numGlyphs,pathParameterTemplate,emScale);
    }
GLenum(__stdcall *real_glPathMemoryGlyphIndexArrayNV)(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) = 0;
    GLenum skibidigfx_glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void* fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
    {
    
    return real_glPathMemoryGlyphIndexArrayNV(firstPathName,fontTarget,fontSize,fontData,faceIndex,firstGlyphIndex,numGlyphs,pathParameterTemplate,emScale);
    }
void(__stdcall *real_glProgramPathFragmentInputGenNV)(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs) = 0;
    void skibidigfx_glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat* coeffs)
    {
    
    real_glProgramPathFragmentInputGenNV(program,location,genMode,components,coeffs);
    }
void(__stdcall *real_glGetProgramResourcefvNV)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLfloat* params) = 0;
    void skibidigfx_glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLfloat* params)
    {
    
    real_glGetProgramResourcefvNV(program,programInterface,index,propCount,props,bufSize,length,params);
    }
void(__stdcall *real_glPathColorGenNV)(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs) = 0;
    void skibidigfx_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat* coeffs)
    {
    
    real_glPathColorGenNV(color,genMode,colorFormat,coeffs);
    }
void(__stdcall *real_glPathTexGenNV)(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs) = 0;
    void skibidigfx_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat* coeffs)
    {
    
    real_glPathTexGenNV(texCoordSet,genMode,components,coeffs);
    }
void(__stdcall *real_glPathFogGenNV)(GLenum genMode) = 0;
    void skibidigfx_glPathFogGenNV(GLenum genMode)
    {
    
    real_glPathFogGenNV(genMode);
    }
void(__stdcall *real_glGetPathColorGenivNV)(GLenum color, GLenum pname, GLint* value) = 0;
    void skibidigfx_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint* value)
    {
    
    real_glGetPathColorGenivNV(color,pname,value);
    }
void(__stdcall *real_glGetPathColorGenfvNV)(GLenum color, GLenum pname, GLfloat* value) = 0;
    void skibidigfx_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat* value)
    {
    
    real_glGetPathColorGenfvNV(color,pname,value);
    }
void(__stdcall *real_glGetPathTexGenivNV)(GLenum texCoordSet, GLenum pname, GLint* value) = 0;
    void skibidigfx_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint* value)
    {
    
    real_glGetPathTexGenivNV(texCoordSet,pname,value);
    }
void(__stdcall *real_glGetPathTexGenfvNV)(GLenum texCoordSet, GLenum pname, GLfloat* value) = 0;
    void skibidigfx_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat* value)
    {
    
    real_glGetPathTexGenfvNV(texCoordSet,pname,value);
    }
void(__stdcall *real_glPixelDataRangeNV)(GLenum target, GLsizei length, const void* pointer) = 0;
    void skibidigfx_glPixelDataRangeNV(GLenum target, GLsizei length, const void* pointer)
    {
    
    real_glPixelDataRangeNV(target,length,pointer);
    }
void(__stdcall *real_glFlushPixelDataRangeNV)(GLenum target) = 0;
    void skibidigfx_glFlushPixelDataRangeNV(GLenum target)
    {
    
    real_glFlushPixelDataRangeNV(target);
    }
void(__stdcall *real_glPointParameteriNV)(GLenum pname, GLint param) = 0;
    void skibidigfx_glPointParameteriNV(GLenum pname, GLint param)
    {
    
    real_glPointParameteriNV(pname,param);
    }
void(__stdcall *real_glPointParameterivNV)(GLenum pname, const GLint* params) = 0;
    void skibidigfx_glPointParameterivNV(GLenum pname, const GLint* params)
    {
    
    real_glPointParameterivNV(pname,params);
    }
void(__stdcall *real_glPresentFrameKeyedNV)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) = 0;
    void skibidigfx_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
    {
    
    real_glPresentFrameKeyedNV(video_slot,minPresentTime,beginPresentTimeId,presentDurationId,type,target0,fill0,key0,target1,fill1,key1);
    }
void(__stdcall *real_glPresentFrameDualFillNV)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) = 0;
    void skibidigfx_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
    {
    
    real_glPresentFrameDualFillNV(video_slot,minPresentTime,beginPresentTimeId,presentDurationId,type,target0,fill0,target1,fill1,target2,fill2,target3,fill3);
    }
void(__stdcall *real_glGetVideoivNV)(GLuint video_slot, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint* params)
    {
    
    real_glGetVideoivNV(video_slot,pname,params);
    }
void(__stdcall *real_glGetVideouivNV)(GLuint video_slot, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint* params)
    {
    
    real_glGetVideouivNV(video_slot,pname,params);
    }
void(__stdcall *real_glGetVideoi64vNV)(GLuint video_slot, GLenum pname, GLint64EXT* params) = 0;
    void skibidigfx_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT* params)
    {
    
    real_glGetVideoi64vNV(video_slot,pname,params);
    }
void(__stdcall *real_glGetVideoui64vNV)(GLuint video_slot, GLenum pname, GLuint64EXT* params) = 0;
    void skibidigfx_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT* params)
    {
    
    real_glGetVideoui64vNV(video_slot,pname,params);
    }
void(__stdcall *real_glPrimitiveRestartNV)() = 0;
    void skibidigfx_glPrimitiveRestartNV()
    {
    
    real_glPrimitiveRestartNV();
    }
void(__stdcall *real_glPrimitiveRestartIndexNV)(GLuint index) = 0;
    void skibidigfx_glPrimitiveRestartIndexNV(GLuint index)
    {
    
    real_glPrimitiveRestartIndexNV(index);
    }
GLint(__stdcall *real_glQueryResourceNV)(GLenum queryType, GLint tagId, GLuint bufSize, GLint* buffer) = 0;
    GLint skibidigfx_glQueryResourceNV(GLenum queryType, GLint tagId, GLuint bufSize, GLint* buffer)
    {
    
    return real_glQueryResourceNV(queryType,tagId,bufSize,buffer);
    }
void(__stdcall *real_glGenQueryResourceTagNV)(GLsizei n, GLint* tagIds) = 0;
    void skibidigfx_glGenQueryResourceTagNV(GLsizei n, GLint* tagIds)
    {
    
    real_glGenQueryResourceTagNV(n,tagIds);
    }
void(__stdcall *real_glDeleteQueryResourceTagNV)(GLsizei n, const GLint* tagIds) = 0;
    void skibidigfx_glDeleteQueryResourceTagNV(GLsizei n, const GLint* tagIds)
    {
    
    real_glDeleteQueryResourceTagNV(n,tagIds);
    }
void(__stdcall *real_glQueryResourceTagNV)(GLint tagId, const GLchar* tagString) = 0;
    void skibidigfx_glQueryResourceTagNV(GLint tagId, const GLchar* tagString)
    {
    
    real_glQueryResourceTagNV(tagId,tagString);
    }
void(__stdcall *real_glCombinerParameterfvNV)(GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glCombinerParameterfvNV(GLenum pname, const GLfloat* params)
    {
    
    real_glCombinerParameterfvNV(pname,params);
    }
void(__stdcall *real_glCombinerParameterfNV)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glCombinerParameterfNV(GLenum pname, GLfloat param)
    {
    
    real_glCombinerParameterfNV(pname,param);
    }
void(__stdcall *real_glCombinerParameterivNV)(GLenum pname, const GLint* params) = 0;
    void skibidigfx_glCombinerParameterivNV(GLenum pname, const GLint* params)
    {
    
    real_glCombinerParameterivNV(pname,params);
    }
void(__stdcall *real_glCombinerParameteriNV)(GLenum pname, GLint param) = 0;
    void skibidigfx_glCombinerParameteriNV(GLenum pname, GLint param)
    {
    
    real_glCombinerParameteriNV(pname,param);
    }
void(__stdcall *real_glCombinerInputNV)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) = 0;
    void skibidigfx_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
    {
    
    real_glCombinerInputNV(stage,portion,variable,input,mapping,componentUsage);
    }
void(__stdcall *real_glCombinerOutputNV)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) = 0;
    void skibidigfx_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
    {
    
    real_glCombinerOutputNV(stage,portion,abOutput,cdOutput,sumOutput,scale,bias,abDotProduct,cdDotProduct,muxSum);
    }
void(__stdcall *real_glFinalCombinerInputNV)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) = 0;
    void skibidigfx_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
    {
    
    real_glFinalCombinerInputNV(variable,input,mapping,componentUsage);
    }
void(__stdcall *real_glGetCombinerInputParameterfvNV)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat* params)
    {
    
    real_glGetCombinerInputParameterfvNV(stage,portion,variable,pname,params);
    }
void(__stdcall *real_glGetCombinerInputParameterivNV)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint* params)
    {
    
    real_glGetCombinerInputParameterivNV(stage,portion,variable,pname,params);
    }
void(__stdcall *real_glGetCombinerOutputParameterfvNV)(GLenum stage, GLenum portion, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat* params)
    {
    
    real_glGetCombinerOutputParameterfvNV(stage,portion,pname,params);
    }
void(__stdcall *real_glGetCombinerOutputParameterivNV)(GLenum stage, GLenum portion, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint* params)
    {
    
    real_glGetCombinerOutputParameterivNV(stage,portion,pname,params);
    }
void(__stdcall *real_glGetFinalCombinerInputParameterfvNV)(GLenum variable, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat* params)
    {
    
    real_glGetFinalCombinerInputParameterfvNV(variable,pname,params);
    }
void(__stdcall *real_glGetFinalCombinerInputParameterivNV)(GLenum variable, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint* params)
    {
    
    real_glGetFinalCombinerInputParameterivNV(variable,pname,params);
    }
void(__stdcall *real_glCombinerStageParameterfvNV)(GLenum stage, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat* params)
    {
    
    real_glCombinerStageParameterfvNV(stage,pname,params);
    }
void(__stdcall *real_glGetCombinerStageParameterfvNV)(GLenum stage, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat* params)
    {
    
    real_glGetCombinerStageParameterfvNV(stage,pname,params);
    }
void(__stdcall *real_glFramebufferSampleLocationsfvNV)(GLenum target, GLuint start, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    real_glFramebufferSampleLocationsfvNV(target,start,count,v);
    }
void(__stdcall *real_glNamedFramebufferSampleLocationsfvNV)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat* v)
    {
    
    real_glNamedFramebufferSampleLocationsfvNV(framebuffer,start,count,v);
    }
void(__stdcall *real_glResolveDepthValuesNV)() = 0;
    void skibidigfx_glResolveDepthValuesNV()
    {
    
    real_glResolveDepthValuesNV();
    }
void(__stdcall *real_glScissorExclusiveNV)(GLint x, GLint y, GLsizei width, GLsizei height) = 0;
    void skibidigfx_glScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height)
    {
    
    real_glScissorExclusiveNV(x,y,width,height);
    }
void(__stdcall *real_glScissorExclusiveArrayvNV)(GLuint first, GLsizei count, const GLint* v) = 0;
    void skibidigfx_glScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint* v)
    {
    
    real_glScissorExclusiveArrayvNV(first,count,v);
    }
void(__stdcall *real_glMakeBufferResidentNV)(GLenum target, GLenum access) = 0;
    void skibidigfx_glMakeBufferResidentNV(GLenum target, GLenum access)
    {
    
    real_glMakeBufferResidentNV(target,access);
    }
void(__stdcall *real_glMakeBufferNonResidentNV)(GLenum target) = 0;
    void skibidigfx_glMakeBufferNonResidentNV(GLenum target)
    {
    
    real_glMakeBufferNonResidentNV(target);
    }
GLboolean(__stdcall *real_glIsBufferResidentNV)(GLenum target) = 0;
    GLboolean skibidigfx_glIsBufferResidentNV(GLenum target)
    {
    
    return real_glIsBufferResidentNV(target);
    }
void(__stdcall *real_glMakeNamedBufferResidentNV)(GLuint buffer, GLenum access) = 0;
    void skibidigfx_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
    {
    
    real_glMakeNamedBufferResidentNV(buffer,access);
    }
void(__stdcall *real_glMakeNamedBufferNonResidentNV)(GLuint buffer) = 0;
    void skibidigfx_glMakeNamedBufferNonResidentNV(GLuint buffer)
    {
    
    real_glMakeNamedBufferNonResidentNV(buffer);
    }
GLboolean(__stdcall *real_glIsNamedBufferResidentNV)(GLuint buffer) = 0;
    GLboolean skibidigfx_glIsNamedBufferResidentNV(GLuint buffer)
    {
    
    return real_glIsNamedBufferResidentNV(buffer);
    }
void(__stdcall *real_glGetBufferParameterui64vNV)(GLenum target, GLenum pname, GLuint64EXT* params) = 0;
    void skibidigfx_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT* params)
    {
    
    real_glGetBufferParameterui64vNV(target,pname,params);
    }
void(__stdcall *real_glGetNamedBufferParameterui64vNV)(GLuint buffer, GLenum pname, GLuint64EXT* params) = 0;
    void skibidigfx_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT* params)
    {
    
    real_glGetNamedBufferParameterui64vNV(buffer,pname,params);
    }
void(__stdcall *real_glGetIntegerui64vNV)(GLenum value, GLuint64EXT* result) = 0;
    void skibidigfx_glGetIntegerui64vNV(GLenum value, GLuint64EXT* result)
    {
    
    real_glGetIntegerui64vNV(value,result);
    }
void(__stdcall *real_glUniformui64NV)(GLint location, GLuint64EXT value) = 0;
    void skibidigfx_glUniformui64NV(GLint location, GLuint64EXT value)
    {
    
    real_glUniformui64NV(location,value);
    }
void(__stdcall *real_glUniformui64vNV)(GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glUniformui64vNV(location,count,value);
    }
void(__stdcall *real_glProgramUniformui64NV)(GLuint program, GLint location, GLuint64EXT value) = 0;
    void skibidigfx_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value)
    {
    
    real_glProgramUniformui64NV(program,location,value);
    }
void(__stdcall *real_glProgramUniformui64vNV)(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value) = 0;
    void skibidigfx_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT* value)
    {
    
    real_glProgramUniformui64vNV(program,location,count,value);
    }
void(__stdcall *real_glBindShadingRateImageNV)(GLuint texture) = 0;
    void skibidigfx_glBindShadingRateImageNV(GLuint texture)
    {
    
    real_glBindShadingRateImageNV(texture);
    }
void(__stdcall *real_glGetShadingRateImagePaletteNV)(GLuint viewport, GLuint entry, GLenum* rate) = 0;
    void skibidigfx_glGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum* rate)
    {
    
    real_glGetShadingRateImagePaletteNV(viewport,entry,rate);
    }
void(__stdcall *real_glGetShadingRateSampleLocationivNV)(GLenum rate, GLuint samples, GLuint index, GLint* location) = 0;
    void skibidigfx_glGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint* location)
    {
    
    real_glGetShadingRateSampleLocationivNV(rate,samples,index,location);
    }
void(__stdcall *real_glShadingRateImageBarrierNV)(GLboolean synchronize) = 0;
    void skibidigfx_glShadingRateImageBarrierNV(GLboolean synchronize)
    {
    
    real_glShadingRateImageBarrierNV(synchronize);
    }
void(__stdcall *real_glShadingRateImagePaletteNV)(GLuint viewport, GLuint first, GLsizei count, const GLenum* rates) = 0;
    void skibidigfx_glShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum* rates)
    {
    
    real_glShadingRateImagePaletteNV(viewport,first,count,rates);
    }
void(__stdcall *real_glShadingRateSampleOrderNV)(GLenum order) = 0;
    void skibidigfx_glShadingRateSampleOrderNV(GLenum order)
    {
    
    real_glShadingRateSampleOrderNV(order);
    }
void(__stdcall *real_glShadingRateSampleOrderCustomNV)(GLenum rate, GLuint samples, const GLint* locations) = 0;
    void skibidigfx_glShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint* locations)
    {
    
    real_glShadingRateSampleOrderCustomNV(rate,samples,locations);
    }
void(__stdcall *real_glTextureBarrierNV)() = 0;
    void skibidigfx_glTextureBarrierNV()
    {
    
    real_glTextureBarrierNV();
    }
void(__stdcall *real_glTexImage2DMultisampleCoverageNV)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) = 0;
    void skibidigfx_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
    {
    
    real_glTexImage2DMultisampleCoverageNV(target,coverageSamples,colorSamples,internalFormat,width,height,fixedSampleLocations);
    }
void(__stdcall *real_glTexImage3DMultisampleCoverageNV)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) = 0;
    void skibidigfx_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
    {
    
    real_glTexImage3DMultisampleCoverageNV(target,coverageSamples,colorSamples,internalFormat,width,height,depth,fixedSampleLocations);
    }
void(__stdcall *real_glTextureImage2DMultisampleNV)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) = 0;
    void skibidigfx_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
    {
    
    real_glTextureImage2DMultisampleNV(texture,target,samples,internalFormat,width,height,fixedSampleLocations);
    }
void(__stdcall *real_glTextureImage3DMultisampleNV)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) = 0;
    void skibidigfx_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
    {
    
    real_glTextureImage3DMultisampleNV(texture,target,samples,internalFormat,width,height,depth,fixedSampleLocations);
    }
void(__stdcall *real_glTextureImage2DMultisampleCoverageNV)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) = 0;
    void skibidigfx_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
    {
    
    real_glTextureImage2DMultisampleCoverageNV(texture,target,coverageSamples,colorSamples,internalFormat,width,height,fixedSampleLocations);
    }
void(__stdcall *real_glTextureImage3DMultisampleCoverageNV)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) = 0;
    void skibidigfx_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
    {
    
    real_glTextureImage3DMultisampleCoverageNV(texture,target,coverageSamples,colorSamples,internalFormat,width,height,depth,fixedSampleLocations);
    }
void(__stdcall *real_glBeginTransformFeedbackNV)(GLenum primitiveMode) = 0;
    void skibidigfx_glBeginTransformFeedbackNV(GLenum primitiveMode)
    {
    
    real_glBeginTransformFeedbackNV(primitiveMode);
    }
void(__stdcall *real_glEndTransformFeedbackNV)() = 0;
    void skibidigfx_glEndTransformFeedbackNV()
    {
    
    real_glEndTransformFeedbackNV();
    }
void(__stdcall *real_glTransformFeedbackAttribsNV)(GLsizei count, const GLint* attribs, GLenum bufferMode) = 0;
    void skibidigfx_glTransformFeedbackAttribsNV(GLsizei count, const GLint* attribs, GLenum bufferMode)
    {
    
    real_glTransformFeedbackAttribsNV(count,attribs,bufferMode);
    }
void(__stdcall *real_glBindBufferRangeNV)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) = 0;
    void skibidigfx_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
    {
    
    real_glBindBufferRangeNV(target,index,buffer,offset,size);
    }
void(__stdcall *real_glBindBufferOffsetNV)(GLenum target, GLuint index, GLuint buffer, GLintptr offset) = 0;
    void skibidigfx_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
    {
    
    real_glBindBufferOffsetNV(target,index,buffer,offset);
    }
void(__stdcall *real_glBindBufferBaseNV)(GLenum target, GLuint index, GLuint buffer) = 0;
    void skibidigfx_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
    {
    
    real_glBindBufferBaseNV(target,index,buffer);
    }
void(__stdcall *real_glTransformFeedbackVaryingsNV)(GLuint program, GLsizei count, const GLint* locations, GLenum bufferMode) = 0;
    void skibidigfx_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint* locations, GLenum bufferMode)
    {
    
    real_glTransformFeedbackVaryingsNV(program,count,locations,bufferMode);
    }
void(__stdcall *real_glActiveVaryingNV)(GLuint program, const GLchar* name) = 0;
    void skibidigfx_glActiveVaryingNV(GLuint program, const GLchar* name)
    {
    
    real_glActiveVaryingNV(program,name);
    }
GLint(__stdcall *real_glGetVaryingLocationNV)(GLuint program, const GLchar* name) = 0;
    GLint skibidigfx_glGetVaryingLocationNV(GLuint program, const GLchar* name)
    {
    
    return real_glGetVaryingLocationNV(program,name);
    }
void(__stdcall *real_glGetActiveVaryingNV)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name) = 0;
    void skibidigfx_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)
    {
    
    real_glGetActiveVaryingNV(program,index,bufSize,length,size,type,name);
    }
void(__stdcall *real_glGetTransformFeedbackVaryingNV)(GLuint program, GLuint index, GLint* location) = 0;
    void skibidigfx_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint* location)
    {
    
    real_glGetTransformFeedbackVaryingNV(program,index,location);
    }
void(__stdcall *real_glTransformFeedbackStreamAttribsNV)(GLsizei count, const GLint* attribs, GLsizei nbuffers, const GLint* bufstreams, GLenum bufferMode) = 0;
    void skibidigfx_glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint* attribs, GLsizei nbuffers, const GLint* bufstreams, GLenum bufferMode)
    {
    
    real_glTransformFeedbackStreamAttribsNV(count,attribs,nbuffers,bufstreams,bufferMode);
    }
void(__stdcall *real_glBindTransformFeedbackNV)(GLenum target, GLuint id) = 0;
    void skibidigfx_glBindTransformFeedbackNV(GLenum target, GLuint id)
    {
    
    real_glBindTransformFeedbackNV(target,id);
    }
void(__stdcall *real_glDeleteTransformFeedbacksNV)(GLsizei n, const GLuint* ids) = 0;
    void skibidigfx_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint* ids)
    {
    
    real_glDeleteTransformFeedbacksNV(n,ids);
    }
void(__stdcall *real_glGenTransformFeedbacksNV)(GLsizei n, GLuint* ids) = 0;
    void skibidigfx_glGenTransformFeedbacksNV(GLsizei n, GLuint* ids)
    {
    
    real_glGenTransformFeedbacksNV(n,ids);
    }
GLboolean(__stdcall *real_glIsTransformFeedbackNV)(GLuint id) = 0;
    GLboolean skibidigfx_glIsTransformFeedbackNV(GLuint id)
    {
    
    return real_glIsTransformFeedbackNV(id);
    }
void(__stdcall *real_glPauseTransformFeedbackNV)() = 0;
    void skibidigfx_glPauseTransformFeedbackNV()
    {
    
    real_glPauseTransformFeedbackNV();
    }
void(__stdcall *real_glResumeTransformFeedbackNV)() = 0;
    void skibidigfx_glResumeTransformFeedbackNV()
    {
    
    real_glResumeTransformFeedbackNV();
    }
void(__stdcall *real_glDrawTransformFeedbackNV)(GLenum mode, GLuint id) = 0;
    void skibidigfx_glDrawTransformFeedbackNV(GLenum mode, GLuint id)
    {
    
    real_glDrawTransformFeedbackNV(mode,id);
    }
void(__stdcall *real_glVDPAUInitNV)(const void* vdpDevice, const void* getProcAddress) = 0;
    void skibidigfx_glVDPAUInitNV(const void* vdpDevice, const void* getProcAddress)
    {
    
    real_glVDPAUInitNV(vdpDevice,getProcAddress);
    }
void(__stdcall *real_glVDPAUFiniNV)() = 0;
    void skibidigfx_glVDPAUFiniNV()
    {
    
    real_glVDPAUFiniNV();
    }
GLvdpauSurfaceNV(__stdcall *real_glVDPAURegisterVideoSurfaceNV)(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames) = 0;
    GLvdpauSurfaceNV skibidigfx_glVDPAURegisterVideoSurfaceNV(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames)
    {
    
    return real_glVDPAURegisterVideoSurfaceNV(vdpSurface,target,numTextureNames,textureNames);
    }
GLvdpauSurfaceNV(__stdcall *real_glVDPAURegisterOutputSurfaceNV)(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames) = 0;
    GLvdpauSurfaceNV skibidigfx_glVDPAURegisterOutputSurfaceNV(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames)
    {
    
    return real_glVDPAURegisterOutputSurfaceNV(vdpSurface,target,numTextureNames,textureNames);
    }
GLboolean(__stdcall *real_glVDPAUIsSurfaceNV)(GLvdpauSurfaceNV surface) = 0;
    GLboolean skibidigfx_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
    {
    
    return real_glVDPAUIsSurfaceNV(surface);
    }
void(__stdcall *real_glVDPAUUnregisterSurfaceNV)(GLvdpauSurfaceNV surface) = 0;
    void skibidigfx_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
    {
    
    real_glVDPAUUnregisterSurfaceNV(surface);
    }
void(__stdcall *real_glVDPAUGetSurfaceivNV)(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values) = 0;
    void skibidigfx_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values)
    {
    
    real_glVDPAUGetSurfaceivNV(surface,pname,bufSize,length,values);
    }
void(__stdcall *real_glVDPAUSurfaceAccessNV)(GLvdpauSurfaceNV surface, GLenum access) = 0;
    void skibidigfx_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
    {
    
    real_glVDPAUSurfaceAccessNV(surface,access);
    }
void(__stdcall *real_glVDPAUMapSurfacesNV)(GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces) = 0;
    void skibidigfx_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV* surfaces)
    {
    
    real_glVDPAUMapSurfacesNV(numSurfaces,surfaces);
    }
void(__stdcall *real_glVDPAUUnmapSurfacesNV)(GLsizei numSurface, const GLvdpauSurfaceNV* surfaces) = 0;
    void skibidigfx_glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV* surfaces)
    {
    
    real_glVDPAUUnmapSurfacesNV(numSurface,surfaces);
    }
GLvdpauSurfaceNV(__stdcall *real_glVDPAURegisterVideoSurfaceWithPictureStructureNV)(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames, GLboolean isFrameStructure) = 0;
    GLvdpauSurfaceNV skibidigfx_glVDPAURegisterVideoSurfaceWithPictureStructureNV(const void* vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint* textureNames, GLboolean isFrameStructure)
    {
    
    return real_glVDPAURegisterVideoSurfaceWithPictureStructureNV(vdpSurface,target,numTextureNames,textureNames,isFrameStructure);
    }
void(__stdcall *real_glFlushVertexArrayRangeNV)() = 0;
    void skibidigfx_glFlushVertexArrayRangeNV()
    {
    
    real_glFlushVertexArrayRangeNV();
    }
void(__stdcall *real_glVertexArrayRangeNV)(GLsizei length, const void* pointer) = 0;
    void skibidigfx_glVertexArrayRangeNV(GLsizei length, const void* pointer)
    {
    
    real_glVertexArrayRangeNV(length,pointer);
    }
void(__stdcall *real_glVertexAttribL1i64NV)(GLuint index, GLint64EXT x) = 0;
    void skibidigfx_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
    {
    
    real_glVertexAttribL1i64NV(index,x);
    }
void(__stdcall *real_glVertexAttribL2i64NV)(GLuint index, GLint64EXT x, GLint64EXT y) = 0;
    void skibidigfx_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
    {
    
    real_glVertexAttribL2i64NV(index,x,y);
    }
void(__stdcall *real_glVertexAttribL3i64NV)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) = 0;
    void skibidigfx_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
    {
    
    real_glVertexAttribL3i64NV(index,x,y,z);
    }
void(__stdcall *real_glVertexAttribL4i64NV)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) = 0;
    void skibidigfx_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
    {
    
    real_glVertexAttribL4i64NV(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttribL1i64vNV)(GLuint index, const GLint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT* v)
    {
    
    real_glVertexAttribL1i64vNV(index,v);
    }
void(__stdcall *real_glVertexAttribL2i64vNV)(GLuint index, const GLint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT* v)
    {
    
    real_glVertexAttribL2i64vNV(index,v);
    }
void(__stdcall *real_glVertexAttribL3i64vNV)(GLuint index, const GLint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT* v)
    {
    
    real_glVertexAttribL3i64vNV(index,v);
    }
void(__stdcall *real_glVertexAttribL4i64vNV)(GLuint index, const GLint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT* v)
    {
    
    real_glVertexAttribL4i64vNV(index,v);
    }
void(__stdcall *real_glVertexAttribL1ui64NV)(GLuint index, GLuint64EXT x) = 0;
    void skibidigfx_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
    {
    
    real_glVertexAttribL1ui64NV(index,x);
    }
void(__stdcall *real_glVertexAttribL2ui64NV)(GLuint index, GLuint64EXT x, GLuint64EXT y) = 0;
    void skibidigfx_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
    {
    
    real_glVertexAttribL2ui64NV(index,x,y);
    }
void(__stdcall *real_glVertexAttribL3ui64NV)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) = 0;
    void skibidigfx_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
    {
    
    real_glVertexAttribL3ui64NV(index,x,y,z);
    }
void(__stdcall *real_glVertexAttribL4ui64NV)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) = 0;
    void skibidigfx_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
    {
    
    real_glVertexAttribL4ui64NV(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttribL1ui64vNV)(GLuint index, const GLuint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT* v)
    {
    
    real_glVertexAttribL1ui64vNV(index,v);
    }
void(__stdcall *real_glVertexAttribL2ui64vNV)(GLuint index, const GLuint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT* v)
    {
    
    real_glVertexAttribL2ui64vNV(index,v);
    }
void(__stdcall *real_glVertexAttribL3ui64vNV)(GLuint index, const GLuint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT* v)
    {
    
    real_glVertexAttribL3ui64vNV(index,v);
    }
void(__stdcall *real_glVertexAttribL4ui64vNV)(GLuint index, const GLuint64EXT* v) = 0;
    void skibidigfx_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT* v)
    {
    
    real_glVertexAttribL4ui64vNV(index,v);
    }
void(__stdcall *real_glGetVertexAttribLi64vNV)(GLuint index, GLenum pname, GLint64EXT* params) = 0;
    void skibidigfx_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT* params)
    {
    
    real_glGetVertexAttribLi64vNV(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribLui64vNV)(GLuint index, GLenum pname, GLuint64EXT* params) = 0;
    void skibidigfx_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT* params)
    {
    
    real_glGetVertexAttribLui64vNV(index,pname,params);
    }
void(__stdcall *real_glVertexAttribLFormatNV)(GLuint index, GLint size, GLenum type, GLsizei stride) = 0;
    void skibidigfx_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
    {
    
    real_glVertexAttribLFormatNV(index,size,type,stride);
    }
void(__stdcall *real_glBufferAddressRangeNV)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) = 0;
    void skibidigfx_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
    {
    
    real_glBufferAddressRangeNV(pname,index,address,length);
    }
void(__stdcall *real_glVertexFormatNV)(GLint size, GLenum type, GLsizei stride) = 0;
    void skibidigfx_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
    {
    
    real_glVertexFormatNV(size,type,stride);
    }
void(__stdcall *real_glNormalFormatNV)(GLenum type, GLsizei stride) = 0;
    void skibidigfx_glNormalFormatNV(GLenum type, GLsizei stride)
    {
    
    real_glNormalFormatNV(type,stride);
    }
void(__stdcall *real_glColorFormatNV)(GLint size, GLenum type, GLsizei stride) = 0;
    void skibidigfx_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
    {
    
    real_glColorFormatNV(size,type,stride);
    }
void(__stdcall *real_glIndexFormatNV)(GLenum type, GLsizei stride) = 0;
    void skibidigfx_glIndexFormatNV(GLenum type, GLsizei stride)
    {
    
    real_glIndexFormatNV(type,stride);
    }
void(__stdcall *real_glTexCoordFormatNV)(GLint size, GLenum type, GLsizei stride) = 0;
    void skibidigfx_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
    {
    
    real_glTexCoordFormatNV(size,type,stride);
    }
void(__stdcall *real_glEdgeFlagFormatNV)(GLsizei stride) = 0;
    void skibidigfx_glEdgeFlagFormatNV(GLsizei stride)
    {
    
    real_glEdgeFlagFormatNV(stride);
    }
void(__stdcall *real_glSecondaryColorFormatNV)(GLint size, GLenum type, GLsizei stride) = 0;
    void skibidigfx_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
    {
    
    real_glSecondaryColorFormatNV(size,type,stride);
    }
void(__stdcall *real_glFogCoordFormatNV)(GLenum type, GLsizei stride) = 0;
    void skibidigfx_glFogCoordFormatNV(GLenum type, GLsizei stride)
    {
    
    real_glFogCoordFormatNV(type,stride);
    }
void(__stdcall *real_glVertexAttribFormatNV)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) = 0;
    void skibidigfx_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
    {
    
    real_glVertexAttribFormatNV(index,size,type,normalized,stride);
    }
void(__stdcall *real_glVertexAttribIFormatNV)(GLuint index, GLint size, GLenum type, GLsizei stride) = 0;
    void skibidigfx_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
    {
    
    real_glVertexAttribIFormatNV(index,size,type,stride);
    }
void(__stdcall *real_glGetIntegerui64i_vNV)(GLenum value, GLuint index, GLuint64EXT* result) = 0;
    void skibidigfx_glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT* result)
    {
    
    real_glGetIntegerui64i_vNV(value,index,result);
    }
GLboolean(__stdcall *real_glAreProgramsResidentNV)(GLsizei n, const GLuint* programs, GLboolean* residences) = 0;
    GLboolean skibidigfx_glAreProgramsResidentNV(GLsizei n, const GLuint* programs, GLboolean* residences)
    {
    
    return real_glAreProgramsResidentNV(n,programs,residences);
    }
void(__stdcall *real_glBindProgramNV)(GLenum target, GLuint id) = 0;
    void skibidigfx_glBindProgramNV(GLenum target, GLuint id)
    {
    
    real_glBindProgramNV(target,id);
    }
void(__stdcall *real_glDeleteProgramsNV)(GLsizei n, const GLuint* programs) = 0;
    void skibidigfx_glDeleteProgramsNV(GLsizei n, const GLuint* programs)
    {
    
    real_glDeleteProgramsNV(n,programs);
    }
void(__stdcall *real_glExecuteProgramNV)(GLenum target, GLuint id, const GLfloat* params) = 0;
    void skibidigfx_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat* params)
    {
    
    real_glExecuteProgramNV(target,id,params);
    }
void(__stdcall *real_glGenProgramsNV)(GLsizei n, GLuint* programs) = 0;
    void skibidigfx_glGenProgramsNV(GLsizei n, GLuint* programs)
    {
    
    real_glGenProgramsNV(n,programs);
    }
void(__stdcall *real_glGetProgramParameterdvNV)(GLenum target, GLuint index, GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble* params)
    {
    
    real_glGetProgramParameterdvNV(target,index,pname,params);
    }
void(__stdcall *real_glGetProgramParameterfvNV)(GLenum target, GLuint index, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat* params)
    {
    
    real_glGetProgramParameterfvNV(target,index,pname,params);
    }
void(__stdcall *real_glGetProgramivNV)(GLuint id, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetProgramivNV(GLuint id, GLenum pname, GLint* params)
    {
    
    real_glGetProgramivNV(id,pname,params);
    }
void(__stdcall *real_glGetProgramStringNV)(GLuint id, GLenum pname, GLubyte* program) = 0;
    void skibidigfx_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte* program)
    {
    
    real_glGetProgramStringNV(id,pname,program);
    }
void(__stdcall *real_glGetTrackMatrixivNV)(GLenum target, GLuint address, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint* params)
    {
    
    real_glGetTrackMatrixivNV(target,address,pname,params);
    }
void(__stdcall *real_glGetVertexAttribdvNV)(GLuint index, GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble* params)
    {
    
    real_glGetVertexAttribdvNV(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribfvNV)(GLuint index, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat* params)
    {
    
    real_glGetVertexAttribfvNV(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribivNV)(GLuint index, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint* params)
    {
    
    real_glGetVertexAttribivNV(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribPointervNV)(GLuint index, GLenum pname, void** pointer) = 0;
    void skibidigfx_glGetVertexAttribPointervNV(GLuint index, GLenum pname, void** pointer)
    {
    
    real_glGetVertexAttribPointervNV(index,pname,pointer);
    }
GLboolean(__stdcall *real_glIsProgramNV)(GLuint id) = 0;
    GLboolean skibidigfx_glIsProgramNV(GLuint id)
    {
    
    return real_glIsProgramNV(id);
    }
void(__stdcall *real_glLoadProgramNV)(GLenum target, GLuint id, GLsizei len, const GLubyte* program) = 0;
    void skibidigfx_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte* program)
    {
    
    real_glLoadProgramNV(target,id,len,program);
    }
void(__stdcall *real_glProgramParameter4dNV)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glProgramParameter4dNV(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramParameter4dvNV)(GLenum target, GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble* v)
    {
    
    real_glProgramParameter4dvNV(target,index,v);
    }
void(__stdcall *real_glProgramParameter4fNV)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glProgramParameter4fNV(target,index,x,y,z,w);
    }
void(__stdcall *real_glProgramParameter4fvNV)(GLenum target, GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat* v)
    {
    
    real_glProgramParameter4fvNV(target,index,v);
    }
void(__stdcall *real_glProgramParameters4dvNV)(GLenum target, GLuint index, GLsizei count, const GLdouble* v) = 0;
    void skibidigfx_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble* v)
    {
    
    real_glProgramParameters4dvNV(target,index,count,v);
    }
void(__stdcall *real_glProgramParameters4fvNV)(GLenum target, GLuint index, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat* v)
    {
    
    real_glProgramParameters4fvNV(target,index,count,v);
    }
void(__stdcall *real_glRequestResidentProgramsNV)(GLsizei n, const GLuint* programs) = 0;
    void skibidigfx_glRequestResidentProgramsNV(GLsizei n, const GLuint* programs)
    {
    
    real_glRequestResidentProgramsNV(n,programs);
    }
void(__stdcall *real_glTrackMatrixNV)(GLenum target, GLuint address, GLenum matrix, GLenum transform) = 0;
    void skibidigfx_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
    {
    
    real_glTrackMatrixNV(target,address,matrix,transform);
    }
void(__stdcall *real_glVertexAttribPointerNV)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glVertexAttribPointerNV(index,fsize,type,stride,pointer);
    }
void(__stdcall *real_glVertexAttrib1dNV)(GLuint index, GLdouble x) = 0;
    void skibidigfx_glVertexAttrib1dNV(GLuint index, GLdouble x)
    {
    
    real_glVertexAttrib1dNV(index,x);
    }
void(__stdcall *real_glVertexAttrib1dvNV)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib1dvNV(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib1dvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib1fNV)(GLuint index, GLfloat x) = 0;
    void skibidigfx_glVertexAttrib1fNV(GLuint index, GLfloat x)
    {
    
    real_glVertexAttrib1fNV(index,x);
    }
void(__stdcall *real_glVertexAttrib1fvNV)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib1fvNV(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib1fvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib1sNV)(GLuint index, GLshort x) = 0;
    void skibidigfx_glVertexAttrib1sNV(GLuint index, GLshort x)
    {
    
    real_glVertexAttrib1sNV(index,x);
    }
void(__stdcall *real_glVertexAttrib1svNV)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib1svNV(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib1svNV(index,v);
    }
void(__stdcall *real_glVertexAttrib2dNV)(GLuint index, GLdouble x, GLdouble y) = 0;
    void skibidigfx_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
    {
    
    real_glVertexAttrib2dNV(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2dvNV)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib2dvNV(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib2dvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib2fNV)(GLuint index, GLfloat x, GLfloat y) = 0;
    void skibidigfx_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
    {
    
    real_glVertexAttrib2fNV(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2fvNV)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib2fvNV(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib2fvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib2sNV)(GLuint index, GLshort x, GLshort y) = 0;
    void skibidigfx_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
    {
    
    real_glVertexAttrib2sNV(index,x,y);
    }
void(__stdcall *real_glVertexAttrib2svNV)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib2svNV(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib2svNV(index,v);
    }
void(__stdcall *real_glVertexAttrib3dNV)(GLuint index, GLdouble x, GLdouble y, GLdouble z) = 0;
    void skibidigfx_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
    {
    
    real_glVertexAttrib3dNV(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3dvNV)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib3dvNV(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib3dvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib3fNV)(GLuint index, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glVertexAttrib3fNV(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3fvNV)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib3fvNV(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib3fvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib3sNV)(GLuint index, GLshort x, GLshort y, GLshort z) = 0;
    void skibidigfx_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
    {
    
    real_glVertexAttrib3sNV(index,x,y,z);
    }
void(__stdcall *real_glVertexAttrib3svNV)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib3svNV(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib3svNV(index,v);
    }
void(__stdcall *real_glVertexAttrib4dNV)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
    void skibidigfx_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
    {
    
    real_glVertexAttrib4dNV(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4dvNV)(GLuint index, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttrib4dvNV(GLuint index, const GLdouble* v)
    {
    
    real_glVertexAttrib4dvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib4fNV)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glVertexAttrib4fNV(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4fvNV)(GLuint index, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttrib4fvNV(GLuint index, const GLfloat* v)
    {
    
    real_glVertexAttrib4fvNV(index,v);
    }
void(__stdcall *real_glVertexAttrib4sNV)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) = 0;
    void skibidigfx_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
    {
    
    real_glVertexAttrib4sNV(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4svNV)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttrib4svNV(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttrib4svNV(index,v);
    }
void(__stdcall *real_glVertexAttrib4ubNV)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) = 0;
    void skibidigfx_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
    {
    
    real_glVertexAttrib4ubNV(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttrib4ubvNV)(GLuint index, const GLubyte* v) = 0;
    void skibidigfx_glVertexAttrib4ubvNV(GLuint index, const GLubyte* v)
    {
    
    real_glVertexAttrib4ubvNV(index,v);
    }
void(__stdcall *real_glVertexAttribs1dvNV)(GLuint index, GLsizei count, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble* v)
    {
    
    real_glVertexAttribs1dvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs1fvNV)(GLuint index, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat* v)
    {
    
    real_glVertexAttribs1fvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs1svNV)(GLuint index, GLsizei count, const GLshort* v) = 0;
    void skibidigfx_glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort* v)
    {
    
    real_glVertexAttribs1svNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs2dvNV)(GLuint index, GLsizei count, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble* v)
    {
    
    real_glVertexAttribs2dvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs2fvNV)(GLuint index, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat* v)
    {
    
    real_glVertexAttribs2fvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs2svNV)(GLuint index, GLsizei count, const GLshort* v) = 0;
    void skibidigfx_glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort* v)
    {
    
    real_glVertexAttribs2svNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs3dvNV)(GLuint index, GLsizei count, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble* v)
    {
    
    real_glVertexAttribs3dvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs3fvNV)(GLuint index, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat* v)
    {
    
    real_glVertexAttribs3fvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs3svNV)(GLuint index, GLsizei count, const GLshort* v) = 0;
    void skibidigfx_glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort* v)
    {
    
    real_glVertexAttribs3svNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs4dvNV)(GLuint index, GLsizei count, const GLdouble* v) = 0;
    void skibidigfx_glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble* v)
    {
    
    real_glVertexAttribs4dvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs4fvNV)(GLuint index, GLsizei count, const GLfloat* v) = 0;
    void skibidigfx_glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat* v)
    {
    
    real_glVertexAttribs4fvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs4svNV)(GLuint index, GLsizei count, const GLshort* v) = 0;
    void skibidigfx_glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort* v)
    {
    
    real_glVertexAttribs4svNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribs4ubvNV)(GLuint index, GLsizei count, const GLubyte* v) = 0;
    void skibidigfx_glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte* v)
    {
    
    real_glVertexAttribs4ubvNV(index,count,v);
    }
void(__stdcall *real_glVertexAttribI1iEXT)(GLuint index, GLint x) = 0;
    void skibidigfx_glVertexAttribI1iEXT(GLuint index, GLint x)
    {
    
    real_glVertexAttribI1iEXT(index,x);
    }
void(__stdcall *real_glVertexAttribI2iEXT)(GLuint index, GLint x, GLint y) = 0;
    void skibidigfx_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
    {
    
    real_glVertexAttribI2iEXT(index,x,y);
    }
void(__stdcall *real_glVertexAttribI3iEXT)(GLuint index, GLint x, GLint y, GLint z) = 0;
    void skibidigfx_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
    {
    
    real_glVertexAttribI3iEXT(index,x,y,z);
    }
void(__stdcall *real_glVertexAttribI4iEXT)(GLuint index, GLint x, GLint y, GLint z, GLint w) = 0;
    void skibidigfx_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
    {
    
    real_glVertexAttribI4iEXT(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttribI1uiEXT)(GLuint index, GLuint x) = 0;
    void skibidigfx_glVertexAttribI1uiEXT(GLuint index, GLuint x)
    {
    
    real_glVertexAttribI1uiEXT(index,x);
    }
void(__stdcall *real_glVertexAttribI2uiEXT)(GLuint index, GLuint x, GLuint y) = 0;
    void skibidigfx_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
    {
    
    real_glVertexAttribI2uiEXT(index,x,y);
    }
void(__stdcall *real_glVertexAttribI3uiEXT)(GLuint index, GLuint x, GLuint y, GLuint z) = 0;
    void skibidigfx_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
    {
    
    real_glVertexAttribI3uiEXT(index,x,y,z);
    }
void(__stdcall *real_glVertexAttribI4uiEXT)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) = 0;
    void skibidigfx_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
    {
    
    real_glVertexAttribI4uiEXT(index,x,y,z,w);
    }
void(__stdcall *real_glVertexAttribI1ivEXT)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttribI1ivEXT(GLuint index, const GLint* v)
    {
    
    real_glVertexAttribI1ivEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI2ivEXT)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttribI2ivEXT(GLuint index, const GLint* v)
    {
    
    real_glVertexAttribI2ivEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI3ivEXT)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttribI3ivEXT(GLuint index, const GLint* v)
    {
    
    real_glVertexAttribI3ivEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI4ivEXT)(GLuint index, const GLint* v) = 0;
    void skibidigfx_glVertexAttribI4ivEXT(GLuint index, const GLint* v)
    {
    
    real_glVertexAttribI4ivEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI1uivEXT)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttribI1uivEXT(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttribI1uivEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI2uivEXT)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttribI2uivEXT(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttribI2uivEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI3uivEXT)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttribI3uivEXT(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttribI3uivEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI4uivEXT)(GLuint index, const GLuint* v) = 0;
    void skibidigfx_glVertexAttribI4uivEXT(GLuint index, const GLuint* v)
    {
    
    real_glVertexAttribI4uivEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI4bvEXT)(GLuint index, const GLbyte* v) = 0;
    void skibidigfx_glVertexAttribI4bvEXT(GLuint index, const GLbyte* v)
    {
    
    real_glVertexAttribI4bvEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI4svEXT)(GLuint index, const GLshort* v) = 0;
    void skibidigfx_glVertexAttribI4svEXT(GLuint index, const GLshort* v)
    {
    
    real_glVertexAttribI4svEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI4ubvEXT)(GLuint index, const GLubyte* v) = 0;
    void skibidigfx_glVertexAttribI4ubvEXT(GLuint index, const GLubyte* v)
    {
    
    real_glVertexAttribI4ubvEXT(index,v);
    }
void(__stdcall *real_glVertexAttribI4usvEXT)(GLuint index, const GLushort* v) = 0;
    void skibidigfx_glVertexAttribI4usvEXT(GLuint index, const GLushort* v)
    {
    
    real_glVertexAttribI4usvEXT(index,v);
    }
void(__stdcall *real_glVertexAttribIPointerEXT)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer) = 0;
    void skibidigfx_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
    {
    
    real_glVertexAttribIPointerEXT(index,size,type,stride,pointer);
    }
void(__stdcall *real_glGetVertexAttribIivEXT)(GLuint index, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint* params)
    {
    
    real_glGetVertexAttribIivEXT(index,pname,params);
    }
void(__stdcall *real_glGetVertexAttribIuivEXT)(GLuint index, GLenum pname, GLuint* params) = 0;
    void skibidigfx_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint* params)
    {
    
    real_glGetVertexAttribIuivEXT(index,pname,params);
    }
void(__stdcall *real_glBeginVideoCaptureNV)(GLuint video_capture_slot) = 0;
    void skibidigfx_glBeginVideoCaptureNV(GLuint video_capture_slot)
    {
    
    real_glBeginVideoCaptureNV(video_capture_slot);
    }
void(__stdcall *real_glBindVideoCaptureStreamBufferNV)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) = 0;
    void skibidigfx_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)
    {
    
    real_glBindVideoCaptureStreamBufferNV(video_capture_slot,stream,frame_region,offset);
    }
void(__stdcall *real_glBindVideoCaptureStreamTextureNV)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) = 0;
    void skibidigfx_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
    {
    
    real_glBindVideoCaptureStreamTextureNV(video_capture_slot,stream,frame_region,target,texture);
    }
void(__stdcall *real_glEndVideoCaptureNV)(GLuint video_capture_slot) = 0;
    void skibidigfx_glEndVideoCaptureNV(GLuint video_capture_slot)
    {
    
    real_glEndVideoCaptureNV(video_capture_slot);
    }
void(__stdcall *real_glGetVideoCaptureivNV)(GLuint video_capture_slot, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint* params)
    {
    
    real_glGetVideoCaptureivNV(video_capture_slot,pname,params);
    }
void(__stdcall *real_glGetVideoCaptureStreamivNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint* params)
    {
    
    real_glGetVideoCaptureStreamivNV(video_capture_slot,stream,pname,params);
    }
void(__stdcall *real_glGetVideoCaptureStreamfvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat* params)
    {
    
    real_glGetVideoCaptureStreamfvNV(video_capture_slot,stream,pname,params);
    }
void(__stdcall *real_glGetVideoCaptureStreamdvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params) = 0;
    void skibidigfx_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble* params)
    {
    
    real_glGetVideoCaptureStreamdvNV(video_capture_slot,stream,pname,params);
    }
GLenum(__stdcall *real_glVideoCaptureNV)(GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT* capture_time) = 0;
    GLenum skibidigfx_glVideoCaptureNV(GLuint video_capture_slot, GLuint* sequence_num, GLuint64EXT* capture_time)
    {
    
    return real_glVideoCaptureNV(video_capture_slot,sequence_num,capture_time);
    }
void(__stdcall *real_glVideoCaptureStreamParameterivNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint* params)
    {
    
    real_glVideoCaptureStreamParameterivNV(video_capture_slot,stream,pname,params);
    }
void(__stdcall *real_glVideoCaptureStreamParameterfvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat* params)
    {
    
    real_glVideoCaptureStreamParameterfvNV(video_capture_slot,stream,pname,params);
    }
void(__stdcall *real_glVideoCaptureStreamParameterdvNV)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params) = 0;
    void skibidigfx_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble* params)
    {
    
    real_glVideoCaptureStreamParameterdvNV(video_capture_slot,stream,pname,params);
    }
void(__stdcall *real_glViewportSwizzleNV)(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) = 0;
    void skibidigfx_glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)
    {
    
    real_glViewportSwizzleNV(index,swizzlex,swizzley,swizzlez,swizzlew);
    }
void(__stdcall *real_glFramebufferTextureMultiviewOVR)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) = 0;
    void skibidigfx_glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)
    {
    
    real_glFramebufferTextureMultiviewOVR(target,attachment,texture,level,baseViewIndex,numViews);
    }
void(__stdcall *real_glHintPGI)(GLenum target, GLint mode) = 0;
    void skibidigfx_glHintPGI(GLenum target, GLint mode)
    {
    
    real_glHintPGI(target,mode);
    }
void(__stdcall *real_glDetailTexFuncSGIS)(GLenum target, GLsizei n, const GLfloat* points) = 0;
    void skibidigfx_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat* points)
    {
    
    real_glDetailTexFuncSGIS(target,n,points);
    }
void(__stdcall *real_glGetDetailTexFuncSGIS)(GLenum target, GLfloat* points) = 0;
    void skibidigfx_glGetDetailTexFuncSGIS(GLenum target, GLfloat* points)
    {
    
    real_glGetDetailTexFuncSGIS(target,points);
    }
void(__stdcall *real_glFogFuncSGIS)(GLsizei n, const GLfloat* points) = 0;
    void skibidigfx_glFogFuncSGIS(GLsizei n, const GLfloat* points)
    {
    
    real_glFogFuncSGIS(n,points);
    }
void(__stdcall *real_glGetFogFuncSGIS)(GLfloat* points) = 0;
    void skibidigfx_glGetFogFuncSGIS(GLfloat* points)
    {
    
    real_glGetFogFuncSGIS(points);
    }
void(__stdcall *real_glSampleMaskSGIS)(GLclampf value, GLboolean invert) = 0;
    void skibidigfx_glSampleMaskSGIS(GLclampf value, GLboolean invert)
    {
    
    real_glSampleMaskSGIS(value,invert);
    }
void(__stdcall *real_glSamplePatternSGIS)(GLenum pattern) = 0;
    void skibidigfx_glSamplePatternSGIS(GLenum pattern)
    {
    
    real_glSamplePatternSGIS(pattern);
    }
void(__stdcall *real_glPixelTexGenParameteriSGIS)(GLenum pname, GLint param) = 0;
    void skibidigfx_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
    {
    
    real_glPixelTexGenParameteriSGIS(pname,param);
    }
void(__stdcall *real_glPixelTexGenParameterivSGIS)(GLenum pname, const GLint* params) = 0;
    void skibidigfx_glPixelTexGenParameterivSGIS(GLenum pname, const GLint* params)
    {
    
    real_glPixelTexGenParameterivSGIS(pname,params);
    }
void(__stdcall *real_glPixelTexGenParameterfSGIS)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
    {
    
    real_glPixelTexGenParameterfSGIS(pname,param);
    }
void(__stdcall *real_glPixelTexGenParameterfvSGIS)(GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat* params)
    {
    
    real_glPixelTexGenParameterfvSGIS(pname,params);
    }
void(__stdcall *real_glGetPixelTexGenParameterivSGIS)(GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint* params)
    {
    
    real_glGetPixelTexGenParameterivSGIS(pname,params);
    }
void(__stdcall *real_glGetPixelTexGenParameterfvSGIS)(GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat* params)
    {
    
    real_glGetPixelTexGenParameterfvSGIS(pname,params);
    }
void(__stdcall *real_glPointParameterfSGIS)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glPointParameterfSGIS(GLenum pname, GLfloat param)
    {
    
    real_glPointParameterfSGIS(pname,param);
    }
void(__stdcall *real_glPointParameterfvSGIS)(GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glPointParameterfvSGIS(GLenum pname, const GLfloat* params)
    {
    
    real_glPointParameterfvSGIS(pname,params);
    }
void(__stdcall *real_glSharpenTexFuncSGIS)(GLenum target, GLsizei n, const GLfloat* points) = 0;
    void skibidigfx_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat* points)
    {
    
    real_glSharpenTexFuncSGIS(target,n,points);
    }
void(__stdcall *real_glGetSharpenTexFuncSGIS)(GLenum target, GLfloat* points) = 0;
    void skibidigfx_glGetSharpenTexFuncSGIS(GLenum target, GLfloat* points)
    {
    
    real_glGetSharpenTexFuncSGIS(target,points);
    }
void(__stdcall *real_glTexImage4DSGIS)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTexImage4DSGIS(target,level,internalformat,width,height,depth,size4d,border,format,type,pixels);
    }
void(__stdcall *real_glTexSubImage4DSGIS)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void* pixels) = 0;
    void skibidigfx_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void* pixels)
    {
    
    real_glTexSubImage4DSGIS(target,level,xoffset,yoffset,zoffset,woffset,width,height,depth,size4d,format,type,pixels);
    }
void(__stdcall *real_glTextureColorMaskSGIS)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = 0;
    void skibidigfx_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
    {
    
    real_glTextureColorMaskSGIS(red,green,blue,alpha);
    }
void(__stdcall *real_glGetTexFilterFuncSGIS)(GLenum target, GLenum filter, GLfloat* weights) = 0;
    void skibidigfx_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat* weights)
    {
    
    real_glGetTexFilterFuncSGIS(target,filter,weights);
    }
void(__stdcall *real_glTexFilterFuncSGIS)(GLenum target, GLenum filter, GLsizei n, const GLfloat* weights) = 0;
    void skibidigfx_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat* weights)
    {
    
    real_glTexFilterFuncSGIS(target,filter,n,weights);
    }
void(__stdcall *real_glAsyncMarkerSGIX)(GLuint marker) = 0;
    void skibidigfx_glAsyncMarkerSGIX(GLuint marker)
    {
    
    real_glAsyncMarkerSGIX(marker);
    }
GLint(__stdcall *real_glFinishAsyncSGIX)(GLuint* markerp) = 0;
    GLint skibidigfx_glFinishAsyncSGIX(GLuint* markerp)
    {
    
    return real_glFinishAsyncSGIX(markerp);
    }
GLint(__stdcall *real_glPollAsyncSGIX)(GLuint* markerp) = 0;
    GLint skibidigfx_glPollAsyncSGIX(GLuint* markerp)
    {
    
    return real_glPollAsyncSGIX(markerp);
    }
GLuint(__stdcall *real_glGenAsyncMarkersSGIX)(GLsizei range) = 0;
    GLuint skibidigfx_glGenAsyncMarkersSGIX(GLsizei range)
    {
    
    return real_glGenAsyncMarkersSGIX(range);
    }
void(__stdcall *real_glDeleteAsyncMarkersSGIX)(GLuint marker, GLsizei range) = 0;
    void skibidigfx_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
    {
    
    real_glDeleteAsyncMarkersSGIX(marker,range);
    }
GLboolean(__stdcall *real_glIsAsyncMarkerSGIX)(GLuint marker) = 0;
    GLboolean skibidigfx_glIsAsyncMarkerSGIX(GLuint marker)
    {
    
    return real_glIsAsyncMarkerSGIX(marker);
    }
void(__stdcall *real_glFlushRasterSGIX)() = 0;
    void skibidigfx_glFlushRasterSGIX()
    {
    
    real_glFlushRasterSGIX();
    }
void(__stdcall *real_glFragmentColorMaterialSGIX)(GLenum face, GLenum mode) = 0;
    void skibidigfx_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
    {
    
    real_glFragmentColorMaterialSGIX(face,mode);
    }
void(__stdcall *real_glFragmentLightfSGIX)(GLenum light, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
    {
    
    real_glFragmentLightfSGIX(light,pname,param);
    }
void(__stdcall *real_glFragmentLightfvSGIX)(GLenum light, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat* params)
    {
    
    real_glFragmentLightfvSGIX(light,pname,params);
    }
void(__stdcall *real_glFragmentLightiSGIX)(GLenum light, GLenum pname, GLint param) = 0;
    void skibidigfx_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
    {
    
    real_glFragmentLightiSGIX(light,pname,param);
    }
void(__stdcall *real_glFragmentLightivSGIX)(GLenum light, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint* params)
    {
    
    real_glFragmentLightivSGIX(light,pname,params);
    }
void(__stdcall *real_glFragmentLightModelfSGIX)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
    {
    
    real_glFragmentLightModelfSGIX(pname,param);
    }
void(__stdcall *real_glFragmentLightModelfvSGIX)(GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat* params)
    {
    
    real_glFragmentLightModelfvSGIX(pname,params);
    }
void(__stdcall *real_glFragmentLightModeliSGIX)(GLenum pname, GLint param) = 0;
    void skibidigfx_glFragmentLightModeliSGIX(GLenum pname, GLint param)
    {
    
    real_glFragmentLightModeliSGIX(pname,param);
    }
void(__stdcall *real_glFragmentLightModelivSGIX)(GLenum pname, const GLint* params) = 0;
    void skibidigfx_glFragmentLightModelivSGIX(GLenum pname, const GLint* params)
    {
    
    real_glFragmentLightModelivSGIX(pname,params);
    }
void(__stdcall *real_glFragmentMaterialfSGIX)(GLenum face, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
    {
    
    real_glFragmentMaterialfSGIX(face,pname,param);
    }
void(__stdcall *real_glFragmentMaterialfvSGIX)(GLenum face, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat* params)
    {
    
    real_glFragmentMaterialfvSGIX(face,pname,params);
    }
void(__stdcall *real_glFragmentMaterialiSGIX)(GLenum face, GLenum pname, GLint param) = 0;
    void skibidigfx_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
    {
    
    real_glFragmentMaterialiSGIX(face,pname,param);
    }
void(__stdcall *real_glFragmentMaterialivSGIX)(GLenum face, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint* params)
    {
    
    real_glFragmentMaterialivSGIX(face,pname,params);
    }
void(__stdcall *real_glGetFragmentLightfvSGIX)(GLenum light, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat* params)
    {
    
    real_glGetFragmentLightfvSGIX(light,pname,params);
    }
void(__stdcall *real_glGetFragmentLightivSGIX)(GLenum light, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint* params)
    {
    
    real_glGetFragmentLightivSGIX(light,pname,params);
    }
void(__stdcall *real_glGetFragmentMaterialfvSGIX)(GLenum face, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat* params)
    {
    
    real_glGetFragmentMaterialfvSGIX(face,pname,params);
    }
void(__stdcall *real_glGetFragmentMaterialivSGIX)(GLenum face, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint* params)
    {
    
    real_glGetFragmentMaterialivSGIX(face,pname,params);
    }
void(__stdcall *real_glLightEnviSGIX)(GLenum pname, GLint param) = 0;
    void skibidigfx_glLightEnviSGIX(GLenum pname, GLint param)
    {
    
    real_glLightEnviSGIX(pname,param);
    }
void(__stdcall *real_glFrameZoomSGIX)(GLint factor) = 0;
    void skibidigfx_glFrameZoomSGIX(GLint factor)
    {
    
    real_glFrameZoomSGIX(factor);
    }
void(__stdcall *real_glIglooInterfaceSGIX)(GLenum pname, const void* params) = 0;
    void skibidigfx_glIglooInterfaceSGIX(GLenum pname, const void* params)
    {
    
    real_glIglooInterfaceSGIX(pname,params);
    }
GLint(__stdcall *real_glGetInstrumentsSGIX)() = 0;
    GLint skibidigfx_glGetInstrumentsSGIX()
    {
    
    return real_glGetInstrumentsSGIX();
    }
void(__stdcall *real_glInstrumentsBufferSGIX)(GLsizei size, GLint* buffer) = 0;
    void skibidigfx_glInstrumentsBufferSGIX(GLsizei size, GLint* buffer)
    {
    
    real_glInstrumentsBufferSGIX(size,buffer);
    }
GLint(__stdcall *real_glPollInstrumentsSGIX)(GLint* marker_p) = 0;
    GLint skibidigfx_glPollInstrumentsSGIX(GLint* marker_p)
    {
    
    return real_glPollInstrumentsSGIX(marker_p);
    }
void(__stdcall *real_glReadInstrumentsSGIX)(GLint marker) = 0;
    void skibidigfx_glReadInstrumentsSGIX(GLint marker)
    {
    
    real_glReadInstrumentsSGIX(marker);
    }
void(__stdcall *real_glStartInstrumentsSGIX)() = 0;
    void skibidigfx_glStartInstrumentsSGIX()
    {
    
    real_glStartInstrumentsSGIX();
    }
void(__stdcall *real_glStopInstrumentsSGIX)(GLint marker) = 0;
    void skibidigfx_glStopInstrumentsSGIX(GLint marker)
    {
    
    real_glStopInstrumentsSGIX(marker);
    }
void(__stdcall *real_glGetListParameterfvSGIX)(GLuint list, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat* params)
    {
    
    real_glGetListParameterfvSGIX(list,pname,params);
    }
void(__stdcall *real_glGetListParameterivSGIX)(GLuint list, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint* params)
    {
    
    real_glGetListParameterivSGIX(list,pname,params);
    }
void(__stdcall *real_glListParameterfSGIX)(GLuint list, GLenum pname, GLfloat param) = 0;
    void skibidigfx_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
    {
    
    real_glListParameterfSGIX(list,pname,param);
    }
void(__stdcall *real_glListParameterfvSGIX)(GLuint list, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat* params)
    {
    
    real_glListParameterfvSGIX(list,pname,params);
    }
void(__stdcall *real_glListParameteriSGIX)(GLuint list, GLenum pname, GLint param) = 0;
    void skibidigfx_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
    {
    
    real_glListParameteriSGIX(list,pname,param);
    }
void(__stdcall *real_glListParameterivSGIX)(GLuint list, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glListParameterivSGIX(GLuint list, GLenum pname, const GLint* params)
    {
    
    real_glListParameterivSGIX(list,pname,params);
    }
void(__stdcall *real_glPixelTexGenSGIX)(GLenum mode) = 0;
    void skibidigfx_glPixelTexGenSGIX(GLenum mode)
    {
    
    real_glPixelTexGenSGIX(mode);
    }
void(__stdcall *real_glDeformationMap3dSGIX)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble* points) = 0;
    void skibidigfx_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble* points)
    {
    
    real_glDeformationMap3dSGIX(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,w1,w2,wstride,worder,points);
    }
void(__stdcall *real_glDeformationMap3fSGIX)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat* points) = 0;
    void skibidigfx_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat* points)
    {
    
    real_glDeformationMap3fSGIX(target,u1,u2,ustride,uorder,v1,v2,vstride,vorder,w1,w2,wstride,worder,points);
    }
void(__stdcall *real_glDeformSGIX)(GLbitfield mask) = 0;
    void skibidigfx_glDeformSGIX(GLbitfield mask)
    {
    
    real_glDeformSGIX(mask);
    }
void(__stdcall *real_glLoadIdentityDeformationMapSGIX)(GLbitfield mask) = 0;
    void skibidigfx_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
    {
    
    real_glLoadIdentityDeformationMapSGIX(mask);
    }
void(__stdcall *real_glReferencePlaneSGIX)(const GLdouble* equation) = 0;
    void skibidigfx_glReferencePlaneSGIX(const GLdouble* equation)
    {
    
    real_glReferencePlaneSGIX(equation);
    }
void(__stdcall *real_glSpriteParameterfSGIX)(GLenum pname, GLfloat param) = 0;
    void skibidigfx_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
    {
    
    real_glSpriteParameterfSGIX(pname,param);
    }
void(__stdcall *real_glSpriteParameterfvSGIX)(GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glSpriteParameterfvSGIX(GLenum pname, const GLfloat* params)
    {
    
    real_glSpriteParameterfvSGIX(pname,params);
    }
void(__stdcall *real_glSpriteParameteriSGIX)(GLenum pname, GLint param) = 0;
    void skibidigfx_glSpriteParameteriSGIX(GLenum pname, GLint param)
    {
    
    real_glSpriteParameteriSGIX(pname,param);
    }
void(__stdcall *real_glSpriteParameterivSGIX)(GLenum pname, const GLint* params) = 0;
    void skibidigfx_glSpriteParameterivSGIX(GLenum pname, const GLint* params)
    {
    
    real_glSpriteParameterivSGIX(pname,params);
    }
void(__stdcall *real_glTagSampleBufferSGIX)() = 0;
    void skibidigfx_glTagSampleBufferSGIX()
    {
    
    real_glTagSampleBufferSGIX();
    }
void(__stdcall *real_glColorTableSGI)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table) = 0;
    void skibidigfx_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void* table)
    {
    
    real_glColorTableSGI(target,internalformat,width,format,type,table);
    }
void(__stdcall *real_glColorTableParameterfvSGI)(GLenum target, GLenum pname, const GLfloat* params) = 0;
    void skibidigfx_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat* params)
    {
    
    real_glColorTableParameterfvSGI(target,pname,params);
    }
void(__stdcall *real_glColorTableParameterivSGI)(GLenum target, GLenum pname, const GLint* params) = 0;
    void skibidigfx_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint* params)
    {
    
    real_glColorTableParameterivSGI(target,pname,params);
    }
void(__stdcall *real_glCopyColorTableSGI)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) = 0;
    void skibidigfx_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
    {
    
    real_glCopyColorTableSGI(target,internalformat,x,y,width);
    }
void(__stdcall *real_glGetColorTableSGI)(GLenum target, GLenum format, GLenum type, void* table) = 0;
    void skibidigfx_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void* table)
    {
    
    real_glGetColorTableSGI(target,format,type,table);
    }
void(__stdcall *real_glGetColorTableParameterfvSGI)(GLenum target, GLenum pname, GLfloat* params) = 0;
    void skibidigfx_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat* params)
    {
    
    real_glGetColorTableParameterfvSGI(target,pname,params);
    }
void(__stdcall *real_glGetColorTableParameterivSGI)(GLenum target, GLenum pname, GLint* params) = 0;
    void skibidigfx_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint* params)
    {
    
    real_glGetColorTableParameterivSGI(target,pname,params);
    }
void(__stdcall *real_glFinishTextureSUNX)() = 0;
    void skibidigfx_glFinishTextureSUNX()
    {
    
    real_glFinishTextureSUNX();
    }
void(__stdcall *real_glGlobalAlphaFactorbSUN)(GLbyte factor) = 0;
    void skibidigfx_glGlobalAlphaFactorbSUN(GLbyte factor)
    {
    
    real_glGlobalAlphaFactorbSUN(factor);
    }
void(__stdcall *real_glGlobalAlphaFactorsSUN)(GLshort factor) = 0;
    void skibidigfx_glGlobalAlphaFactorsSUN(GLshort factor)
    {
    
    real_glGlobalAlphaFactorsSUN(factor);
    }
void(__stdcall *real_glGlobalAlphaFactoriSUN)(GLint factor) = 0;
    void skibidigfx_glGlobalAlphaFactoriSUN(GLint factor)
    {
    
    real_glGlobalAlphaFactoriSUN(factor);
    }
void(__stdcall *real_glGlobalAlphaFactorfSUN)(GLfloat factor) = 0;
    void skibidigfx_glGlobalAlphaFactorfSUN(GLfloat factor)
    {
    
    real_glGlobalAlphaFactorfSUN(factor);
    }
void(__stdcall *real_glGlobalAlphaFactordSUN)(GLdouble factor) = 0;
    void skibidigfx_glGlobalAlphaFactordSUN(GLdouble factor)
    {
    
    real_glGlobalAlphaFactordSUN(factor);
    }
void(__stdcall *real_glGlobalAlphaFactorubSUN)(GLubyte factor) = 0;
    void skibidigfx_glGlobalAlphaFactorubSUN(GLubyte factor)
    {
    
    real_glGlobalAlphaFactorubSUN(factor);
    }
void(__stdcall *real_glGlobalAlphaFactorusSUN)(GLushort factor) = 0;
    void skibidigfx_glGlobalAlphaFactorusSUN(GLushort factor)
    {
    
    real_glGlobalAlphaFactorusSUN(factor);
    }
void(__stdcall *real_glGlobalAlphaFactoruiSUN)(GLuint factor) = 0;
    void skibidigfx_glGlobalAlphaFactoruiSUN(GLuint factor)
    {
    
    real_glGlobalAlphaFactoruiSUN(factor);
    }
void(__stdcall *real_glDrawMeshArraysSUN)(GLenum mode, GLint first, GLsizei count, GLsizei width) = 0;
    void skibidigfx_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
    {
    
    real_glDrawMeshArraysSUN(mode,first,count,width);
    }
void(__stdcall *real_glReplacementCodeuiSUN)(GLuint code) = 0;
    void skibidigfx_glReplacementCodeuiSUN(GLuint code)
    {
    
    real_glReplacementCodeuiSUN(code);
    }
void(__stdcall *real_glReplacementCodeusSUN)(GLushort code) = 0;
    void skibidigfx_glReplacementCodeusSUN(GLushort code)
    {
    
    real_glReplacementCodeusSUN(code);
    }
void(__stdcall *real_glReplacementCodeubSUN)(GLubyte code) = 0;
    void skibidigfx_glReplacementCodeubSUN(GLubyte code)
    {
    
    real_glReplacementCodeubSUN(code);
    }
void(__stdcall *real_glReplacementCodeuivSUN)(const GLuint* code) = 0;
    void skibidigfx_glReplacementCodeuivSUN(const GLuint* code)
    {
    
    real_glReplacementCodeuivSUN(code);
    }
void(__stdcall *real_glReplacementCodeusvSUN)(const GLushort* code) = 0;
    void skibidigfx_glReplacementCodeusvSUN(const GLushort* code)
    {
    
    real_glReplacementCodeusvSUN(code);
    }
void(__stdcall *real_glReplacementCodeubvSUN)(const GLubyte* code) = 0;
    void skibidigfx_glReplacementCodeubvSUN(const GLubyte* code)
    {
    
    real_glReplacementCodeubvSUN(code);
    }
void(__stdcall *real_glReplacementCodePointerSUN)(GLenum type, GLsizei stride, const void** pointer) = 0;
    void skibidigfx_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void** pointer)
    {
    
    real_glReplacementCodePointerSUN(type,stride,pointer);
    }
void(__stdcall *real_glColor4ubVertex2fSUN)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) = 0;
    void skibidigfx_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
    {
    
    real_glColor4ubVertex2fSUN(r,g,b,a,x,y);
    }
void(__stdcall *real_glColor4ubVertex2fvSUN)(const GLubyte* c, const GLfloat* v) = 0;
    void skibidigfx_glColor4ubVertex2fvSUN(const GLubyte* c, const GLfloat* v)
    {
    
    real_glColor4ubVertex2fvSUN(c,v);
    }
void(__stdcall *real_glColor4ubVertex3fSUN)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glColor4ubVertex3fSUN(r,g,b,a,x,y,z);
    }
void(__stdcall *real_glColor4ubVertex3fvSUN)(const GLubyte* c, const GLfloat* v) = 0;
    void skibidigfx_glColor4ubVertex3fvSUN(const GLubyte* c, const GLfloat* v)
    {
    
    real_glColor4ubVertex3fvSUN(c,v);
    }
void(__stdcall *real_glColor3fVertex3fSUN)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glColor3fVertex3fSUN(r,g,b,x,y,z);
    }
void(__stdcall *real_glColor3fVertex3fvSUN)(const GLfloat* c, const GLfloat* v) = 0;
    void skibidigfx_glColor3fVertex3fvSUN(const GLfloat* c, const GLfloat* v)
    {
    
    real_glColor3fVertex3fvSUN(c,v);
    }
void(__stdcall *real_glNormal3fVertex3fSUN)(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glNormal3fVertex3fSUN(nx,ny,nz,x,y,z);
    }
void(__stdcall *real_glNormal3fVertex3fvSUN)(const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glNormal3fVertex3fvSUN(const GLfloat* n, const GLfloat* v)
    {
    
    real_glNormal3fVertex3fvSUN(n,v);
    }
void(__stdcall *real_glColor4fNormal3fVertex3fSUN)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glColor4fNormal3fVertex3fSUN(r,g,b,a,nx,ny,nz,x,y,z);
    }
void(__stdcall *real_glColor4fNormal3fVertex3fvSUN)(const GLfloat* c, const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glColor4fNormal3fVertex3fvSUN(const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    real_glColor4fNormal3fVertex3fvSUN(c,n,v);
    }
void(__stdcall *real_glTexCoord2fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glTexCoord2fVertex3fSUN(s,t,x,y,z);
    }
void(__stdcall *real_glTexCoord2fVertex3fvSUN)(const GLfloat* tc, const GLfloat* v) = 0;
    void skibidigfx_glTexCoord2fVertex3fvSUN(const GLfloat* tc, const GLfloat* v)
    {
    
    real_glTexCoord2fVertex3fvSUN(tc,v);
    }
void(__stdcall *real_glTexCoord4fVertex4fSUN)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glTexCoord4fVertex4fSUN(s,t,p,q,x,y,z,w);
    }
void(__stdcall *real_glTexCoord4fVertex4fvSUN)(const GLfloat* tc, const GLfloat* v) = 0;
    void skibidigfx_glTexCoord4fVertex4fvSUN(const GLfloat* tc, const GLfloat* v)
    {
    
    real_glTexCoord4fVertex4fvSUN(tc,v);
    }
void(__stdcall *real_glTexCoord2fColor4ubVertex3fSUN)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glTexCoord2fColor4ubVertex3fSUN(s,t,r,g,b,a,x,y,z);
    }
void(__stdcall *real_glTexCoord2fColor4ubVertex3fvSUN)(const GLfloat* tc, const GLubyte* c, const GLfloat* v) = 0;
    void skibidigfx_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat* tc, const GLubyte* c, const GLfloat* v)
    {
    
    real_glTexCoord2fColor4ubVertex3fvSUN(tc,c,v);
    }
void(__stdcall *real_glTexCoord2fColor3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glTexCoord2fColor3fVertex3fSUN(s,t,r,g,b,x,y,z);
    }
void(__stdcall *real_glTexCoord2fColor3fVertex3fvSUN)(const GLfloat* tc, const GLfloat* c, const GLfloat* v) = 0;
    void skibidigfx_glTexCoord2fColor3fVertex3fvSUN(const GLfloat* tc, const GLfloat* c, const GLfloat* v)
    {
    
    real_glTexCoord2fColor3fVertex3fvSUN(tc,c,v);
    }
void(__stdcall *real_glTexCoord2fNormal3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glTexCoord2fNormal3fVertex3fSUN(s,t,nx,ny,nz,x,y,z);
    }
void(__stdcall *real_glTexCoord2fNormal3fVertex3fvSUN)(const GLfloat* tc, const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat* tc, const GLfloat* n, const GLfloat* v)
    {
    
    real_glTexCoord2fNormal3fVertex3fvSUN(tc,n,v);
    }
void(__stdcall *real_glTexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glTexCoord2fColor4fNormal3fVertex3fSUN(s,t,r,g,b,a,nx,ny,nz,x,y,z);
    }
void(__stdcall *real_glTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    real_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc,c,n,v);
    }
void(__stdcall *real_glTexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
    void skibidigfx_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
    
    real_glTexCoord4fColor4fNormal3fVertex4fSUN(s,t,p,q,r,g,b,a,nx,ny,nz,x,y,z,w);
    }
void(__stdcall *real_glTexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    real_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc,c,n,v);
    }
void(__stdcall *real_glReplacementCodeuiVertex3fSUN)(GLuint rc, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glReplacementCodeuiVertex3fSUN(rc,x,y,z);
    }
void(__stdcall *real_glReplacementCodeuiVertex3fvSUN)(const GLuint* rc, const GLfloat* v) = 0;
    void skibidigfx_glReplacementCodeuiVertex3fvSUN(const GLuint* rc, const GLfloat* v)
    {
    
    real_glReplacementCodeuiVertex3fvSUN(rc,v);
    }
void(__stdcall *real_glReplacementCodeuiColor4ubVertex3fSUN)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glReplacementCodeuiColor4ubVertex3fSUN(rc,r,g,b,a,x,y,z);
    }
void(__stdcall *real_glReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint* rc, const GLubyte* c, const GLfloat* v) = 0;
    void skibidigfx_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint* rc, const GLubyte* c, const GLfloat* v)
    {
    
    real_glReplacementCodeuiColor4ubVertex3fvSUN(rc,c,v);
    }
void(__stdcall *real_glReplacementCodeuiColor3fVertex3fSUN)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glReplacementCodeuiColor3fVertex3fSUN(rc,r,g,b,x,y,z);
    }
void(__stdcall *real_glReplacementCodeuiColor3fVertex3fvSUN)(const GLuint* rc, const GLfloat* c, const GLfloat* v) = 0;
    void skibidigfx_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint* rc, const GLfloat* c, const GLfloat* v)
    {
    
    real_glReplacementCodeuiColor3fVertex3fvSUN(rc,c,v);
    }
void(__stdcall *real_glReplacementCodeuiNormal3fVertex3fSUN)(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glReplacementCodeuiNormal3fVertex3fSUN(rc,nx,ny,nz,x,y,z);
    }
void(__stdcall *real_glReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint* rc, const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* n, const GLfloat* v)
    {
    
    real_glReplacementCodeuiNormal3fVertex3fvSUN(rc,n,v);
    }
void(__stdcall *real_glReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc,r,g,b,a,nx,ny,nz,x,y,z);
    }
void(__stdcall *real_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint* rc, const GLfloat* c, const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    real_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc,c,n,v);
    }
void(__stdcall *real_glReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glReplacementCodeuiTexCoord2fVertex3fSUN(rc,s,t,x,y,z);
    }
void(__stdcall *real_glReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint* rc, const GLfloat* tc, const GLfloat* v) = 0;
    void skibidigfx_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint* rc, const GLfloat* tc, const GLfloat* v)
    {
    
    real_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc,tc,v);
    }
void(__stdcall *real_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc,s,t,nx,ny,nz,x,y,z);
    }
void(__stdcall *real_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint* rc, const GLfloat* tc, const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* tc, const GLfloat* n, const GLfloat* v)
    {
    
    real_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc,tc,n,v);
    }
void(__stdcall *real_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) = 0;
    void skibidigfx_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
    {
    
    real_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc,s,t,r,g,b,a,nx,ny,nz,x,y,z);
    }
void(__stdcall *real_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint* rc, const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v) = 0;
    void skibidigfx_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint* rc, const GLfloat* tc, const GLfloat* c, const GLfloat* n, const GLfloat* v)
    {
    
    real_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc,tc,c,n,v);
    }
std::unordered_map<const char *, void *> SKIBIDI_GFX_FUNCS = {
{"glAccum", (void *)skibidigfx_glAccum},
{"glAlphaFunc", (void *)skibidigfx_glAlphaFunc},
{"glAreTexturesResident", (void *)skibidigfx_glAreTexturesResident},
{"glArrayElement", (void *)skibidigfx_glArrayElement},
{"glBegin", (void *)skibidigfx_glBegin},
{"glBindTexture", (void *)skibidigfx_glBindTexture},
{"glBitmap", (void *)skibidigfx_glBitmap},
{"glBlendFunc", (void *)skibidigfx_glBlendFunc},
{"glCallList", (void *)skibidigfx_glCallList},
{"glCallLists", (void *)skibidigfx_glCallLists},
{"glClear", (void *)skibidigfx_glClear},
{"glClearAccum", (void *)skibidigfx_glClearAccum},
{"glClearColor", (void *)skibidigfx_glClearColor},
{"glClearDepth", (void *)skibidigfx_glClearDepth},
{"glClearIndex", (void *)skibidigfx_glClearIndex},
{"glClearStencil", (void *)skibidigfx_glClearStencil},
{"glClipPlane", (void *)skibidigfx_glClipPlane},
{"glColor3b", (void *)skibidigfx_glColor3b},
{"glColor3bv", (void *)skibidigfx_glColor3bv},
{"glColor3d", (void *)skibidigfx_glColor3d},
{"glColor3dv", (void *)skibidigfx_glColor3dv},
{"glColor3f", (void *)skibidigfx_glColor3f},
{"glColor3fv", (void *)skibidigfx_glColor3fv},
{"glColor3i", (void *)skibidigfx_glColor3i},
{"glColor3iv", (void *)skibidigfx_glColor3iv},
{"glColor3s", (void *)skibidigfx_glColor3s},
{"glColor3sv", (void *)skibidigfx_glColor3sv},
{"glColor3ub", (void *)skibidigfx_glColor3ub},
{"glColor3ubv", (void *)skibidigfx_glColor3ubv},
{"glColor3ui", (void *)skibidigfx_glColor3ui},
{"glColor3uiv", (void *)skibidigfx_glColor3uiv},
{"glColor3us", (void *)skibidigfx_glColor3us},
{"glColor3usv", (void *)skibidigfx_glColor3usv},
{"glColor4b", (void *)skibidigfx_glColor4b},
{"glColor4bv", (void *)skibidigfx_glColor4bv},
{"glColor4d", (void *)skibidigfx_glColor4d},
{"glColor4dv", (void *)skibidigfx_glColor4dv},
{"glColor4f", (void *)skibidigfx_glColor4f},
{"glColor4fv", (void *)skibidigfx_glColor4fv},
{"glColor4i", (void *)skibidigfx_glColor4i},
{"glColor4iv", (void *)skibidigfx_glColor4iv},
{"glColor4s", (void *)skibidigfx_glColor4s},
{"glColor4sv", (void *)skibidigfx_glColor4sv},
{"glColor4ub", (void *)skibidigfx_glColor4ub},
{"glColor4ubv", (void *)skibidigfx_glColor4ubv},
{"glColor4ui", (void *)skibidigfx_glColor4ui},
{"glColor4uiv", (void *)skibidigfx_glColor4uiv},
{"glColor4us", (void *)skibidigfx_glColor4us},
{"glColor4usv", (void *)skibidigfx_glColor4usv},
{"glColorMask", (void *)skibidigfx_glColorMask},
{"glColorMaterial", (void *)skibidigfx_glColorMaterial},
{"glColorPointer", (void *)skibidigfx_glColorPointer},
{"glCopyPixels", (void *)skibidigfx_glCopyPixels},
{"glCopyTexImage1D", (void *)skibidigfx_glCopyTexImage1D},
{"glCopyTexImage2D", (void *)skibidigfx_glCopyTexImage2D},
{"glCopyTexSubImage1D", (void *)skibidigfx_glCopyTexSubImage1D},
{"glCopyTexSubImage2D", (void *)skibidigfx_glCopyTexSubImage2D},
{"glCullFace", (void *)skibidigfx_glCullFace},
{"glDeleteLists", (void *)skibidigfx_glDeleteLists},
{"glDeleteTextures", (void *)skibidigfx_glDeleteTextures},
{"glDepthFunc", (void *)skibidigfx_glDepthFunc},
{"glDepthMask", (void *)skibidigfx_glDepthMask},
{"glDepthRange", (void *)skibidigfx_glDepthRange},
{"glDisable", (void *)skibidigfx_glDisable},
{"glDisableClientState", (void *)skibidigfx_glDisableClientState},
{"glDrawArrays", (void *)skibidigfx_glDrawArrays},
{"glDrawBuffer", (void *)skibidigfx_glDrawBuffer},
{"glDrawElements", (void *)skibidigfx_glDrawElements},
{"glDrawPixels", (void *)skibidigfx_glDrawPixels},
{"glEdgeFlag", (void *)skibidigfx_glEdgeFlag},
{"glEdgeFlagPointer", (void *)skibidigfx_glEdgeFlagPointer},
{"glEdgeFlagv", (void *)skibidigfx_glEdgeFlagv},
{"glEnable", (void *)skibidigfx_glEnable},
{"glEnableClientState", (void *)skibidigfx_glEnableClientState},
{"glEnd", (void *)skibidigfx_glEnd},
{"glEndList", (void *)skibidigfx_glEndList},
{"glEvalCoord1d", (void *)skibidigfx_glEvalCoord1d},
{"glEvalCoord1dv", (void *)skibidigfx_glEvalCoord1dv},
{"glEvalCoord1f", (void *)skibidigfx_glEvalCoord1f},
{"glEvalCoord1fv", (void *)skibidigfx_glEvalCoord1fv},
{"glEvalCoord2d", (void *)skibidigfx_glEvalCoord2d},
{"glEvalCoord2dv", (void *)skibidigfx_glEvalCoord2dv},
{"glEvalCoord2f", (void *)skibidigfx_glEvalCoord2f},
{"glEvalCoord2fv", (void *)skibidigfx_glEvalCoord2fv},
{"glEvalMesh1", (void *)skibidigfx_glEvalMesh1},
{"glEvalMesh2", (void *)skibidigfx_glEvalMesh2},
{"glEvalPoint1", (void *)skibidigfx_glEvalPoint1},
{"glEvalPoint2", (void *)skibidigfx_glEvalPoint2},
{"glFeedbackBuffer", (void *)skibidigfx_glFeedbackBuffer},
{"glFinish", (void *)skibidigfx_glFinish},
{"glFlush", (void *)skibidigfx_glFlush},
{"glFogf", (void *)skibidigfx_glFogf},
{"glFogfv", (void *)skibidigfx_glFogfv},
{"glFogi", (void *)skibidigfx_glFogi},
{"glFogiv", (void *)skibidigfx_glFogiv},
{"glFrontFace", (void *)skibidigfx_glFrontFace},
{"glFrustum", (void *)skibidigfx_glFrustum},
{"glGenLists", (void *)skibidigfx_glGenLists},
{"glGenTextures", (void *)skibidigfx_glGenTextures},
{"glGetBooleanv", (void *)skibidigfx_glGetBooleanv},
{"glGetClipPlane", (void *)skibidigfx_glGetClipPlane},
{"glGetDoublev", (void *)skibidigfx_glGetDoublev},
{"glGetError", (void *)skibidigfx_glGetError},
{"glGetFloatv", (void *)skibidigfx_glGetFloatv},
{"glGetIntegerv", (void *)skibidigfx_glGetIntegerv},
{"glGetLightfv", (void *)skibidigfx_glGetLightfv},
{"glGetLightiv", (void *)skibidigfx_glGetLightiv},
{"glGetMapdv", (void *)skibidigfx_glGetMapdv},
{"glGetMapfv", (void *)skibidigfx_glGetMapfv},
{"glGetMapiv", (void *)skibidigfx_glGetMapiv},
{"glGetMaterialfv", (void *)skibidigfx_glGetMaterialfv},
{"glGetMaterialiv", (void *)skibidigfx_glGetMaterialiv},
{"glGetPixelMapfv", (void *)skibidigfx_glGetPixelMapfv},
{"glGetPixelMapuiv", (void *)skibidigfx_glGetPixelMapuiv},
{"glGetPixelMapusv", (void *)skibidigfx_glGetPixelMapusv},
{"glGetPointerv", (void *)skibidigfx_glGetPointerv},
{"glGetPolygonStipple", (void *)skibidigfx_glGetPolygonStipple},
{"glGetString", (void *)skibidigfx_glGetString},
{"glGetTexEnvfv", (void *)skibidigfx_glGetTexEnvfv},
{"glGetTexEnviv", (void *)skibidigfx_glGetTexEnviv},
{"glGetTexGendv", (void *)skibidigfx_glGetTexGendv},
{"glGetTexGenfv", (void *)skibidigfx_glGetTexGenfv},
{"glGetTexGeniv", (void *)skibidigfx_glGetTexGeniv},
{"glGetTexImage", (void *)skibidigfx_glGetTexImage},
{"glGetTexLevelParameterfv", (void *)skibidigfx_glGetTexLevelParameterfv},
{"glGetTexLevelParameteriv", (void *)skibidigfx_glGetTexLevelParameteriv},
{"glGetTexParameterfv", (void *)skibidigfx_glGetTexParameterfv},
{"glGetTexParameteriv", (void *)skibidigfx_glGetTexParameteriv},
{"glHint", (void *)skibidigfx_glHint},
{"glIndexMask", (void *)skibidigfx_glIndexMask},
{"glIndexPointer", (void *)skibidigfx_glIndexPointer},
{"glIndexd", (void *)skibidigfx_glIndexd},
{"glIndexdv", (void *)skibidigfx_glIndexdv},
{"glIndexf", (void *)skibidigfx_glIndexf},
{"glIndexfv", (void *)skibidigfx_glIndexfv},
{"glIndexi", (void *)skibidigfx_glIndexi},
{"glIndexiv", (void *)skibidigfx_glIndexiv},
{"glIndexs", (void *)skibidigfx_glIndexs},
{"glIndexsv", (void *)skibidigfx_glIndexsv},
{"glIndexub", (void *)skibidigfx_glIndexub},
{"glIndexubv", (void *)skibidigfx_glIndexubv},
{"glInitNames", (void *)skibidigfx_glInitNames},
{"glInterleavedArrays", (void *)skibidigfx_glInterleavedArrays},
{"glIsEnabled", (void *)skibidigfx_glIsEnabled},
{"glIsList", (void *)skibidigfx_glIsList},
{"glIsTexture", (void *)skibidigfx_glIsTexture},
{"glLightModelf", (void *)skibidigfx_glLightModelf},
{"glLightModelfv", (void *)skibidigfx_glLightModelfv},
{"glLightModeli", (void *)skibidigfx_glLightModeli},
{"glLightModeliv", (void *)skibidigfx_glLightModeliv},
{"glLightf", (void *)skibidigfx_glLightf},
{"glLightfv", (void *)skibidigfx_glLightfv},
{"glLighti", (void *)skibidigfx_glLighti},
{"glLightiv", (void *)skibidigfx_glLightiv},
{"glLineStipple", (void *)skibidigfx_glLineStipple},
{"glLineWidth", (void *)skibidigfx_glLineWidth},
{"glListBase", (void *)skibidigfx_glListBase},
{"glLoadIdentity", (void *)skibidigfx_glLoadIdentity},
{"glLoadMatrixd", (void *)skibidigfx_glLoadMatrixd},
{"glLoadMatrixf", (void *)skibidigfx_glLoadMatrixf},
{"glLoadName", (void *)skibidigfx_glLoadName},
{"glLogicOp", (void *)skibidigfx_glLogicOp},
{"glMap1d", (void *)skibidigfx_glMap1d},
{"glMap1f", (void *)skibidigfx_glMap1f},
{"glMap2d", (void *)skibidigfx_glMap2d},
{"glMap2f", (void *)skibidigfx_glMap2f},
{"glMapGrid1d", (void *)skibidigfx_glMapGrid1d},
{"glMapGrid1f", (void *)skibidigfx_glMapGrid1f},
{"glMapGrid2d", (void *)skibidigfx_glMapGrid2d},
{"glMapGrid2f", (void *)skibidigfx_glMapGrid2f},
{"glMaterialf", (void *)skibidigfx_glMaterialf},
{"glMaterialfv", (void *)skibidigfx_glMaterialfv},
{"glMateriali", (void *)skibidigfx_glMateriali},
{"glMaterialiv", (void *)skibidigfx_glMaterialiv},
{"glMatrixMode", (void *)skibidigfx_glMatrixMode},
{"glMultMatrixd", (void *)skibidigfx_glMultMatrixd},
{"glMultMatrixf", (void *)skibidigfx_glMultMatrixf},
{"glNewList", (void *)skibidigfx_glNewList},
{"glNormal3b", (void *)skibidigfx_glNormal3b},
{"glNormal3bv", (void *)skibidigfx_glNormal3bv},
{"glNormal3d", (void *)skibidigfx_glNormal3d},
{"glNormal3dv", (void *)skibidigfx_glNormal3dv},
{"glNormal3f", (void *)skibidigfx_glNormal3f},
{"glNormal3fv", (void *)skibidigfx_glNormal3fv},
{"glNormal3i", (void *)skibidigfx_glNormal3i},
{"glNormal3iv", (void *)skibidigfx_glNormal3iv},
{"glNormal3s", (void *)skibidigfx_glNormal3s},
{"glNormal3sv", (void *)skibidigfx_glNormal3sv},
{"glNormalPointer", (void *)skibidigfx_glNormalPointer},
{"glOrtho", (void *)skibidigfx_glOrtho},
{"glPassThrough", (void *)skibidigfx_glPassThrough},
{"glPixelMapfv", (void *)skibidigfx_glPixelMapfv},
{"glPixelMapuiv", (void *)skibidigfx_glPixelMapuiv},
{"glPixelMapusv", (void *)skibidigfx_glPixelMapusv},
{"glPixelStoref", (void *)skibidigfx_glPixelStoref},
{"glPixelStorei", (void *)skibidigfx_glPixelStorei},
{"glPixelTransferf", (void *)skibidigfx_glPixelTransferf},
{"glPixelTransferi", (void *)skibidigfx_glPixelTransferi},
{"glPixelZoom", (void *)skibidigfx_glPixelZoom},
{"glPointSize", (void *)skibidigfx_glPointSize},
{"glPolygonMode", (void *)skibidigfx_glPolygonMode},
{"glPolygonOffset", (void *)skibidigfx_glPolygonOffset},
{"glPolygonStipple", (void *)skibidigfx_glPolygonStipple},
{"glPopAttrib", (void *)skibidigfx_glPopAttrib},
{"glPopClientAttrib", (void *)skibidigfx_glPopClientAttrib},
{"glPopMatrix", (void *)skibidigfx_glPopMatrix},
{"glPopName", (void *)skibidigfx_glPopName},
{"glPrioritizeTextures", (void *)skibidigfx_glPrioritizeTextures},
{"glPushAttrib", (void *)skibidigfx_glPushAttrib},
{"glPushClientAttrib", (void *)skibidigfx_glPushClientAttrib},
{"glPushMatrix", (void *)skibidigfx_glPushMatrix},
{"glPushName", (void *)skibidigfx_glPushName},
{"glRasterPos2d", (void *)skibidigfx_glRasterPos2d},
{"glRasterPos2dv", (void *)skibidigfx_glRasterPos2dv},
{"glRasterPos2f", (void *)skibidigfx_glRasterPos2f},
{"glRasterPos2fv", (void *)skibidigfx_glRasterPos2fv},
{"glRasterPos2i", (void *)skibidigfx_glRasterPos2i},
{"glRasterPos2iv", (void *)skibidigfx_glRasterPos2iv},
{"glRasterPos2s", (void *)skibidigfx_glRasterPos2s},
{"glRasterPos2sv", (void *)skibidigfx_glRasterPos2sv},
{"glRasterPos3d", (void *)skibidigfx_glRasterPos3d},
{"glRasterPos3dv", (void *)skibidigfx_glRasterPos3dv},
{"glRasterPos3f", (void *)skibidigfx_glRasterPos3f},
{"glRasterPos3fv", (void *)skibidigfx_glRasterPos3fv},
{"glRasterPos3i", (void *)skibidigfx_glRasterPos3i},
{"glRasterPos3iv", (void *)skibidigfx_glRasterPos3iv},
{"glRasterPos3s", (void *)skibidigfx_glRasterPos3s},
{"glRasterPos3sv", (void *)skibidigfx_glRasterPos3sv},
{"glRasterPos4d", (void *)skibidigfx_glRasterPos4d},
{"glRasterPos4dv", (void *)skibidigfx_glRasterPos4dv},
{"glRasterPos4f", (void *)skibidigfx_glRasterPos4f},
{"glRasterPos4fv", (void *)skibidigfx_glRasterPos4fv},
{"glRasterPos4i", (void *)skibidigfx_glRasterPos4i},
{"glRasterPos4iv", (void *)skibidigfx_glRasterPos4iv},
{"glRasterPos4s", (void *)skibidigfx_glRasterPos4s},
{"glRasterPos4sv", (void *)skibidigfx_glRasterPos4sv},
{"glReadBuffer", (void *)skibidigfx_glReadBuffer},
{"glReadPixels", (void *)skibidigfx_glReadPixels},
{"glRectd", (void *)skibidigfx_glRectd},
{"glRectdv", (void *)skibidigfx_glRectdv},
{"glRectf", (void *)skibidigfx_glRectf},
{"glRectfv", (void *)skibidigfx_glRectfv},
{"glRecti", (void *)skibidigfx_glRecti},
{"glRectiv", (void *)skibidigfx_glRectiv},
{"glRects", (void *)skibidigfx_glRects},
{"glRectsv", (void *)skibidigfx_glRectsv},
{"glRenderMode", (void *)skibidigfx_glRenderMode},
{"glRotated", (void *)skibidigfx_glRotated},
{"glRotatef", (void *)skibidigfx_glRotatef},
{"glScaled", (void *)skibidigfx_glScaled},
{"glScalef", (void *)skibidigfx_glScalef},
{"glScissor", (void *)skibidigfx_glScissor},
{"glSelectBuffer", (void *)skibidigfx_glSelectBuffer},
{"glShadeModel", (void *)skibidigfx_glShadeModel},
{"glStencilFunc", (void *)skibidigfx_glStencilFunc},
{"glStencilMask", (void *)skibidigfx_glStencilMask},
{"glStencilOp", (void *)skibidigfx_glStencilOp},
{"glTexCoord1d", (void *)skibidigfx_glTexCoord1d},
{"glTexCoord1dv", (void *)skibidigfx_glTexCoord1dv},
{"glTexCoord1f", (void *)skibidigfx_glTexCoord1f},
{"glTexCoord1fv", (void *)skibidigfx_glTexCoord1fv},
{"glTexCoord1i", (void *)skibidigfx_glTexCoord1i},
{"glTexCoord1iv", (void *)skibidigfx_glTexCoord1iv},
{"glTexCoord1s", (void *)skibidigfx_glTexCoord1s},
{"glTexCoord1sv", (void *)skibidigfx_glTexCoord1sv},
{"glTexCoord2d", (void *)skibidigfx_glTexCoord2d},
{"glTexCoord2dv", (void *)skibidigfx_glTexCoord2dv},
{"glTexCoord2f", (void *)skibidigfx_glTexCoord2f},
{"glTexCoord2fv", (void *)skibidigfx_glTexCoord2fv},
{"glTexCoord2i", (void *)skibidigfx_glTexCoord2i},
{"glTexCoord2iv", (void *)skibidigfx_glTexCoord2iv},
{"glTexCoord2s", (void *)skibidigfx_glTexCoord2s},
{"glTexCoord2sv", (void *)skibidigfx_glTexCoord2sv},
{"glTexCoord3d", (void *)skibidigfx_glTexCoord3d},
{"glTexCoord3dv", (void *)skibidigfx_glTexCoord3dv},
{"glTexCoord3f", (void *)skibidigfx_glTexCoord3f},
{"glTexCoord3fv", (void *)skibidigfx_glTexCoord3fv},
{"glTexCoord3i", (void *)skibidigfx_glTexCoord3i},
{"glTexCoord3iv", (void *)skibidigfx_glTexCoord3iv},
{"glTexCoord3s", (void *)skibidigfx_glTexCoord3s},
{"glTexCoord3sv", (void *)skibidigfx_glTexCoord3sv},
{"glTexCoord4d", (void *)skibidigfx_glTexCoord4d},
{"glTexCoord4dv", (void *)skibidigfx_glTexCoord4dv},
{"glTexCoord4f", (void *)skibidigfx_glTexCoord4f},
{"glTexCoord4fv", (void *)skibidigfx_glTexCoord4fv},
{"glTexCoord4i", (void *)skibidigfx_glTexCoord4i},
{"glTexCoord4iv", (void *)skibidigfx_glTexCoord4iv},
{"glTexCoord4s", (void *)skibidigfx_glTexCoord4s},
{"glTexCoord4sv", (void *)skibidigfx_glTexCoord4sv},
{"glTexCoordPointer", (void *)skibidigfx_glTexCoordPointer},
{"glTexEnvf", (void *)skibidigfx_glTexEnvf},
{"glTexEnvfv", (void *)skibidigfx_glTexEnvfv},
{"glTexEnvi", (void *)skibidigfx_glTexEnvi},
{"glTexEnviv", (void *)skibidigfx_glTexEnviv},
{"glTexGend", (void *)skibidigfx_glTexGend},
{"glTexGendv", (void *)skibidigfx_glTexGendv},
{"glTexGenf", (void *)skibidigfx_glTexGenf},
{"glTexGenfv", (void *)skibidigfx_glTexGenfv},
{"glTexGeni", (void *)skibidigfx_glTexGeni},
{"glTexGeniv", (void *)skibidigfx_glTexGeniv},
{"glTexImage1D", (void *)skibidigfx_glTexImage1D},
{"glTexImage2D", (void *)skibidigfx_glTexImage2D},
{"glTexParameterf", (void *)skibidigfx_glTexParameterf},
{"glTexParameterfv", (void *)skibidigfx_glTexParameterfv},
{"glTexParameteri", (void *)skibidigfx_glTexParameteri},
{"glTexParameteriv", (void *)skibidigfx_glTexParameteriv},
{"glTexSubImage1D", (void *)skibidigfx_glTexSubImage1D},
{"glTexSubImage2D", (void *)skibidigfx_glTexSubImage2D},
{"glTranslated", (void *)skibidigfx_glTranslated},
{"glTranslatef", (void *)skibidigfx_glTranslatef},
{"glVertex2d", (void *)skibidigfx_glVertex2d},
{"glVertex2dv", (void *)skibidigfx_glVertex2dv},
{"glVertex2f", (void *)skibidigfx_glVertex2f},
{"glVertex2fv", (void *)skibidigfx_glVertex2fv},
{"glVertex2i", (void *)skibidigfx_glVertex2i},
{"glVertex2iv", (void *)skibidigfx_glVertex2iv},
{"glVertex2s", (void *)skibidigfx_glVertex2s},
{"glVertex2sv", (void *)skibidigfx_glVertex2sv},
{"glVertex3d", (void *)skibidigfx_glVertex3d},
{"glVertex3dv", (void *)skibidigfx_glVertex3dv},
{"glVertex3f", (void *)skibidigfx_glVertex3f},
{"glVertex3fv", (void *)skibidigfx_glVertex3fv},
{"glVertex3i", (void *)skibidigfx_glVertex3i},
{"glVertex3iv", (void *)skibidigfx_glVertex3iv},
{"glVertex3s", (void *)skibidigfx_glVertex3s},
{"glVertex3sv", (void *)skibidigfx_glVertex3sv},
{"glVertex4d", (void *)skibidigfx_glVertex4d},
{"glVertex4dv", (void *)skibidigfx_glVertex4dv},
{"glVertex4f", (void *)skibidigfx_glVertex4f},
{"glVertex4fv", (void *)skibidigfx_glVertex4fv},
{"glVertex4i", (void *)skibidigfx_glVertex4i},
{"glVertex4iv", (void *)skibidigfx_glVertex4iv},
{"glVertex4s", (void *)skibidigfx_glVertex4s},
{"glVertex4sv", (void *)skibidigfx_glVertex4sv},
{"glVertexPointer", (void *)skibidigfx_glVertexPointer},
{"glViewport", (void *)skibidigfx_glViewport},
{"glDrawRangeElements", (void *)skibidigfx_glDrawRangeElements},
{"glTexImage3D", (void *)skibidigfx_glTexImage3D},
{"glTexSubImage3D", (void *)skibidigfx_glTexSubImage3D},
{"glCopyTexSubImage3D", (void *)skibidigfx_glCopyTexSubImage3D},
{"glActiveTexture", (void *)skibidigfx_glActiveTexture},
{"glSampleCoverage", (void *)skibidigfx_glSampleCoverage},
{"glCompressedTexImage3D", (void *)skibidigfx_glCompressedTexImage3D},
{"glCompressedTexImage2D", (void *)skibidigfx_glCompressedTexImage2D},
{"glCompressedTexImage1D", (void *)skibidigfx_glCompressedTexImage1D},
{"glCompressedTexSubImage3D", (void *)skibidigfx_glCompressedTexSubImage3D},
{"glCompressedTexSubImage2D", (void *)skibidigfx_glCompressedTexSubImage2D},
{"glCompressedTexSubImage1D", (void *)skibidigfx_glCompressedTexSubImage1D},
{"glGetCompressedTexImage", (void *)skibidigfx_glGetCompressedTexImage},
{"glClientActiveTexture", (void *)skibidigfx_glClientActiveTexture},
{"glMultiTexCoord1d", (void *)skibidigfx_glMultiTexCoord1d},
{"glMultiTexCoord1dv", (void *)skibidigfx_glMultiTexCoord1dv},
{"glMultiTexCoord1f", (void *)skibidigfx_glMultiTexCoord1f},
{"glMultiTexCoord1fv", (void *)skibidigfx_glMultiTexCoord1fv},
{"glMultiTexCoord1i", (void *)skibidigfx_glMultiTexCoord1i},
{"glMultiTexCoord1iv", (void *)skibidigfx_glMultiTexCoord1iv},
{"glMultiTexCoord1s", (void *)skibidigfx_glMultiTexCoord1s},
{"glMultiTexCoord1sv", (void *)skibidigfx_glMultiTexCoord1sv},
{"glMultiTexCoord2d", (void *)skibidigfx_glMultiTexCoord2d},
{"glMultiTexCoord2dv", (void *)skibidigfx_glMultiTexCoord2dv},
{"glMultiTexCoord2f", (void *)skibidigfx_glMultiTexCoord2f},
{"glMultiTexCoord2fv", (void *)skibidigfx_glMultiTexCoord2fv},
{"glMultiTexCoord2i", (void *)skibidigfx_glMultiTexCoord2i},
{"glMultiTexCoord2iv", (void *)skibidigfx_glMultiTexCoord2iv},
{"glMultiTexCoord2s", (void *)skibidigfx_glMultiTexCoord2s},
{"glMultiTexCoord2sv", (void *)skibidigfx_glMultiTexCoord2sv},
{"glMultiTexCoord3d", (void *)skibidigfx_glMultiTexCoord3d},
{"glMultiTexCoord3dv", (void *)skibidigfx_glMultiTexCoord3dv},
{"glMultiTexCoord3f", (void *)skibidigfx_glMultiTexCoord3f},
{"glMultiTexCoord3fv", (void *)skibidigfx_glMultiTexCoord3fv},
{"glMultiTexCoord3i", (void *)skibidigfx_glMultiTexCoord3i},
{"glMultiTexCoord3iv", (void *)skibidigfx_glMultiTexCoord3iv},
{"glMultiTexCoord3s", (void *)skibidigfx_glMultiTexCoord3s},
{"glMultiTexCoord3sv", (void *)skibidigfx_glMultiTexCoord3sv},
{"glMultiTexCoord4d", (void *)skibidigfx_glMultiTexCoord4d},
{"glMultiTexCoord4dv", (void *)skibidigfx_glMultiTexCoord4dv},
{"glMultiTexCoord4f", (void *)skibidigfx_glMultiTexCoord4f},
{"glMultiTexCoord4fv", (void *)skibidigfx_glMultiTexCoord4fv},
{"glMultiTexCoord4i", (void *)skibidigfx_glMultiTexCoord4i},
{"glMultiTexCoord4iv", (void *)skibidigfx_glMultiTexCoord4iv},
{"glMultiTexCoord4s", (void *)skibidigfx_glMultiTexCoord4s},
{"glMultiTexCoord4sv", (void *)skibidigfx_glMultiTexCoord4sv},
{"glLoadTransposeMatrixf", (void *)skibidigfx_glLoadTransposeMatrixf},
{"glLoadTransposeMatrixd", (void *)skibidigfx_glLoadTransposeMatrixd},
{"glMultTransposeMatrixf", (void *)skibidigfx_glMultTransposeMatrixf},
{"glMultTransposeMatrixd", (void *)skibidigfx_glMultTransposeMatrixd},
{"glBlendFuncSeparate", (void *)skibidigfx_glBlendFuncSeparate},
{"glMultiDrawArrays", (void *)skibidigfx_glMultiDrawArrays},
{"glMultiDrawElements", (void *)skibidigfx_glMultiDrawElements},
{"glPointParameterf", (void *)skibidigfx_glPointParameterf},
{"glPointParameterfv", (void *)skibidigfx_glPointParameterfv},
{"glPointParameteri", (void *)skibidigfx_glPointParameteri},
{"glPointParameteriv", (void *)skibidigfx_glPointParameteriv},
{"glFogCoordf", (void *)skibidigfx_glFogCoordf},
{"glFogCoordfv", (void *)skibidigfx_glFogCoordfv},
{"glFogCoordd", (void *)skibidigfx_glFogCoordd},
{"glFogCoorddv", (void *)skibidigfx_glFogCoorddv},
{"glFogCoordPointer", (void *)skibidigfx_glFogCoordPointer},
{"glSecondaryColor3b", (void *)skibidigfx_glSecondaryColor3b},
{"glSecondaryColor3bv", (void *)skibidigfx_glSecondaryColor3bv},
{"glSecondaryColor3d", (void *)skibidigfx_glSecondaryColor3d},
{"glSecondaryColor3dv", (void *)skibidigfx_glSecondaryColor3dv},
{"glSecondaryColor3f", (void *)skibidigfx_glSecondaryColor3f},
{"glSecondaryColor3fv", (void *)skibidigfx_glSecondaryColor3fv},
{"glSecondaryColor3i", (void *)skibidigfx_glSecondaryColor3i},
{"glSecondaryColor3iv", (void *)skibidigfx_glSecondaryColor3iv},
{"glSecondaryColor3s", (void *)skibidigfx_glSecondaryColor3s},
{"glSecondaryColor3sv", (void *)skibidigfx_glSecondaryColor3sv},
{"glSecondaryColor3ub", (void *)skibidigfx_glSecondaryColor3ub},
{"glSecondaryColor3ubv", (void *)skibidigfx_glSecondaryColor3ubv},
{"glSecondaryColor3ui", (void *)skibidigfx_glSecondaryColor3ui},
{"glSecondaryColor3uiv", (void *)skibidigfx_glSecondaryColor3uiv},
{"glSecondaryColor3us", (void *)skibidigfx_glSecondaryColor3us},
{"glSecondaryColor3usv", (void *)skibidigfx_glSecondaryColor3usv},
{"glSecondaryColorPointer", (void *)skibidigfx_glSecondaryColorPointer},
{"glWindowPos2d", (void *)skibidigfx_glWindowPos2d},
{"glWindowPos2dv", (void *)skibidigfx_glWindowPos2dv},
{"glWindowPos2f", (void *)skibidigfx_glWindowPos2f},
{"glWindowPos2fv", (void *)skibidigfx_glWindowPos2fv},
{"glWindowPos2i", (void *)skibidigfx_glWindowPos2i},
{"glWindowPos2iv", (void *)skibidigfx_glWindowPos2iv},
{"glWindowPos2s", (void *)skibidigfx_glWindowPos2s},
{"glWindowPos2sv", (void *)skibidigfx_glWindowPos2sv},
{"glWindowPos3d", (void *)skibidigfx_glWindowPos3d},
{"glWindowPos3dv", (void *)skibidigfx_glWindowPos3dv},
{"glWindowPos3f", (void *)skibidigfx_glWindowPos3f},
{"glWindowPos3fv", (void *)skibidigfx_glWindowPos3fv},
{"glWindowPos3i", (void *)skibidigfx_glWindowPos3i},
{"glWindowPos3iv", (void *)skibidigfx_glWindowPos3iv},
{"glWindowPos3s", (void *)skibidigfx_glWindowPos3s},
{"glWindowPos3sv", (void *)skibidigfx_glWindowPos3sv},
{"glBlendColor", (void *)skibidigfx_glBlendColor},
{"glBlendEquation", (void *)skibidigfx_glBlendEquation},
{"glGenQueries", (void *)skibidigfx_glGenQueries},
{"glDeleteQueries", (void *)skibidigfx_glDeleteQueries},
{"glIsQuery", (void *)skibidigfx_glIsQuery},
{"glBeginQuery", (void *)skibidigfx_glBeginQuery},
{"glEndQuery", (void *)skibidigfx_glEndQuery},
{"glGetQueryiv", (void *)skibidigfx_glGetQueryiv},
{"glGetQueryObjectiv", (void *)skibidigfx_glGetQueryObjectiv},
{"glGetQueryObjectuiv", (void *)skibidigfx_glGetQueryObjectuiv},
{"glBindBuffer", (void *)skibidigfx_glBindBuffer},
{"glDeleteBuffers", (void *)skibidigfx_glDeleteBuffers},
{"glGenBuffers", (void *)skibidigfx_glGenBuffers},
{"glIsBuffer", (void *)skibidigfx_glIsBuffer},
{"glBufferData", (void *)skibidigfx_glBufferData},
{"glBufferSubData", (void *)skibidigfx_glBufferSubData},
{"glGetBufferSubData", (void *)skibidigfx_glGetBufferSubData},
{"glMapBuffer", (void *)skibidigfx_glMapBuffer},
{"glUnmapBuffer", (void *)skibidigfx_glUnmapBuffer},
{"glGetBufferParameteriv", (void *)skibidigfx_glGetBufferParameteriv},
{"glGetBufferPointerv", (void *)skibidigfx_glGetBufferPointerv},
{"glBlendEquationSeparate", (void *)skibidigfx_glBlendEquationSeparate},
{"glDrawBuffers", (void *)skibidigfx_glDrawBuffers},
{"glStencilOpSeparate", (void *)skibidigfx_glStencilOpSeparate},
{"glStencilFuncSeparate", (void *)skibidigfx_glStencilFuncSeparate},
{"glStencilMaskSeparate", (void *)skibidigfx_glStencilMaskSeparate},
{"glAttachShader", (void *)skibidigfx_glAttachShader},
{"glBindAttribLocation", (void *)skibidigfx_glBindAttribLocation},
{"glCompileShader", (void *)skibidigfx_glCompileShader},
{"glCreateProgram", (void *)skibidigfx_glCreateProgram},
{"glCreateShader", (void *)skibidigfx_glCreateShader},
{"glDeleteProgram", (void *)skibidigfx_glDeleteProgram},
{"glDeleteShader", (void *)skibidigfx_glDeleteShader},
{"glDetachShader", (void *)skibidigfx_glDetachShader},
{"glDisableVertexAttribArray", (void *)skibidigfx_glDisableVertexAttribArray},
{"glEnableVertexAttribArray", (void *)skibidigfx_glEnableVertexAttribArray},
{"glGetActiveAttrib", (void *)skibidigfx_glGetActiveAttrib},
{"glGetActiveUniform", (void *)skibidigfx_glGetActiveUniform},
{"glGetAttachedShaders", (void *)skibidigfx_glGetAttachedShaders},
{"glGetAttribLocation", (void *)skibidigfx_glGetAttribLocation},
{"glGetProgramiv", (void *)skibidigfx_glGetProgramiv},
{"glGetProgramInfoLog", (void *)skibidigfx_glGetProgramInfoLog},
{"glGetShaderiv", (void *)skibidigfx_glGetShaderiv},
{"glGetShaderInfoLog", (void *)skibidigfx_glGetShaderInfoLog},
{"glGetShaderSource", (void *)skibidigfx_glGetShaderSource},
{"glGetUniformLocation", (void *)skibidigfx_glGetUniformLocation},
{"glGetUniformfv", (void *)skibidigfx_glGetUniformfv},
{"glGetUniformiv", (void *)skibidigfx_glGetUniformiv},
{"glGetVertexAttribdv", (void *)skibidigfx_glGetVertexAttribdv},
{"glGetVertexAttribfv", (void *)skibidigfx_glGetVertexAttribfv},
{"glGetVertexAttribiv", (void *)skibidigfx_glGetVertexAttribiv},
{"glGetVertexAttribPointerv", (void *)skibidigfx_glGetVertexAttribPointerv},
{"glIsProgram", (void *)skibidigfx_glIsProgram},
{"glIsShader", (void *)skibidigfx_glIsShader},
{"glLinkProgram", (void *)skibidigfx_glLinkProgram},
{"glShaderSource", (void *)skibidigfx_glShaderSource},
{"glUseProgram", (void *)skibidigfx_glUseProgram},
{"glUniform1f", (void *)skibidigfx_glUniform1f},
{"glUniform2f", (void *)skibidigfx_glUniform2f},
{"glUniform3f", (void *)skibidigfx_glUniform3f},
{"glUniform4f", (void *)skibidigfx_glUniform4f},
{"glUniform1i", (void *)skibidigfx_glUniform1i},
{"glUniform2i", (void *)skibidigfx_glUniform2i},
{"glUniform3i", (void *)skibidigfx_glUniform3i},
{"glUniform4i", (void *)skibidigfx_glUniform4i},
{"glUniform1fv", (void *)skibidigfx_glUniform1fv},
{"glUniform2fv", (void *)skibidigfx_glUniform2fv},
{"glUniform3fv", (void *)skibidigfx_glUniform3fv},
{"glUniform4fv", (void *)skibidigfx_glUniform4fv},
{"glUniform1iv", (void *)skibidigfx_glUniform1iv},
{"glUniform2iv", (void *)skibidigfx_glUniform2iv},
{"glUniform3iv", (void *)skibidigfx_glUniform3iv},
{"glUniform4iv", (void *)skibidigfx_glUniform4iv},
{"glUniformMatrix2fv", (void *)skibidigfx_glUniformMatrix2fv},
{"glUniformMatrix3fv", (void *)skibidigfx_glUniformMatrix3fv},
{"glUniformMatrix4fv", (void *)skibidigfx_glUniformMatrix4fv},
{"glValidateProgram", (void *)skibidigfx_glValidateProgram},
{"glVertexAttrib1d", (void *)skibidigfx_glVertexAttrib1d},
{"glVertexAttrib1dv", (void *)skibidigfx_glVertexAttrib1dv},
{"glVertexAttrib1f", (void *)skibidigfx_glVertexAttrib1f},
{"glVertexAttrib1fv", (void *)skibidigfx_glVertexAttrib1fv},
{"glVertexAttrib1s", (void *)skibidigfx_glVertexAttrib1s},
{"glVertexAttrib1sv", (void *)skibidigfx_glVertexAttrib1sv},
{"glVertexAttrib2d", (void *)skibidigfx_glVertexAttrib2d},
{"glVertexAttrib2dv", (void *)skibidigfx_glVertexAttrib2dv},
{"glVertexAttrib2f", (void *)skibidigfx_glVertexAttrib2f},
{"glVertexAttrib2fv", (void *)skibidigfx_glVertexAttrib2fv},
{"glVertexAttrib2s", (void *)skibidigfx_glVertexAttrib2s},
{"glVertexAttrib2sv", (void *)skibidigfx_glVertexAttrib2sv},
{"glVertexAttrib3d", (void *)skibidigfx_glVertexAttrib3d},
{"glVertexAttrib3dv", (void *)skibidigfx_glVertexAttrib3dv},
{"glVertexAttrib3f", (void *)skibidigfx_glVertexAttrib3f},
{"glVertexAttrib3fv", (void *)skibidigfx_glVertexAttrib3fv},
{"glVertexAttrib3s", (void *)skibidigfx_glVertexAttrib3s},
{"glVertexAttrib3sv", (void *)skibidigfx_glVertexAttrib3sv},
{"glVertexAttrib4Nbv", (void *)skibidigfx_glVertexAttrib4Nbv},
{"glVertexAttrib4Niv", (void *)skibidigfx_glVertexAttrib4Niv},
{"glVertexAttrib4Nsv", (void *)skibidigfx_glVertexAttrib4Nsv},
{"glVertexAttrib4Nub", (void *)skibidigfx_glVertexAttrib4Nub},
{"glVertexAttrib4Nubv", (void *)skibidigfx_glVertexAttrib4Nubv},
{"glVertexAttrib4Nuiv", (void *)skibidigfx_glVertexAttrib4Nuiv},
{"glVertexAttrib4Nusv", (void *)skibidigfx_glVertexAttrib4Nusv},
{"glVertexAttrib4bv", (void *)skibidigfx_glVertexAttrib4bv},
{"glVertexAttrib4d", (void *)skibidigfx_glVertexAttrib4d},
{"glVertexAttrib4dv", (void *)skibidigfx_glVertexAttrib4dv},
{"glVertexAttrib4f", (void *)skibidigfx_glVertexAttrib4f},
{"glVertexAttrib4fv", (void *)skibidigfx_glVertexAttrib4fv},
{"glVertexAttrib4iv", (void *)skibidigfx_glVertexAttrib4iv},
{"glVertexAttrib4s", (void *)skibidigfx_glVertexAttrib4s},
{"glVertexAttrib4sv", (void *)skibidigfx_glVertexAttrib4sv},
{"glVertexAttrib4ubv", (void *)skibidigfx_glVertexAttrib4ubv},
{"glVertexAttrib4uiv", (void *)skibidigfx_glVertexAttrib4uiv},
{"glVertexAttrib4usv", (void *)skibidigfx_glVertexAttrib4usv},
{"glVertexAttribPointer", (void *)skibidigfx_glVertexAttribPointer},
{"glUniformMatrix2x3fv", (void *)skibidigfx_glUniformMatrix2x3fv},
{"glUniformMatrix3x2fv", (void *)skibidigfx_glUniformMatrix3x2fv},
{"glUniformMatrix2x4fv", (void *)skibidigfx_glUniformMatrix2x4fv},
{"glUniformMatrix4x2fv", (void *)skibidigfx_glUniformMatrix4x2fv},
{"glUniformMatrix3x4fv", (void *)skibidigfx_glUniformMatrix3x4fv},
{"glUniformMatrix4x3fv", (void *)skibidigfx_glUniformMatrix4x3fv},
{"glColorMaski", (void *)skibidigfx_glColorMaski},
{"glGetBooleani_v", (void *)skibidigfx_glGetBooleani_v},
{"glGetIntegeri_v", (void *)skibidigfx_glGetIntegeri_v},
{"glEnablei", (void *)skibidigfx_glEnablei},
{"glDisablei", (void *)skibidigfx_glDisablei},
{"glIsEnabledi", (void *)skibidigfx_glIsEnabledi},
{"glBeginTransformFeedback", (void *)skibidigfx_glBeginTransformFeedback},
{"glEndTransformFeedback", (void *)skibidigfx_glEndTransformFeedback},
{"glBindBufferRange", (void *)skibidigfx_glBindBufferRange},
{"glBindBufferBase", (void *)skibidigfx_glBindBufferBase},
{"glTransformFeedbackVaryings", (void *)skibidigfx_glTransformFeedbackVaryings},
{"glGetTransformFeedbackVarying", (void *)skibidigfx_glGetTransformFeedbackVarying},
{"glClampColor", (void *)skibidigfx_glClampColor},
{"glBeginConditionalRender", (void *)skibidigfx_glBeginConditionalRender},
{"glEndConditionalRender", (void *)skibidigfx_glEndConditionalRender},
{"glVertexAttribIPointer", (void *)skibidigfx_glVertexAttribIPointer},
{"glGetVertexAttribIiv", (void *)skibidigfx_glGetVertexAttribIiv},
{"glGetVertexAttribIuiv", (void *)skibidigfx_glGetVertexAttribIuiv},
{"glVertexAttribI1i", (void *)skibidigfx_glVertexAttribI1i},
{"glVertexAttribI2i", (void *)skibidigfx_glVertexAttribI2i},
{"glVertexAttribI3i", (void *)skibidigfx_glVertexAttribI3i},
{"glVertexAttribI4i", (void *)skibidigfx_glVertexAttribI4i},
{"glVertexAttribI1ui", (void *)skibidigfx_glVertexAttribI1ui},
{"glVertexAttribI2ui", (void *)skibidigfx_glVertexAttribI2ui},
{"glVertexAttribI3ui", (void *)skibidigfx_glVertexAttribI3ui},
{"glVertexAttribI4ui", (void *)skibidigfx_glVertexAttribI4ui},
{"glVertexAttribI1iv", (void *)skibidigfx_glVertexAttribI1iv},
{"glVertexAttribI2iv", (void *)skibidigfx_glVertexAttribI2iv},
{"glVertexAttribI3iv", (void *)skibidigfx_glVertexAttribI3iv},
{"glVertexAttribI4iv", (void *)skibidigfx_glVertexAttribI4iv},
{"glVertexAttribI1uiv", (void *)skibidigfx_glVertexAttribI1uiv},
{"glVertexAttribI2uiv", (void *)skibidigfx_glVertexAttribI2uiv},
{"glVertexAttribI3uiv", (void *)skibidigfx_glVertexAttribI3uiv},
{"glVertexAttribI4uiv", (void *)skibidigfx_glVertexAttribI4uiv},
{"glVertexAttribI4bv", (void *)skibidigfx_glVertexAttribI4bv},
{"glVertexAttribI4sv", (void *)skibidigfx_glVertexAttribI4sv},
{"glVertexAttribI4ubv", (void *)skibidigfx_glVertexAttribI4ubv},
{"glVertexAttribI4usv", (void *)skibidigfx_glVertexAttribI4usv},
{"glGetUniformuiv", (void *)skibidigfx_glGetUniformuiv},
{"glBindFragDataLocation", (void *)skibidigfx_glBindFragDataLocation},
{"glGetFragDataLocation", (void *)skibidigfx_glGetFragDataLocation},
{"glUniform1ui", (void *)skibidigfx_glUniform1ui},
{"glUniform2ui", (void *)skibidigfx_glUniform2ui},
{"glUniform3ui", (void *)skibidigfx_glUniform3ui},
{"glUniform4ui", (void *)skibidigfx_glUniform4ui},
{"glUniform1uiv", (void *)skibidigfx_glUniform1uiv},
{"glUniform2uiv", (void *)skibidigfx_glUniform2uiv},
{"glUniform3uiv", (void *)skibidigfx_glUniform3uiv},
{"glUniform4uiv", (void *)skibidigfx_glUniform4uiv},
{"glTexParameterIiv", (void *)skibidigfx_glTexParameterIiv},
{"glTexParameterIuiv", (void *)skibidigfx_glTexParameterIuiv},
{"glGetTexParameterIiv", (void *)skibidigfx_glGetTexParameterIiv},
{"glGetTexParameterIuiv", (void *)skibidigfx_glGetTexParameterIuiv},
{"glClearBufferiv", (void *)skibidigfx_glClearBufferiv},
{"glClearBufferuiv", (void *)skibidigfx_glClearBufferuiv},
{"glClearBufferfv", (void *)skibidigfx_glClearBufferfv},
{"glClearBufferfi", (void *)skibidigfx_glClearBufferfi},
{"glGetStringi", (void *)skibidigfx_glGetStringi},
{"glIsRenderbuffer", (void *)skibidigfx_glIsRenderbuffer},
{"glBindRenderbuffer", (void *)skibidigfx_glBindRenderbuffer},
{"glDeleteRenderbuffers", (void *)skibidigfx_glDeleteRenderbuffers},
{"glGenRenderbuffers", (void *)skibidigfx_glGenRenderbuffers},
{"glRenderbufferStorage", (void *)skibidigfx_glRenderbufferStorage},
{"glGetRenderbufferParameteriv", (void *)skibidigfx_glGetRenderbufferParameteriv},
{"glIsFramebuffer", (void *)skibidigfx_glIsFramebuffer},
{"glBindFramebuffer", (void *)skibidigfx_glBindFramebuffer},
{"glDeleteFramebuffers", (void *)skibidigfx_glDeleteFramebuffers},
{"glGenFramebuffers", (void *)skibidigfx_glGenFramebuffers},
{"glCheckFramebufferStatus", (void *)skibidigfx_glCheckFramebufferStatus},
{"glFramebufferTexture1D", (void *)skibidigfx_glFramebufferTexture1D},
{"glFramebufferTexture2D", (void *)skibidigfx_glFramebufferTexture2D},
{"glFramebufferTexture3D", (void *)skibidigfx_glFramebufferTexture3D},
{"glFramebufferRenderbuffer", (void *)skibidigfx_glFramebufferRenderbuffer},
{"glGetFramebufferAttachmentParameteriv", (void *)skibidigfx_glGetFramebufferAttachmentParameteriv},
{"glGenerateMipmap", (void *)skibidigfx_glGenerateMipmap},
{"glBlitFramebuffer", (void *)skibidigfx_glBlitFramebuffer},
{"glRenderbufferStorageMultisample", (void *)skibidigfx_glRenderbufferStorageMultisample},
{"glFramebufferTextureLayer", (void *)skibidigfx_glFramebufferTextureLayer},
{"glMapBufferRange", (void *)skibidigfx_glMapBufferRange},
{"glFlushMappedBufferRange", (void *)skibidigfx_glFlushMappedBufferRange},
{"glBindVertexArray", (void *)skibidigfx_glBindVertexArray},
{"glDeleteVertexArrays", (void *)skibidigfx_glDeleteVertexArrays},
{"glGenVertexArrays", (void *)skibidigfx_glGenVertexArrays},
{"glIsVertexArray", (void *)skibidigfx_glIsVertexArray},
{"glDrawArraysInstanced", (void *)skibidigfx_glDrawArraysInstanced},
{"glDrawElementsInstanced", (void *)skibidigfx_glDrawElementsInstanced},
{"glTexBuffer", (void *)skibidigfx_glTexBuffer},
{"glPrimitiveRestartIndex", (void *)skibidigfx_glPrimitiveRestartIndex},
{"glCopyBufferSubData", (void *)skibidigfx_glCopyBufferSubData},
{"glGetUniformIndices", (void *)skibidigfx_glGetUniformIndices},
{"glGetActiveUniformsiv", (void *)skibidigfx_glGetActiveUniformsiv},
{"glGetActiveUniformName", (void *)skibidigfx_glGetActiveUniformName},
{"glGetUniformBlockIndex", (void *)skibidigfx_glGetUniformBlockIndex},
{"glGetActiveUniformBlockiv", (void *)skibidigfx_glGetActiveUniformBlockiv},
{"glGetActiveUniformBlockName", (void *)skibidigfx_glGetActiveUniformBlockName},
{"glUniformBlockBinding", (void *)skibidigfx_glUniformBlockBinding},
{"glDrawElementsBaseVertex", (void *)skibidigfx_glDrawElementsBaseVertex},
{"glDrawRangeElementsBaseVertex", (void *)skibidigfx_glDrawRangeElementsBaseVertex},
{"glDrawElementsInstancedBaseVertex", (void *)skibidigfx_glDrawElementsInstancedBaseVertex},
{"glMultiDrawElementsBaseVertex", (void *)skibidigfx_glMultiDrawElementsBaseVertex},
{"glProvokingVertex", (void *)skibidigfx_glProvokingVertex},
{"glFenceSync", (void *)skibidigfx_glFenceSync},
{"glIsSync", (void *)skibidigfx_glIsSync},
{"glDeleteSync", (void *)skibidigfx_glDeleteSync},
{"glClientWaitSync", (void *)skibidigfx_glClientWaitSync},
{"glWaitSync", (void *)skibidigfx_glWaitSync},
{"glGetInteger64v", (void *)skibidigfx_glGetInteger64v},
{"glGetSynciv", (void *)skibidigfx_glGetSynciv},
{"glGetInteger64i_v", (void *)skibidigfx_glGetInteger64i_v},
{"glGetBufferParameteri64v", (void *)skibidigfx_glGetBufferParameteri64v},
{"glFramebufferTexture", (void *)skibidigfx_glFramebufferTexture},
{"glTexImage2DMultisample", (void *)skibidigfx_glTexImage2DMultisample},
{"glTexImage3DMultisample", (void *)skibidigfx_glTexImage3DMultisample},
{"glGetMultisamplefv", (void *)skibidigfx_glGetMultisamplefv},
{"glSampleMaski", (void *)skibidigfx_glSampleMaski},
{"glBindFragDataLocationIndexed", (void *)skibidigfx_glBindFragDataLocationIndexed},
{"glGetFragDataIndex", (void *)skibidigfx_glGetFragDataIndex},
{"glGenSamplers", (void *)skibidigfx_glGenSamplers},
{"glDeleteSamplers", (void *)skibidigfx_glDeleteSamplers},
{"glIsSampler", (void *)skibidigfx_glIsSampler},
{"glBindSampler", (void *)skibidigfx_glBindSampler},
{"glSamplerParameteri", (void *)skibidigfx_glSamplerParameteri},
{"glSamplerParameteriv", (void *)skibidigfx_glSamplerParameteriv},
{"glSamplerParameterf", (void *)skibidigfx_glSamplerParameterf},
{"glSamplerParameterfv", (void *)skibidigfx_glSamplerParameterfv},
{"glSamplerParameterIiv", (void *)skibidigfx_glSamplerParameterIiv},
{"glSamplerParameterIuiv", (void *)skibidigfx_glSamplerParameterIuiv},
{"glGetSamplerParameteriv", (void *)skibidigfx_glGetSamplerParameteriv},
{"glGetSamplerParameterIiv", (void *)skibidigfx_glGetSamplerParameterIiv},
{"glGetSamplerParameterfv", (void *)skibidigfx_glGetSamplerParameterfv},
{"glGetSamplerParameterIuiv", (void *)skibidigfx_glGetSamplerParameterIuiv},
{"glQueryCounter", (void *)skibidigfx_glQueryCounter},
{"glGetQueryObjecti64v", (void *)skibidigfx_glGetQueryObjecti64v},
{"glGetQueryObjectui64v", (void *)skibidigfx_glGetQueryObjectui64v},
{"glVertexAttribDivisor", (void *)skibidigfx_glVertexAttribDivisor},
{"glVertexAttribP1ui", (void *)skibidigfx_glVertexAttribP1ui},
{"glVertexAttribP1uiv", (void *)skibidigfx_glVertexAttribP1uiv},
{"glVertexAttribP2ui", (void *)skibidigfx_glVertexAttribP2ui},
{"glVertexAttribP2uiv", (void *)skibidigfx_glVertexAttribP2uiv},
{"glVertexAttribP3ui", (void *)skibidigfx_glVertexAttribP3ui},
{"glVertexAttribP3uiv", (void *)skibidigfx_glVertexAttribP3uiv},
{"glVertexAttribP4ui", (void *)skibidigfx_glVertexAttribP4ui},
{"glVertexAttribP4uiv", (void *)skibidigfx_glVertexAttribP4uiv},
{"glVertexP2ui", (void *)skibidigfx_glVertexP2ui},
{"glVertexP2uiv", (void *)skibidigfx_glVertexP2uiv},
{"glVertexP3ui", (void *)skibidigfx_glVertexP3ui},
{"glVertexP3uiv", (void *)skibidigfx_glVertexP3uiv},
{"glVertexP4ui", (void *)skibidigfx_glVertexP4ui},
{"glVertexP4uiv", (void *)skibidigfx_glVertexP4uiv},
{"glTexCoordP1ui", (void *)skibidigfx_glTexCoordP1ui},
{"glTexCoordP1uiv", (void *)skibidigfx_glTexCoordP1uiv},
{"glTexCoordP2ui", (void *)skibidigfx_glTexCoordP2ui},
{"glTexCoordP2uiv", (void *)skibidigfx_glTexCoordP2uiv},
{"glTexCoordP3ui", (void *)skibidigfx_glTexCoordP3ui},
{"glTexCoordP3uiv", (void *)skibidigfx_glTexCoordP3uiv},
{"glTexCoordP4ui", (void *)skibidigfx_glTexCoordP4ui},
{"glTexCoordP4uiv", (void *)skibidigfx_glTexCoordP4uiv},
{"glMultiTexCoordP1ui", (void *)skibidigfx_glMultiTexCoordP1ui},
{"glMultiTexCoordP1uiv", (void *)skibidigfx_glMultiTexCoordP1uiv},
{"glMultiTexCoordP2ui", (void *)skibidigfx_glMultiTexCoordP2ui},
{"glMultiTexCoordP2uiv", (void *)skibidigfx_glMultiTexCoordP2uiv},
{"glMultiTexCoordP3ui", (void *)skibidigfx_glMultiTexCoordP3ui},
{"glMultiTexCoordP3uiv", (void *)skibidigfx_glMultiTexCoordP3uiv},
{"glMultiTexCoordP4ui", (void *)skibidigfx_glMultiTexCoordP4ui},
{"glMultiTexCoordP4uiv", (void *)skibidigfx_glMultiTexCoordP4uiv},
{"glNormalP3ui", (void *)skibidigfx_glNormalP3ui},
{"glNormalP3uiv", (void *)skibidigfx_glNormalP3uiv},
{"glColorP3ui", (void *)skibidigfx_glColorP3ui},
{"glColorP3uiv", (void *)skibidigfx_glColorP3uiv},
{"glColorP4ui", (void *)skibidigfx_glColorP4ui},
{"glColorP4uiv", (void *)skibidigfx_glColorP4uiv},
{"glSecondaryColorP3ui", (void *)skibidigfx_glSecondaryColorP3ui},
{"glSecondaryColorP3uiv", (void *)skibidigfx_glSecondaryColorP3uiv},
{"glMinSampleShading", (void *)skibidigfx_glMinSampleShading},
{"glBlendEquationi", (void *)skibidigfx_glBlendEquationi},
{"glBlendEquationSeparatei", (void *)skibidigfx_glBlendEquationSeparatei},
{"glBlendFunci", (void *)skibidigfx_glBlendFunci},
{"glBlendFuncSeparatei", (void *)skibidigfx_glBlendFuncSeparatei},
{"glDrawArraysIndirect", (void *)skibidigfx_glDrawArraysIndirect},
{"glDrawElementsIndirect", (void *)skibidigfx_glDrawElementsIndirect},
{"glUniform1d", (void *)skibidigfx_glUniform1d},
{"glUniform2d", (void *)skibidigfx_glUniform2d},
{"glUniform3d", (void *)skibidigfx_glUniform3d},
{"glUniform4d", (void *)skibidigfx_glUniform4d},
{"glUniform1dv", (void *)skibidigfx_glUniform1dv},
{"glUniform2dv", (void *)skibidigfx_glUniform2dv},
{"glUniform3dv", (void *)skibidigfx_glUniform3dv},
{"glUniform4dv", (void *)skibidigfx_glUniform4dv},
{"glUniformMatrix2dv", (void *)skibidigfx_glUniformMatrix2dv},
{"glUniformMatrix3dv", (void *)skibidigfx_glUniformMatrix3dv},
{"glUniformMatrix4dv", (void *)skibidigfx_glUniformMatrix4dv},
{"glUniformMatrix2x3dv", (void *)skibidigfx_glUniformMatrix2x3dv},
{"glUniformMatrix2x4dv", (void *)skibidigfx_glUniformMatrix2x4dv},
{"glUniformMatrix3x2dv", (void *)skibidigfx_glUniformMatrix3x2dv},
{"glUniformMatrix3x4dv", (void *)skibidigfx_glUniformMatrix3x4dv},
{"glUniformMatrix4x2dv", (void *)skibidigfx_glUniformMatrix4x2dv},
{"glUniformMatrix4x3dv", (void *)skibidigfx_glUniformMatrix4x3dv},
{"glGetUniformdv", (void *)skibidigfx_glGetUniformdv},
{"glGetSubroutineUniformLocation", (void *)skibidigfx_glGetSubroutineUniformLocation},
{"glGetSubroutineIndex", (void *)skibidigfx_glGetSubroutineIndex},
{"glGetActiveSubroutineUniformiv", (void *)skibidigfx_glGetActiveSubroutineUniformiv},
{"glGetActiveSubroutineUniformName", (void *)skibidigfx_glGetActiveSubroutineUniformName},
{"glGetActiveSubroutineName", (void *)skibidigfx_glGetActiveSubroutineName},
{"glUniformSubroutinesuiv", (void *)skibidigfx_glUniformSubroutinesuiv},
{"glGetUniformSubroutineuiv", (void *)skibidigfx_glGetUniformSubroutineuiv},
{"glGetProgramStageiv", (void *)skibidigfx_glGetProgramStageiv},
{"glPatchParameteri", (void *)skibidigfx_glPatchParameteri},
{"glPatchParameterfv", (void *)skibidigfx_glPatchParameterfv},
{"glBindTransformFeedback", (void *)skibidigfx_glBindTransformFeedback},
{"glDeleteTransformFeedbacks", (void *)skibidigfx_glDeleteTransformFeedbacks},
{"glGenTransformFeedbacks", (void *)skibidigfx_glGenTransformFeedbacks},
{"glIsTransformFeedback", (void *)skibidigfx_glIsTransformFeedback},
{"glPauseTransformFeedback", (void *)skibidigfx_glPauseTransformFeedback},
{"glResumeTransformFeedback", (void *)skibidigfx_glResumeTransformFeedback},
{"glDrawTransformFeedback", (void *)skibidigfx_glDrawTransformFeedback},
{"glDrawTransformFeedbackStream", (void *)skibidigfx_glDrawTransformFeedbackStream},
{"glBeginQueryIndexed", (void *)skibidigfx_glBeginQueryIndexed},
{"glEndQueryIndexed", (void *)skibidigfx_glEndQueryIndexed},
{"glGetQueryIndexediv", (void *)skibidigfx_glGetQueryIndexediv},
{"glReleaseShaderCompiler", (void *)skibidigfx_glReleaseShaderCompiler},
{"glShaderBinary", (void *)skibidigfx_glShaderBinary},
{"glGetShaderPrecisionFormat", (void *)skibidigfx_glGetShaderPrecisionFormat},
{"glDepthRangef", (void *)skibidigfx_glDepthRangef},
{"glClearDepthf", (void *)skibidigfx_glClearDepthf},
{"glGetProgramBinary", (void *)skibidigfx_glGetProgramBinary},
{"glProgramBinary", (void *)skibidigfx_glProgramBinary},
{"glProgramParameteri", (void *)skibidigfx_glProgramParameteri},
{"glUseProgramStages", (void *)skibidigfx_glUseProgramStages},
{"glActiveShaderProgram", (void *)skibidigfx_glActiveShaderProgram},
{"glCreateShaderProgramv", (void *)skibidigfx_glCreateShaderProgramv},
{"glBindProgramPipeline", (void *)skibidigfx_glBindProgramPipeline},
{"glDeleteProgramPipelines", (void *)skibidigfx_glDeleteProgramPipelines},
{"glGenProgramPipelines", (void *)skibidigfx_glGenProgramPipelines},
{"glIsProgramPipeline", (void *)skibidigfx_glIsProgramPipeline},
{"glGetProgramPipelineiv", (void *)skibidigfx_glGetProgramPipelineiv},
{"glProgramUniform1i", (void *)skibidigfx_glProgramUniform1i},
{"glProgramUniform1iv", (void *)skibidigfx_glProgramUniform1iv},
{"glProgramUniform1f", (void *)skibidigfx_glProgramUniform1f},
{"glProgramUniform1fv", (void *)skibidigfx_glProgramUniform1fv},
{"glProgramUniform1d", (void *)skibidigfx_glProgramUniform1d},
{"glProgramUniform1dv", (void *)skibidigfx_glProgramUniform1dv},
{"glProgramUniform1ui", (void *)skibidigfx_glProgramUniform1ui},
{"glProgramUniform1uiv", (void *)skibidigfx_glProgramUniform1uiv},
{"glProgramUniform2i", (void *)skibidigfx_glProgramUniform2i},
{"glProgramUniform2iv", (void *)skibidigfx_glProgramUniform2iv},
{"glProgramUniform2f", (void *)skibidigfx_glProgramUniform2f},
{"glProgramUniform2fv", (void *)skibidigfx_glProgramUniform2fv},
{"glProgramUniform2d", (void *)skibidigfx_glProgramUniform2d},
{"glProgramUniform2dv", (void *)skibidigfx_glProgramUniform2dv},
{"glProgramUniform2ui", (void *)skibidigfx_glProgramUniform2ui},
{"glProgramUniform2uiv", (void *)skibidigfx_glProgramUniform2uiv},
{"glProgramUniform3i", (void *)skibidigfx_glProgramUniform3i},
{"glProgramUniform3iv", (void *)skibidigfx_glProgramUniform3iv},
{"glProgramUniform3f", (void *)skibidigfx_glProgramUniform3f},
{"glProgramUniform3fv", (void *)skibidigfx_glProgramUniform3fv},
{"glProgramUniform3d", (void *)skibidigfx_glProgramUniform3d},
{"glProgramUniform3dv", (void *)skibidigfx_glProgramUniform3dv},
{"glProgramUniform3ui", (void *)skibidigfx_glProgramUniform3ui},
{"glProgramUniform3uiv", (void *)skibidigfx_glProgramUniform3uiv},
{"glProgramUniform4i", (void *)skibidigfx_glProgramUniform4i},
{"glProgramUniform4iv", (void *)skibidigfx_glProgramUniform4iv},
{"glProgramUniform4f", (void *)skibidigfx_glProgramUniform4f},
{"glProgramUniform4fv", (void *)skibidigfx_glProgramUniform4fv},
{"glProgramUniform4d", (void *)skibidigfx_glProgramUniform4d},
{"glProgramUniform4dv", (void *)skibidigfx_glProgramUniform4dv},
{"glProgramUniform4ui", (void *)skibidigfx_glProgramUniform4ui},
{"glProgramUniform4uiv", (void *)skibidigfx_glProgramUniform4uiv},
{"glProgramUniformMatrix2fv", (void *)skibidigfx_glProgramUniformMatrix2fv},
{"glProgramUniformMatrix3fv", (void *)skibidigfx_glProgramUniformMatrix3fv},
{"glProgramUniformMatrix4fv", (void *)skibidigfx_glProgramUniformMatrix4fv},
{"glProgramUniformMatrix2dv", (void *)skibidigfx_glProgramUniformMatrix2dv},
{"glProgramUniformMatrix3dv", (void *)skibidigfx_glProgramUniformMatrix3dv},
{"glProgramUniformMatrix4dv", (void *)skibidigfx_glProgramUniformMatrix4dv},
{"glProgramUniformMatrix2x3fv", (void *)skibidigfx_glProgramUniformMatrix2x3fv},
{"glProgramUniformMatrix3x2fv", (void *)skibidigfx_glProgramUniformMatrix3x2fv},
{"glProgramUniformMatrix2x4fv", (void *)skibidigfx_glProgramUniformMatrix2x4fv},
{"glProgramUniformMatrix4x2fv", (void *)skibidigfx_glProgramUniformMatrix4x2fv},
{"glProgramUniformMatrix3x4fv", (void *)skibidigfx_glProgramUniformMatrix3x4fv},
{"glProgramUniformMatrix4x3fv", (void *)skibidigfx_glProgramUniformMatrix4x3fv},
{"glProgramUniformMatrix2x3dv", (void *)skibidigfx_glProgramUniformMatrix2x3dv},
{"glProgramUniformMatrix3x2dv", (void *)skibidigfx_glProgramUniformMatrix3x2dv},
{"glProgramUniformMatrix2x4dv", (void *)skibidigfx_glProgramUniformMatrix2x4dv},
{"glProgramUniformMatrix4x2dv", (void *)skibidigfx_glProgramUniformMatrix4x2dv},
{"glProgramUniformMatrix3x4dv", (void *)skibidigfx_glProgramUniformMatrix3x4dv},
{"glProgramUniformMatrix4x3dv", (void *)skibidigfx_glProgramUniformMatrix4x3dv},
{"glValidateProgramPipeline", (void *)skibidigfx_glValidateProgramPipeline},
{"glGetProgramPipelineInfoLog", (void *)skibidigfx_glGetProgramPipelineInfoLog},
{"glVertexAttribL1d", (void *)skibidigfx_glVertexAttribL1d},
{"glVertexAttribL2d", (void *)skibidigfx_glVertexAttribL2d},
{"glVertexAttribL3d", (void *)skibidigfx_glVertexAttribL3d},
{"glVertexAttribL4d", (void *)skibidigfx_glVertexAttribL4d},
{"glVertexAttribL1dv", (void *)skibidigfx_glVertexAttribL1dv},
{"glVertexAttribL2dv", (void *)skibidigfx_glVertexAttribL2dv},
{"glVertexAttribL3dv", (void *)skibidigfx_glVertexAttribL3dv},
{"glVertexAttribL4dv", (void *)skibidigfx_glVertexAttribL4dv},
{"glVertexAttribLPointer", (void *)skibidigfx_glVertexAttribLPointer},
{"glGetVertexAttribLdv", (void *)skibidigfx_glGetVertexAttribLdv},
{"glViewportArrayv", (void *)skibidigfx_glViewportArrayv},
{"glViewportIndexedf", (void *)skibidigfx_glViewportIndexedf},
{"glViewportIndexedfv", (void *)skibidigfx_glViewportIndexedfv},
{"glScissorArrayv", (void *)skibidigfx_glScissorArrayv},
{"glScissorIndexed", (void *)skibidigfx_glScissorIndexed},
{"glScissorIndexedv", (void *)skibidigfx_glScissorIndexedv},
{"glDepthRangeArrayv", (void *)skibidigfx_glDepthRangeArrayv},
{"glDepthRangeIndexed", (void *)skibidigfx_glDepthRangeIndexed},
{"glGetFloati_v", (void *)skibidigfx_glGetFloati_v},
{"glGetDoublei_v", (void *)skibidigfx_glGetDoublei_v},
{"glDrawArraysInstancedBaseInstance", (void *)skibidigfx_glDrawArraysInstancedBaseInstance},
{"glDrawElementsInstancedBaseInstance", (void *)skibidigfx_glDrawElementsInstancedBaseInstance},
{"glDrawElementsInstancedBaseVertexBaseInstance", (void *)skibidigfx_glDrawElementsInstancedBaseVertexBaseInstance},
{"glGetInternalformativ", (void *)skibidigfx_glGetInternalformativ},
{"glGetActiveAtomicCounterBufferiv", (void *)skibidigfx_glGetActiveAtomicCounterBufferiv},
{"glBindImageTexture", (void *)skibidigfx_glBindImageTexture},
{"glMemoryBarrier", (void *)skibidigfx_glMemoryBarrier},
{"glTexStorage1D", (void *)skibidigfx_glTexStorage1D},
{"glTexStorage2D", (void *)skibidigfx_glTexStorage2D},
{"glTexStorage3D", (void *)skibidigfx_glTexStorage3D},
{"glDrawTransformFeedbackInstanced", (void *)skibidigfx_glDrawTransformFeedbackInstanced},
{"glDrawTransformFeedbackStreamInstanced", (void *)skibidigfx_glDrawTransformFeedbackStreamInstanced},
{"glClearBufferData", (void *)skibidigfx_glClearBufferData},
{"glClearBufferSubData", (void *)skibidigfx_glClearBufferSubData},
{"glDispatchCompute", (void *)skibidigfx_glDispatchCompute},
{"glDispatchComputeIndirect", (void *)skibidigfx_glDispatchComputeIndirect},
{"glCopyImageSubData", (void *)skibidigfx_glCopyImageSubData},
{"glFramebufferParameteri", (void *)skibidigfx_glFramebufferParameteri},
{"glGetFramebufferParameteriv", (void *)skibidigfx_glGetFramebufferParameteriv},
{"glGetInternalformati64v", (void *)skibidigfx_glGetInternalformati64v},
{"glInvalidateTexSubImage", (void *)skibidigfx_glInvalidateTexSubImage},
{"glInvalidateTexImage", (void *)skibidigfx_glInvalidateTexImage},
{"glInvalidateBufferSubData", (void *)skibidigfx_glInvalidateBufferSubData},
{"glInvalidateBufferData", (void *)skibidigfx_glInvalidateBufferData},
{"glInvalidateFramebuffer", (void *)skibidigfx_glInvalidateFramebuffer},
{"glInvalidateSubFramebuffer", (void *)skibidigfx_glInvalidateSubFramebuffer},
{"glMultiDrawArraysIndirect", (void *)skibidigfx_glMultiDrawArraysIndirect},
{"glMultiDrawElementsIndirect", (void *)skibidigfx_glMultiDrawElementsIndirect},
{"glGetProgramInterfaceiv", (void *)skibidigfx_glGetProgramInterfaceiv},
{"glGetProgramResourceIndex", (void *)skibidigfx_glGetProgramResourceIndex},
{"glGetProgramResourceName", (void *)skibidigfx_glGetProgramResourceName},
{"glGetProgramResourceiv", (void *)skibidigfx_glGetProgramResourceiv},
{"glGetProgramResourceLocation", (void *)skibidigfx_glGetProgramResourceLocation},
{"glGetProgramResourceLocationIndex", (void *)skibidigfx_glGetProgramResourceLocationIndex},
{"glShaderStorageBlockBinding", (void *)skibidigfx_glShaderStorageBlockBinding},
{"glTexBufferRange", (void *)skibidigfx_glTexBufferRange},
{"glTexStorage2DMultisample", (void *)skibidigfx_glTexStorage2DMultisample},
{"glTexStorage3DMultisample", (void *)skibidigfx_glTexStorage3DMultisample},
{"glTextureView", (void *)skibidigfx_glTextureView},
{"glBindVertexBuffer", (void *)skibidigfx_glBindVertexBuffer},
{"glVertexAttribFormat", (void *)skibidigfx_glVertexAttribFormat},
{"glVertexAttribIFormat", (void *)skibidigfx_glVertexAttribIFormat},
{"glVertexAttribLFormat", (void *)skibidigfx_glVertexAttribLFormat},
{"glVertexAttribBinding", (void *)skibidigfx_glVertexAttribBinding},
{"glVertexBindingDivisor", (void *)skibidigfx_glVertexBindingDivisor},
{"glDebugMessageControl", (void *)skibidigfx_glDebugMessageControl},
{"glDebugMessageInsert", (void *)skibidigfx_glDebugMessageInsert},
{"glDebugMessageCallback", (void *)skibidigfx_glDebugMessageCallback},
{"glGetDebugMessageLog", (void *)skibidigfx_glGetDebugMessageLog},
{"glPushDebugGroup", (void *)skibidigfx_glPushDebugGroup},
{"glPopDebugGroup", (void *)skibidigfx_glPopDebugGroup},
{"glObjectLabel", (void *)skibidigfx_glObjectLabel},
{"glGetObjectLabel", (void *)skibidigfx_glGetObjectLabel},
{"glObjectPtrLabel", (void *)skibidigfx_glObjectPtrLabel},
{"glGetObjectPtrLabel", (void *)skibidigfx_glGetObjectPtrLabel},
{"glBufferStorage", (void *)skibidigfx_glBufferStorage},
{"glClearTexImage", (void *)skibidigfx_glClearTexImage},
{"glClearTexSubImage", (void *)skibidigfx_glClearTexSubImage},
{"glBindBuffersBase", (void *)skibidigfx_glBindBuffersBase},
{"glBindBuffersRange", (void *)skibidigfx_glBindBuffersRange},
{"glBindTextures", (void *)skibidigfx_glBindTextures},
{"glBindSamplers", (void *)skibidigfx_glBindSamplers},
{"glBindImageTextures", (void *)skibidigfx_glBindImageTextures},
{"glBindVertexBuffers", (void *)skibidigfx_glBindVertexBuffers},
{"glClipControl", (void *)skibidigfx_glClipControl},
{"glCreateTransformFeedbacks", (void *)skibidigfx_glCreateTransformFeedbacks},
{"glTransformFeedbackBufferBase", (void *)skibidigfx_glTransformFeedbackBufferBase},
{"glTransformFeedbackBufferRange", (void *)skibidigfx_glTransformFeedbackBufferRange},
{"glGetTransformFeedbackiv", (void *)skibidigfx_glGetTransformFeedbackiv},
{"glGetTransformFeedbacki_v", (void *)skibidigfx_glGetTransformFeedbacki_v},
{"glGetTransformFeedbacki64_v", (void *)skibidigfx_glGetTransformFeedbacki64_v},
{"glCreateBuffers", (void *)skibidigfx_glCreateBuffers},
{"glNamedBufferStorage", (void *)skibidigfx_glNamedBufferStorage},
{"glNamedBufferData", (void *)skibidigfx_glNamedBufferData},
{"glNamedBufferSubData", (void *)skibidigfx_glNamedBufferSubData},
{"glCopyNamedBufferSubData", (void *)skibidigfx_glCopyNamedBufferSubData},
{"glClearNamedBufferData", (void *)skibidigfx_glClearNamedBufferData},
{"glClearNamedBufferSubData", (void *)skibidigfx_glClearNamedBufferSubData},
{"glMapNamedBuffer", (void *)skibidigfx_glMapNamedBuffer},
{"glMapNamedBufferRange", (void *)skibidigfx_glMapNamedBufferRange},
{"glUnmapNamedBuffer", (void *)skibidigfx_glUnmapNamedBuffer},
{"glFlushMappedNamedBufferRange", (void *)skibidigfx_glFlushMappedNamedBufferRange},
{"glGetNamedBufferParameteriv", (void *)skibidigfx_glGetNamedBufferParameteriv},
{"glGetNamedBufferParameteri64v", (void *)skibidigfx_glGetNamedBufferParameteri64v},
{"glGetNamedBufferPointerv", (void *)skibidigfx_glGetNamedBufferPointerv},
{"glGetNamedBufferSubData", (void *)skibidigfx_glGetNamedBufferSubData},
{"glCreateFramebuffers", (void *)skibidigfx_glCreateFramebuffers},
{"glNamedFramebufferRenderbuffer", (void *)skibidigfx_glNamedFramebufferRenderbuffer},
{"glNamedFramebufferParameteri", (void *)skibidigfx_glNamedFramebufferParameteri},
{"glNamedFramebufferTexture", (void *)skibidigfx_glNamedFramebufferTexture},
{"glNamedFramebufferTextureLayer", (void *)skibidigfx_glNamedFramebufferTextureLayer},
{"glNamedFramebufferDrawBuffer", (void *)skibidigfx_glNamedFramebufferDrawBuffer},
{"glNamedFramebufferDrawBuffers", (void *)skibidigfx_glNamedFramebufferDrawBuffers},
{"glNamedFramebufferReadBuffer", (void *)skibidigfx_glNamedFramebufferReadBuffer},
{"glInvalidateNamedFramebufferData", (void *)skibidigfx_glInvalidateNamedFramebufferData},
{"glInvalidateNamedFramebufferSubData", (void *)skibidigfx_glInvalidateNamedFramebufferSubData},
{"glClearNamedFramebufferiv", (void *)skibidigfx_glClearNamedFramebufferiv},
{"glClearNamedFramebufferuiv", (void *)skibidigfx_glClearNamedFramebufferuiv},
{"glClearNamedFramebufferfv", (void *)skibidigfx_glClearNamedFramebufferfv},
{"glClearNamedFramebufferfi", (void *)skibidigfx_glClearNamedFramebufferfi},
{"glBlitNamedFramebuffer", (void *)skibidigfx_glBlitNamedFramebuffer},
{"glCheckNamedFramebufferStatus", (void *)skibidigfx_glCheckNamedFramebufferStatus},
{"glGetNamedFramebufferParameteriv", (void *)skibidigfx_glGetNamedFramebufferParameteriv},
{"glGetNamedFramebufferAttachmentParameteriv", (void *)skibidigfx_glGetNamedFramebufferAttachmentParameteriv},
{"glCreateRenderbuffers", (void *)skibidigfx_glCreateRenderbuffers},
{"glNamedRenderbufferStorage", (void *)skibidigfx_glNamedRenderbufferStorage},
{"glNamedRenderbufferStorageMultisample", (void *)skibidigfx_glNamedRenderbufferStorageMultisample},
{"glGetNamedRenderbufferParameteriv", (void *)skibidigfx_glGetNamedRenderbufferParameteriv},
{"glCreateTextures", (void *)skibidigfx_glCreateTextures},
{"glTextureBuffer", (void *)skibidigfx_glTextureBuffer},
{"glTextureBufferRange", (void *)skibidigfx_glTextureBufferRange},
{"glTextureStorage1D", (void *)skibidigfx_glTextureStorage1D},
{"glTextureStorage2D", (void *)skibidigfx_glTextureStorage2D},
{"glTextureStorage3D", (void *)skibidigfx_glTextureStorage3D},
{"glTextureStorage2DMultisample", (void *)skibidigfx_glTextureStorage2DMultisample},
{"glTextureStorage3DMultisample", (void *)skibidigfx_glTextureStorage3DMultisample},
{"glTextureSubImage1D", (void *)skibidigfx_glTextureSubImage1D},
{"glTextureSubImage2D", (void *)skibidigfx_glTextureSubImage2D},
{"glTextureSubImage3D", (void *)skibidigfx_glTextureSubImage3D},
{"glCompressedTextureSubImage1D", (void *)skibidigfx_glCompressedTextureSubImage1D},
{"glCompressedTextureSubImage2D", (void *)skibidigfx_glCompressedTextureSubImage2D},
{"glCompressedTextureSubImage3D", (void *)skibidigfx_glCompressedTextureSubImage3D},
{"glCopyTextureSubImage1D", (void *)skibidigfx_glCopyTextureSubImage1D},
{"glCopyTextureSubImage2D", (void *)skibidigfx_glCopyTextureSubImage2D},
{"glCopyTextureSubImage3D", (void *)skibidigfx_glCopyTextureSubImage3D},
{"glTextureParameterf", (void *)skibidigfx_glTextureParameterf},
{"glTextureParameterfv", (void *)skibidigfx_glTextureParameterfv},
{"glTextureParameteri", (void *)skibidigfx_glTextureParameteri},
{"glTextureParameterIiv", (void *)skibidigfx_glTextureParameterIiv},
{"glTextureParameterIuiv", (void *)skibidigfx_glTextureParameterIuiv},
{"glTextureParameteriv", (void *)skibidigfx_glTextureParameteriv},
{"glGenerateTextureMipmap", (void *)skibidigfx_glGenerateTextureMipmap},
{"glBindTextureUnit", (void *)skibidigfx_glBindTextureUnit},
{"glGetTextureImage", (void *)skibidigfx_glGetTextureImage},
{"glGetCompressedTextureImage", (void *)skibidigfx_glGetCompressedTextureImage},
{"glGetTextureLevelParameterfv", (void *)skibidigfx_glGetTextureLevelParameterfv},
{"glGetTextureLevelParameteriv", (void *)skibidigfx_glGetTextureLevelParameteriv},
{"glGetTextureParameterfv", (void *)skibidigfx_glGetTextureParameterfv},
{"glGetTextureParameterIiv", (void *)skibidigfx_glGetTextureParameterIiv},
{"glGetTextureParameterIuiv", (void *)skibidigfx_glGetTextureParameterIuiv},
{"glGetTextureParameteriv", (void *)skibidigfx_glGetTextureParameteriv},
{"glCreateVertexArrays", (void *)skibidigfx_glCreateVertexArrays},
{"glDisableVertexArrayAttrib", (void *)skibidigfx_glDisableVertexArrayAttrib},
{"glEnableVertexArrayAttrib", (void *)skibidigfx_glEnableVertexArrayAttrib},
{"glVertexArrayElementBuffer", (void *)skibidigfx_glVertexArrayElementBuffer},
{"glVertexArrayVertexBuffer", (void *)skibidigfx_glVertexArrayVertexBuffer},
{"glVertexArrayVertexBuffers", (void *)skibidigfx_glVertexArrayVertexBuffers},
{"glVertexArrayAttribBinding", (void *)skibidigfx_glVertexArrayAttribBinding},
{"glVertexArrayAttribFormat", (void *)skibidigfx_glVertexArrayAttribFormat},
{"glVertexArrayAttribIFormat", (void *)skibidigfx_glVertexArrayAttribIFormat},
{"glVertexArrayAttribLFormat", (void *)skibidigfx_glVertexArrayAttribLFormat},
{"glVertexArrayBindingDivisor", (void *)skibidigfx_glVertexArrayBindingDivisor},
{"glGetVertexArrayiv", (void *)skibidigfx_glGetVertexArrayiv},
{"glGetVertexArrayIndexediv", (void *)skibidigfx_glGetVertexArrayIndexediv},
{"glGetVertexArrayIndexed64iv", (void *)skibidigfx_glGetVertexArrayIndexed64iv},
{"glCreateSamplers", (void *)skibidigfx_glCreateSamplers},
{"glCreateProgramPipelines", (void *)skibidigfx_glCreateProgramPipelines},
{"glCreateQueries", (void *)skibidigfx_glCreateQueries},
{"glGetQueryBufferObjecti64v", (void *)skibidigfx_glGetQueryBufferObjecti64v},
{"glGetQueryBufferObjectiv", (void *)skibidigfx_glGetQueryBufferObjectiv},
{"glGetQueryBufferObjectui64v", (void *)skibidigfx_glGetQueryBufferObjectui64v},
{"glGetQueryBufferObjectuiv", (void *)skibidigfx_glGetQueryBufferObjectuiv},
{"glMemoryBarrierByRegion", (void *)skibidigfx_glMemoryBarrierByRegion},
{"glGetTextureSubImage", (void *)skibidigfx_glGetTextureSubImage},
{"glGetCompressedTextureSubImage", (void *)skibidigfx_glGetCompressedTextureSubImage},
{"glGetGraphicsResetStatus", (void *)skibidigfx_glGetGraphicsResetStatus},
{"glGetnCompressedTexImage", (void *)skibidigfx_glGetnCompressedTexImage},
{"glGetnTexImage", (void *)skibidigfx_glGetnTexImage},
{"glGetnUniformdv", (void *)skibidigfx_glGetnUniformdv},
{"glGetnUniformfv", (void *)skibidigfx_glGetnUniformfv},
{"glGetnUniformiv", (void *)skibidigfx_glGetnUniformiv},
{"glGetnUniformuiv", (void *)skibidigfx_glGetnUniformuiv},
{"glReadnPixels", (void *)skibidigfx_glReadnPixels},
{"glGetnMapdv", (void *)skibidigfx_glGetnMapdv},
{"glGetnMapfv", (void *)skibidigfx_glGetnMapfv},
{"glGetnMapiv", (void *)skibidigfx_glGetnMapiv},
{"glGetnPixelMapfv", (void *)skibidigfx_glGetnPixelMapfv},
{"glGetnPixelMapuiv", (void *)skibidigfx_glGetnPixelMapuiv},
{"glGetnPixelMapusv", (void *)skibidigfx_glGetnPixelMapusv},
{"glGetnPolygonStipple", (void *)skibidigfx_glGetnPolygonStipple},
{"glGetnColorTable", (void *)skibidigfx_glGetnColorTable},
{"glGetnConvolutionFilter", (void *)skibidigfx_glGetnConvolutionFilter},
{"glGetnSeparableFilter", (void *)skibidigfx_glGetnSeparableFilter},
{"glGetnHistogram", (void *)skibidigfx_glGetnHistogram},
{"glGetnMinmax", (void *)skibidigfx_glGetnMinmax},
{"glTextureBarrier", (void *)skibidigfx_glTextureBarrier},
{"glSpecializeShader", (void *)skibidigfx_glSpecializeShader},
{"glMultiDrawArraysIndirectCount", (void *)skibidigfx_glMultiDrawArraysIndirectCount},
{"glMultiDrawElementsIndirectCount", (void *)skibidigfx_glMultiDrawElementsIndirectCount},
{"glPolygonOffsetClamp", (void *)skibidigfx_glPolygonOffsetClamp},
{"glPrimitiveBoundingBoxARB", (void *)skibidigfx_glPrimitiveBoundingBoxARB},
{"glGetTextureHandleARB", (void *)skibidigfx_glGetTextureHandleARB},
{"glGetTextureSamplerHandleARB", (void *)skibidigfx_glGetTextureSamplerHandleARB},
{"glMakeTextureHandleResidentARB", (void *)skibidigfx_glMakeTextureHandleResidentARB},
{"glMakeTextureHandleNonResidentARB", (void *)skibidigfx_glMakeTextureHandleNonResidentARB},
{"glGetImageHandleARB", (void *)skibidigfx_glGetImageHandleARB},
{"glMakeImageHandleResidentARB", (void *)skibidigfx_glMakeImageHandleResidentARB},
{"glMakeImageHandleNonResidentARB", (void *)skibidigfx_glMakeImageHandleNonResidentARB},
{"glUniformHandleui64ARB", (void *)skibidigfx_glUniformHandleui64ARB},
{"glUniformHandleui64vARB", (void *)skibidigfx_glUniformHandleui64vARB},
{"glProgramUniformHandleui64ARB", (void *)skibidigfx_glProgramUniformHandleui64ARB},
{"glProgramUniformHandleui64vARB", (void *)skibidigfx_glProgramUniformHandleui64vARB},
{"glIsTextureHandleResidentARB", (void *)skibidigfx_glIsTextureHandleResidentARB},
{"glIsImageHandleResidentARB", (void *)skibidigfx_glIsImageHandleResidentARB},
{"glVertexAttribL1ui64ARB", (void *)skibidigfx_glVertexAttribL1ui64ARB},
{"glVertexAttribL1ui64vARB", (void *)skibidigfx_glVertexAttribL1ui64vARB},
{"glGetVertexAttribLui64vARB", (void *)skibidigfx_glGetVertexAttribLui64vARB},
{"glCreateSyncFromCLeventARB", (void *)skibidigfx_glCreateSyncFromCLeventARB},
{"glClampColorARB", (void *)skibidigfx_glClampColorARB},
{"glDispatchComputeGroupSizeARB", (void *)skibidigfx_glDispatchComputeGroupSizeARB},
{"glDebugMessageControlARB", (void *)skibidigfx_glDebugMessageControlARB},
{"glDebugMessageInsertARB", (void *)skibidigfx_glDebugMessageInsertARB},
{"glDebugMessageCallbackARB", (void *)skibidigfx_glDebugMessageCallbackARB},
{"glGetDebugMessageLogARB", (void *)skibidigfx_glGetDebugMessageLogARB},
{"glDrawBuffersARB", (void *)skibidigfx_glDrawBuffersARB},
{"glBlendEquationiARB", (void *)skibidigfx_glBlendEquationiARB},
{"glBlendEquationSeparateiARB", (void *)skibidigfx_glBlendEquationSeparateiARB},
{"glBlendFunciARB", (void *)skibidigfx_glBlendFunciARB},
{"glBlendFuncSeparateiARB", (void *)skibidigfx_glBlendFuncSeparateiARB},
{"glDrawArraysInstancedARB", (void *)skibidigfx_glDrawArraysInstancedARB},
{"glDrawElementsInstancedARB", (void *)skibidigfx_glDrawElementsInstancedARB},
{"glProgramStringARB", (void *)skibidigfx_glProgramStringARB},
{"glBindProgramARB", (void *)skibidigfx_glBindProgramARB},
{"glDeleteProgramsARB", (void *)skibidigfx_glDeleteProgramsARB},
{"glGenProgramsARB", (void *)skibidigfx_glGenProgramsARB},
{"glProgramEnvParameter4dARB", (void *)skibidigfx_glProgramEnvParameter4dARB},
{"glProgramEnvParameter4dvARB", (void *)skibidigfx_glProgramEnvParameter4dvARB},
{"glProgramEnvParameter4fARB", (void *)skibidigfx_glProgramEnvParameter4fARB},
{"glProgramEnvParameter4fvARB", (void *)skibidigfx_glProgramEnvParameter4fvARB},
{"glProgramLocalParameter4dARB", (void *)skibidigfx_glProgramLocalParameter4dARB},
{"glProgramLocalParameter4dvARB", (void *)skibidigfx_glProgramLocalParameter4dvARB},
{"glProgramLocalParameter4fARB", (void *)skibidigfx_glProgramLocalParameter4fARB},
{"glProgramLocalParameter4fvARB", (void *)skibidigfx_glProgramLocalParameter4fvARB},
{"glGetProgramEnvParameterdvARB", (void *)skibidigfx_glGetProgramEnvParameterdvARB},
{"glGetProgramEnvParameterfvARB", (void *)skibidigfx_glGetProgramEnvParameterfvARB},
{"glGetProgramLocalParameterdvARB", (void *)skibidigfx_glGetProgramLocalParameterdvARB},
{"glGetProgramLocalParameterfvARB", (void *)skibidigfx_glGetProgramLocalParameterfvARB},
{"glGetProgramivARB", (void *)skibidigfx_glGetProgramivARB},
{"glGetProgramStringARB", (void *)skibidigfx_glGetProgramStringARB},
{"glIsProgramARB", (void *)skibidigfx_glIsProgramARB},
{"glProgramParameteriARB", (void *)skibidigfx_glProgramParameteriARB},
{"glFramebufferTextureARB", (void *)skibidigfx_glFramebufferTextureARB},
{"glFramebufferTextureLayerARB", (void *)skibidigfx_glFramebufferTextureLayerARB},
{"glFramebufferTextureFaceARB", (void *)skibidigfx_glFramebufferTextureFaceARB},
{"glSpecializeShaderARB", (void *)skibidigfx_glSpecializeShaderARB},
{"glUniform1i64ARB", (void *)skibidigfx_glUniform1i64ARB},
{"glUniform2i64ARB", (void *)skibidigfx_glUniform2i64ARB},
{"glUniform3i64ARB", (void *)skibidigfx_glUniform3i64ARB},
{"glUniform4i64ARB", (void *)skibidigfx_glUniform4i64ARB},
{"glUniform1i64vARB", (void *)skibidigfx_glUniform1i64vARB},
{"glUniform2i64vARB", (void *)skibidigfx_glUniform2i64vARB},
{"glUniform3i64vARB", (void *)skibidigfx_glUniform3i64vARB},
{"glUniform4i64vARB", (void *)skibidigfx_glUniform4i64vARB},
{"glUniform1ui64ARB", (void *)skibidigfx_glUniform1ui64ARB},
{"glUniform2ui64ARB", (void *)skibidigfx_glUniform2ui64ARB},
{"glUniform3ui64ARB", (void *)skibidigfx_glUniform3ui64ARB},
{"glUniform4ui64ARB", (void *)skibidigfx_glUniform4ui64ARB},
{"glUniform1ui64vARB", (void *)skibidigfx_glUniform1ui64vARB},
{"glUniform2ui64vARB", (void *)skibidigfx_glUniform2ui64vARB},
{"glUniform3ui64vARB", (void *)skibidigfx_glUniform3ui64vARB},
{"glUniform4ui64vARB", (void *)skibidigfx_glUniform4ui64vARB},
{"glGetUniformi64vARB", (void *)skibidigfx_glGetUniformi64vARB},
{"glGetUniformui64vARB", (void *)skibidigfx_glGetUniformui64vARB},
{"glGetnUniformi64vARB", (void *)skibidigfx_glGetnUniformi64vARB},
{"glGetnUniformui64vARB", (void *)skibidigfx_glGetnUniformui64vARB},
{"glProgramUniform1i64ARB", (void *)skibidigfx_glProgramUniform1i64ARB},
{"glProgramUniform2i64ARB", (void *)skibidigfx_glProgramUniform2i64ARB},
{"glProgramUniform3i64ARB", (void *)skibidigfx_glProgramUniform3i64ARB},
{"glProgramUniform4i64ARB", (void *)skibidigfx_glProgramUniform4i64ARB},
{"glProgramUniform1i64vARB", (void *)skibidigfx_glProgramUniform1i64vARB},
{"glProgramUniform2i64vARB", (void *)skibidigfx_glProgramUniform2i64vARB},
{"glProgramUniform3i64vARB", (void *)skibidigfx_glProgramUniform3i64vARB},
{"glProgramUniform4i64vARB", (void *)skibidigfx_glProgramUniform4i64vARB},
{"glProgramUniform1ui64ARB", (void *)skibidigfx_glProgramUniform1ui64ARB},
{"glProgramUniform2ui64ARB", (void *)skibidigfx_glProgramUniform2ui64ARB},
{"glProgramUniform3ui64ARB", (void *)skibidigfx_glProgramUniform3ui64ARB},
{"glProgramUniform4ui64ARB", (void *)skibidigfx_glProgramUniform4ui64ARB},
{"glProgramUniform1ui64vARB", (void *)skibidigfx_glProgramUniform1ui64vARB},
{"glProgramUniform2ui64vARB", (void *)skibidigfx_glProgramUniform2ui64vARB},
{"glProgramUniform3ui64vARB", (void *)skibidigfx_glProgramUniform3ui64vARB},
{"glProgramUniform4ui64vARB", (void *)skibidigfx_glProgramUniform4ui64vARB},
{"glColorTable", (void *)skibidigfx_glColorTable},
{"glColorTableParameterfv", (void *)skibidigfx_glColorTableParameterfv},
{"glColorTableParameteriv", (void *)skibidigfx_glColorTableParameteriv},
{"glCopyColorTable", (void *)skibidigfx_glCopyColorTable},
{"glGetColorTable", (void *)skibidigfx_glGetColorTable},
{"glGetColorTableParameterfv", (void *)skibidigfx_glGetColorTableParameterfv},
{"glGetColorTableParameteriv", (void *)skibidigfx_glGetColorTableParameteriv},
{"glColorSubTable", (void *)skibidigfx_glColorSubTable},
{"glCopyColorSubTable", (void *)skibidigfx_glCopyColorSubTable},
{"glConvolutionFilter1D", (void *)skibidigfx_glConvolutionFilter1D},
{"glConvolutionFilter2D", (void *)skibidigfx_glConvolutionFilter2D},
{"glConvolutionParameterf", (void *)skibidigfx_glConvolutionParameterf},
{"glConvolutionParameterfv", (void *)skibidigfx_glConvolutionParameterfv},
{"glConvolutionParameteri", (void *)skibidigfx_glConvolutionParameteri},
{"glConvolutionParameteriv", (void *)skibidigfx_glConvolutionParameteriv},
{"glCopyConvolutionFilter1D", (void *)skibidigfx_glCopyConvolutionFilter1D},
{"glCopyConvolutionFilter2D", (void *)skibidigfx_glCopyConvolutionFilter2D},
{"glGetConvolutionFilter", (void *)skibidigfx_glGetConvolutionFilter},
{"glGetConvolutionParameterfv", (void *)skibidigfx_glGetConvolutionParameterfv},
{"glGetConvolutionParameteriv", (void *)skibidigfx_glGetConvolutionParameteriv},
{"glGetSeparableFilter", (void *)skibidigfx_glGetSeparableFilter},
{"glSeparableFilter2D", (void *)skibidigfx_glSeparableFilter2D},
{"glGetHistogram", (void *)skibidigfx_glGetHistogram},
{"glGetHistogramParameterfv", (void *)skibidigfx_glGetHistogramParameterfv},
{"glGetHistogramParameteriv", (void *)skibidigfx_glGetHistogramParameteriv},
{"glGetMinmax", (void *)skibidigfx_glGetMinmax},
{"glGetMinmaxParameterfv", (void *)skibidigfx_glGetMinmaxParameterfv},
{"glGetMinmaxParameteriv", (void *)skibidigfx_glGetMinmaxParameteriv},
{"glHistogram", (void *)skibidigfx_glHistogram},
{"glMinmax", (void *)skibidigfx_glMinmax},
{"glResetHistogram", (void *)skibidigfx_glResetHistogram},
{"glResetMinmax", (void *)skibidigfx_glResetMinmax},
{"glMultiDrawArraysIndirectCountARB", (void *)skibidigfx_glMultiDrawArraysIndirectCountARB},
{"glMultiDrawElementsIndirectCountARB", (void *)skibidigfx_glMultiDrawElementsIndirectCountARB},
{"glVertexAttribDivisorARB", (void *)skibidigfx_glVertexAttribDivisorARB},
{"glCurrentPaletteMatrixARB", (void *)skibidigfx_glCurrentPaletteMatrixARB},
{"glMatrixIndexubvARB", (void *)skibidigfx_glMatrixIndexubvARB},
{"glMatrixIndexusvARB", (void *)skibidigfx_glMatrixIndexusvARB},
{"glMatrixIndexuivARB", (void *)skibidigfx_glMatrixIndexuivARB},
{"glMatrixIndexPointerARB", (void *)skibidigfx_glMatrixIndexPointerARB},
{"glSampleCoverageARB", (void *)skibidigfx_glSampleCoverageARB},
{"glActiveTextureARB", (void *)skibidigfx_glActiveTextureARB},
{"glClientActiveTextureARB", (void *)skibidigfx_glClientActiveTextureARB},
{"glMultiTexCoord1dARB", (void *)skibidigfx_glMultiTexCoord1dARB},
{"glMultiTexCoord1dvARB", (void *)skibidigfx_glMultiTexCoord1dvARB},
{"glMultiTexCoord1fARB", (void *)skibidigfx_glMultiTexCoord1fARB},
{"glMultiTexCoord1fvARB", (void *)skibidigfx_glMultiTexCoord1fvARB},
{"glMultiTexCoord1iARB", (void *)skibidigfx_glMultiTexCoord1iARB},
{"glMultiTexCoord1ivARB", (void *)skibidigfx_glMultiTexCoord1ivARB},
{"glMultiTexCoord1sARB", (void *)skibidigfx_glMultiTexCoord1sARB},
{"glMultiTexCoord1svARB", (void *)skibidigfx_glMultiTexCoord1svARB},
{"glMultiTexCoord2dARB", (void *)skibidigfx_glMultiTexCoord2dARB},
{"glMultiTexCoord2dvARB", (void *)skibidigfx_glMultiTexCoord2dvARB},
{"glMultiTexCoord2fARB", (void *)skibidigfx_glMultiTexCoord2fARB},
{"glMultiTexCoord2fvARB", (void *)skibidigfx_glMultiTexCoord2fvARB},
{"glMultiTexCoord2iARB", (void *)skibidigfx_glMultiTexCoord2iARB},
{"glMultiTexCoord2ivARB", (void *)skibidigfx_glMultiTexCoord2ivARB},
{"glMultiTexCoord2sARB", (void *)skibidigfx_glMultiTexCoord2sARB},
{"glMultiTexCoord2svARB", (void *)skibidigfx_glMultiTexCoord2svARB},
{"glMultiTexCoord3dARB", (void *)skibidigfx_glMultiTexCoord3dARB},
{"glMultiTexCoord3dvARB", (void *)skibidigfx_glMultiTexCoord3dvARB},
{"glMultiTexCoord3fARB", (void *)skibidigfx_glMultiTexCoord3fARB},
{"glMultiTexCoord3fvARB", (void *)skibidigfx_glMultiTexCoord3fvARB},
{"glMultiTexCoord3iARB", (void *)skibidigfx_glMultiTexCoord3iARB},
{"glMultiTexCoord3ivARB", (void *)skibidigfx_glMultiTexCoord3ivARB},
{"glMultiTexCoord3sARB", (void *)skibidigfx_glMultiTexCoord3sARB},
{"glMultiTexCoord3svARB", (void *)skibidigfx_glMultiTexCoord3svARB},
{"glMultiTexCoord4dARB", (void *)skibidigfx_glMultiTexCoord4dARB},
{"glMultiTexCoord4dvARB", (void *)skibidigfx_glMultiTexCoord4dvARB},
{"glMultiTexCoord4fARB", (void *)skibidigfx_glMultiTexCoord4fARB},
{"glMultiTexCoord4fvARB", (void *)skibidigfx_glMultiTexCoord4fvARB},
{"glMultiTexCoord4iARB", (void *)skibidigfx_glMultiTexCoord4iARB},
{"glMultiTexCoord4ivARB", (void *)skibidigfx_glMultiTexCoord4ivARB},
{"glMultiTexCoord4sARB", (void *)skibidigfx_glMultiTexCoord4sARB},
{"glMultiTexCoord4svARB", (void *)skibidigfx_glMultiTexCoord4svARB},
{"glGenQueriesARB", (void *)skibidigfx_glGenQueriesARB},
{"glDeleteQueriesARB", (void *)skibidigfx_glDeleteQueriesARB},
{"glIsQueryARB", (void *)skibidigfx_glIsQueryARB},
{"glBeginQueryARB", (void *)skibidigfx_glBeginQueryARB},
{"glEndQueryARB", (void *)skibidigfx_glEndQueryARB},
{"glGetQueryivARB", (void *)skibidigfx_glGetQueryivARB},
{"glGetQueryObjectivARB", (void *)skibidigfx_glGetQueryObjectivARB},
{"glGetQueryObjectuivARB", (void *)skibidigfx_glGetQueryObjectuivARB},
{"glMaxShaderCompilerThreadsARB", (void *)skibidigfx_glMaxShaderCompilerThreadsARB},
{"glPointParameterfARB", (void *)skibidigfx_glPointParameterfARB},
{"glPointParameterfvARB", (void *)skibidigfx_glPointParameterfvARB},
{"glGetGraphicsResetStatusARB", (void *)skibidigfx_glGetGraphicsResetStatusARB},
{"glGetnTexImageARB", (void *)skibidigfx_glGetnTexImageARB},
{"glReadnPixelsARB", (void *)skibidigfx_glReadnPixelsARB},
{"glGetnCompressedTexImageARB", (void *)skibidigfx_glGetnCompressedTexImageARB},
{"glGetnUniformfvARB", (void *)skibidigfx_glGetnUniformfvARB},
{"glGetnUniformivARB", (void *)skibidigfx_glGetnUniformivARB},
{"glGetnUniformuivARB", (void *)skibidigfx_glGetnUniformuivARB},
{"glGetnUniformdvARB", (void *)skibidigfx_glGetnUniformdvARB},
{"glGetnMapdvARB", (void *)skibidigfx_glGetnMapdvARB},
{"glGetnMapfvARB", (void *)skibidigfx_glGetnMapfvARB},
{"glGetnMapivARB", (void *)skibidigfx_glGetnMapivARB},
{"glGetnPixelMapfvARB", (void *)skibidigfx_glGetnPixelMapfvARB},
{"glGetnPixelMapuivARB", (void *)skibidigfx_glGetnPixelMapuivARB},
{"glGetnPixelMapusvARB", (void *)skibidigfx_glGetnPixelMapusvARB},
{"glGetnPolygonStippleARB", (void *)skibidigfx_glGetnPolygonStippleARB},
{"glGetnColorTableARB", (void *)skibidigfx_glGetnColorTableARB},
{"glGetnConvolutionFilterARB", (void *)skibidigfx_glGetnConvolutionFilterARB},
{"glGetnSeparableFilterARB", (void *)skibidigfx_glGetnSeparableFilterARB},
{"glGetnHistogramARB", (void *)skibidigfx_glGetnHistogramARB},
{"glGetnMinmaxARB", (void *)skibidigfx_glGetnMinmaxARB},
{"glFramebufferSampleLocationsfvARB", (void *)skibidigfx_glFramebufferSampleLocationsfvARB},
{"glNamedFramebufferSampleLocationsfvARB", (void *)skibidigfx_glNamedFramebufferSampleLocationsfvARB},
{"glEvaluateDepthValuesARB", (void *)skibidigfx_glEvaluateDepthValuesARB},
{"glMinSampleShadingARB", (void *)skibidigfx_glMinSampleShadingARB},
{"glDeleteObjectARB", (void *)skibidigfx_glDeleteObjectARB},
{"glGetHandleARB", (void *)skibidigfx_glGetHandleARB},
{"glDetachObjectARB", (void *)skibidigfx_glDetachObjectARB},
{"glCreateShaderObjectARB", (void *)skibidigfx_glCreateShaderObjectARB},
{"glShaderSourceARB", (void *)skibidigfx_glShaderSourceARB},
{"glCompileShaderARB", (void *)skibidigfx_glCompileShaderARB},
{"glCreateProgramObjectARB", (void *)skibidigfx_glCreateProgramObjectARB},
{"glAttachObjectARB", (void *)skibidigfx_glAttachObjectARB},
{"glLinkProgramARB", (void *)skibidigfx_glLinkProgramARB},
{"glUseProgramObjectARB", (void *)skibidigfx_glUseProgramObjectARB},
{"glValidateProgramARB", (void *)skibidigfx_glValidateProgramARB},
{"glUniform1fARB", (void *)skibidigfx_glUniform1fARB},
{"glUniform2fARB", (void *)skibidigfx_glUniform2fARB},
{"glUniform3fARB", (void *)skibidigfx_glUniform3fARB},
{"glUniform4fARB", (void *)skibidigfx_glUniform4fARB},
{"glUniform1iARB", (void *)skibidigfx_glUniform1iARB},
{"glUniform2iARB", (void *)skibidigfx_glUniform2iARB},
{"glUniform3iARB", (void *)skibidigfx_glUniform3iARB},
{"glUniform4iARB", (void *)skibidigfx_glUniform4iARB},
{"glUniform1fvARB", (void *)skibidigfx_glUniform1fvARB},
{"glUniform2fvARB", (void *)skibidigfx_glUniform2fvARB},
{"glUniform3fvARB", (void *)skibidigfx_glUniform3fvARB},
{"glUniform4fvARB", (void *)skibidigfx_glUniform4fvARB},
{"glUniform1ivARB", (void *)skibidigfx_glUniform1ivARB},
{"glUniform2ivARB", (void *)skibidigfx_glUniform2ivARB},
{"glUniform3ivARB", (void *)skibidigfx_glUniform3ivARB},
{"glUniform4ivARB", (void *)skibidigfx_glUniform4ivARB},
{"glUniformMatrix2fvARB", (void *)skibidigfx_glUniformMatrix2fvARB},
{"glUniformMatrix3fvARB", (void *)skibidigfx_glUniformMatrix3fvARB},
{"glUniformMatrix4fvARB", (void *)skibidigfx_glUniformMatrix4fvARB},
{"glGetObjectParameterfvARB", (void *)skibidigfx_glGetObjectParameterfvARB},
{"glGetObjectParameterivARB", (void *)skibidigfx_glGetObjectParameterivARB},
{"glGetInfoLogARB", (void *)skibidigfx_glGetInfoLogARB},
{"glGetAttachedObjectsARB", (void *)skibidigfx_glGetAttachedObjectsARB},
{"glGetUniformLocationARB", (void *)skibidigfx_glGetUniformLocationARB},
{"glGetActiveUniformARB", (void *)skibidigfx_glGetActiveUniformARB},
{"glGetUniformfvARB", (void *)skibidigfx_glGetUniformfvARB},
{"glGetUniformivARB", (void *)skibidigfx_glGetUniformivARB},
{"glGetShaderSourceARB", (void *)skibidigfx_glGetShaderSourceARB},
{"glNamedStringARB", (void *)skibidigfx_glNamedStringARB},
{"glDeleteNamedStringARB", (void *)skibidigfx_glDeleteNamedStringARB},
{"glCompileShaderIncludeARB", (void *)skibidigfx_glCompileShaderIncludeARB},
{"glIsNamedStringARB", (void *)skibidigfx_glIsNamedStringARB},
{"glGetNamedStringARB", (void *)skibidigfx_glGetNamedStringARB},
{"glGetNamedStringivARB", (void *)skibidigfx_glGetNamedStringivARB},
{"glBufferPageCommitmentARB", (void *)skibidigfx_glBufferPageCommitmentARB},
{"glNamedBufferPageCommitmentEXT", (void *)skibidigfx_glNamedBufferPageCommitmentEXT},
{"glNamedBufferPageCommitmentARB", (void *)skibidigfx_glNamedBufferPageCommitmentARB},
{"glTexPageCommitmentARB", (void *)skibidigfx_glTexPageCommitmentARB},
{"glTexBufferARB", (void *)skibidigfx_glTexBufferARB},
{"glCompressedTexImage3DARB", (void *)skibidigfx_glCompressedTexImage3DARB},
{"glCompressedTexImage2DARB", (void *)skibidigfx_glCompressedTexImage2DARB},
{"glCompressedTexImage1DARB", (void *)skibidigfx_glCompressedTexImage1DARB},
{"glCompressedTexSubImage3DARB", (void *)skibidigfx_glCompressedTexSubImage3DARB},
{"glCompressedTexSubImage2DARB", (void *)skibidigfx_glCompressedTexSubImage2DARB},
{"glCompressedTexSubImage1DARB", (void *)skibidigfx_glCompressedTexSubImage1DARB},
{"glGetCompressedTexImageARB", (void *)skibidigfx_glGetCompressedTexImageARB},
{"glLoadTransposeMatrixfARB", (void *)skibidigfx_glLoadTransposeMatrixfARB},
{"glLoadTransposeMatrixdARB", (void *)skibidigfx_glLoadTransposeMatrixdARB},
{"glMultTransposeMatrixfARB", (void *)skibidigfx_glMultTransposeMatrixfARB},
{"glMultTransposeMatrixdARB", (void *)skibidigfx_glMultTransposeMatrixdARB},
{"glWeightbvARB", (void *)skibidigfx_glWeightbvARB},
{"glWeightsvARB", (void *)skibidigfx_glWeightsvARB},
{"glWeightivARB", (void *)skibidigfx_glWeightivARB},
{"glWeightfvARB", (void *)skibidigfx_glWeightfvARB},
{"glWeightdvARB", (void *)skibidigfx_glWeightdvARB},
{"glWeightubvARB", (void *)skibidigfx_glWeightubvARB},
{"glWeightusvARB", (void *)skibidigfx_glWeightusvARB},
{"glWeightuivARB", (void *)skibidigfx_glWeightuivARB},
{"glWeightPointerARB", (void *)skibidigfx_glWeightPointerARB},
{"glVertexBlendARB", (void *)skibidigfx_glVertexBlendARB},
{"glBindBufferARB", (void *)skibidigfx_glBindBufferARB},
{"glDeleteBuffersARB", (void *)skibidigfx_glDeleteBuffersARB},
{"glGenBuffersARB", (void *)skibidigfx_glGenBuffersARB},
{"glIsBufferARB", (void *)skibidigfx_glIsBufferARB},
{"glBufferDataARB", (void *)skibidigfx_glBufferDataARB},
{"glBufferSubDataARB", (void *)skibidigfx_glBufferSubDataARB},
{"glGetBufferSubDataARB", (void *)skibidigfx_glGetBufferSubDataARB},
{"glMapBufferARB", (void *)skibidigfx_glMapBufferARB},
{"glUnmapBufferARB", (void *)skibidigfx_glUnmapBufferARB},
{"glGetBufferParameterivARB", (void *)skibidigfx_glGetBufferParameterivARB},
{"glGetBufferPointervARB", (void *)skibidigfx_glGetBufferPointervARB},
{"glVertexAttrib1dARB", (void *)skibidigfx_glVertexAttrib1dARB},
{"glVertexAttrib1dvARB", (void *)skibidigfx_glVertexAttrib1dvARB},
{"glVertexAttrib1fARB", (void *)skibidigfx_glVertexAttrib1fARB},
{"glVertexAttrib1fvARB", (void *)skibidigfx_glVertexAttrib1fvARB},
{"glVertexAttrib1sARB", (void *)skibidigfx_glVertexAttrib1sARB},
{"glVertexAttrib1svARB", (void *)skibidigfx_glVertexAttrib1svARB},
{"glVertexAttrib2dARB", (void *)skibidigfx_glVertexAttrib2dARB},
{"glVertexAttrib2dvARB", (void *)skibidigfx_glVertexAttrib2dvARB},
{"glVertexAttrib2fARB", (void *)skibidigfx_glVertexAttrib2fARB},
{"glVertexAttrib2fvARB", (void *)skibidigfx_glVertexAttrib2fvARB},
{"glVertexAttrib2sARB", (void *)skibidigfx_glVertexAttrib2sARB},
{"glVertexAttrib2svARB", (void *)skibidigfx_glVertexAttrib2svARB},
{"glVertexAttrib3dARB", (void *)skibidigfx_glVertexAttrib3dARB},
{"glVertexAttrib3dvARB", (void *)skibidigfx_glVertexAttrib3dvARB},
{"glVertexAttrib3fARB", (void *)skibidigfx_glVertexAttrib3fARB},
{"glVertexAttrib3fvARB", (void *)skibidigfx_glVertexAttrib3fvARB},
{"glVertexAttrib3sARB", (void *)skibidigfx_glVertexAttrib3sARB},
{"glVertexAttrib3svARB", (void *)skibidigfx_glVertexAttrib3svARB},
{"glVertexAttrib4NbvARB", (void *)skibidigfx_glVertexAttrib4NbvARB},
{"glVertexAttrib4NivARB", (void *)skibidigfx_glVertexAttrib4NivARB},
{"glVertexAttrib4NsvARB", (void *)skibidigfx_glVertexAttrib4NsvARB},
{"glVertexAttrib4NubARB", (void *)skibidigfx_glVertexAttrib4NubARB},
{"glVertexAttrib4NubvARB", (void *)skibidigfx_glVertexAttrib4NubvARB},
{"glVertexAttrib4NuivARB", (void *)skibidigfx_glVertexAttrib4NuivARB},
{"glVertexAttrib4NusvARB", (void *)skibidigfx_glVertexAttrib4NusvARB},
{"glVertexAttrib4bvARB", (void *)skibidigfx_glVertexAttrib4bvARB},
{"glVertexAttrib4dARB", (void *)skibidigfx_glVertexAttrib4dARB},
{"glVertexAttrib4dvARB", (void *)skibidigfx_glVertexAttrib4dvARB},
{"glVertexAttrib4fARB", (void *)skibidigfx_glVertexAttrib4fARB},
{"glVertexAttrib4fvARB", (void *)skibidigfx_glVertexAttrib4fvARB},
{"glVertexAttrib4ivARB", (void *)skibidigfx_glVertexAttrib4ivARB},
{"glVertexAttrib4sARB", (void *)skibidigfx_glVertexAttrib4sARB},
{"glVertexAttrib4svARB", (void *)skibidigfx_glVertexAttrib4svARB},
{"glVertexAttrib4ubvARB", (void *)skibidigfx_glVertexAttrib4ubvARB},
{"glVertexAttrib4uivARB", (void *)skibidigfx_glVertexAttrib4uivARB},
{"glVertexAttrib4usvARB", (void *)skibidigfx_glVertexAttrib4usvARB},
{"glVertexAttribPointerARB", (void *)skibidigfx_glVertexAttribPointerARB},
{"glEnableVertexAttribArrayARB", (void *)skibidigfx_glEnableVertexAttribArrayARB},
{"glDisableVertexAttribArrayARB", (void *)skibidigfx_glDisableVertexAttribArrayARB},
{"glGetVertexAttribdvARB", (void *)skibidigfx_glGetVertexAttribdvARB},
{"glGetVertexAttribfvARB", (void *)skibidigfx_glGetVertexAttribfvARB},
{"glGetVertexAttribivARB", (void *)skibidigfx_glGetVertexAttribivARB},
{"glGetVertexAttribPointervARB", (void *)skibidigfx_glGetVertexAttribPointervARB},
{"glBindAttribLocationARB", (void *)skibidigfx_glBindAttribLocationARB},
{"glGetActiveAttribARB", (void *)skibidigfx_glGetActiveAttribARB},
{"glGetAttribLocationARB", (void *)skibidigfx_glGetAttribLocationARB},
{"glWindowPos2dARB", (void *)skibidigfx_glWindowPos2dARB},
{"glWindowPos2dvARB", (void *)skibidigfx_glWindowPos2dvARB},
{"glWindowPos2fARB", (void *)skibidigfx_glWindowPos2fARB},
{"glWindowPos2fvARB", (void *)skibidigfx_glWindowPos2fvARB},
{"glWindowPos2iARB", (void *)skibidigfx_glWindowPos2iARB},
{"glWindowPos2ivARB", (void *)skibidigfx_glWindowPos2ivARB},
{"glWindowPos2sARB", (void *)skibidigfx_glWindowPos2sARB},
{"glWindowPos2svARB", (void *)skibidigfx_glWindowPos2svARB},
{"glWindowPos3dARB", (void *)skibidigfx_glWindowPos3dARB},
{"glWindowPos3dvARB", (void *)skibidigfx_glWindowPos3dvARB},
{"glWindowPos3fARB", (void *)skibidigfx_glWindowPos3fARB},
{"glWindowPos3fvARB", (void *)skibidigfx_glWindowPos3fvARB},
{"glWindowPos3iARB", (void *)skibidigfx_glWindowPos3iARB},
{"glWindowPos3ivARB", (void *)skibidigfx_glWindowPos3ivARB},
{"glWindowPos3sARB", (void *)skibidigfx_glWindowPos3sARB},
{"glWindowPos3svARB", (void *)skibidigfx_glWindowPos3svARB},
{"glBlendBarrierKHR", (void *)skibidigfx_glBlendBarrierKHR},
{"glMaxShaderCompilerThreadsKHR", (void *)skibidigfx_glMaxShaderCompilerThreadsKHR},
{"glMultiTexCoord1bOES", (void *)skibidigfx_glMultiTexCoord1bOES},
{"glMultiTexCoord1bvOES", (void *)skibidigfx_glMultiTexCoord1bvOES},
{"glMultiTexCoord2bOES", (void *)skibidigfx_glMultiTexCoord2bOES},
{"glMultiTexCoord2bvOES", (void *)skibidigfx_glMultiTexCoord2bvOES},
{"glMultiTexCoord3bOES", (void *)skibidigfx_glMultiTexCoord3bOES},
{"glMultiTexCoord3bvOES", (void *)skibidigfx_glMultiTexCoord3bvOES},
{"glMultiTexCoord4bOES", (void *)skibidigfx_glMultiTexCoord4bOES},
{"glMultiTexCoord4bvOES", (void *)skibidigfx_glMultiTexCoord4bvOES},
{"glTexCoord1bOES", (void *)skibidigfx_glTexCoord1bOES},
{"glTexCoord1bvOES", (void *)skibidigfx_glTexCoord1bvOES},
{"glTexCoord2bOES", (void *)skibidigfx_glTexCoord2bOES},
{"glTexCoord2bvOES", (void *)skibidigfx_glTexCoord2bvOES},
{"glTexCoord3bOES", (void *)skibidigfx_glTexCoord3bOES},
{"glTexCoord3bvOES", (void *)skibidigfx_glTexCoord3bvOES},
{"glTexCoord4bOES", (void *)skibidigfx_glTexCoord4bOES},
{"glTexCoord4bvOES", (void *)skibidigfx_glTexCoord4bvOES},
{"glVertex2bOES", (void *)skibidigfx_glVertex2bOES},
{"glVertex2bvOES", (void *)skibidigfx_glVertex2bvOES},
{"glVertex3bOES", (void *)skibidigfx_glVertex3bOES},
{"glVertex3bvOES", (void *)skibidigfx_glVertex3bvOES},
{"glVertex4bOES", (void *)skibidigfx_glVertex4bOES},
{"glVertex4bvOES", (void *)skibidigfx_glVertex4bvOES},
{"glAlphaFuncxOES", (void *)skibidigfx_glAlphaFuncxOES},
{"glClearColorxOES", (void *)skibidigfx_glClearColorxOES},
{"glClearDepthxOES", (void *)skibidigfx_glClearDepthxOES},
{"glClipPlanexOES", (void *)skibidigfx_glClipPlanexOES},
{"glColor4xOES", (void *)skibidigfx_glColor4xOES},
{"glDepthRangexOES", (void *)skibidigfx_glDepthRangexOES},
{"glFogxOES", (void *)skibidigfx_glFogxOES},
{"glFogxvOES", (void *)skibidigfx_glFogxvOES},
{"glFrustumxOES", (void *)skibidigfx_glFrustumxOES},
{"glGetClipPlanexOES", (void *)skibidigfx_glGetClipPlanexOES},
{"glGetFixedvOES", (void *)skibidigfx_glGetFixedvOES},
{"glGetTexEnvxvOES", (void *)skibidigfx_glGetTexEnvxvOES},
{"glGetTexParameterxvOES", (void *)skibidigfx_glGetTexParameterxvOES},
{"glLightModelxOES", (void *)skibidigfx_glLightModelxOES},
{"glLightModelxvOES", (void *)skibidigfx_glLightModelxvOES},
{"glLightxOES", (void *)skibidigfx_glLightxOES},
{"glLightxvOES", (void *)skibidigfx_glLightxvOES},
{"glLineWidthxOES", (void *)skibidigfx_glLineWidthxOES},
{"glLoadMatrixxOES", (void *)skibidigfx_glLoadMatrixxOES},
{"glMaterialxOES", (void *)skibidigfx_glMaterialxOES},
{"glMaterialxvOES", (void *)skibidigfx_glMaterialxvOES},
{"glMultMatrixxOES", (void *)skibidigfx_glMultMatrixxOES},
{"glMultiTexCoord4xOES", (void *)skibidigfx_glMultiTexCoord4xOES},
{"glNormal3xOES", (void *)skibidigfx_glNormal3xOES},
{"glOrthoxOES", (void *)skibidigfx_glOrthoxOES},
{"glPointParameterxvOES", (void *)skibidigfx_glPointParameterxvOES},
{"glPointSizexOES", (void *)skibidigfx_glPointSizexOES},
{"glPolygonOffsetxOES", (void *)skibidigfx_glPolygonOffsetxOES},
{"glRotatexOES", (void *)skibidigfx_glRotatexOES},
{"glScalexOES", (void *)skibidigfx_glScalexOES},
{"glTexEnvxOES", (void *)skibidigfx_glTexEnvxOES},
{"glTexEnvxvOES", (void *)skibidigfx_glTexEnvxvOES},
{"glTexParameterxOES", (void *)skibidigfx_glTexParameterxOES},
{"glTexParameterxvOES", (void *)skibidigfx_glTexParameterxvOES},
{"glTranslatexOES", (void *)skibidigfx_glTranslatexOES},
{"glAccumxOES", (void *)skibidigfx_glAccumxOES},
{"glBitmapxOES", (void *)skibidigfx_glBitmapxOES},
{"glBlendColorxOES", (void *)skibidigfx_glBlendColorxOES},
{"glClearAccumxOES", (void *)skibidigfx_glClearAccumxOES},
{"glColor3xOES", (void *)skibidigfx_glColor3xOES},
{"glColor3xvOES", (void *)skibidigfx_glColor3xvOES},
{"glColor4xvOES", (void *)skibidigfx_glColor4xvOES},
{"glConvolutionParameterxOES", (void *)skibidigfx_glConvolutionParameterxOES},
{"glConvolutionParameterxvOES", (void *)skibidigfx_glConvolutionParameterxvOES},
{"glEvalCoord1xOES", (void *)skibidigfx_glEvalCoord1xOES},
{"glEvalCoord1xvOES", (void *)skibidigfx_glEvalCoord1xvOES},
{"glEvalCoord2xOES", (void *)skibidigfx_glEvalCoord2xOES},
{"glEvalCoord2xvOES", (void *)skibidigfx_glEvalCoord2xvOES},
{"glFeedbackBufferxOES", (void *)skibidigfx_glFeedbackBufferxOES},
{"glGetConvolutionParameterxvOES", (void *)skibidigfx_glGetConvolutionParameterxvOES},
{"glGetHistogramParameterxvOES", (void *)skibidigfx_glGetHistogramParameterxvOES},
{"glGetLightxOES", (void *)skibidigfx_glGetLightxOES},
{"glGetMapxvOES", (void *)skibidigfx_glGetMapxvOES},
{"glGetMaterialxOES", (void *)skibidigfx_glGetMaterialxOES},
{"glGetPixelMapxv", (void *)skibidigfx_glGetPixelMapxv},
{"glGetTexGenxvOES", (void *)skibidigfx_glGetTexGenxvOES},
{"glGetTexLevelParameterxvOES", (void *)skibidigfx_glGetTexLevelParameterxvOES},
{"glIndexxOES", (void *)skibidigfx_glIndexxOES},
{"glIndexxvOES", (void *)skibidigfx_glIndexxvOES},
{"glLoadTransposeMatrixxOES", (void *)skibidigfx_glLoadTransposeMatrixxOES},
{"glMap1xOES", (void *)skibidigfx_glMap1xOES},
{"glMap2xOES", (void *)skibidigfx_glMap2xOES},
{"glMapGrid1xOES", (void *)skibidigfx_glMapGrid1xOES},
{"glMapGrid2xOES", (void *)skibidigfx_glMapGrid2xOES},
{"glMultTransposeMatrixxOES", (void *)skibidigfx_glMultTransposeMatrixxOES},
{"glMultiTexCoord1xOES", (void *)skibidigfx_glMultiTexCoord1xOES},
{"glMultiTexCoord1xvOES", (void *)skibidigfx_glMultiTexCoord1xvOES},
{"glMultiTexCoord2xOES", (void *)skibidigfx_glMultiTexCoord2xOES},
{"glMultiTexCoord2xvOES", (void *)skibidigfx_glMultiTexCoord2xvOES},
{"glMultiTexCoord3xOES", (void *)skibidigfx_glMultiTexCoord3xOES},
{"glMultiTexCoord3xvOES", (void *)skibidigfx_glMultiTexCoord3xvOES},
{"glMultiTexCoord4xvOES", (void *)skibidigfx_glMultiTexCoord4xvOES},
{"glNormal3xvOES", (void *)skibidigfx_glNormal3xvOES},
{"glPassThroughxOES", (void *)skibidigfx_glPassThroughxOES},
{"glPixelMapx", (void *)skibidigfx_glPixelMapx},
{"glPixelStorex", (void *)skibidigfx_glPixelStorex},
{"glPixelTransferxOES", (void *)skibidigfx_glPixelTransferxOES},
{"glPixelZoomxOES", (void *)skibidigfx_glPixelZoomxOES},
{"glPrioritizeTexturesxOES", (void *)skibidigfx_glPrioritizeTexturesxOES},
{"glRasterPos2xOES", (void *)skibidigfx_glRasterPos2xOES},
{"glRasterPos2xvOES", (void *)skibidigfx_glRasterPos2xvOES},
{"glRasterPos3xOES", (void *)skibidigfx_glRasterPos3xOES},
{"glRasterPos3xvOES", (void *)skibidigfx_glRasterPos3xvOES},
{"glRasterPos4xOES", (void *)skibidigfx_glRasterPos4xOES},
{"glRasterPos4xvOES", (void *)skibidigfx_glRasterPos4xvOES},
{"glRectxOES", (void *)skibidigfx_glRectxOES},
{"glRectxvOES", (void *)skibidigfx_glRectxvOES},
{"glTexCoord1xOES", (void *)skibidigfx_glTexCoord1xOES},
{"glTexCoord1xvOES", (void *)skibidigfx_glTexCoord1xvOES},
{"glTexCoord2xOES", (void *)skibidigfx_glTexCoord2xOES},
{"glTexCoord2xvOES", (void *)skibidigfx_glTexCoord2xvOES},
{"glTexCoord3xOES", (void *)skibidigfx_glTexCoord3xOES},
{"glTexCoord3xvOES", (void *)skibidigfx_glTexCoord3xvOES},
{"glTexCoord4xOES", (void *)skibidigfx_glTexCoord4xOES},
{"glTexCoord4xvOES", (void *)skibidigfx_glTexCoord4xvOES},
{"glTexGenxOES", (void *)skibidigfx_glTexGenxOES},
{"glTexGenxvOES", (void *)skibidigfx_glTexGenxvOES},
{"glVertex2xOES", (void *)skibidigfx_glVertex2xOES},
{"glVertex2xvOES", (void *)skibidigfx_glVertex2xvOES},
{"glVertex3xOES", (void *)skibidigfx_glVertex3xOES},
{"glVertex3xvOES", (void *)skibidigfx_glVertex3xvOES},
{"glVertex4xOES", (void *)skibidigfx_glVertex4xOES},
{"glVertex4xvOES", (void *)skibidigfx_glVertex4xvOES},
{"glQueryMatrixxOES", (void *)skibidigfx_glQueryMatrixxOES},
{"glClearDepthfOES", (void *)skibidigfx_glClearDepthfOES},
{"glClipPlanefOES", (void *)skibidigfx_glClipPlanefOES},
{"glDepthRangefOES", (void *)skibidigfx_glDepthRangefOES},
{"glFrustumfOES", (void *)skibidigfx_glFrustumfOES},
{"glGetClipPlanefOES", (void *)skibidigfx_glGetClipPlanefOES},
{"glOrthofOES", (void *)skibidigfx_glOrthofOES},
{"glTbufferMask3DFX", (void *)skibidigfx_glTbufferMask3DFX},
{"glDebugMessageEnableAMD", (void *)skibidigfx_glDebugMessageEnableAMD},
{"glDebugMessageInsertAMD", (void *)skibidigfx_glDebugMessageInsertAMD},
{"glDebugMessageCallbackAMD", (void *)skibidigfx_glDebugMessageCallbackAMD},
{"glGetDebugMessageLogAMD", (void *)skibidigfx_glGetDebugMessageLogAMD},
{"glBlendFuncIndexedAMD", (void *)skibidigfx_glBlendFuncIndexedAMD},
{"glBlendFuncSeparateIndexedAMD", (void *)skibidigfx_glBlendFuncSeparateIndexedAMD},
{"glBlendEquationIndexedAMD", (void *)skibidigfx_glBlendEquationIndexedAMD},
{"glBlendEquationSeparateIndexedAMD", (void *)skibidigfx_glBlendEquationSeparateIndexedAMD},
{"glRenderbufferStorageMultisampleAdvancedAMD", (void *)skibidigfx_glRenderbufferStorageMultisampleAdvancedAMD},
{"glNamedRenderbufferStorageMultisampleAdvancedAMD", (void *)skibidigfx_glNamedRenderbufferStorageMultisampleAdvancedAMD},
{"glFramebufferSamplePositionsfvAMD", (void *)skibidigfx_glFramebufferSamplePositionsfvAMD},
{"glNamedFramebufferSamplePositionsfvAMD", (void *)skibidigfx_glNamedFramebufferSamplePositionsfvAMD},
{"glGetFramebufferParameterfvAMD", (void *)skibidigfx_glGetFramebufferParameterfvAMD},
{"glGetNamedFramebufferParameterfvAMD", (void *)skibidigfx_glGetNamedFramebufferParameterfvAMD},
{"glUniform1i64NV", (void *)skibidigfx_glUniform1i64NV},
{"glUniform2i64NV", (void *)skibidigfx_glUniform2i64NV},
{"glUniform3i64NV", (void *)skibidigfx_glUniform3i64NV},
{"glUniform4i64NV", (void *)skibidigfx_glUniform4i64NV},
{"glUniform1i64vNV", (void *)skibidigfx_glUniform1i64vNV},
{"glUniform2i64vNV", (void *)skibidigfx_glUniform2i64vNV},
{"glUniform3i64vNV", (void *)skibidigfx_glUniform3i64vNV},
{"glUniform4i64vNV", (void *)skibidigfx_glUniform4i64vNV},
{"glUniform1ui64NV", (void *)skibidigfx_glUniform1ui64NV},
{"glUniform2ui64NV", (void *)skibidigfx_glUniform2ui64NV},
{"glUniform3ui64NV", (void *)skibidigfx_glUniform3ui64NV},
{"glUniform4ui64NV", (void *)skibidigfx_glUniform4ui64NV},
{"glUniform1ui64vNV", (void *)skibidigfx_glUniform1ui64vNV},
{"glUniform2ui64vNV", (void *)skibidigfx_glUniform2ui64vNV},
{"glUniform3ui64vNV", (void *)skibidigfx_glUniform3ui64vNV},
{"glUniform4ui64vNV", (void *)skibidigfx_glUniform4ui64vNV},
{"glGetUniformi64vNV", (void *)skibidigfx_glGetUniformi64vNV},
{"glGetUniformui64vNV", (void *)skibidigfx_glGetUniformui64vNV},
{"glProgramUniform1i64NV", (void *)skibidigfx_glProgramUniform1i64NV},
{"glProgramUniform2i64NV", (void *)skibidigfx_glProgramUniform2i64NV},
{"glProgramUniform3i64NV", (void *)skibidigfx_glProgramUniform3i64NV},
{"glProgramUniform4i64NV", (void *)skibidigfx_glProgramUniform4i64NV},
{"glProgramUniform1i64vNV", (void *)skibidigfx_glProgramUniform1i64vNV},
{"glProgramUniform2i64vNV", (void *)skibidigfx_glProgramUniform2i64vNV},
{"glProgramUniform3i64vNV", (void *)skibidigfx_glProgramUniform3i64vNV},
{"glProgramUniform4i64vNV", (void *)skibidigfx_glProgramUniform4i64vNV},
{"glProgramUniform1ui64NV", (void *)skibidigfx_glProgramUniform1ui64NV},
{"glProgramUniform2ui64NV", (void *)skibidigfx_glProgramUniform2ui64NV},
{"glProgramUniform3ui64NV", (void *)skibidigfx_glProgramUniform3ui64NV},
{"glProgramUniform4ui64NV", (void *)skibidigfx_glProgramUniform4ui64NV},
{"glProgramUniform1ui64vNV", (void *)skibidigfx_glProgramUniform1ui64vNV},
{"glProgramUniform2ui64vNV", (void *)skibidigfx_glProgramUniform2ui64vNV},
{"glProgramUniform3ui64vNV", (void *)skibidigfx_glProgramUniform3ui64vNV},
{"glProgramUniform4ui64vNV", (void *)skibidigfx_glProgramUniform4ui64vNV},
{"glVertexAttribParameteriAMD", (void *)skibidigfx_glVertexAttribParameteriAMD},
{"glMultiDrawArraysIndirectAMD", (void *)skibidigfx_glMultiDrawArraysIndirectAMD},
{"glMultiDrawElementsIndirectAMD", (void *)skibidigfx_glMultiDrawElementsIndirectAMD},
{"glGenNamesAMD", (void *)skibidigfx_glGenNamesAMD},
{"glDeleteNamesAMD", (void *)skibidigfx_glDeleteNamesAMD},
{"glIsNameAMD", (void *)skibidigfx_glIsNameAMD},
{"glQueryObjectParameteruiAMD", (void *)skibidigfx_glQueryObjectParameteruiAMD},
{"glGetPerfMonitorGroupsAMD", (void *)skibidigfx_glGetPerfMonitorGroupsAMD},
{"glGetPerfMonitorCountersAMD", (void *)skibidigfx_glGetPerfMonitorCountersAMD},
{"glGetPerfMonitorGroupStringAMD", (void *)skibidigfx_glGetPerfMonitorGroupStringAMD},
{"glGetPerfMonitorCounterStringAMD", (void *)skibidigfx_glGetPerfMonitorCounterStringAMD},
{"glGetPerfMonitorCounterInfoAMD", (void *)skibidigfx_glGetPerfMonitorCounterInfoAMD},
{"glGenPerfMonitorsAMD", (void *)skibidigfx_glGenPerfMonitorsAMD},
{"glDeletePerfMonitorsAMD", (void *)skibidigfx_glDeletePerfMonitorsAMD},
{"glSelectPerfMonitorCountersAMD", (void *)skibidigfx_glSelectPerfMonitorCountersAMD},
{"glBeginPerfMonitorAMD", (void *)skibidigfx_glBeginPerfMonitorAMD},
{"glEndPerfMonitorAMD", (void *)skibidigfx_glEndPerfMonitorAMD},
{"glGetPerfMonitorCounterDataAMD", (void *)skibidigfx_glGetPerfMonitorCounterDataAMD},
{"glSetMultisamplefvAMD", (void *)skibidigfx_glSetMultisamplefvAMD},
{"glTexStorageSparseAMD", (void *)skibidigfx_glTexStorageSparseAMD},
{"glTextureStorageSparseAMD", (void *)skibidigfx_glTextureStorageSparseAMD},
{"glStencilOpValueAMD", (void *)skibidigfx_glStencilOpValueAMD},
{"glTessellationFactorAMD", (void *)skibidigfx_glTessellationFactorAMD},
{"glTessellationModeAMD", (void *)skibidigfx_glTessellationModeAMD},
{"glElementPointerAPPLE", (void *)skibidigfx_glElementPointerAPPLE},
{"glDrawElementArrayAPPLE", (void *)skibidigfx_glDrawElementArrayAPPLE},
{"glDrawRangeElementArrayAPPLE", (void *)skibidigfx_glDrawRangeElementArrayAPPLE},
{"glMultiDrawElementArrayAPPLE", (void *)skibidigfx_glMultiDrawElementArrayAPPLE},
{"glMultiDrawRangeElementArrayAPPLE", (void *)skibidigfx_glMultiDrawRangeElementArrayAPPLE},
{"glGenFencesAPPLE", (void *)skibidigfx_glGenFencesAPPLE},
{"glDeleteFencesAPPLE", (void *)skibidigfx_glDeleteFencesAPPLE},
{"glSetFenceAPPLE", (void *)skibidigfx_glSetFenceAPPLE},
{"glIsFenceAPPLE", (void *)skibidigfx_glIsFenceAPPLE},
{"glTestFenceAPPLE", (void *)skibidigfx_glTestFenceAPPLE},
{"glFinishFenceAPPLE", (void *)skibidigfx_glFinishFenceAPPLE},
{"glTestObjectAPPLE", (void *)skibidigfx_glTestObjectAPPLE},
{"glFinishObjectAPPLE", (void *)skibidigfx_glFinishObjectAPPLE},
{"glBufferParameteriAPPLE", (void *)skibidigfx_glBufferParameteriAPPLE},
{"glFlushMappedBufferRangeAPPLE", (void *)skibidigfx_glFlushMappedBufferRangeAPPLE},
{"glObjectPurgeableAPPLE", (void *)skibidigfx_glObjectPurgeableAPPLE},
{"glObjectUnpurgeableAPPLE", (void *)skibidigfx_glObjectUnpurgeableAPPLE},
{"glGetObjectParameterivAPPLE", (void *)skibidigfx_glGetObjectParameterivAPPLE},
{"glTextureRangeAPPLE", (void *)skibidigfx_glTextureRangeAPPLE},
{"glGetTexParameterPointervAPPLE", (void *)skibidigfx_glGetTexParameterPointervAPPLE},
{"glBindVertexArrayAPPLE", (void *)skibidigfx_glBindVertexArrayAPPLE},
{"glDeleteVertexArraysAPPLE", (void *)skibidigfx_glDeleteVertexArraysAPPLE},
{"glGenVertexArraysAPPLE", (void *)skibidigfx_glGenVertexArraysAPPLE},
{"glIsVertexArrayAPPLE", (void *)skibidigfx_glIsVertexArrayAPPLE},
{"glVertexArrayRangeAPPLE", (void *)skibidigfx_glVertexArrayRangeAPPLE},
{"glFlushVertexArrayRangeAPPLE", (void *)skibidigfx_glFlushVertexArrayRangeAPPLE},
{"glVertexArrayParameteriAPPLE", (void *)skibidigfx_glVertexArrayParameteriAPPLE},
{"glEnableVertexAttribAPPLE", (void *)skibidigfx_glEnableVertexAttribAPPLE},
{"glDisableVertexAttribAPPLE", (void *)skibidigfx_glDisableVertexAttribAPPLE},
{"glIsVertexAttribEnabledAPPLE", (void *)skibidigfx_glIsVertexAttribEnabledAPPLE},
{"glMapVertexAttrib1dAPPLE", (void *)skibidigfx_glMapVertexAttrib1dAPPLE},
{"glMapVertexAttrib1fAPPLE", (void *)skibidigfx_glMapVertexAttrib1fAPPLE},
{"glMapVertexAttrib2dAPPLE", (void *)skibidigfx_glMapVertexAttrib2dAPPLE},
{"glMapVertexAttrib2fAPPLE", (void *)skibidigfx_glMapVertexAttrib2fAPPLE},
{"glDrawBuffersATI", (void *)skibidigfx_glDrawBuffersATI},
{"glElementPointerATI", (void *)skibidigfx_glElementPointerATI},
{"glDrawElementArrayATI", (void *)skibidigfx_glDrawElementArrayATI},
{"glDrawRangeElementArrayATI", (void *)skibidigfx_glDrawRangeElementArrayATI},
{"glTexBumpParameterivATI", (void *)skibidigfx_glTexBumpParameterivATI},
{"glTexBumpParameterfvATI", (void *)skibidigfx_glTexBumpParameterfvATI},
{"glGetTexBumpParameterivATI", (void *)skibidigfx_glGetTexBumpParameterivATI},
{"glGetTexBumpParameterfvATI", (void *)skibidigfx_glGetTexBumpParameterfvATI},
{"glGenFragmentShadersATI", (void *)skibidigfx_glGenFragmentShadersATI},
{"glBindFragmentShaderATI", (void *)skibidigfx_glBindFragmentShaderATI},
{"glDeleteFragmentShaderATI", (void *)skibidigfx_glDeleteFragmentShaderATI},
{"glBeginFragmentShaderATI", (void *)skibidigfx_glBeginFragmentShaderATI},
{"glEndFragmentShaderATI", (void *)skibidigfx_glEndFragmentShaderATI},
{"glPassTexCoordATI", (void *)skibidigfx_glPassTexCoordATI},
{"glSampleMapATI", (void *)skibidigfx_glSampleMapATI},
{"glColorFragmentOp1ATI", (void *)skibidigfx_glColorFragmentOp1ATI},
{"glColorFragmentOp2ATI", (void *)skibidigfx_glColorFragmentOp2ATI},
{"glColorFragmentOp3ATI", (void *)skibidigfx_glColorFragmentOp3ATI},
{"glAlphaFragmentOp1ATI", (void *)skibidigfx_glAlphaFragmentOp1ATI},
{"glAlphaFragmentOp2ATI", (void *)skibidigfx_glAlphaFragmentOp2ATI},
{"glAlphaFragmentOp3ATI", (void *)skibidigfx_glAlphaFragmentOp3ATI},
{"glSetFragmentShaderConstantATI", (void *)skibidigfx_glSetFragmentShaderConstantATI},
{"glMapObjectBufferATI", (void *)skibidigfx_glMapObjectBufferATI},
{"glUnmapObjectBufferATI", (void *)skibidigfx_glUnmapObjectBufferATI},
{"glPNTrianglesiATI", (void *)skibidigfx_glPNTrianglesiATI},
{"glPNTrianglesfATI", (void *)skibidigfx_glPNTrianglesfATI},
{"glStencilOpSeparateATI", (void *)skibidigfx_glStencilOpSeparateATI},
{"glStencilFuncSeparateATI", (void *)skibidigfx_glStencilFuncSeparateATI},
{"glNewObjectBufferATI", (void *)skibidigfx_glNewObjectBufferATI},
{"glIsObjectBufferATI", (void *)skibidigfx_glIsObjectBufferATI},
{"glUpdateObjectBufferATI", (void *)skibidigfx_glUpdateObjectBufferATI},
{"glGetObjectBufferfvATI", (void *)skibidigfx_glGetObjectBufferfvATI},
{"glGetObjectBufferivATI", (void *)skibidigfx_glGetObjectBufferivATI},
{"glFreeObjectBufferATI", (void *)skibidigfx_glFreeObjectBufferATI},
{"glArrayObjectATI", (void *)skibidigfx_glArrayObjectATI},
{"glGetArrayObjectfvATI", (void *)skibidigfx_glGetArrayObjectfvATI},
{"glGetArrayObjectivATI", (void *)skibidigfx_glGetArrayObjectivATI},
{"glVariantArrayObjectATI", (void *)skibidigfx_glVariantArrayObjectATI},
{"glGetVariantArrayObjectfvATI", (void *)skibidigfx_glGetVariantArrayObjectfvATI},
{"glGetVariantArrayObjectivATI", (void *)skibidigfx_glGetVariantArrayObjectivATI},
{"glVertexAttribArrayObjectATI", (void *)skibidigfx_glVertexAttribArrayObjectATI},
{"glGetVertexAttribArrayObjectfvATI", (void *)skibidigfx_glGetVertexAttribArrayObjectfvATI},
{"glGetVertexAttribArrayObjectivATI", (void *)skibidigfx_glGetVertexAttribArrayObjectivATI},
{"glVertexStream1sATI", (void *)skibidigfx_glVertexStream1sATI},
{"glVertexStream1svATI", (void *)skibidigfx_glVertexStream1svATI},
{"glVertexStream1iATI", (void *)skibidigfx_glVertexStream1iATI},
{"glVertexStream1ivATI", (void *)skibidigfx_glVertexStream1ivATI},
{"glVertexStream1fATI", (void *)skibidigfx_glVertexStream1fATI},
{"glVertexStream1fvATI", (void *)skibidigfx_glVertexStream1fvATI},
{"glVertexStream1dATI", (void *)skibidigfx_glVertexStream1dATI},
{"glVertexStream1dvATI", (void *)skibidigfx_glVertexStream1dvATI},
{"glVertexStream2sATI", (void *)skibidigfx_glVertexStream2sATI},
{"glVertexStream2svATI", (void *)skibidigfx_glVertexStream2svATI},
{"glVertexStream2iATI", (void *)skibidigfx_glVertexStream2iATI},
{"glVertexStream2ivATI", (void *)skibidigfx_glVertexStream2ivATI},
{"glVertexStream2fATI", (void *)skibidigfx_glVertexStream2fATI},
{"glVertexStream2fvATI", (void *)skibidigfx_glVertexStream2fvATI},
{"glVertexStream2dATI", (void *)skibidigfx_glVertexStream2dATI},
{"glVertexStream2dvATI", (void *)skibidigfx_glVertexStream2dvATI},
{"glVertexStream3sATI", (void *)skibidigfx_glVertexStream3sATI},
{"glVertexStream3svATI", (void *)skibidigfx_glVertexStream3svATI},
{"glVertexStream3iATI", (void *)skibidigfx_glVertexStream3iATI},
{"glVertexStream3ivATI", (void *)skibidigfx_glVertexStream3ivATI},
{"glVertexStream3fATI", (void *)skibidigfx_glVertexStream3fATI},
{"glVertexStream3fvATI", (void *)skibidigfx_glVertexStream3fvATI},
{"glVertexStream3dATI", (void *)skibidigfx_glVertexStream3dATI},
{"glVertexStream3dvATI", (void *)skibidigfx_glVertexStream3dvATI},
{"glVertexStream4sATI", (void *)skibidigfx_glVertexStream4sATI},
{"glVertexStream4svATI", (void *)skibidigfx_glVertexStream4svATI},
{"glVertexStream4iATI", (void *)skibidigfx_glVertexStream4iATI},
{"glVertexStream4ivATI", (void *)skibidigfx_glVertexStream4ivATI},
{"glVertexStream4fATI", (void *)skibidigfx_glVertexStream4fATI},
{"glVertexStream4fvATI", (void *)skibidigfx_glVertexStream4fvATI},
{"glVertexStream4dATI", (void *)skibidigfx_glVertexStream4dATI},
{"glVertexStream4dvATI", (void *)skibidigfx_glVertexStream4dvATI},
{"glNormalStream3bATI", (void *)skibidigfx_glNormalStream3bATI},
{"glNormalStream3bvATI", (void *)skibidigfx_glNormalStream3bvATI},
{"glNormalStream3sATI", (void *)skibidigfx_glNormalStream3sATI},
{"glNormalStream3svATI", (void *)skibidigfx_glNormalStream3svATI},
{"glNormalStream3iATI", (void *)skibidigfx_glNormalStream3iATI},
{"glNormalStream3ivATI", (void *)skibidigfx_glNormalStream3ivATI},
{"glNormalStream3fATI", (void *)skibidigfx_glNormalStream3fATI},
{"glNormalStream3fvATI", (void *)skibidigfx_glNormalStream3fvATI},
{"glNormalStream3dATI", (void *)skibidigfx_glNormalStream3dATI},
{"glNormalStream3dvATI", (void *)skibidigfx_glNormalStream3dvATI},
{"glClientActiveVertexStreamATI", (void *)skibidigfx_glClientActiveVertexStreamATI},
{"glVertexBlendEnviATI", (void *)skibidigfx_glVertexBlendEnviATI},
{"glVertexBlendEnvfATI", (void *)skibidigfx_glVertexBlendEnvfATI},
{"glEGLImageTargetTexStorageEXT", (void *)skibidigfx_glEGLImageTargetTexStorageEXT},
{"glEGLImageTargetTextureStorageEXT", (void *)skibidigfx_glEGLImageTargetTextureStorageEXT},
{"glUniformBufferEXT", (void *)skibidigfx_glUniformBufferEXT},
{"glGetUniformBufferSizeEXT", (void *)skibidigfx_glGetUniformBufferSizeEXT},
{"glGetUniformOffsetEXT", (void *)skibidigfx_glGetUniformOffsetEXT},
{"glBlendColorEXT", (void *)skibidigfx_glBlendColorEXT},
{"glBlendEquationSeparateEXT", (void *)skibidigfx_glBlendEquationSeparateEXT},
{"glBlendFuncSeparateEXT", (void *)skibidigfx_glBlendFuncSeparateEXT},
{"glBlendEquationEXT", (void *)skibidigfx_glBlendEquationEXT},
{"glColorSubTableEXT", (void *)skibidigfx_glColorSubTableEXT},
{"glCopyColorSubTableEXT", (void *)skibidigfx_glCopyColorSubTableEXT},
{"glLockArraysEXT", (void *)skibidigfx_glLockArraysEXT},
{"glUnlockArraysEXT", (void *)skibidigfx_glUnlockArraysEXT},
{"glConvolutionFilter1DEXT", (void *)skibidigfx_glConvolutionFilter1DEXT},
{"glConvolutionFilter2DEXT", (void *)skibidigfx_glConvolutionFilter2DEXT},
{"glConvolutionParameterfEXT", (void *)skibidigfx_glConvolutionParameterfEXT},
{"glConvolutionParameterfvEXT", (void *)skibidigfx_glConvolutionParameterfvEXT},
{"glConvolutionParameteriEXT", (void *)skibidigfx_glConvolutionParameteriEXT},
{"glConvolutionParameterivEXT", (void *)skibidigfx_glConvolutionParameterivEXT},
{"glCopyConvolutionFilter1DEXT", (void *)skibidigfx_glCopyConvolutionFilter1DEXT},
{"glCopyConvolutionFilter2DEXT", (void *)skibidigfx_glCopyConvolutionFilter2DEXT},
{"glGetConvolutionFilterEXT", (void *)skibidigfx_glGetConvolutionFilterEXT},
{"glGetConvolutionParameterfvEXT", (void *)skibidigfx_glGetConvolutionParameterfvEXT},
{"glGetConvolutionParameterivEXT", (void *)skibidigfx_glGetConvolutionParameterivEXT},
{"glGetSeparableFilterEXT", (void *)skibidigfx_glGetSeparableFilterEXT},
{"glSeparableFilter2DEXT", (void *)skibidigfx_glSeparableFilter2DEXT},
{"glTangent3bEXT", (void *)skibidigfx_glTangent3bEXT},
{"glTangent3bvEXT", (void *)skibidigfx_glTangent3bvEXT},
{"glTangent3dEXT", (void *)skibidigfx_glTangent3dEXT},
{"glTangent3dvEXT", (void *)skibidigfx_glTangent3dvEXT},
{"glTangent3fEXT", (void *)skibidigfx_glTangent3fEXT},
{"glTangent3fvEXT", (void *)skibidigfx_glTangent3fvEXT},
{"glTangent3iEXT", (void *)skibidigfx_glTangent3iEXT},
{"glTangent3ivEXT", (void *)skibidigfx_glTangent3ivEXT},
{"glTangent3sEXT", (void *)skibidigfx_glTangent3sEXT},
{"glTangent3svEXT", (void *)skibidigfx_glTangent3svEXT},
{"glBinormal3bEXT", (void *)skibidigfx_glBinormal3bEXT},
{"glBinormal3bvEXT", (void *)skibidigfx_glBinormal3bvEXT},
{"glBinormal3dEXT", (void *)skibidigfx_glBinormal3dEXT},
{"glBinormal3dvEXT", (void *)skibidigfx_glBinormal3dvEXT},
{"glBinormal3fEXT", (void *)skibidigfx_glBinormal3fEXT},
{"glBinormal3fvEXT", (void *)skibidigfx_glBinormal3fvEXT},
{"glBinormal3iEXT", (void *)skibidigfx_glBinormal3iEXT},
{"glBinormal3ivEXT", (void *)skibidigfx_glBinormal3ivEXT},
{"glBinormal3sEXT", (void *)skibidigfx_glBinormal3sEXT},
{"glBinormal3svEXT", (void *)skibidigfx_glBinormal3svEXT},
{"glTangentPointerEXT", (void *)skibidigfx_glTangentPointerEXT},
{"glBinormalPointerEXT", (void *)skibidigfx_glBinormalPointerEXT},
{"glCopyTexImage1DEXT", (void *)skibidigfx_glCopyTexImage1DEXT},
{"glCopyTexImage2DEXT", (void *)skibidigfx_glCopyTexImage2DEXT},
{"glCopyTexSubImage1DEXT", (void *)skibidigfx_glCopyTexSubImage1DEXT},
{"glCopyTexSubImage2DEXT", (void *)skibidigfx_glCopyTexSubImage2DEXT},
{"glCopyTexSubImage3DEXT", (void *)skibidigfx_glCopyTexSubImage3DEXT},
{"glCullParameterdvEXT", (void *)skibidigfx_glCullParameterdvEXT},
{"glCullParameterfvEXT", (void *)skibidigfx_glCullParameterfvEXT},
{"glLabelObjectEXT", (void *)skibidigfx_glLabelObjectEXT},
{"glGetObjectLabelEXT", (void *)skibidigfx_glGetObjectLabelEXT},
{"glInsertEventMarkerEXT", (void *)skibidigfx_glInsertEventMarkerEXT},
{"glPushGroupMarkerEXT", (void *)skibidigfx_glPushGroupMarkerEXT},
{"glPopGroupMarkerEXT", (void *)skibidigfx_glPopGroupMarkerEXT},
{"glDepthBoundsEXT", (void *)skibidigfx_glDepthBoundsEXT},
{"glMatrixLoadfEXT", (void *)skibidigfx_glMatrixLoadfEXT},
{"glMatrixLoaddEXT", (void *)skibidigfx_glMatrixLoaddEXT},
{"glMatrixMultfEXT", (void *)skibidigfx_glMatrixMultfEXT},
{"glMatrixMultdEXT", (void *)skibidigfx_glMatrixMultdEXT},
{"glMatrixLoadIdentityEXT", (void *)skibidigfx_glMatrixLoadIdentityEXT},
{"glMatrixRotatefEXT", (void *)skibidigfx_glMatrixRotatefEXT},
{"glMatrixRotatedEXT", (void *)skibidigfx_glMatrixRotatedEXT},
{"glMatrixScalefEXT", (void *)skibidigfx_glMatrixScalefEXT},
{"glMatrixScaledEXT", (void *)skibidigfx_glMatrixScaledEXT},
{"glMatrixTranslatefEXT", (void *)skibidigfx_glMatrixTranslatefEXT},
{"glMatrixTranslatedEXT", (void *)skibidigfx_glMatrixTranslatedEXT},
{"glMatrixFrustumEXT", (void *)skibidigfx_glMatrixFrustumEXT},
{"glMatrixOrthoEXT", (void *)skibidigfx_glMatrixOrthoEXT},
{"glMatrixPopEXT", (void *)skibidigfx_glMatrixPopEXT},
{"glMatrixPushEXT", (void *)skibidigfx_glMatrixPushEXT},
{"glClientAttribDefaultEXT", (void *)skibidigfx_glClientAttribDefaultEXT},
{"glPushClientAttribDefaultEXT", (void *)skibidigfx_glPushClientAttribDefaultEXT},
{"glTextureParameterfEXT", (void *)skibidigfx_glTextureParameterfEXT},
{"glTextureParameterfvEXT", (void *)skibidigfx_glTextureParameterfvEXT},
{"glTextureParameteriEXT", (void *)skibidigfx_glTextureParameteriEXT},
{"glTextureParameterivEXT", (void *)skibidigfx_glTextureParameterivEXT},
{"glTextureImage1DEXT", (void *)skibidigfx_glTextureImage1DEXT},
{"glTextureImage2DEXT", (void *)skibidigfx_glTextureImage2DEXT},
{"glTextureSubImage1DEXT", (void *)skibidigfx_glTextureSubImage1DEXT},
{"glTextureSubImage2DEXT", (void *)skibidigfx_glTextureSubImage2DEXT},
{"glCopyTextureImage1DEXT", (void *)skibidigfx_glCopyTextureImage1DEXT},
{"glCopyTextureImage2DEXT", (void *)skibidigfx_glCopyTextureImage2DEXT},
{"glCopyTextureSubImage1DEXT", (void *)skibidigfx_glCopyTextureSubImage1DEXT},
{"glCopyTextureSubImage2DEXT", (void *)skibidigfx_glCopyTextureSubImage2DEXT},
{"glGetTextureImageEXT", (void *)skibidigfx_glGetTextureImageEXT},
{"glGetTextureParameterfvEXT", (void *)skibidigfx_glGetTextureParameterfvEXT},
{"glGetTextureParameterivEXT", (void *)skibidigfx_glGetTextureParameterivEXT},
{"glGetTextureLevelParameterfvEXT", (void *)skibidigfx_glGetTextureLevelParameterfvEXT},
{"glGetTextureLevelParameterivEXT", (void *)skibidigfx_glGetTextureLevelParameterivEXT},
{"glTextureImage3DEXT", (void *)skibidigfx_glTextureImage3DEXT},
{"glTextureSubImage3DEXT", (void *)skibidigfx_glTextureSubImage3DEXT},
{"glCopyTextureSubImage3DEXT", (void *)skibidigfx_glCopyTextureSubImage3DEXT},
{"glBindMultiTextureEXT", (void *)skibidigfx_glBindMultiTextureEXT},
{"glMultiTexCoordPointerEXT", (void *)skibidigfx_glMultiTexCoordPointerEXT},
{"glMultiTexEnvfEXT", (void *)skibidigfx_glMultiTexEnvfEXT},
{"glMultiTexEnvfvEXT", (void *)skibidigfx_glMultiTexEnvfvEXT},
{"glMultiTexEnviEXT", (void *)skibidigfx_glMultiTexEnviEXT},
{"glMultiTexEnvivEXT", (void *)skibidigfx_glMultiTexEnvivEXT},
{"glMultiTexGendEXT", (void *)skibidigfx_glMultiTexGendEXT},
{"glMultiTexGendvEXT", (void *)skibidigfx_glMultiTexGendvEXT},
{"glMultiTexGenfEXT", (void *)skibidigfx_glMultiTexGenfEXT},
{"glMultiTexGenfvEXT", (void *)skibidigfx_glMultiTexGenfvEXT},
{"glMultiTexGeniEXT", (void *)skibidigfx_glMultiTexGeniEXT},
{"glMultiTexGenivEXT", (void *)skibidigfx_glMultiTexGenivEXT},
{"glGetMultiTexEnvfvEXT", (void *)skibidigfx_glGetMultiTexEnvfvEXT},
{"glGetMultiTexEnvivEXT", (void *)skibidigfx_glGetMultiTexEnvivEXT},
{"glGetMultiTexGendvEXT", (void *)skibidigfx_glGetMultiTexGendvEXT},
{"glGetMultiTexGenfvEXT", (void *)skibidigfx_glGetMultiTexGenfvEXT},
{"glGetMultiTexGenivEXT", (void *)skibidigfx_glGetMultiTexGenivEXT},
{"glMultiTexParameteriEXT", (void *)skibidigfx_glMultiTexParameteriEXT},
{"glMultiTexParameterivEXT", (void *)skibidigfx_glMultiTexParameterivEXT},
{"glMultiTexParameterfEXT", (void *)skibidigfx_glMultiTexParameterfEXT},
{"glMultiTexParameterfvEXT", (void *)skibidigfx_glMultiTexParameterfvEXT},
{"glMultiTexImage1DEXT", (void *)skibidigfx_glMultiTexImage1DEXT},
{"glMultiTexImage2DEXT", (void *)skibidigfx_glMultiTexImage2DEXT},
{"glMultiTexSubImage1DEXT", (void *)skibidigfx_glMultiTexSubImage1DEXT},
{"glMultiTexSubImage2DEXT", (void *)skibidigfx_glMultiTexSubImage2DEXT},
{"glCopyMultiTexImage1DEXT", (void *)skibidigfx_glCopyMultiTexImage1DEXT},
{"glCopyMultiTexImage2DEXT", (void *)skibidigfx_glCopyMultiTexImage2DEXT},
{"glCopyMultiTexSubImage1DEXT", (void *)skibidigfx_glCopyMultiTexSubImage1DEXT},
{"glCopyMultiTexSubImage2DEXT", (void *)skibidigfx_glCopyMultiTexSubImage2DEXT},
{"glGetMultiTexImageEXT", (void *)skibidigfx_glGetMultiTexImageEXT},
{"glGetMultiTexParameterfvEXT", (void *)skibidigfx_glGetMultiTexParameterfvEXT},
{"glGetMultiTexParameterivEXT", (void *)skibidigfx_glGetMultiTexParameterivEXT},
{"glGetMultiTexLevelParameterfvEXT", (void *)skibidigfx_glGetMultiTexLevelParameterfvEXT},
{"glGetMultiTexLevelParameterivEXT", (void *)skibidigfx_glGetMultiTexLevelParameterivEXT},
{"glMultiTexImage3DEXT", (void *)skibidigfx_glMultiTexImage3DEXT},
{"glMultiTexSubImage3DEXT", (void *)skibidigfx_glMultiTexSubImage3DEXT},
{"glCopyMultiTexSubImage3DEXT", (void *)skibidigfx_glCopyMultiTexSubImage3DEXT},
{"glEnableClientStateIndexedEXT", (void *)skibidigfx_glEnableClientStateIndexedEXT},
{"glDisableClientStateIndexedEXT", (void *)skibidigfx_glDisableClientStateIndexedEXT},
{"glGetFloatIndexedvEXT", (void *)skibidigfx_glGetFloatIndexedvEXT},
{"glGetDoubleIndexedvEXT", (void *)skibidigfx_glGetDoubleIndexedvEXT},
{"glGetPointerIndexedvEXT", (void *)skibidigfx_glGetPointerIndexedvEXT},
{"glEnableIndexedEXT", (void *)skibidigfx_glEnableIndexedEXT},
{"glDisableIndexedEXT", (void *)skibidigfx_glDisableIndexedEXT},
{"glIsEnabledIndexedEXT", (void *)skibidigfx_glIsEnabledIndexedEXT},
{"glGetIntegerIndexedvEXT", (void *)skibidigfx_glGetIntegerIndexedvEXT},
{"glGetBooleanIndexedvEXT", (void *)skibidigfx_glGetBooleanIndexedvEXT},
{"glCompressedTextureImage3DEXT", (void *)skibidigfx_glCompressedTextureImage3DEXT},
{"glCompressedTextureImage2DEXT", (void *)skibidigfx_glCompressedTextureImage2DEXT},
{"glCompressedTextureImage1DEXT", (void *)skibidigfx_glCompressedTextureImage1DEXT},
{"glCompressedTextureSubImage3DEXT", (void *)skibidigfx_glCompressedTextureSubImage3DEXT},
{"glCompressedTextureSubImage2DEXT", (void *)skibidigfx_glCompressedTextureSubImage2DEXT},
{"glCompressedTextureSubImage1DEXT", (void *)skibidigfx_glCompressedTextureSubImage1DEXT},
{"glGetCompressedTextureImageEXT", (void *)skibidigfx_glGetCompressedTextureImageEXT},
{"glCompressedMultiTexImage3DEXT", (void *)skibidigfx_glCompressedMultiTexImage3DEXT},
{"glCompressedMultiTexImage2DEXT", (void *)skibidigfx_glCompressedMultiTexImage2DEXT},
{"glCompressedMultiTexImage1DEXT", (void *)skibidigfx_glCompressedMultiTexImage1DEXT},
{"glCompressedMultiTexSubImage3DEXT", (void *)skibidigfx_glCompressedMultiTexSubImage3DEXT},
{"glCompressedMultiTexSubImage2DEXT", (void *)skibidigfx_glCompressedMultiTexSubImage2DEXT},
{"glCompressedMultiTexSubImage1DEXT", (void *)skibidigfx_glCompressedMultiTexSubImage1DEXT},
{"glGetCompressedMultiTexImageEXT", (void *)skibidigfx_glGetCompressedMultiTexImageEXT},
{"glMatrixLoadTransposefEXT", (void *)skibidigfx_glMatrixLoadTransposefEXT},
{"glMatrixLoadTransposedEXT", (void *)skibidigfx_glMatrixLoadTransposedEXT},
{"glMatrixMultTransposefEXT", (void *)skibidigfx_glMatrixMultTransposefEXT},
{"glMatrixMultTransposedEXT", (void *)skibidigfx_glMatrixMultTransposedEXT},
{"glNamedBufferDataEXT", (void *)skibidigfx_glNamedBufferDataEXT},
{"glNamedBufferSubDataEXT", (void *)skibidigfx_glNamedBufferSubDataEXT},
{"glMapNamedBufferEXT", (void *)skibidigfx_glMapNamedBufferEXT},
{"glUnmapNamedBufferEXT", (void *)skibidigfx_glUnmapNamedBufferEXT},
{"glGetNamedBufferParameterivEXT", (void *)skibidigfx_glGetNamedBufferParameterivEXT},
{"glGetNamedBufferPointervEXT", (void *)skibidigfx_glGetNamedBufferPointervEXT},
{"glGetNamedBufferSubDataEXT", (void *)skibidigfx_glGetNamedBufferSubDataEXT},
{"glProgramUniform1fEXT", (void *)skibidigfx_glProgramUniform1fEXT},
{"glProgramUniform2fEXT", (void *)skibidigfx_glProgramUniform2fEXT},
{"glProgramUniform3fEXT", (void *)skibidigfx_glProgramUniform3fEXT},
{"glProgramUniform4fEXT", (void *)skibidigfx_glProgramUniform4fEXT},
{"glProgramUniform1iEXT", (void *)skibidigfx_glProgramUniform1iEXT},
{"glProgramUniform2iEXT", (void *)skibidigfx_glProgramUniform2iEXT},
{"glProgramUniform3iEXT", (void *)skibidigfx_glProgramUniform3iEXT},
{"glProgramUniform4iEXT", (void *)skibidigfx_glProgramUniform4iEXT},
{"glProgramUniform1fvEXT", (void *)skibidigfx_glProgramUniform1fvEXT},
{"glProgramUniform2fvEXT", (void *)skibidigfx_glProgramUniform2fvEXT},
{"glProgramUniform3fvEXT", (void *)skibidigfx_glProgramUniform3fvEXT},
{"glProgramUniform4fvEXT", (void *)skibidigfx_glProgramUniform4fvEXT},
{"glProgramUniform1ivEXT", (void *)skibidigfx_glProgramUniform1ivEXT},
{"glProgramUniform2ivEXT", (void *)skibidigfx_glProgramUniform2ivEXT},
{"glProgramUniform3ivEXT", (void *)skibidigfx_glProgramUniform3ivEXT},
{"glProgramUniform4ivEXT", (void *)skibidigfx_glProgramUniform4ivEXT},
{"glProgramUniformMatrix2fvEXT", (void *)skibidigfx_glProgramUniformMatrix2fvEXT},
{"glProgramUniformMatrix3fvEXT", (void *)skibidigfx_glProgramUniformMatrix3fvEXT},
{"glProgramUniformMatrix4fvEXT", (void *)skibidigfx_glProgramUniformMatrix4fvEXT},
{"glProgramUniformMatrix2x3fvEXT", (void *)skibidigfx_glProgramUniformMatrix2x3fvEXT},
{"glProgramUniformMatrix3x2fvEXT", (void *)skibidigfx_glProgramUniformMatrix3x2fvEXT},
{"glProgramUniformMatrix2x4fvEXT", (void *)skibidigfx_glProgramUniformMatrix2x4fvEXT},
{"glProgramUniformMatrix4x2fvEXT", (void *)skibidigfx_glProgramUniformMatrix4x2fvEXT},
{"glProgramUniformMatrix3x4fvEXT", (void *)skibidigfx_glProgramUniformMatrix3x4fvEXT},
{"glProgramUniformMatrix4x3fvEXT", (void *)skibidigfx_glProgramUniformMatrix4x3fvEXT},
{"glTextureBufferEXT", (void *)skibidigfx_glTextureBufferEXT},
{"glMultiTexBufferEXT", (void *)skibidigfx_glMultiTexBufferEXT},
{"glTextureParameterIivEXT", (void *)skibidigfx_glTextureParameterIivEXT},
{"glTextureParameterIuivEXT", (void *)skibidigfx_glTextureParameterIuivEXT},
{"glGetTextureParameterIivEXT", (void *)skibidigfx_glGetTextureParameterIivEXT},
{"glGetTextureParameterIuivEXT", (void *)skibidigfx_glGetTextureParameterIuivEXT},
{"glMultiTexParameterIivEXT", (void *)skibidigfx_glMultiTexParameterIivEXT},
{"glMultiTexParameterIuivEXT", (void *)skibidigfx_glMultiTexParameterIuivEXT},
{"glGetMultiTexParameterIivEXT", (void *)skibidigfx_glGetMultiTexParameterIivEXT},
{"glGetMultiTexParameterIuivEXT", (void *)skibidigfx_glGetMultiTexParameterIuivEXT},
{"glProgramUniform1uiEXT", (void *)skibidigfx_glProgramUniform1uiEXT},
{"glProgramUniform2uiEXT", (void *)skibidigfx_glProgramUniform2uiEXT},
{"glProgramUniform3uiEXT", (void *)skibidigfx_glProgramUniform3uiEXT},
{"glProgramUniform4uiEXT", (void *)skibidigfx_glProgramUniform4uiEXT},
{"glProgramUniform1uivEXT", (void *)skibidigfx_glProgramUniform1uivEXT},
{"glProgramUniform2uivEXT", (void *)skibidigfx_glProgramUniform2uivEXT},
{"glProgramUniform3uivEXT", (void *)skibidigfx_glProgramUniform3uivEXT},
{"glProgramUniform4uivEXT", (void *)skibidigfx_glProgramUniform4uivEXT},
{"glNamedProgramLocalParameters4fvEXT", (void *)skibidigfx_glNamedProgramLocalParameters4fvEXT},
{"glNamedProgramLocalParameterI4iEXT", (void *)skibidigfx_glNamedProgramLocalParameterI4iEXT},
{"glNamedProgramLocalParameterI4ivEXT", (void *)skibidigfx_glNamedProgramLocalParameterI4ivEXT},
{"glNamedProgramLocalParametersI4ivEXT", (void *)skibidigfx_glNamedProgramLocalParametersI4ivEXT},
{"glNamedProgramLocalParameterI4uiEXT", (void *)skibidigfx_glNamedProgramLocalParameterI4uiEXT},
{"glNamedProgramLocalParameterI4uivEXT", (void *)skibidigfx_glNamedProgramLocalParameterI4uivEXT},
{"glNamedProgramLocalParametersI4uivEXT", (void *)skibidigfx_glNamedProgramLocalParametersI4uivEXT},
{"glGetNamedProgramLocalParameterIivEXT", (void *)skibidigfx_glGetNamedProgramLocalParameterIivEXT},
{"glGetNamedProgramLocalParameterIuivEXT", (void *)skibidigfx_glGetNamedProgramLocalParameterIuivEXT},
{"glEnableClientStateiEXT", (void *)skibidigfx_glEnableClientStateiEXT},
{"glDisableClientStateiEXT", (void *)skibidigfx_glDisableClientStateiEXT},
{"glGetFloati_vEXT", (void *)skibidigfx_glGetFloati_vEXT},
{"glGetDoublei_vEXT", (void *)skibidigfx_glGetDoublei_vEXT},
{"glGetPointeri_vEXT", (void *)skibidigfx_glGetPointeri_vEXT},
{"glNamedProgramStringEXT", (void *)skibidigfx_glNamedProgramStringEXT},
{"glNamedProgramLocalParameter4dEXT", (void *)skibidigfx_glNamedProgramLocalParameter4dEXT},
{"glNamedProgramLocalParameter4dvEXT", (void *)skibidigfx_glNamedProgramLocalParameter4dvEXT},
{"glNamedProgramLocalParameter4fEXT", (void *)skibidigfx_glNamedProgramLocalParameter4fEXT},
{"glNamedProgramLocalParameter4fvEXT", (void *)skibidigfx_glNamedProgramLocalParameter4fvEXT},
{"glGetNamedProgramLocalParameterdvEXT", (void *)skibidigfx_glGetNamedProgramLocalParameterdvEXT},
{"glGetNamedProgramLocalParameterfvEXT", (void *)skibidigfx_glGetNamedProgramLocalParameterfvEXT},
{"glGetNamedProgramivEXT", (void *)skibidigfx_glGetNamedProgramivEXT},
{"glGetNamedProgramStringEXT", (void *)skibidigfx_glGetNamedProgramStringEXT},
{"glNamedRenderbufferStorageEXT", (void *)skibidigfx_glNamedRenderbufferStorageEXT},
{"glGetNamedRenderbufferParameterivEXT", (void *)skibidigfx_glGetNamedRenderbufferParameterivEXT},
{"glNamedRenderbufferStorageMultisampleEXT", (void *)skibidigfx_glNamedRenderbufferStorageMultisampleEXT},
{"glNamedRenderbufferStorageMultisampleCoverageEXT", (void *)skibidigfx_glNamedRenderbufferStorageMultisampleCoverageEXT},
{"glCheckNamedFramebufferStatusEXT", (void *)skibidigfx_glCheckNamedFramebufferStatusEXT},
{"glNamedFramebufferTexture1DEXT", (void *)skibidigfx_glNamedFramebufferTexture1DEXT},
{"glNamedFramebufferTexture2DEXT", (void *)skibidigfx_glNamedFramebufferTexture2DEXT},
{"glNamedFramebufferTexture3DEXT", (void *)skibidigfx_glNamedFramebufferTexture3DEXT},
{"glNamedFramebufferRenderbufferEXT", (void *)skibidigfx_glNamedFramebufferRenderbufferEXT},
{"glGetNamedFramebufferAttachmentParameterivEXT", (void *)skibidigfx_glGetNamedFramebufferAttachmentParameterivEXT},
{"glGenerateTextureMipmapEXT", (void *)skibidigfx_glGenerateTextureMipmapEXT},
{"glGenerateMultiTexMipmapEXT", (void *)skibidigfx_glGenerateMultiTexMipmapEXT},
{"glFramebufferDrawBufferEXT", (void *)skibidigfx_glFramebufferDrawBufferEXT},
{"glFramebufferDrawBuffersEXT", (void *)skibidigfx_glFramebufferDrawBuffersEXT},
{"glFramebufferReadBufferEXT", (void *)skibidigfx_glFramebufferReadBufferEXT},
{"glGetFramebufferParameterivEXT", (void *)skibidigfx_glGetFramebufferParameterivEXT},
{"glNamedCopyBufferSubDataEXT", (void *)skibidigfx_glNamedCopyBufferSubDataEXT},
{"glNamedFramebufferTextureEXT", (void *)skibidigfx_glNamedFramebufferTextureEXT},
{"glNamedFramebufferTextureLayerEXT", (void *)skibidigfx_glNamedFramebufferTextureLayerEXT},
{"glNamedFramebufferTextureFaceEXT", (void *)skibidigfx_glNamedFramebufferTextureFaceEXT},
{"glTextureRenderbufferEXT", (void *)skibidigfx_glTextureRenderbufferEXT},
{"glMultiTexRenderbufferEXT", (void *)skibidigfx_glMultiTexRenderbufferEXT},
{"glVertexArrayVertexOffsetEXT", (void *)skibidigfx_glVertexArrayVertexOffsetEXT},
{"glVertexArrayColorOffsetEXT", (void *)skibidigfx_glVertexArrayColorOffsetEXT},
{"glVertexArrayEdgeFlagOffsetEXT", (void *)skibidigfx_glVertexArrayEdgeFlagOffsetEXT},
{"glVertexArrayIndexOffsetEXT", (void *)skibidigfx_glVertexArrayIndexOffsetEXT},
{"glVertexArrayNormalOffsetEXT", (void *)skibidigfx_glVertexArrayNormalOffsetEXT},
{"glVertexArrayTexCoordOffsetEXT", (void *)skibidigfx_glVertexArrayTexCoordOffsetEXT},
{"glVertexArrayMultiTexCoordOffsetEXT", (void *)skibidigfx_glVertexArrayMultiTexCoordOffsetEXT},
{"glVertexArrayFogCoordOffsetEXT", (void *)skibidigfx_glVertexArrayFogCoordOffsetEXT},
{"glVertexArraySecondaryColorOffsetEXT", (void *)skibidigfx_glVertexArraySecondaryColorOffsetEXT},
{"glVertexArrayVertexAttribOffsetEXT", (void *)skibidigfx_glVertexArrayVertexAttribOffsetEXT},
{"glVertexArrayVertexAttribIOffsetEXT", (void *)skibidigfx_glVertexArrayVertexAttribIOffsetEXT},
{"glEnableVertexArrayEXT", (void *)skibidigfx_glEnableVertexArrayEXT},
{"glDisableVertexArrayEXT", (void *)skibidigfx_glDisableVertexArrayEXT},
{"glEnableVertexArrayAttribEXT", (void *)skibidigfx_glEnableVertexArrayAttribEXT},
{"glDisableVertexArrayAttribEXT", (void *)skibidigfx_glDisableVertexArrayAttribEXT},
{"glGetVertexArrayIntegervEXT", (void *)skibidigfx_glGetVertexArrayIntegervEXT},
{"glGetVertexArrayPointervEXT", (void *)skibidigfx_glGetVertexArrayPointervEXT},
{"glGetVertexArrayIntegeri_vEXT", (void *)skibidigfx_glGetVertexArrayIntegeri_vEXT},
{"glGetVertexArrayPointeri_vEXT", (void *)skibidigfx_glGetVertexArrayPointeri_vEXT},
{"glMapNamedBufferRangeEXT", (void *)skibidigfx_glMapNamedBufferRangeEXT},
{"glFlushMappedNamedBufferRangeEXT", (void *)skibidigfx_glFlushMappedNamedBufferRangeEXT},
{"glNamedBufferStorageEXT", (void *)skibidigfx_glNamedBufferStorageEXT},
{"glClearNamedBufferDataEXT", (void *)skibidigfx_glClearNamedBufferDataEXT},
{"glClearNamedBufferSubDataEXT", (void *)skibidigfx_glClearNamedBufferSubDataEXT},
{"glNamedFramebufferParameteriEXT", (void *)skibidigfx_glNamedFramebufferParameteriEXT},
{"glGetNamedFramebufferParameterivEXT", (void *)skibidigfx_glGetNamedFramebufferParameterivEXT},
{"glProgramUniform1dEXT", (void *)skibidigfx_glProgramUniform1dEXT},
{"glProgramUniform2dEXT", (void *)skibidigfx_glProgramUniform2dEXT},
{"glProgramUniform3dEXT", (void *)skibidigfx_glProgramUniform3dEXT},
{"glProgramUniform4dEXT", (void *)skibidigfx_glProgramUniform4dEXT},
{"glProgramUniform1dvEXT", (void *)skibidigfx_glProgramUniform1dvEXT},
{"glProgramUniform2dvEXT", (void *)skibidigfx_glProgramUniform2dvEXT},
{"glProgramUniform3dvEXT", (void *)skibidigfx_glProgramUniform3dvEXT},
{"glProgramUniform4dvEXT", (void *)skibidigfx_glProgramUniform4dvEXT},
{"glProgramUniformMatrix2dvEXT", (void *)skibidigfx_glProgramUniformMatrix2dvEXT},
{"glProgramUniformMatrix3dvEXT", (void *)skibidigfx_glProgramUniformMatrix3dvEXT},
{"glProgramUniformMatrix4dvEXT", (void *)skibidigfx_glProgramUniformMatrix4dvEXT},
{"glProgramUniformMatrix2x3dvEXT", (void *)skibidigfx_glProgramUniformMatrix2x3dvEXT},
{"glProgramUniformMatrix2x4dvEXT", (void *)skibidigfx_glProgramUniformMatrix2x4dvEXT},
{"glProgramUniformMatrix3x2dvEXT", (void *)skibidigfx_glProgramUniformMatrix3x2dvEXT},
{"glProgramUniformMatrix3x4dvEXT", (void *)skibidigfx_glProgramUniformMatrix3x4dvEXT},
{"glProgramUniformMatrix4x2dvEXT", (void *)skibidigfx_glProgramUniformMatrix4x2dvEXT},
{"glProgramUniformMatrix4x3dvEXT", (void *)skibidigfx_glProgramUniformMatrix4x3dvEXT},
{"glTextureBufferRangeEXT", (void *)skibidigfx_glTextureBufferRangeEXT},
{"glTextureStorage1DEXT", (void *)skibidigfx_glTextureStorage1DEXT},
{"glTextureStorage2DEXT", (void *)skibidigfx_glTextureStorage2DEXT},
{"glTextureStorage3DEXT", (void *)skibidigfx_glTextureStorage3DEXT},
{"glTextureStorage2DMultisampleEXT", (void *)skibidigfx_glTextureStorage2DMultisampleEXT},
{"glTextureStorage3DMultisampleEXT", (void *)skibidigfx_glTextureStorage3DMultisampleEXT},
{"glVertexArrayBindVertexBufferEXT", (void *)skibidigfx_glVertexArrayBindVertexBufferEXT},
{"glVertexArrayVertexAttribFormatEXT", (void *)skibidigfx_glVertexArrayVertexAttribFormatEXT},
{"glVertexArrayVertexAttribIFormatEXT", (void *)skibidigfx_glVertexArrayVertexAttribIFormatEXT},
{"glVertexArrayVertexAttribLFormatEXT", (void *)skibidigfx_glVertexArrayVertexAttribLFormatEXT},
{"glVertexArrayVertexAttribBindingEXT", (void *)skibidigfx_glVertexArrayVertexAttribBindingEXT},
{"glVertexArrayVertexBindingDivisorEXT", (void *)skibidigfx_glVertexArrayVertexBindingDivisorEXT},
{"glVertexArrayVertexAttribLOffsetEXT", (void *)skibidigfx_glVertexArrayVertexAttribLOffsetEXT},
{"glTexturePageCommitmentEXT", (void *)skibidigfx_glTexturePageCommitmentEXT},
{"glVertexArrayVertexAttribDivisorEXT", (void *)skibidigfx_glVertexArrayVertexAttribDivisorEXT},
{"glColorMaskIndexedEXT", (void *)skibidigfx_glColorMaskIndexedEXT},
{"glDrawArraysInstancedEXT", (void *)skibidigfx_glDrawArraysInstancedEXT},
{"glDrawElementsInstancedEXT", (void *)skibidigfx_glDrawElementsInstancedEXT},
{"glDrawRangeElementsEXT", (void *)skibidigfx_glDrawRangeElementsEXT},
{"glBufferStorageExternalEXT", (void *)skibidigfx_glBufferStorageExternalEXT},
{"glNamedBufferStorageExternalEXT", (void *)skibidigfx_glNamedBufferStorageExternalEXT},
{"glFogCoordfEXT", (void *)skibidigfx_glFogCoordfEXT},
{"glFogCoordfvEXT", (void *)skibidigfx_glFogCoordfvEXT},
{"glFogCoorddEXT", (void *)skibidigfx_glFogCoorddEXT},
{"glFogCoorddvEXT", (void *)skibidigfx_glFogCoorddvEXT},
{"glFogCoordPointerEXT", (void *)skibidigfx_glFogCoordPointerEXT},
{"glBlitFramebufferEXT", (void *)skibidigfx_glBlitFramebufferEXT},
{"glRenderbufferStorageMultisampleEXT", (void *)skibidigfx_glRenderbufferStorageMultisampleEXT},
{"glIsRenderbufferEXT", (void *)skibidigfx_glIsRenderbufferEXT},
{"glBindRenderbufferEXT", (void *)skibidigfx_glBindRenderbufferEXT},
{"glDeleteRenderbuffersEXT", (void *)skibidigfx_glDeleteRenderbuffersEXT},
{"glGenRenderbuffersEXT", (void *)skibidigfx_glGenRenderbuffersEXT},
{"glRenderbufferStorageEXT", (void *)skibidigfx_glRenderbufferStorageEXT},
{"glGetRenderbufferParameterivEXT", (void *)skibidigfx_glGetRenderbufferParameterivEXT},
{"glIsFramebufferEXT", (void *)skibidigfx_glIsFramebufferEXT},
{"glBindFramebufferEXT", (void *)skibidigfx_glBindFramebufferEXT},
{"glDeleteFramebuffersEXT", (void *)skibidigfx_glDeleteFramebuffersEXT},
{"glGenFramebuffersEXT", (void *)skibidigfx_glGenFramebuffersEXT},
{"glCheckFramebufferStatusEXT", (void *)skibidigfx_glCheckFramebufferStatusEXT},
{"glFramebufferTexture1DEXT", (void *)skibidigfx_glFramebufferTexture1DEXT},
{"glFramebufferTexture2DEXT", (void *)skibidigfx_glFramebufferTexture2DEXT},
{"glFramebufferTexture3DEXT", (void *)skibidigfx_glFramebufferTexture3DEXT},
{"glFramebufferRenderbufferEXT", (void *)skibidigfx_glFramebufferRenderbufferEXT},
{"glGetFramebufferAttachmentParameterivEXT", (void *)skibidigfx_glGetFramebufferAttachmentParameterivEXT},
{"glGenerateMipmapEXT", (void *)skibidigfx_glGenerateMipmapEXT},
{"glProgramParameteriEXT", (void *)skibidigfx_glProgramParameteriEXT},
{"glProgramEnvParameters4fvEXT", (void *)skibidigfx_glProgramEnvParameters4fvEXT},
{"glProgramLocalParameters4fvEXT", (void *)skibidigfx_glProgramLocalParameters4fvEXT},
{"glGetUniformuivEXT", (void *)skibidigfx_glGetUniformuivEXT},
{"glBindFragDataLocationEXT", (void *)skibidigfx_glBindFragDataLocationEXT},
{"glGetFragDataLocationEXT", (void *)skibidigfx_glGetFragDataLocationEXT},
{"glUniform1uiEXT", (void *)skibidigfx_glUniform1uiEXT},
{"glUniform2uiEXT", (void *)skibidigfx_glUniform2uiEXT},
{"glUniform3uiEXT", (void *)skibidigfx_glUniform3uiEXT},
{"glUniform4uiEXT", (void *)skibidigfx_glUniform4uiEXT},
{"glUniform1uivEXT", (void *)skibidigfx_glUniform1uivEXT},
{"glUniform2uivEXT", (void *)skibidigfx_glUniform2uivEXT},
{"glUniform3uivEXT", (void *)skibidigfx_glUniform3uivEXT},
{"glUniform4uivEXT", (void *)skibidigfx_glUniform4uivEXT},
{"glGetHistogramEXT", (void *)skibidigfx_glGetHistogramEXT},
{"glGetHistogramParameterfvEXT", (void *)skibidigfx_glGetHistogramParameterfvEXT},
{"glGetHistogramParameterivEXT", (void *)skibidigfx_glGetHistogramParameterivEXT},
{"glGetMinmaxEXT", (void *)skibidigfx_glGetMinmaxEXT},
{"glGetMinmaxParameterfvEXT", (void *)skibidigfx_glGetMinmaxParameterfvEXT},
{"glGetMinmaxParameterivEXT", (void *)skibidigfx_glGetMinmaxParameterivEXT},
{"glHistogramEXT", (void *)skibidigfx_glHistogramEXT},
{"glMinmaxEXT", (void *)skibidigfx_glMinmaxEXT},
{"glResetHistogramEXT", (void *)skibidigfx_glResetHistogramEXT},
{"glResetMinmaxEXT", (void *)skibidigfx_glResetMinmaxEXT},
{"glIndexFuncEXT", (void *)skibidigfx_glIndexFuncEXT},
{"glIndexMaterialEXT", (void *)skibidigfx_glIndexMaterialEXT},
{"glApplyTextureEXT", (void *)skibidigfx_glApplyTextureEXT},
{"glTextureLightEXT", (void *)skibidigfx_glTextureLightEXT},
{"glTextureMaterialEXT", (void *)skibidigfx_glTextureMaterialEXT},
{"glGetUnsignedBytevEXT", (void *)skibidigfx_glGetUnsignedBytevEXT},
{"glGetUnsignedBytei_vEXT", (void *)skibidigfx_glGetUnsignedBytei_vEXT},
{"glDeleteMemoryObjectsEXT", (void *)skibidigfx_glDeleteMemoryObjectsEXT},
{"glIsMemoryObjectEXT", (void *)skibidigfx_glIsMemoryObjectEXT},
{"glCreateMemoryObjectsEXT", (void *)skibidigfx_glCreateMemoryObjectsEXT},
{"glMemoryObjectParameterivEXT", (void *)skibidigfx_glMemoryObjectParameterivEXT},
{"glGetMemoryObjectParameterivEXT", (void *)skibidigfx_glGetMemoryObjectParameterivEXT},
{"glTexStorageMem2DEXT", (void *)skibidigfx_glTexStorageMem2DEXT},
{"glTexStorageMem2DMultisampleEXT", (void *)skibidigfx_glTexStorageMem2DMultisampleEXT},
{"glTexStorageMem3DEXT", (void *)skibidigfx_glTexStorageMem3DEXT},
{"glTexStorageMem3DMultisampleEXT", (void *)skibidigfx_glTexStorageMem3DMultisampleEXT},
{"glBufferStorageMemEXT", (void *)skibidigfx_glBufferStorageMemEXT},
{"glTextureStorageMem2DEXT", (void *)skibidigfx_glTextureStorageMem2DEXT},
{"glTextureStorageMem2DMultisampleEXT", (void *)skibidigfx_glTextureStorageMem2DMultisampleEXT},
{"glTextureStorageMem3DEXT", (void *)skibidigfx_glTextureStorageMem3DEXT},
{"glTextureStorageMem3DMultisampleEXT", (void *)skibidigfx_glTextureStorageMem3DMultisampleEXT},
{"glNamedBufferStorageMemEXT", (void *)skibidigfx_glNamedBufferStorageMemEXT},
{"glTexStorageMem1DEXT", (void *)skibidigfx_glTexStorageMem1DEXT},
{"glTextureStorageMem1DEXT", (void *)skibidigfx_glTextureStorageMem1DEXT},
{"glImportMemoryFdEXT", (void *)skibidigfx_glImportMemoryFdEXT},
{"glImportMemoryWin32HandleEXT", (void *)skibidigfx_glImportMemoryWin32HandleEXT},
{"glImportMemoryWin32NameEXT", (void *)skibidigfx_glImportMemoryWin32NameEXT},
{"glMultiDrawArraysEXT", (void *)skibidigfx_glMultiDrawArraysEXT},
{"glMultiDrawElementsEXT", (void *)skibidigfx_glMultiDrawElementsEXT},
{"glSampleMaskEXT", (void *)skibidigfx_glSampleMaskEXT},
{"glSamplePatternEXT", (void *)skibidigfx_glSamplePatternEXT},
{"glColorTableEXT", (void *)skibidigfx_glColorTableEXT},
{"glGetColorTableEXT", (void *)skibidigfx_glGetColorTableEXT},
{"glGetColorTableParameterivEXT", (void *)skibidigfx_glGetColorTableParameterivEXT},
{"glGetColorTableParameterfvEXT", (void *)skibidigfx_glGetColorTableParameterfvEXT},
{"glPixelTransformParameteriEXT", (void *)skibidigfx_glPixelTransformParameteriEXT},
{"glPixelTransformParameterfEXT", (void *)skibidigfx_glPixelTransformParameterfEXT},
{"glPixelTransformParameterivEXT", (void *)skibidigfx_glPixelTransformParameterivEXT},
{"glPixelTransformParameterfvEXT", (void *)skibidigfx_glPixelTransformParameterfvEXT},
{"glGetPixelTransformParameterivEXT", (void *)skibidigfx_glGetPixelTransformParameterivEXT},
{"glGetPixelTransformParameterfvEXT", (void *)skibidigfx_glGetPixelTransformParameterfvEXT},
{"glPointParameterfEXT", (void *)skibidigfx_glPointParameterfEXT},
{"glPointParameterfvEXT", (void *)skibidigfx_glPointParameterfvEXT},
{"glPolygonOffsetEXT", (void *)skibidigfx_glPolygonOffsetEXT},
{"glPolygonOffsetClampEXT", (void *)skibidigfx_glPolygonOffsetClampEXT},
{"glProvokingVertexEXT", (void *)skibidigfx_glProvokingVertexEXT},
{"glRasterSamplesEXT", (void *)skibidigfx_glRasterSamplesEXT},
{"glSecondaryColor3bEXT", (void *)skibidigfx_glSecondaryColor3bEXT},
{"glSecondaryColor3bvEXT", (void *)skibidigfx_glSecondaryColor3bvEXT},
{"glSecondaryColor3dEXT", (void *)skibidigfx_glSecondaryColor3dEXT},
{"glSecondaryColor3dvEXT", (void *)skibidigfx_glSecondaryColor3dvEXT},
{"glSecondaryColor3fEXT", (void *)skibidigfx_glSecondaryColor3fEXT},
{"glSecondaryColor3fvEXT", (void *)skibidigfx_glSecondaryColor3fvEXT},
{"glSecondaryColor3iEXT", (void *)skibidigfx_glSecondaryColor3iEXT},
{"glSecondaryColor3ivEXT", (void *)skibidigfx_glSecondaryColor3ivEXT},
{"glSecondaryColor3sEXT", (void *)skibidigfx_glSecondaryColor3sEXT},
{"glSecondaryColor3svEXT", (void *)skibidigfx_glSecondaryColor3svEXT},
{"glSecondaryColor3ubEXT", (void *)skibidigfx_glSecondaryColor3ubEXT},
{"glSecondaryColor3ubvEXT", (void *)skibidigfx_glSecondaryColor3ubvEXT},
{"glSecondaryColor3uiEXT", (void *)skibidigfx_glSecondaryColor3uiEXT},
{"glSecondaryColor3uivEXT", (void *)skibidigfx_glSecondaryColor3uivEXT},
{"glSecondaryColor3usEXT", (void *)skibidigfx_glSecondaryColor3usEXT},
{"glSecondaryColor3usvEXT", (void *)skibidigfx_glSecondaryColor3usvEXT},
{"glSecondaryColorPointerEXT", (void *)skibidigfx_glSecondaryColorPointerEXT},
{"glGenSemaphoresEXT", (void *)skibidigfx_glGenSemaphoresEXT},
{"glDeleteSemaphoresEXT", (void *)skibidigfx_glDeleteSemaphoresEXT},
{"glIsSemaphoreEXT", (void *)skibidigfx_glIsSemaphoreEXT},
{"glSemaphoreParameterui64vEXT", (void *)skibidigfx_glSemaphoreParameterui64vEXT},
{"glGetSemaphoreParameterui64vEXT", (void *)skibidigfx_glGetSemaphoreParameterui64vEXT},
{"glWaitSemaphoreEXT", (void *)skibidigfx_glWaitSemaphoreEXT},
{"glSignalSemaphoreEXT", (void *)skibidigfx_glSignalSemaphoreEXT},
{"glImportSemaphoreFdEXT", (void *)skibidigfx_glImportSemaphoreFdEXT},
{"glImportSemaphoreWin32HandleEXT", (void *)skibidigfx_glImportSemaphoreWin32HandleEXT},
{"glImportSemaphoreWin32NameEXT", (void *)skibidigfx_glImportSemaphoreWin32NameEXT},
{"glUseShaderProgramEXT", (void *)skibidigfx_glUseShaderProgramEXT},
{"glActiveProgramEXT", (void *)skibidigfx_glActiveProgramEXT},
{"glCreateShaderProgramEXT", (void *)skibidigfx_glCreateShaderProgramEXT},
{"glFramebufferFetchBarrierEXT", (void *)skibidigfx_glFramebufferFetchBarrierEXT},
{"glBindImageTextureEXT", (void *)skibidigfx_glBindImageTextureEXT},
{"glMemoryBarrierEXT", (void *)skibidigfx_glMemoryBarrierEXT},
{"glStencilClearTagEXT", (void *)skibidigfx_glStencilClearTagEXT},
{"glActiveStencilFaceEXT", (void *)skibidigfx_glActiveStencilFaceEXT},
{"glTexSubImage1DEXT", (void *)skibidigfx_glTexSubImage1DEXT},
{"glTexSubImage2DEXT", (void *)skibidigfx_glTexSubImage2DEXT},
{"glTexImage3DEXT", (void *)skibidigfx_glTexImage3DEXT},
{"glTexSubImage3DEXT", (void *)skibidigfx_glTexSubImage3DEXT},
{"glFramebufferTextureLayerEXT", (void *)skibidigfx_glFramebufferTextureLayerEXT},
{"glTexBufferEXT", (void *)skibidigfx_glTexBufferEXT},
{"glTexParameterIivEXT", (void *)skibidigfx_glTexParameterIivEXT},
{"glTexParameterIuivEXT", (void *)skibidigfx_glTexParameterIuivEXT},
{"glGetTexParameterIivEXT", (void *)skibidigfx_glGetTexParameterIivEXT},
{"glGetTexParameterIuivEXT", (void *)skibidigfx_glGetTexParameterIuivEXT},
{"glClearColorIiEXT", (void *)skibidigfx_glClearColorIiEXT},
{"glClearColorIuiEXT", (void *)skibidigfx_glClearColorIuiEXT},
{"glAreTexturesResidentEXT", (void *)skibidigfx_glAreTexturesResidentEXT},
{"glBindTextureEXT", (void *)skibidigfx_glBindTextureEXT},
{"glDeleteTexturesEXT", (void *)skibidigfx_glDeleteTexturesEXT},
{"glGenTexturesEXT", (void *)skibidigfx_glGenTexturesEXT},
{"glIsTextureEXT", (void *)skibidigfx_glIsTextureEXT},
{"glPrioritizeTexturesEXT", (void *)skibidigfx_glPrioritizeTexturesEXT},
{"glTextureNormalEXT", (void *)skibidigfx_glTextureNormalEXT},
{"glGetQueryObjecti64vEXT", (void *)skibidigfx_glGetQueryObjecti64vEXT},
{"glGetQueryObjectui64vEXT", (void *)skibidigfx_glGetQueryObjectui64vEXT},
{"glBeginTransformFeedbackEXT", (void *)skibidigfx_glBeginTransformFeedbackEXT},
{"glEndTransformFeedbackEXT", (void *)skibidigfx_glEndTransformFeedbackEXT},
{"glBindBufferRangeEXT", (void *)skibidigfx_glBindBufferRangeEXT},
{"glBindBufferOffsetEXT", (void *)skibidigfx_glBindBufferOffsetEXT},
{"glBindBufferBaseEXT", (void *)skibidigfx_glBindBufferBaseEXT},
{"glTransformFeedbackVaryingsEXT", (void *)skibidigfx_glTransformFeedbackVaryingsEXT},
{"glGetTransformFeedbackVaryingEXT", (void *)skibidigfx_glGetTransformFeedbackVaryingEXT},
{"glArrayElementEXT", (void *)skibidigfx_glArrayElementEXT},
{"glColorPointerEXT", (void *)skibidigfx_glColorPointerEXT},
{"glDrawArraysEXT", (void *)skibidigfx_glDrawArraysEXT},
{"glEdgeFlagPointerEXT", (void *)skibidigfx_glEdgeFlagPointerEXT},
{"glGetPointervEXT", (void *)skibidigfx_glGetPointervEXT},
{"glIndexPointerEXT", (void *)skibidigfx_glIndexPointerEXT},
{"glNormalPointerEXT", (void *)skibidigfx_glNormalPointerEXT},
{"glTexCoordPointerEXT", (void *)skibidigfx_glTexCoordPointerEXT},
{"glVertexPointerEXT", (void *)skibidigfx_glVertexPointerEXT},
{"glVertexAttribL1dEXT", (void *)skibidigfx_glVertexAttribL1dEXT},
{"glVertexAttribL2dEXT", (void *)skibidigfx_glVertexAttribL2dEXT},
{"glVertexAttribL3dEXT", (void *)skibidigfx_glVertexAttribL3dEXT},
{"glVertexAttribL4dEXT", (void *)skibidigfx_glVertexAttribL4dEXT},
{"glVertexAttribL1dvEXT", (void *)skibidigfx_glVertexAttribL1dvEXT},
{"glVertexAttribL2dvEXT", (void *)skibidigfx_glVertexAttribL2dvEXT},
{"glVertexAttribL3dvEXT", (void *)skibidigfx_glVertexAttribL3dvEXT},
{"glVertexAttribL4dvEXT", (void *)skibidigfx_glVertexAttribL4dvEXT},
{"glVertexAttribLPointerEXT", (void *)skibidigfx_glVertexAttribLPointerEXT},
{"glGetVertexAttribLdvEXT", (void *)skibidigfx_glGetVertexAttribLdvEXT},
{"glBeginVertexShaderEXT", (void *)skibidigfx_glBeginVertexShaderEXT},
{"glEndVertexShaderEXT", (void *)skibidigfx_glEndVertexShaderEXT},
{"glBindVertexShaderEXT", (void *)skibidigfx_glBindVertexShaderEXT},
{"glGenVertexShadersEXT", (void *)skibidigfx_glGenVertexShadersEXT},
{"glDeleteVertexShaderEXT", (void *)skibidigfx_glDeleteVertexShaderEXT},
{"glShaderOp1EXT", (void *)skibidigfx_glShaderOp1EXT},
{"glShaderOp2EXT", (void *)skibidigfx_glShaderOp2EXT},
{"glShaderOp3EXT", (void *)skibidigfx_glShaderOp3EXT},
{"glSwizzleEXT", (void *)skibidigfx_glSwizzleEXT},
{"glWriteMaskEXT", (void *)skibidigfx_glWriteMaskEXT},
{"glInsertComponentEXT", (void *)skibidigfx_glInsertComponentEXT},
{"glExtractComponentEXT", (void *)skibidigfx_glExtractComponentEXT},
{"glGenSymbolsEXT", (void *)skibidigfx_glGenSymbolsEXT},
{"glSetInvariantEXT", (void *)skibidigfx_glSetInvariantEXT},
{"glSetLocalConstantEXT", (void *)skibidigfx_glSetLocalConstantEXT},
{"glVariantbvEXT", (void *)skibidigfx_glVariantbvEXT},
{"glVariantsvEXT", (void *)skibidigfx_glVariantsvEXT},
{"glVariantivEXT", (void *)skibidigfx_glVariantivEXT},
{"glVariantfvEXT", (void *)skibidigfx_glVariantfvEXT},
{"glVariantdvEXT", (void *)skibidigfx_glVariantdvEXT},
{"glVariantubvEXT", (void *)skibidigfx_glVariantubvEXT},
{"glVariantusvEXT", (void *)skibidigfx_glVariantusvEXT},
{"glVariantuivEXT", (void *)skibidigfx_glVariantuivEXT},
{"glVariantPointerEXT", (void *)skibidigfx_glVariantPointerEXT},
{"glEnableVariantClientStateEXT", (void *)skibidigfx_glEnableVariantClientStateEXT},
{"glDisableVariantClientStateEXT", (void *)skibidigfx_glDisableVariantClientStateEXT},
{"glBindLightParameterEXT", (void *)skibidigfx_glBindLightParameterEXT},
{"glBindMaterialParameterEXT", (void *)skibidigfx_glBindMaterialParameterEXT},
{"glBindTexGenParameterEXT", (void *)skibidigfx_glBindTexGenParameterEXT},
{"glBindTextureUnitParameterEXT", (void *)skibidigfx_glBindTextureUnitParameterEXT},
{"glBindParameterEXT", (void *)skibidigfx_glBindParameterEXT},
{"glIsVariantEnabledEXT", (void *)skibidigfx_glIsVariantEnabledEXT},
{"glGetVariantBooleanvEXT", (void *)skibidigfx_glGetVariantBooleanvEXT},
{"glGetVariantIntegervEXT", (void *)skibidigfx_glGetVariantIntegervEXT},
{"glGetVariantFloatvEXT", (void *)skibidigfx_glGetVariantFloatvEXT},
{"glGetVariantPointervEXT", (void *)skibidigfx_glGetVariantPointervEXT},
{"glGetInvariantBooleanvEXT", (void *)skibidigfx_glGetInvariantBooleanvEXT},
{"glGetInvariantIntegervEXT", (void *)skibidigfx_glGetInvariantIntegervEXT},
{"glGetInvariantFloatvEXT", (void *)skibidigfx_glGetInvariantFloatvEXT},
{"glGetLocalConstantBooleanvEXT", (void *)skibidigfx_glGetLocalConstantBooleanvEXT},
{"glGetLocalConstantIntegervEXT", (void *)skibidigfx_glGetLocalConstantIntegervEXT},
{"glGetLocalConstantFloatvEXT", (void *)skibidigfx_glGetLocalConstantFloatvEXT},
{"glVertexWeightfEXT", (void *)skibidigfx_glVertexWeightfEXT},
{"glVertexWeightfvEXT", (void *)skibidigfx_glVertexWeightfvEXT},
{"glVertexWeightPointerEXT", (void *)skibidigfx_glVertexWeightPointerEXT},
{"glAcquireKeyedMutexWin32EXT", (void *)skibidigfx_glAcquireKeyedMutexWin32EXT},
{"glReleaseKeyedMutexWin32EXT", (void *)skibidigfx_glReleaseKeyedMutexWin32EXT},
{"glWindowRectanglesEXT", (void *)skibidigfx_glWindowRectanglesEXT},
{"glImportSyncEXT", (void *)skibidigfx_glImportSyncEXT},
{"glFrameTerminatorGREMEDY", (void *)skibidigfx_glFrameTerminatorGREMEDY},
{"glStringMarkerGREMEDY", (void *)skibidigfx_glStringMarkerGREMEDY},
{"glImageTransformParameteriHP", (void *)skibidigfx_glImageTransformParameteriHP},
{"glImageTransformParameterfHP", (void *)skibidigfx_glImageTransformParameterfHP},
{"glImageTransformParameterivHP", (void *)skibidigfx_glImageTransformParameterivHP},
{"glImageTransformParameterfvHP", (void *)skibidigfx_glImageTransformParameterfvHP},
{"glGetImageTransformParameterivHP", (void *)skibidigfx_glGetImageTransformParameterivHP},
{"glGetImageTransformParameterfvHP", (void *)skibidigfx_glGetImageTransformParameterfvHP},
{"glMultiModeDrawArraysIBM", (void *)skibidigfx_glMultiModeDrawArraysIBM},
{"glMultiModeDrawElementsIBM", (void *)skibidigfx_glMultiModeDrawElementsIBM},
{"glFlushStaticDataIBM", (void *)skibidigfx_glFlushStaticDataIBM},
{"glColorPointerListIBM", (void *)skibidigfx_glColorPointerListIBM},
{"glSecondaryColorPointerListIBM", (void *)skibidigfx_glSecondaryColorPointerListIBM},
{"glEdgeFlagPointerListIBM", (void *)skibidigfx_glEdgeFlagPointerListIBM},
{"glFogCoordPointerListIBM", (void *)skibidigfx_glFogCoordPointerListIBM},
{"glIndexPointerListIBM", (void *)skibidigfx_glIndexPointerListIBM},
{"glNormalPointerListIBM", (void *)skibidigfx_glNormalPointerListIBM},
{"glTexCoordPointerListIBM", (void *)skibidigfx_glTexCoordPointerListIBM},
{"glVertexPointerListIBM", (void *)skibidigfx_glVertexPointerListIBM},
{"glBlendFuncSeparateINGR", (void *)skibidigfx_glBlendFuncSeparateINGR},
{"glApplyFramebufferAttachmentCMAAINTEL", (void *)skibidigfx_glApplyFramebufferAttachmentCMAAINTEL},
{"glSyncTextureINTEL", (void *)skibidigfx_glSyncTextureINTEL},
{"glUnmapTexture2DINTEL", (void *)skibidigfx_glUnmapTexture2DINTEL},
{"glMapTexture2DINTEL", (void *)skibidigfx_glMapTexture2DINTEL},
{"glVertexPointervINTEL", (void *)skibidigfx_glVertexPointervINTEL},
{"glNormalPointervINTEL", (void *)skibidigfx_glNormalPointervINTEL},
{"glColorPointervINTEL", (void *)skibidigfx_glColorPointervINTEL},
{"glTexCoordPointervINTEL", (void *)skibidigfx_glTexCoordPointervINTEL},
{"glBeginPerfQueryINTEL", (void *)skibidigfx_glBeginPerfQueryINTEL},
{"glCreatePerfQueryINTEL", (void *)skibidigfx_glCreatePerfQueryINTEL},
{"glDeletePerfQueryINTEL", (void *)skibidigfx_glDeletePerfQueryINTEL},
{"glEndPerfQueryINTEL", (void *)skibidigfx_glEndPerfQueryINTEL},
{"glGetFirstPerfQueryIdINTEL", (void *)skibidigfx_glGetFirstPerfQueryIdINTEL},
{"glGetNextPerfQueryIdINTEL", (void *)skibidigfx_glGetNextPerfQueryIdINTEL},
{"glGetPerfCounterInfoINTEL", (void *)skibidigfx_glGetPerfCounterInfoINTEL},
{"glGetPerfQueryDataINTEL", (void *)skibidigfx_glGetPerfQueryDataINTEL},
{"glGetPerfQueryIdByNameINTEL", (void *)skibidigfx_glGetPerfQueryIdByNameINTEL},
{"glGetPerfQueryInfoINTEL", (void *)skibidigfx_glGetPerfQueryInfoINTEL},
{"glResizeBuffersMESA", (void *)skibidigfx_glResizeBuffersMESA},
{"glWindowPos2dMESA", (void *)skibidigfx_glWindowPos2dMESA},
{"glWindowPos2dvMESA", (void *)skibidigfx_glWindowPos2dvMESA},
{"glWindowPos2fMESA", (void *)skibidigfx_glWindowPos2fMESA},
{"glWindowPos2fvMESA", (void *)skibidigfx_glWindowPos2fvMESA},
{"glWindowPos2iMESA", (void *)skibidigfx_glWindowPos2iMESA},
{"glWindowPos2ivMESA", (void *)skibidigfx_glWindowPos2ivMESA},
{"glWindowPos2sMESA", (void *)skibidigfx_glWindowPos2sMESA},
{"glWindowPos2svMESA", (void *)skibidigfx_glWindowPos2svMESA},
{"glWindowPos3dMESA", (void *)skibidigfx_glWindowPos3dMESA},
{"glWindowPos3dvMESA", (void *)skibidigfx_glWindowPos3dvMESA},
{"glWindowPos3fMESA", (void *)skibidigfx_glWindowPos3fMESA},
{"glWindowPos3fvMESA", (void *)skibidigfx_glWindowPos3fvMESA},
{"glWindowPos3iMESA", (void *)skibidigfx_glWindowPos3iMESA},
{"glWindowPos3ivMESA", (void *)skibidigfx_glWindowPos3ivMESA},
{"glWindowPos3sMESA", (void *)skibidigfx_glWindowPos3sMESA},
{"glWindowPos3svMESA", (void *)skibidigfx_glWindowPos3svMESA},
{"glWindowPos4dMESA", (void *)skibidigfx_glWindowPos4dMESA},
{"glWindowPos4dvMESA", (void *)skibidigfx_glWindowPos4dvMESA},
{"glWindowPos4fMESA", (void *)skibidigfx_glWindowPos4fMESA},
{"glWindowPos4fvMESA", (void *)skibidigfx_glWindowPos4fvMESA},
{"glWindowPos4iMESA", (void *)skibidigfx_glWindowPos4iMESA},
{"glWindowPos4ivMESA", (void *)skibidigfx_glWindowPos4ivMESA},
{"glWindowPos4sMESA", (void *)skibidigfx_glWindowPos4sMESA},
{"glWindowPos4svMESA", (void *)skibidigfx_glWindowPos4svMESA},
{"glBeginConditionalRenderNVX", (void *)skibidigfx_glBeginConditionalRenderNVX},
{"glEndConditionalRenderNVX", (void *)skibidigfx_glEndConditionalRenderNVX},
{"glLGPUNamedBufferSubDataNVX", (void *)skibidigfx_glLGPUNamedBufferSubDataNVX},
{"glLGPUCopyImageSubDataNVX", (void *)skibidigfx_glLGPUCopyImageSubDataNVX},
{"glLGPUInterlockNVX", (void *)skibidigfx_glLGPUInterlockNVX},
{"glAlphaToCoverageDitherControlNV", (void *)skibidigfx_glAlphaToCoverageDitherControlNV},
{"glMultiDrawArraysIndirectBindlessNV", (void *)skibidigfx_glMultiDrawArraysIndirectBindlessNV},
{"glMultiDrawElementsIndirectBindlessNV", (void *)skibidigfx_glMultiDrawElementsIndirectBindlessNV},
{"glMultiDrawArraysIndirectBindlessCountNV", (void *)skibidigfx_glMultiDrawArraysIndirectBindlessCountNV},
{"glMultiDrawElementsIndirectBindlessCountNV", (void *)skibidigfx_glMultiDrawElementsIndirectBindlessCountNV},
{"glGetTextureHandleNV", (void *)skibidigfx_glGetTextureHandleNV},
{"glGetTextureSamplerHandleNV", (void *)skibidigfx_glGetTextureSamplerHandleNV},
{"glMakeTextureHandleResidentNV", (void *)skibidigfx_glMakeTextureHandleResidentNV},
{"glMakeTextureHandleNonResidentNV", (void *)skibidigfx_glMakeTextureHandleNonResidentNV},
{"glGetImageHandleNV", (void *)skibidigfx_glGetImageHandleNV},
{"glMakeImageHandleResidentNV", (void *)skibidigfx_glMakeImageHandleResidentNV},
{"glMakeImageHandleNonResidentNV", (void *)skibidigfx_glMakeImageHandleNonResidentNV},
{"glUniformHandleui64NV", (void *)skibidigfx_glUniformHandleui64NV},
{"glUniformHandleui64vNV", (void *)skibidigfx_glUniformHandleui64vNV},
{"glProgramUniformHandleui64NV", (void *)skibidigfx_glProgramUniformHandleui64NV},
{"glProgramUniformHandleui64vNV", (void *)skibidigfx_glProgramUniformHandleui64vNV},
{"glIsTextureHandleResidentNV", (void *)skibidigfx_glIsTextureHandleResidentNV},
{"glIsImageHandleResidentNV", (void *)skibidigfx_glIsImageHandleResidentNV},
{"glBlendParameteriNV", (void *)skibidigfx_glBlendParameteriNV},
{"glBlendBarrierNV", (void *)skibidigfx_glBlendBarrierNV},
{"glViewportPositionWScaleNV", (void *)skibidigfx_glViewportPositionWScaleNV},
{"glCreateStatesNV", (void *)skibidigfx_glCreateStatesNV},
{"glDeleteStatesNV", (void *)skibidigfx_glDeleteStatesNV},
{"glIsStateNV", (void *)skibidigfx_glIsStateNV},
{"glStateCaptureNV", (void *)skibidigfx_glStateCaptureNV},
{"glGetCommandHeaderNV", (void *)skibidigfx_glGetCommandHeaderNV},
{"glGetStageIndexNV", (void *)skibidigfx_glGetStageIndexNV},
{"glDrawCommandsNV", (void *)skibidigfx_glDrawCommandsNV},
{"glDrawCommandsAddressNV", (void *)skibidigfx_glDrawCommandsAddressNV},
{"glDrawCommandsStatesNV", (void *)skibidigfx_glDrawCommandsStatesNV},
{"glDrawCommandsStatesAddressNV", (void *)skibidigfx_glDrawCommandsStatesAddressNV},
{"glCreateCommandListsNV", (void *)skibidigfx_glCreateCommandListsNV},
{"glDeleteCommandListsNV", (void *)skibidigfx_glDeleteCommandListsNV},
{"glIsCommandListNV", (void *)skibidigfx_glIsCommandListNV},
{"glListDrawCommandsStatesClientNV", (void *)skibidigfx_glListDrawCommandsStatesClientNV},
{"glCommandListSegmentsNV", (void *)skibidigfx_glCommandListSegmentsNV},
{"glCompileCommandListNV", (void *)skibidigfx_glCompileCommandListNV},
{"glCallCommandListNV", (void *)skibidigfx_glCallCommandListNV},
{"glBeginConditionalRenderNV", (void *)skibidigfx_glBeginConditionalRenderNV},
{"glEndConditionalRenderNV", (void *)skibidigfx_glEndConditionalRenderNV},
{"glSubpixelPrecisionBiasNV", (void *)skibidigfx_glSubpixelPrecisionBiasNV},
{"glConservativeRasterParameterfNV", (void *)skibidigfx_glConservativeRasterParameterfNV},
{"glConservativeRasterParameteriNV", (void *)skibidigfx_glConservativeRasterParameteriNV},
{"glCopyImageSubDataNV", (void *)skibidigfx_glCopyImageSubDataNV},
{"glDepthRangedNV", (void *)skibidigfx_glDepthRangedNV},
{"glClearDepthdNV", (void *)skibidigfx_glClearDepthdNV},
{"glDepthBoundsdNV", (void *)skibidigfx_glDepthBoundsdNV},
{"glDrawTextureNV", (void *)skibidigfx_glDrawTextureNV},
{"glDrawVkImageNV", (void *)skibidigfx_glDrawVkImageNV},
{"glGetVkProcAddrNV", (void *)skibidigfx_glGetVkProcAddrNV},
{"glWaitVkSemaphoreNV", (void *)skibidigfx_glWaitVkSemaphoreNV},
{"glSignalVkSemaphoreNV", (void *)skibidigfx_glSignalVkSemaphoreNV},
{"glSignalVkFenceNV", (void *)skibidigfx_glSignalVkFenceNV},
{"glMapControlPointsNV", (void *)skibidigfx_glMapControlPointsNV},
{"glMapParameterivNV", (void *)skibidigfx_glMapParameterivNV},
{"glMapParameterfvNV", (void *)skibidigfx_glMapParameterfvNV},
{"glGetMapControlPointsNV", (void *)skibidigfx_glGetMapControlPointsNV},
{"glGetMapParameterivNV", (void *)skibidigfx_glGetMapParameterivNV},
{"glGetMapParameterfvNV", (void *)skibidigfx_glGetMapParameterfvNV},
{"glGetMapAttribParameterivNV", (void *)skibidigfx_glGetMapAttribParameterivNV},
{"glGetMapAttribParameterfvNV", (void *)skibidigfx_glGetMapAttribParameterfvNV},
{"glEvalMapsNV", (void *)skibidigfx_glEvalMapsNV},
{"glGetMultisamplefvNV", (void *)skibidigfx_glGetMultisamplefvNV},
{"glSampleMaskIndexedNV", (void *)skibidigfx_glSampleMaskIndexedNV},
{"glTexRenderbufferNV", (void *)skibidigfx_glTexRenderbufferNV},
{"glDeleteFencesNV", (void *)skibidigfx_glDeleteFencesNV},
{"glGenFencesNV", (void *)skibidigfx_glGenFencesNV},
{"glIsFenceNV", (void *)skibidigfx_glIsFenceNV},
{"glTestFenceNV", (void *)skibidigfx_glTestFenceNV},
{"glGetFenceivNV", (void *)skibidigfx_glGetFenceivNV},
{"glFinishFenceNV", (void *)skibidigfx_glFinishFenceNV},
{"glSetFenceNV", (void *)skibidigfx_glSetFenceNV},
{"glFragmentCoverageColorNV", (void *)skibidigfx_glFragmentCoverageColorNV},
{"glProgramNamedParameter4fNV", (void *)skibidigfx_glProgramNamedParameter4fNV},
{"glProgramNamedParameter4fvNV", (void *)skibidigfx_glProgramNamedParameter4fvNV},
{"glProgramNamedParameter4dNV", (void *)skibidigfx_glProgramNamedParameter4dNV},
{"glProgramNamedParameter4dvNV", (void *)skibidigfx_glProgramNamedParameter4dvNV},
{"glGetProgramNamedParameterfvNV", (void *)skibidigfx_glGetProgramNamedParameterfvNV},
{"glGetProgramNamedParameterdvNV", (void *)skibidigfx_glGetProgramNamedParameterdvNV},
{"glCoverageModulationTableNV", (void *)skibidigfx_glCoverageModulationTableNV},
{"glGetCoverageModulationTableNV", (void *)skibidigfx_glGetCoverageModulationTableNV},
{"glCoverageModulationNV", (void *)skibidigfx_glCoverageModulationNV},
{"glRenderbufferStorageMultisampleCoverageNV", (void *)skibidigfx_glRenderbufferStorageMultisampleCoverageNV},
{"glProgramVertexLimitNV", (void *)skibidigfx_glProgramVertexLimitNV},
{"glFramebufferTextureEXT", (void *)skibidigfx_glFramebufferTextureEXT},
{"glFramebufferTextureFaceEXT", (void *)skibidigfx_glFramebufferTextureFaceEXT},
{"glRenderGpuMaskNV", (void *)skibidigfx_glRenderGpuMaskNV},
{"glMulticastBufferSubDataNV", (void *)skibidigfx_glMulticastBufferSubDataNV},
{"glMulticastCopyBufferSubDataNV", (void *)skibidigfx_glMulticastCopyBufferSubDataNV},
{"glMulticastCopyImageSubDataNV", (void *)skibidigfx_glMulticastCopyImageSubDataNV},
{"glMulticastBlitFramebufferNV", (void *)skibidigfx_glMulticastBlitFramebufferNV},
{"glMulticastFramebufferSampleLocationsfvNV", (void *)skibidigfx_glMulticastFramebufferSampleLocationsfvNV},
{"glMulticastBarrierNV", (void *)skibidigfx_glMulticastBarrierNV},
{"glMulticastWaitSyncNV", (void *)skibidigfx_glMulticastWaitSyncNV},
{"glMulticastGetQueryObjectivNV", (void *)skibidigfx_glMulticastGetQueryObjectivNV},
{"glMulticastGetQueryObjectuivNV", (void *)skibidigfx_glMulticastGetQueryObjectuivNV},
{"glMulticastGetQueryObjecti64vNV", (void *)skibidigfx_glMulticastGetQueryObjecti64vNV},
{"glMulticastGetQueryObjectui64vNV", (void *)skibidigfx_glMulticastGetQueryObjectui64vNV},
{"glProgramLocalParameterI4iNV", (void *)skibidigfx_glProgramLocalParameterI4iNV},
{"glProgramLocalParameterI4ivNV", (void *)skibidigfx_glProgramLocalParameterI4ivNV},
{"glProgramLocalParametersI4ivNV", (void *)skibidigfx_glProgramLocalParametersI4ivNV},
{"glProgramLocalParameterI4uiNV", (void *)skibidigfx_glProgramLocalParameterI4uiNV},
{"glProgramLocalParameterI4uivNV", (void *)skibidigfx_glProgramLocalParameterI4uivNV},
{"glProgramLocalParametersI4uivNV", (void *)skibidigfx_glProgramLocalParametersI4uivNV},
{"glProgramEnvParameterI4iNV", (void *)skibidigfx_glProgramEnvParameterI4iNV},
{"glProgramEnvParameterI4ivNV", (void *)skibidigfx_glProgramEnvParameterI4ivNV},
{"glProgramEnvParametersI4ivNV", (void *)skibidigfx_glProgramEnvParametersI4ivNV},
{"glProgramEnvParameterI4uiNV", (void *)skibidigfx_glProgramEnvParameterI4uiNV},
{"glProgramEnvParameterI4uivNV", (void *)skibidigfx_glProgramEnvParameterI4uivNV},
{"glProgramEnvParametersI4uivNV", (void *)skibidigfx_glProgramEnvParametersI4uivNV},
{"glGetProgramLocalParameterIivNV", (void *)skibidigfx_glGetProgramLocalParameterIivNV},
{"glGetProgramLocalParameterIuivNV", (void *)skibidigfx_glGetProgramLocalParameterIuivNV},
{"glGetProgramEnvParameterIivNV", (void *)skibidigfx_glGetProgramEnvParameterIivNV},
{"glGetProgramEnvParameterIuivNV", (void *)skibidigfx_glGetProgramEnvParameterIuivNV},
{"glProgramSubroutineParametersuivNV", (void *)skibidigfx_glProgramSubroutineParametersuivNV},
{"glGetProgramSubroutineParameteruivNV", (void *)skibidigfx_glGetProgramSubroutineParameteruivNV},
{"glVertex2hNV", (void *)skibidigfx_glVertex2hNV},
{"glVertex2hvNV", (void *)skibidigfx_glVertex2hvNV},
{"glVertex3hNV", (void *)skibidigfx_glVertex3hNV},
{"glVertex3hvNV", (void *)skibidigfx_glVertex3hvNV},
{"glVertex4hNV", (void *)skibidigfx_glVertex4hNV},
{"glVertex4hvNV", (void *)skibidigfx_glVertex4hvNV},
{"glNormal3hNV", (void *)skibidigfx_glNormal3hNV},
{"glNormal3hvNV", (void *)skibidigfx_glNormal3hvNV},
{"glColor3hNV", (void *)skibidigfx_glColor3hNV},
{"glColor3hvNV", (void *)skibidigfx_glColor3hvNV},
{"glColor4hNV", (void *)skibidigfx_glColor4hNV},
{"glColor4hvNV", (void *)skibidigfx_glColor4hvNV},
{"glTexCoord1hNV", (void *)skibidigfx_glTexCoord1hNV},
{"glTexCoord1hvNV", (void *)skibidigfx_glTexCoord1hvNV},
{"glTexCoord2hNV", (void *)skibidigfx_glTexCoord2hNV},
{"glTexCoord2hvNV", (void *)skibidigfx_glTexCoord2hvNV},
{"glTexCoord3hNV", (void *)skibidigfx_glTexCoord3hNV},
{"glTexCoord3hvNV", (void *)skibidigfx_glTexCoord3hvNV},
{"glTexCoord4hNV", (void *)skibidigfx_glTexCoord4hNV},
{"glTexCoord4hvNV", (void *)skibidigfx_glTexCoord4hvNV},
{"glMultiTexCoord1hNV", (void *)skibidigfx_glMultiTexCoord1hNV},
{"glMultiTexCoord1hvNV", (void *)skibidigfx_glMultiTexCoord1hvNV},
{"glMultiTexCoord2hNV", (void *)skibidigfx_glMultiTexCoord2hNV},
{"glMultiTexCoord2hvNV", (void *)skibidigfx_glMultiTexCoord2hvNV},
{"glMultiTexCoord3hNV", (void *)skibidigfx_glMultiTexCoord3hNV},
{"glMultiTexCoord3hvNV", (void *)skibidigfx_glMultiTexCoord3hvNV},
{"glMultiTexCoord4hNV", (void *)skibidigfx_glMultiTexCoord4hNV},
{"glMultiTexCoord4hvNV", (void *)skibidigfx_glMultiTexCoord4hvNV},
{"glFogCoordhNV", (void *)skibidigfx_glFogCoordhNV},
{"glFogCoordhvNV", (void *)skibidigfx_glFogCoordhvNV},
{"glSecondaryColor3hNV", (void *)skibidigfx_glSecondaryColor3hNV},
{"glSecondaryColor3hvNV", (void *)skibidigfx_glSecondaryColor3hvNV},
{"glVertexWeighthNV", (void *)skibidigfx_glVertexWeighthNV},
{"glVertexWeighthvNV", (void *)skibidigfx_glVertexWeighthvNV},
{"glVertexAttrib1hNV", (void *)skibidigfx_glVertexAttrib1hNV},
{"glVertexAttrib1hvNV", (void *)skibidigfx_glVertexAttrib1hvNV},
{"glVertexAttrib2hNV", (void *)skibidigfx_glVertexAttrib2hNV},
{"glVertexAttrib2hvNV", (void *)skibidigfx_glVertexAttrib2hvNV},
{"glVertexAttrib3hNV", (void *)skibidigfx_glVertexAttrib3hNV},
{"glVertexAttrib3hvNV", (void *)skibidigfx_glVertexAttrib3hvNV},
{"glVertexAttrib4hNV", (void *)skibidigfx_glVertexAttrib4hNV},
{"glVertexAttrib4hvNV", (void *)skibidigfx_glVertexAttrib4hvNV},
{"glVertexAttribs1hvNV", (void *)skibidigfx_glVertexAttribs1hvNV},
{"glVertexAttribs2hvNV", (void *)skibidigfx_glVertexAttribs2hvNV},
{"glVertexAttribs3hvNV", (void *)skibidigfx_glVertexAttribs3hvNV},
{"glVertexAttribs4hvNV", (void *)skibidigfx_glVertexAttribs4hvNV},
{"glGetInternalformatSampleivNV", (void *)skibidigfx_glGetInternalformatSampleivNV},
{"glGetMemoryObjectDetachedResourcesuivNV", (void *)skibidigfx_glGetMemoryObjectDetachedResourcesuivNV},
{"glResetMemoryObjectParameterNV", (void *)skibidigfx_glResetMemoryObjectParameterNV},
{"glTexAttachMemoryNV", (void *)skibidigfx_glTexAttachMemoryNV},
{"glBufferAttachMemoryNV", (void *)skibidigfx_glBufferAttachMemoryNV},
{"glTextureAttachMemoryNV", (void *)skibidigfx_glTextureAttachMemoryNV},
{"glNamedBufferAttachMemoryNV", (void *)skibidigfx_glNamedBufferAttachMemoryNV},
{"glDrawMeshTasksNV", (void *)skibidigfx_glDrawMeshTasksNV},
{"glDrawMeshTasksIndirectNV", (void *)skibidigfx_glDrawMeshTasksIndirectNV},
{"glMultiDrawMeshTasksIndirectNV", (void *)skibidigfx_glMultiDrawMeshTasksIndirectNV},
{"glMultiDrawMeshTasksIndirectCountNV", (void *)skibidigfx_glMultiDrawMeshTasksIndirectCountNV},
{"glGenOcclusionQueriesNV", (void *)skibidigfx_glGenOcclusionQueriesNV},
{"glDeleteOcclusionQueriesNV", (void *)skibidigfx_glDeleteOcclusionQueriesNV},
{"glIsOcclusionQueryNV", (void *)skibidigfx_glIsOcclusionQueryNV},
{"glBeginOcclusionQueryNV", (void *)skibidigfx_glBeginOcclusionQueryNV},
{"glEndOcclusionQueryNV", (void *)skibidigfx_glEndOcclusionQueryNV},
{"glGetOcclusionQueryivNV", (void *)skibidigfx_glGetOcclusionQueryivNV},
{"glGetOcclusionQueryuivNV", (void *)skibidigfx_glGetOcclusionQueryuivNV},
{"glProgramBufferParametersfvNV", (void *)skibidigfx_glProgramBufferParametersfvNV},
{"glProgramBufferParametersIivNV", (void *)skibidigfx_glProgramBufferParametersIivNV},
{"glProgramBufferParametersIuivNV", (void *)skibidigfx_glProgramBufferParametersIuivNV},
{"glGenPathsNV", (void *)skibidigfx_glGenPathsNV},
{"glDeletePathsNV", (void *)skibidigfx_glDeletePathsNV},
{"glIsPathNV", (void *)skibidigfx_glIsPathNV},
{"glPathCommandsNV", (void *)skibidigfx_glPathCommandsNV},
{"glPathCoordsNV", (void *)skibidigfx_glPathCoordsNV},
{"glPathSubCommandsNV", (void *)skibidigfx_glPathSubCommandsNV},
{"glPathSubCoordsNV", (void *)skibidigfx_glPathSubCoordsNV},
{"glPathStringNV", (void *)skibidigfx_glPathStringNV},
{"glPathGlyphsNV", (void *)skibidigfx_glPathGlyphsNV},
{"glPathGlyphRangeNV", (void *)skibidigfx_glPathGlyphRangeNV},
{"glWeightPathsNV", (void *)skibidigfx_glWeightPathsNV},
{"glCopyPathNV", (void *)skibidigfx_glCopyPathNV},
{"glInterpolatePathsNV", (void *)skibidigfx_glInterpolatePathsNV},
{"glTransformPathNV", (void *)skibidigfx_glTransformPathNV},
{"glPathParameterivNV", (void *)skibidigfx_glPathParameterivNV},
{"glPathParameteriNV", (void *)skibidigfx_glPathParameteriNV},
{"glPathParameterfvNV", (void *)skibidigfx_glPathParameterfvNV},
{"glPathParameterfNV", (void *)skibidigfx_glPathParameterfNV},
{"glPathDashArrayNV", (void *)skibidigfx_glPathDashArrayNV},
{"glPathStencilFuncNV", (void *)skibidigfx_glPathStencilFuncNV},
{"glPathStencilDepthOffsetNV", (void *)skibidigfx_glPathStencilDepthOffsetNV},
{"glStencilFillPathNV", (void *)skibidigfx_glStencilFillPathNV},
{"glStencilStrokePathNV", (void *)skibidigfx_glStencilStrokePathNV},
{"glStencilFillPathInstancedNV", (void *)skibidigfx_glStencilFillPathInstancedNV},
{"glStencilStrokePathInstancedNV", (void *)skibidigfx_glStencilStrokePathInstancedNV},
{"glPathCoverDepthFuncNV", (void *)skibidigfx_glPathCoverDepthFuncNV},
{"glCoverFillPathNV", (void *)skibidigfx_glCoverFillPathNV},
{"glCoverStrokePathNV", (void *)skibidigfx_glCoverStrokePathNV},
{"glCoverFillPathInstancedNV", (void *)skibidigfx_glCoverFillPathInstancedNV},
{"glCoverStrokePathInstancedNV", (void *)skibidigfx_glCoverStrokePathInstancedNV},
{"glGetPathParameterivNV", (void *)skibidigfx_glGetPathParameterivNV},
{"glGetPathParameterfvNV", (void *)skibidigfx_glGetPathParameterfvNV},
{"glGetPathCommandsNV", (void *)skibidigfx_glGetPathCommandsNV},
{"glGetPathCoordsNV", (void *)skibidigfx_glGetPathCoordsNV},
{"glGetPathDashArrayNV", (void *)skibidigfx_glGetPathDashArrayNV},
{"glGetPathMetricsNV", (void *)skibidigfx_glGetPathMetricsNV},
{"glGetPathMetricRangeNV", (void *)skibidigfx_glGetPathMetricRangeNV},
{"glGetPathSpacingNV", (void *)skibidigfx_glGetPathSpacingNV},
{"glIsPointInFillPathNV", (void *)skibidigfx_glIsPointInFillPathNV},
{"glIsPointInStrokePathNV", (void *)skibidigfx_glIsPointInStrokePathNV},
{"glGetPathLengthNV", (void *)skibidigfx_glGetPathLengthNV},
{"glPointAlongPathNV", (void *)skibidigfx_glPointAlongPathNV},
{"glMatrixLoad3x2fNV", (void *)skibidigfx_glMatrixLoad3x2fNV},
{"glMatrixLoad3x3fNV", (void *)skibidigfx_glMatrixLoad3x3fNV},
{"glMatrixLoadTranspose3x3fNV", (void *)skibidigfx_glMatrixLoadTranspose3x3fNV},
{"glMatrixMult3x2fNV", (void *)skibidigfx_glMatrixMult3x2fNV},
{"glMatrixMult3x3fNV", (void *)skibidigfx_glMatrixMult3x3fNV},
{"glMatrixMultTranspose3x3fNV", (void *)skibidigfx_glMatrixMultTranspose3x3fNV},
{"glStencilThenCoverFillPathNV", (void *)skibidigfx_glStencilThenCoverFillPathNV},
{"glStencilThenCoverStrokePathNV", (void *)skibidigfx_glStencilThenCoverStrokePathNV},
{"glStencilThenCoverFillPathInstancedNV", (void *)skibidigfx_glStencilThenCoverFillPathInstancedNV},
{"glStencilThenCoverStrokePathInstancedNV", (void *)skibidigfx_glStencilThenCoverStrokePathInstancedNV},
{"glPathGlyphIndexRangeNV", (void *)skibidigfx_glPathGlyphIndexRangeNV},
{"glPathGlyphIndexArrayNV", (void *)skibidigfx_glPathGlyphIndexArrayNV},
{"glPathMemoryGlyphIndexArrayNV", (void *)skibidigfx_glPathMemoryGlyphIndexArrayNV},
{"glProgramPathFragmentInputGenNV", (void *)skibidigfx_glProgramPathFragmentInputGenNV},
{"glGetProgramResourcefvNV", (void *)skibidigfx_glGetProgramResourcefvNV},
{"glPathColorGenNV", (void *)skibidigfx_glPathColorGenNV},
{"glPathTexGenNV", (void *)skibidigfx_glPathTexGenNV},
{"glPathFogGenNV", (void *)skibidigfx_glPathFogGenNV},
{"glGetPathColorGenivNV", (void *)skibidigfx_glGetPathColorGenivNV},
{"glGetPathColorGenfvNV", (void *)skibidigfx_glGetPathColorGenfvNV},
{"glGetPathTexGenivNV", (void *)skibidigfx_glGetPathTexGenivNV},
{"glGetPathTexGenfvNV", (void *)skibidigfx_glGetPathTexGenfvNV},
{"glPixelDataRangeNV", (void *)skibidigfx_glPixelDataRangeNV},
{"glFlushPixelDataRangeNV", (void *)skibidigfx_glFlushPixelDataRangeNV},
{"glPointParameteriNV", (void *)skibidigfx_glPointParameteriNV},
{"glPointParameterivNV", (void *)skibidigfx_glPointParameterivNV},
{"glPresentFrameKeyedNV", (void *)skibidigfx_glPresentFrameKeyedNV},
{"glPresentFrameDualFillNV", (void *)skibidigfx_glPresentFrameDualFillNV},
{"glGetVideoivNV", (void *)skibidigfx_glGetVideoivNV},
{"glGetVideouivNV", (void *)skibidigfx_glGetVideouivNV},
{"glGetVideoi64vNV", (void *)skibidigfx_glGetVideoi64vNV},
{"glGetVideoui64vNV", (void *)skibidigfx_glGetVideoui64vNV},
{"glPrimitiveRestartNV", (void *)skibidigfx_glPrimitiveRestartNV},
{"glPrimitiveRestartIndexNV", (void *)skibidigfx_glPrimitiveRestartIndexNV},
{"glQueryResourceNV", (void *)skibidigfx_glQueryResourceNV},
{"glGenQueryResourceTagNV", (void *)skibidigfx_glGenQueryResourceTagNV},
{"glDeleteQueryResourceTagNV", (void *)skibidigfx_glDeleteQueryResourceTagNV},
{"glQueryResourceTagNV", (void *)skibidigfx_glQueryResourceTagNV},
{"glCombinerParameterfvNV", (void *)skibidigfx_glCombinerParameterfvNV},
{"glCombinerParameterfNV", (void *)skibidigfx_glCombinerParameterfNV},
{"glCombinerParameterivNV", (void *)skibidigfx_glCombinerParameterivNV},
{"glCombinerParameteriNV", (void *)skibidigfx_glCombinerParameteriNV},
{"glCombinerInputNV", (void *)skibidigfx_glCombinerInputNV},
{"glCombinerOutputNV", (void *)skibidigfx_glCombinerOutputNV},
{"glFinalCombinerInputNV", (void *)skibidigfx_glFinalCombinerInputNV},
{"glGetCombinerInputParameterfvNV", (void *)skibidigfx_glGetCombinerInputParameterfvNV},
{"glGetCombinerInputParameterivNV", (void *)skibidigfx_glGetCombinerInputParameterivNV},
{"glGetCombinerOutputParameterfvNV", (void *)skibidigfx_glGetCombinerOutputParameterfvNV},
{"glGetCombinerOutputParameterivNV", (void *)skibidigfx_glGetCombinerOutputParameterivNV},
{"glGetFinalCombinerInputParameterfvNV", (void *)skibidigfx_glGetFinalCombinerInputParameterfvNV},
{"glGetFinalCombinerInputParameterivNV", (void *)skibidigfx_glGetFinalCombinerInputParameterivNV},
{"glCombinerStageParameterfvNV", (void *)skibidigfx_glCombinerStageParameterfvNV},
{"glGetCombinerStageParameterfvNV", (void *)skibidigfx_glGetCombinerStageParameterfvNV},
{"glFramebufferSampleLocationsfvNV", (void *)skibidigfx_glFramebufferSampleLocationsfvNV},
{"glNamedFramebufferSampleLocationsfvNV", (void *)skibidigfx_glNamedFramebufferSampleLocationsfvNV},
{"glResolveDepthValuesNV", (void *)skibidigfx_glResolveDepthValuesNV},
{"glScissorExclusiveNV", (void *)skibidigfx_glScissorExclusiveNV},
{"glScissorExclusiveArrayvNV", (void *)skibidigfx_glScissorExclusiveArrayvNV},
{"glMakeBufferResidentNV", (void *)skibidigfx_glMakeBufferResidentNV},
{"glMakeBufferNonResidentNV", (void *)skibidigfx_glMakeBufferNonResidentNV},
{"glIsBufferResidentNV", (void *)skibidigfx_glIsBufferResidentNV},
{"glMakeNamedBufferResidentNV", (void *)skibidigfx_glMakeNamedBufferResidentNV},
{"glMakeNamedBufferNonResidentNV", (void *)skibidigfx_glMakeNamedBufferNonResidentNV},
{"glIsNamedBufferResidentNV", (void *)skibidigfx_glIsNamedBufferResidentNV},
{"glGetBufferParameterui64vNV", (void *)skibidigfx_glGetBufferParameterui64vNV},
{"glGetNamedBufferParameterui64vNV", (void *)skibidigfx_glGetNamedBufferParameterui64vNV},
{"glGetIntegerui64vNV", (void *)skibidigfx_glGetIntegerui64vNV},
{"glUniformui64NV", (void *)skibidigfx_glUniformui64NV},
{"glUniformui64vNV", (void *)skibidigfx_glUniformui64vNV},
{"glProgramUniformui64NV", (void *)skibidigfx_glProgramUniformui64NV},
{"glProgramUniformui64vNV", (void *)skibidigfx_glProgramUniformui64vNV},
{"glBindShadingRateImageNV", (void *)skibidigfx_glBindShadingRateImageNV},
{"glGetShadingRateImagePaletteNV", (void *)skibidigfx_glGetShadingRateImagePaletteNV},
{"glGetShadingRateSampleLocationivNV", (void *)skibidigfx_glGetShadingRateSampleLocationivNV},
{"glShadingRateImageBarrierNV", (void *)skibidigfx_glShadingRateImageBarrierNV},
{"glShadingRateImagePaletteNV", (void *)skibidigfx_glShadingRateImagePaletteNV},
{"glShadingRateSampleOrderNV", (void *)skibidigfx_glShadingRateSampleOrderNV},
{"glShadingRateSampleOrderCustomNV", (void *)skibidigfx_glShadingRateSampleOrderCustomNV},
{"glTextureBarrierNV", (void *)skibidigfx_glTextureBarrierNV},
{"glTexImage2DMultisampleCoverageNV", (void *)skibidigfx_glTexImage2DMultisampleCoverageNV},
{"glTexImage3DMultisampleCoverageNV", (void *)skibidigfx_glTexImage3DMultisampleCoverageNV},
{"glTextureImage2DMultisampleNV", (void *)skibidigfx_glTextureImage2DMultisampleNV},
{"glTextureImage3DMultisampleNV", (void *)skibidigfx_glTextureImage3DMultisampleNV},
{"glTextureImage2DMultisampleCoverageNV", (void *)skibidigfx_glTextureImage2DMultisampleCoverageNV},
{"glTextureImage3DMultisampleCoverageNV", (void *)skibidigfx_glTextureImage3DMultisampleCoverageNV},
{"glBeginTransformFeedbackNV", (void *)skibidigfx_glBeginTransformFeedbackNV},
{"glEndTransformFeedbackNV", (void *)skibidigfx_glEndTransformFeedbackNV},
{"glTransformFeedbackAttribsNV", (void *)skibidigfx_glTransformFeedbackAttribsNV},
{"glBindBufferRangeNV", (void *)skibidigfx_glBindBufferRangeNV},
{"glBindBufferOffsetNV", (void *)skibidigfx_glBindBufferOffsetNV},
{"glBindBufferBaseNV", (void *)skibidigfx_glBindBufferBaseNV},
{"glTransformFeedbackVaryingsNV", (void *)skibidigfx_glTransformFeedbackVaryingsNV},
{"glActiveVaryingNV", (void *)skibidigfx_glActiveVaryingNV},
{"glGetVaryingLocationNV", (void *)skibidigfx_glGetVaryingLocationNV},
{"glGetActiveVaryingNV", (void *)skibidigfx_glGetActiveVaryingNV},
{"glGetTransformFeedbackVaryingNV", (void *)skibidigfx_glGetTransformFeedbackVaryingNV},
{"glTransformFeedbackStreamAttribsNV", (void *)skibidigfx_glTransformFeedbackStreamAttribsNV},
{"glBindTransformFeedbackNV", (void *)skibidigfx_glBindTransformFeedbackNV},
{"glDeleteTransformFeedbacksNV", (void *)skibidigfx_glDeleteTransformFeedbacksNV},
{"glGenTransformFeedbacksNV", (void *)skibidigfx_glGenTransformFeedbacksNV},
{"glIsTransformFeedbackNV", (void *)skibidigfx_glIsTransformFeedbackNV},
{"glPauseTransformFeedbackNV", (void *)skibidigfx_glPauseTransformFeedbackNV},
{"glResumeTransformFeedbackNV", (void *)skibidigfx_glResumeTransformFeedbackNV},
{"glDrawTransformFeedbackNV", (void *)skibidigfx_glDrawTransformFeedbackNV},
{"glVDPAUInitNV", (void *)skibidigfx_glVDPAUInitNV},
{"glVDPAUFiniNV", (void *)skibidigfx_glVDPAUFiniNV},
{"glVDPAURegisterVideoSurfaceNV", (void *)skibidigfx_glVDPAURegisterVideoSurfaceNV},
{"glVDPAURegisterOutputSurfaceNV", (void *)skibidigfx_glVDPAURegisterOutputSurfaceNV},
{"glVDPAUIsSurfaceNV", (void *)skibidigfx_glVDPAUIsSurfaceNV},
{"glVDPAUUnregisterSurfaceNV", (void *)skibidigfx_glVDPAUUnregisterSurfaceNV},
{"glVDPAUGetSurfaceivNV", (void *)skibidigfx_glVDPAUGetSurfaceivNV},
{"glVDPAUSurfaceAccessNV", (void *)skibidigfx_glVDPAUSurfaceAccessNV},
{"glVDPAUMapSurfacesNV", (void *)skibidigfx_glVDPAUMapSurfacesNV},
{"glVDPAUUnmapSurfacesNV", (void *)skibidigfx_glVDPAUUnmapSurfacesNV},
{"glVDPAURegisterVideoSurfaceWithPictureStructureNV", (void *)skibidigfx_glVDPAURegisterVideoSurfaceWithPictureStructureNV},
{"glFlushVertexArrayRangeNV", (void *)skibidigfx_glFlushVertexArrayRangeNV},
{"glVertexArrayRangeNV", (void *)skibidigfx_glVertexArrayRangeNV},
{"glVertexAttribL1i64NV", (void *)skibidigfx_glVertexAttribL1i64NV},
{"glVertexAttribL2i64NV", (void *)skibidigfx_glVertexAttribL2i64NV},
{"glVertexAttribL3i64NV", (void *)skibidigfx_glVertexAttribL3i64NV},
{"glVertexAttribL4i64NV", (void *)skibidigfx_glVertexAttribL4i64NV},
{"glVertexAttribL1i64vNV", (void *)skibidigfx_glVertexAttribL1i64vNV},
{"glVertexAttribL2i64vNV", (void *)skibidigfx_glVertexAttribL2i64vNV},
{"glVertexAttribL3i64vNV", (void *)skibidigfx_glVertexAttribL3i64vNV},
{"glVertexAttribL4i64vNV", (void *)skibidigfx_glVertexAttribL4i64vNV},
{"glVertexAttribL1ui64NV", (void *)skibidigfx_glVertexAttribL1ui64NV},
{"glVertexAttribL2ui64NV", (void *)skibidigfx_glVertexAttribL2ui64NV},
{"glVertexAttribL3ui64NV", (void *)skibidigfx_glVertexAttribL3ui64NV},
{"glVertexAttribL4ui64NV", (void *)skibidigfx_glVertexAttribL4ui64NV},
{"glVertexAttribL1ui64vNV", (void *)skibidigfx_glVertexAttribL1ui64vNV},
{"glVertexAttribL2ui64vNV", (void *)skibidigfx_glVertexAttribL2ui64vNV},
{"glVertexAttribL3ui64vNV", (void *)skibidigfx_glVertexAttribL3ui64vNV},
{"glVertexAttribL4ui64vNV", (void *)skibidigfx_glVertexAttribL4ui64vNV},
{"glGetVertexAttribLi64vNV", (void *)skibidigfx_glGetVertexAttribLi64vNV},
{"glGetVertexAttribLui64vNV", (void *)skibidigfx_glGetVertexAttribLui64vNV},
{"glVertexAttribLFormatNV", (void *)skibidigfx_glVertexAttribLFormatNV},
{"glBufferAddressRangeNV", (void *)skibidigfx_glBufferAddressRangeNV},
{"glVertexFormatNV", (void *)skibidigfx_glVertexFormatNV},
{"glNormalFormatNV", (void *)skibidigfx_glNormalFormatNV},
{"glColorFormatNV", (void *)skibidigfx_glColorFormatNV},
{"glIndexFormatNV", (void *)skibidigfx_glIndexFormatNV},
{"glTexCoordFormatNV", (void *)skibidigfx_glTexCoordFormatNV},
{"glEdgeFlagFormatNV", (void *)skibidigfx_glEdgeFlagFormatNV},
{"glSecondaryColorFormatNV", (void *)skibidigfx_glSecondaryColorFormatNV},
{"glFogCoordFormatNV", (void *)skibidigfx_glFogCoordFormatNV},
{"glVertexAttribFormatNV", (void *)skibidigfx_glVertexAttribFormatNV},
{"glVertexAttribIFormatNV", (void *)skibidigfx_glVertexAttribIFormatNV},
{"glGetIntegerui64i_vNV", (void *)skibidigfx_glGetIntegerui64i_vNV},
{"glAreProgramsResidentNV", (void *)skibidigfx_glAreProgramsResidentNV},
{"glBindProgramNV", (void *)skibidigfx_glBindProgramNV},
{"glDeleteProgramsNV", (void *)skibidigfx_glDeleteProgramsNV},
{"glExecuteProgramNV", (void *)skibidigfx_glExecuteProgramNV},
{"glGenProgramsNV", (void *)skibidigfx_glGenProgramsNV},
{"glGetProgramParameterdvNV", (void *)skibidigfx_glGetProgramParameterdvNV},
{"glGetProgramParameterfvNV", (void *)skibidigfx_glGetProgramParameterfvNV},
{"glGetProgramivNV", (void *)skibidigfx_glGetProgramivNV},
{"glGetProgramStringNV", (void *)skibidigfx_glGetProgramStringNV},
{"glGetTrackMatrixivNV", (void *)skibidigfx_glGetTrackMatrixivNV},
{"glGetVertexAttribdvNV", (void *)skibidigfx_glGetVertexAttribdvNV},
{"glGetVertexAttribfvNV", (void *)skibidigfx_glGetVertexAttribfvNV},
{"glGetVertexAttribivNV", (void *)skibidigfx_glGetVertexAttribivNV},
{"glGetVertexAttribPointervNV", (void *)skibidigfx_glGetVertexAttribPointervNV},
{"glIsProgramNV", (void *)skibidigfx_glIsProgramNV},
{"glLoadProgramNV", (void *)skibidigfx_glLoadProgramNV},
{"glProgramParameter4dNV", (void *)skibidigfx_glProgramParameter4dNV},
{"glProgramParameter4dvNV", (void *)skibidigfx_glProgramParameter4dvNV},
{"glProgramParameter4fNV", (void *)skibidigfx_glProgramParameter4fNV},
{"glProgramParameter4fvNV", (void *)skibidigfx_glProgramParameter4fvNV},
{"glProgramParameters4dvNV", (void *)skibidigfx_glProgramParameters4dvNV},
{"glProgramParameters4fvNV", (void *)skibidigfx_glProgramParameters4fvNV},
{"glRequestResidentProgramsNV", (void *)skibidigfx_glRequestResidentProgramsNV},
{"glTrackMatrixNV", (void *)skibidigfx_glTrackMatrixNV},
{"glVertexAttribPointerNV", (void *)skibidigfx_glVertexAttribPointerNV},
{"glVertexAttrib1dNV", (void *)skibidigfx_glVertexAttrib1dNV},
{"glVertexAttrib1dvNV", (void *)skibidigfx_glVertexAttrib1dvNV},
{"glVertexAttrib1fNV", (void *)skibidigfx_glVertexAttrib1fNV},
{"glVertexAttrib1fvNV", (void *)skibidigfx_glVertexAttrib1fvNV},
{"glVertexAttrib1sNV", (void *)skibidigfx_glVertexAttrib1sNV},
{"glVertexAttrib1svNV", (void *)skibidigfx_glVertexAttrib1svNV},
{"glVertexAttrib2dNV", (void *)skibidigfx_glVertexAttrib2dNV},
{"glVertexAttrib2dvNV", (void *)skibidigfx_glVertexAttrib2dvNV},
{"glVertexAttrib2fNV", (void *)skibidigfx_glVertexAttrib2fNV},
{"glVertexAttrib2fvNV", (void *)skibidigfx_glVertexAttrib2fvNV},
{"glVertexAttrib2sNV", (void *)skibidigfx_glVertexAttrib2sNV},
{"glVertexAttrib2svNV", (void *)skibidigfx_glVertexAttrib2svNV},
{"glVertexAttrib3dNV", (void *)skibidigfx_glVertexAttrib3dNV},
{"glVertexAttrib3dvNV", (void *)skibidigfx_glVertexAttrib3dvNV},
{"glVertexAttrib3fNV", (void *)skibidigfx_glVertexAttrib3fNV},
{"glVertexAttrib3fvNV", (void *)skibidigfx_glVertexAttrib3fvNV},
{"glVertexAttrib3sNV", (void *)skibidigfx_glVertexAttrib3sNV},
{"glVertexAttrib3svNV", (void *)skibidigfx_glVertexAttrib3svNV},
{"glVertexAttrib4dNV", (void *)skibidigfx_glVertexAttrib4dNV},
{"glVertexAttrib4dvNV", (void *)skibidigfx_glVertexAttrib4dvNV},
{"glVertexAttrib4fNV", (void *)skibidigfx_glVertexAttrib4fNV},
{"glVertexAttrib4fvNV", (void *)skibidigfx_glVertexAttrib4fvNV},
{"glVertexAttrib4sNV", (void *)skibidigfx_glVertexAttrib4sNV},
{"glVertexAttrib4svNV", (void *)skibidigfx_glVertexAttrib4svNV},
{"glVertexAttrib4ubNV", (void *)skibidigfx_glVertexAttrib4ubNV},
{"glVertexAttrib4ubvNV", (void *)skibidigfx_glVertexAttrib4ubvNV},
{"glVertexAttribs1dvNV", (void *)skibidigfx_glVertexAttribs1dvNV},
{"glVertexAttribs1fvNV", (void *)skibidigfx_glVertexAttribs1fvNV},
{"glVertexAttribs1svNV", (void *)skibidigfx_glVertexAttribs1svNV},
{"glVertexAttribs2dvNV", (void *)skibidigfx_glVertexAttribs2dvNV},
{"glVertexAttribs2fvNV", (void *)skibidigfx_glVertexAttribs2fvNV},
{"glVertexAttribs2svNV", (void *)skibidigfx_glVertexAttribs2svNV},
{"glVertexAttribs3dvNV", (void *)skibidigfx_glVertexAttribs3dvNV},
{"glVertexAttribs3fvNV", (void *)skibidigfx_glVertexAttribs3fvNV},
{"glVertexAttribs3svNV", (void *)skibidigfx_glVertexAttribs3svNV},
{"glVertexAttribs4dvNV", (void *)skibidigfx_glVertexAttribs4dvNV},
{"glVertexAttribs4fvNV", (void *)skibidigfx_glVertexAttribs4fvNV},
{"glVertexAttribs4svNV", (void *)skibidigfx_glVertexAttribs4svNV},
{"glVertexAttribs4ubvNV", (void *)skibidigfx_glVertexAttribs4ubvNV},
{"glVertexAttribI1iEXT", (void *)skibidigfx_glVertexAttribI1iEXT},
{"glVertexAttribI2iEXT", (void *)skibidigfx_glVertexAttribI2iEXT},
{"glVertexAttribI3iEXT", (void *)skibidigfx_glVertexAttribI3iEXT},
{"glVertexAttribI4iEXT", (void *)skibidigfx_glVertexAttribI4iEXT},
{"glVertexAttribI1uiEXT", (void *)skibidigfx_glVertexAttribI1uiEXT},
{"glVertexAttribI2uiEXT", (void *)skibidigfx_glVertexAttribI2uiEXT},
{"glVertexAttribI3uiEXT", (void *)skibidigfx_glVertexAttribI3uiEXT},
{"glVertexAttribI4uiEXT", (void *)skibidigfx_glVertexAttribI4uiEXT},
{"glVertexAttribI1ivEXT", (void *)skibidigfx_glVertexAttribI1ivEXT},
{"glVertexAttribI2ivEXT", (void *)skibidigfx_glVertexAttribI2ivEXT},
{"glVertexAttribI3ivEXT", (void *)skibidigfx_glVertexAttribI3ivEXT},
{"glVertexAttribI4ivEXT", (void *)skibidigfx_glVertexAttribI4ivEXT},
{"glVertexAttribI1uivEXT", (void *)skibidigfx_glVertexAttribI1uivEXT},
{"glVertexAttribI2uivEXT", (void *)skibidigfx_glVertexAttribI2uivEXT},
{"glVertexAttribI3uivEXT", (void *)skibidigfx_glVertexAttribI3uivEXT},
{"glVertexAttribI4uivEXT", (void *)skibidigfx_glVertexAttribI4uivEXT},
{"glVertexAttribI4bvEXT", (void *)skibidigfx_glVertexAttribI4bvEXT},
{"glVertexAttribI4svEXT", (void *)skibidigfx_glVertexAttribI4svEXT},
{"glVertexAttribI4ubvEXT", (void *)skibidigfx_glVertexAttribI4ubvEXT},
{"glVertexAttribI4usvEXT", (void *)skibidigfx_glVertexAttribI4usvEXT},
{"glVertexAttribIPointerEXT", (void *)skibidigfx_glVertexAttribIPointerEXT},
{"glGetVertexAttribIivEXT", (void *)skibidigfx_glGetVertexAttribIivEXT},
{"glGetVertexAttribIuivEXT", (void *)skibidigfx_glGetVertexAttribIuivEXT},
{"glBeginVideoCaptureNV", (void *)skibidigfx_glBeginVideoCaptureNV},
{"glBindVideoCaptureStreamBufferNV", (void *)skibidigfx_glBindVideoCaptureStreamBufferNV},
{"glBindVideoCaptureStreamTextureNV", (void *)skibidigfx_glBindVideoCaptureStreamTextureNV},
{"glEndVideoCaptureNV", (void *)skibidigfx_glEndVideoCaptureNV},
{"glGetVideoCaptureivNV", (void *)skibidigfx_glGetVideoCaptureivNV},
{"glGetVideoCaptureStreamivNV", (void *)skibidigfx_glGetVideoCaptureStreamivNV},
{"glGetVideoCaptureStreamfvNV", (void *)skibidigfx_glGetVideoCaptureStreamfvNV},
{"glGetVideoCaptureStreamdvNV", (void *)skibidigfx_glGetVideoCaptureStreamdvNV},
{"glVideoCaptureNV", (void *)skibidigfx_glVideoCaptureNV},
{"glVideoCaptureStreamParameterivNV", (void *)skibidigfx_glVideoCaptureStreamParameterivNV},
{"glVideoCaptureStreamParameterfvNV", (void *)skibidigfx_glVideoCaptureStreamParameterfvNV},
{"glVideoCaptureStreamParameterdvNV", (void *)skibidigfx_glVideoCaptureStreamParameterdvNV},
{"glViewportSwizzleNV", (void *)skibidigfx_glViewportSwizzleNV},
{"glFramebufferTextureMultiviewOVR", (void *)skibidigfx_glFramebufferTextureMultiviewOVR},
{"glHintPGI", (void *)skibidigfx_glHintPGI},
{"glDetailTexFuncSGIS", (void *)skibidigfx_glDetailTexFuncSGIS},
{"glGetDetailTexFuncSGIS", (void *)skibidigfx_glGetDetailTexFuncSGIS},
{"glFogFuncSGIS", (void *)skibidigfx_glFogFuncSGIS},
{"glGetFogFuncSGIS", (void *)skibidigfx_glGetFogFuncSGIS},
{"glSampleMaskSGIS", (void *)skibidigfx_glSampleMaskSGIS},
{"glSamplePatternSGIS", (void *)skibidigfx_glSamplePatternSGIS},
{"glPixelTexGenParameteriSGIS", (void *)skibidigfx_glPixelTexGenParameteriSGIS},
{"glPixelTexGenParameterivSGIS", (void *)skibidigfx_glPixelTexGenParameterivSGIS},
{"glPixelTexGenParameterfSGIS", (void *)skibidigfx_glPixelTexGenParameterfSGIS},
{"glPixelTexGenParameterfvSGIS", (void *)skibidigfx_glPixelTexGenParameterfvSGIS},
{"glGetPixelTexGenParameterivSGIS", (void *)skibidigfx_glGetPixelTexGenParameterivSGIS},
{"glGetPixelTexGenParameterfvSGIS", (void *)skibidigfx_glGetPixelTexGenParameterfvSGIS},
{"glPointParameterfSGIS", (void *)skibidigfx_glPointParameterfSGIS},
{"glPointParameterfvSGIS", (void *)skibidigfx_glPointParameterfvSGIS},
{"glSharpenTexFuncSGIS", (void *)skibidigfx_glSharpenTexFuncSGIS},
{"glGetSharpenTexFuncSGIS", (void *)skibidigfx_glGetSharpenTexFuncSGIS},
{"glTexImage4DSGIS", (void *)skibidigfx_glTexImage4DSGIS},
{"glTexSubImage4DSGIS", (void *)skibidigfx_glTexSubImage4DSGIS},
{"glTextureColorMaskSGIS", (void *)skibidigfx_glTextureColorMaskSGIS},
{"glGetTexFilterFuncSGIS", (void *)skibidigfx_glGetTexFilterFuncSGIS},
{"glTexFilterFuncSGIS", (void *)skibidigfx_glTexFilterFuncSGIS},
{"glAsyncMarkerSGIX", (void *)skibidigfx_glAsyncMarkerSGIX},
{"glFinishAsyncSGIX", (void *)skibidigfx_glFinishAsyncSGIX},
{"glPollAsyncSGIX", (void *)skibidigfx_glPollAsyncSGIX},
{"glGenAsyncMarkersSGIX", (void *)skibidigfx_glGenAsyncMarkersSGIX},
{"glDeleteAsyncMarkersSGIX", (void *)skibidigfx_glDeleteAsyncMarkersSGIX},
{"glIsAsyncMarkerSGIX", (void *)skibidigfx_glIsAsyncMarkerSGIX},
{"glFlushRasterSGIX", (void *)skibidigfx_glFlushRasterSGIX},
{"glFragmentColorMaterialSGIX", (void *)skibidigfx_glFragmentColorMaterialSGIX},
{"glFragmentLightfSGIX", (void *)skibidigfx_glFragmentLightfSGIX},
{"glFragmentLightfvSGIX", (void *)skibidigfx_glFragmentLightfvSGIX},
{"glFragmentLightiSGIX", (void *)skibidigfx_glFragmentLightiSGIX},
{"glFragmentLightivSGIX", (void *)skibidigfx_glFragmentLightivSGIX},
{"glFragmentLightModelfSGIX", (void *)skibidigfx_glFragmentLightModelfSGIX},
{"glFragmentLightModelfvSGIX", (void *)skibidigfx_glFragmentLightModelfvSGIX},
{"glFragmentLightModeliSGIX", (void *)skibidigfx_glFragmentLightModeliSGIX},
{"glFragmentLightModelivSGIX", (void *)skibidigfx_glFragmentLightModelivSGIX},
{"glFragmentMaterialfSGIX", (void *)skibidigfx_glFragmentMaterialfSGIX},
{"glFragmentMaterialfvSGIX", (void *)skibidigfx_glFragmentMaterialfvSGIX},
{"glFragmentMaterialiSGIX", (void *)skibidigfx_glFragmentMaterialiSGIX},
{"glFragmentMaterialivSGIX", (void *)skibidigfx_glFragmentMaterialivSGIX},
{"glGetFragmentLightfvSGIX", (void *)skibidigfx_glGetFragmentLightfvSGIX},
{"glGetFragmentLightivSGIX", (void *)skibidigfx_glGetFragmentLightivSGIX},
{"glGetFragmentMaterialfvSGIX", (void *)skibidigfx_glGetFragmentMaterialfvSGIX},
{"glGetFragmentMaterialivSGIX", (void *)skibidigfx_glGetFragmentMaterialivSGIX},
{"glLightEnviSGIX", (void *)skibidigfx_glLightEnviSGIX},
{"glFrameZoomSGIX", (void *)skibidigfx_glFrameZoomSGIX},
{"glIglooInterfaceSGIX", (void *)skibidigfx_glIglooInterfaceSGIX},
{"glGetInstrumentsSGIX", (void *)skibidigfx_glGetInstrumentsSGIX},
{"glInstrumentsBufferSGIX", (void *)skibidigfx_glInstrumentsBufferSGIX},
{"glPollInstrumentsSGIX", (void *)skibidigfx_glPollInstrumentsSGIX},
{"glReadInstrumentsSGIX", (void *)skibidigfx_glReadInstrumentsSGIX},
{"glStartInstrumentsSGIX", (void *)skibidigfx_glStartInstrumentsSGIX},
{"glStopInstrumentsSGIX", (void *)skibidigfx_glStopInstrumentsSGIX},
{"glGetListParameterfvSGIX", (void *)skibidigfx_glGetListParameterfvSGIX},
{"glGetListParameterivSGIX", (void *)skibidigfx_glGetListParameterivSGIX},
{"glListParameterfSGIX", (void *)skibidigfx_glListParameterfSGIX},
{"glListParameterfvSGIX", (void *)skibidigfx_glListParameterfvSGIX},
{"glListParameteriSGIX", (void *)skibidigfx_glListParameteriSGIX},
{"glListParameterivSGIX", (void *)skibidigfx_glListParameterivSGIX},
{"glPixelTexGenSGIX", (void *)skibidigfx_glPixelTexGenSGIX},
{"glDeformationMap3dSGIX", (void *)skibidigfx_glDeformationMap3dSGIX},
{"glDeformationMap3fSGIX", (void *)skibidigfx_glDeformationMap3fSGIX},
{"glDeformSGIX", (void *)skibidigfx_glDeformSGIX},
{"glLoadIdentityDeformationMapSGIX", (void *)skibidigfx_glLoadIdentityDeformationMapSGIX},
{"glReferencePlaneSGIX", (void *)skibidigfx_glReferencePlaneSGIX},
{"glSpriteParameterfSGIX", (void *)skibidigfx_glSpriteParameterfSGIX},
{"glSpriteParameterfvSGIX", (void *)skibidigfx_glSpriteParameterfvSGIX},
{"glSpriteParameteriSGIX", (void *)skibidigfx_glSpriteParameteriSGIX},
{"glSpriteParameterivSGIX", (void *)skibidigfx_glSpriteParameterivSGIX},
{"glTagSampleBufferSGIX", (void *)skibidigfx_glTagSampleBufferSGIX},
{"glColorTableSGI", (void *)skibidigfx_glColorTableSGI},
{"glColorTableParameterfvSGI", (void *)skibidigfx_glColorTableParameterfvSGI},
{"glColorTableParameterivSGI", (void *)skibidigfx_glColorTableParameterivSGI},
{"glCopyColorTableSGI", (void *)skibidigfx_glCopyColorTableSGI},
{"glGetColorTableSGI", (void *)skibidigfx_glGetColorTableSGI},
{"glGetColorTableParameterfvSGI", (void *)skibidigfx_glGetColorTableParameterfvSGI},
{"glGetColorTableParameterivSGI", (void *)skibidigfx_glGetColorTableParameterivSGI},
{"glFinishTextureSUNX", (void *)skibidigfx_glFinishTextureSUNX},
{"glGlobalAlphaFactorbSUN", (void *)skibidigfx_glGlobalAlphaFactorbSUN},
{"glGlobalAlphaFactorsSUN", (void *)skibidigfx_glGlobalAlphaFactorsSUN},
{"glGlobalAlphaFactoriSUN", (void *)skibidigfx_glGlobalAlphaFactoriSUN},
{"glGlobalAlphaFactorfSUN", (void *)skibidigfx_glGlobalAlphaFactorfSUN},
{"glGlobalAlphaFactordSUN", (void *)skibidigfx_glGlobalAlphaFactordSUN},
{"glGlobalAlphaFactorubSUN", (void *)skibidigfx_glGlobalAlphaFactorubSUN},
{"glGlobalAlphaFactorusSUN", (void *)skibidigfx_glGlobalAlphaFactorusSUN},
{"glGlobalAlphaFactoruiSUN", (void *)skibidigfx_glGlobalAlphaFactoruiSUN},
{"glDrawMeshArraysSUN", (void *)skibidigfx_glDrawMeshArraysSUN},
{"glReplacementCodeuiSUN", (void *)skibidigfx_glReplacementCodeuiSUN},
{"glReplacementCodeusSUN", (void *)skibidigfx_glReplacementCodeusSUN},
{"glReplacementCodeubSUN", (void *)skibidigfx_glReplacementCodeubSUN},
{"glReplacementCodeuivSUN", (void *)skibidigfx_glReplacementCodeuivSUN},
{"glReplacementCodeusvSUN", (void *)skibidigfx_glReplacementCodeusvSUN},
{"glReplacementCodeubvSUN", (void *)skibidigfx_glReplacementCodeubvSUN},
{"glReplacementCodePointerSUN", (void *)skibidigfx_glReplacementCodePointerSUN},
{"glColor4ubVertex2fSUN", (void *)skibidigfx_glColor4ubVertex2fSUN},
{"glColor4ubVertex2fvSUN", (void *)skibidigfx_glColor4ubVertex2fvSUN},
{"glColor4ubVertex3fSUN", (void *)skibidigfx_glColor4ubVertex3fSUN},
{"glColor4ubVertex3fvSUN", (void *)skibidigfx_glColor4ubVertex3fvSUN},
{"glColor3fVertex3fSUN", (void *)skibidigfx_glColor3fVertex3fSUN},
{"glColor3fVertex3fvSUN", (void *)skibidigfx_glColor3fVertex3fvSUN},
{"glNormal3fVertex3fSUN", (void *)skibidigfx_glNormal3fVertex3fSUN},
{"glNormal3fVertex3fvSUN", (void *)skibidigfx_glNormal3fVertex3fvSUN},
{"glColor4fNormal3fVertex3fSUN", (void *)skibidigfx_glColor4fNormal3fVertex3fSUN},
{"glColor4fNormal3fVertex3fvSUN", (void *)skibidigfx_glColor4fNormal3fVertex3fvSUN},
{"glTexCoord2fVertex3fSUN", (void *)skibidigfx_glTexCoord2fVertex3fSUN},
{"glTexCoord2fVertex3fvSUN", (void *)skibidigfx_glTexCoord2fVertex3fvSUN},
{"glTexCoord4fVertex4fSUN", (void *)skibidigfx_glTexCoord4fVertex4fSUN},
{"glTexCoord4fVertex4fvSUN", (void *)skibidigfx_glTexCoord4fVertex4fvSUN},
{"glTexCoord2fColor4ubVertex3fSUN", (void *)skibidigfx_glTexCoord2fColor4ubVertex3fSUN},
{"glTexCoord2fColor4ubVertex3fvSUN", (void *)skibidigfx_glTexCoord2fColor4ubVertex3fvSUN},
{"glTexCoord2fColor3fVertex3fSUN", (void *)skibidigfx_glTexCoord2fColor3fVertex3fSUN},
{"glTexCoord2fColor3fVertex3fvSUN", (void *)skibidigfx_glTexCoord2fColor3fVertex3fvSUN},
{"glTexCoord2fNormal3fVertex3fSUN", (void *)skibidigfx_glTexCoord2fNormal3fVertex3fSUN},
{"glTexCoord2fNormal3fVertex3fvSUN", (void *)skibidigfx_glTexCoord2fNormal3fVertex3fvSUN},
{"glTexCoord2fColor4fNormal3fVertex3fSUN", (void *)skibidigfx_glTexCoord2fColor4fNormal3fVertex3fSUN},
{"glTexCoord2fColor4fNormal3fVertex3fvSUN", (void *)skibidigfx_glTexCoord2fColor4fNormal3fVertex3fvSUN},
{"glTexCoord4fColor4fNormal3fVertex4fSUN", (void *)skibidigfx_glTexCoord4fColor4fNormal3fVertex4fSUN},
{"glTexCoord4fColor4fNormal3fVertex4fvSUN", (void *)skibidigfx_glTexCoord4fColor4fNormal3fVertex4fvSUN},
{"glReplacementCodeuiVertex3fSUN", (void *)skibidigfx_glReplacementCodeuiVertex3fSUN},
{"glReplacementCodeuiVertex3fvSUN", (void *)skibidigfx_glReplacementCodeuiVertex3fvSUN},
{"glReplacementCodeuiColor4ubVertex3fSUN", (void *)skibidigfx_glReplacementCodeuiColor4ubVertex3fSUN},
{"glReplacementCodeuiColor4ubVertex3fvSUN", (void *)skibidigfx_glReplacementCodeuiColor4ubVertex3fvSUN},
{"glReplacementCodeuiColor3fVertex3fSUN", (void *)skibidigfx_glReplacementCodeuiColor3fVertex3fSUN},
{"glReplacementCodeuiColor3fVertex3fvSUN", (void *)skibidigfx_glReplacementCodeuiColor3fVertex3fvSUN},
{"glReplacementCodeuiNormal3fVertex3fSUN", (void *)skibidigfx_glReplacementCodeuiNormal3fVertex3fSUN},
{"glReplacementCodeuiNormal3fVertex3fvSUN", (void *)skibidigfx_glReplacementCodeuiNormal3fVertex3fvSUN},
{"glReplacementCodeuiColor4fNormal3fVertex3fSUN", (void *)skibidigfx_glReplacementCodeuiColor4fNormal3fVertex3fSUN},
{"glReplacementCodeuiColor4fNormal3fVertex3fvSUN", (void *)skibidigfx_glReplacementCodeuiColor4fNormal3fVertex3fvSUN},
{"glReplacementCodeuiTexCoord2fVertex3fSUN", (void *)skibidigfx_glReplacementCodeuiTexCoord2fVertex3fSUN},
{"glReplacementCodeuiTexCoord2fVertex3fvSUN", (void *)skibidigfx_glReplacementCodeuiTexCoord2fVertex3fvSUN},
{"glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", (void *)skibidigfx_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN},
{"glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", (void *)skibidigfx_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN},
{"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", (void *)skibidigfx_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN},
{"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", (void *)skibidigfx_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN},
};

void skibidigfx_initialize_real_funcs() {

        *(void **)&real_glAccum = resolveGl("glAccum");
        if (!real_glAccum)
            unresolvedError("glAccum");
    

        *(void **)&real_glAlphaFunc = resolveGl("glAlphaFunc");
        if (!real_glAlphaFunc)
            unresolvedError("glAlphaFunc");
    

        *(void **)&real_glAreTexturesResident = resolveGl("glAreTexturesResident");
        if (!real_glAreTexturesResident)
            unresolvedError("glAreTexturesResident");
    

        *(void **)&real_glArrayElement = resolveGl("glArrayElement");
        if (!real_glArrayElement)
            unresolvedError("glArrayElement");
    

        *(void **)&real_glBegin = resolveGl("glBegin");
        if (!real_glBegin)
            unresolvedError("glBegin");
    

        *(void **)&real_glBindTexture = resolveGl("glBindTexture");
        if (!real_glBindTexture)
            unresolvedError("glBindTexture");
    

        *(void **)&real_glBitmap = resolveGl("glBitmap");
        if (!real_glBitmap)
            unresolvedError("glBitmap");
    

        *(void **)&real_glBlendFunc = resolveGl("glBlendFunc");
        if (!real_glBlendFunc)
            unresolvedError("glBlendFunc");
    

        *(void **)&real_glCallList = resolveGl("glCallList");
        if (!real_glCallList)
            unresolvedError("glCallList");
    

        *(void **)&real_glCallLists = resolveGl("glCallLists");
        if (!real_glCallLists)
            unresolvedError("glCallLists");
    

        *(void **)&real_glClear = resolveGl("glClear");
        if (!real_glClear)
            unresolvedError("glClear");
    

        *(void **)&real_glClearAccum = resolveGl("glClearAccum");
        if (!real_glClearAccum)
            unresolvedError("glClearAccum");
    

        *(void **)&real_glClearColor = resolveGl("glClearColor");
        if (!real_glClearColor)
            unresolvedError("glClearColor");
    

        *(void **)&real_glClearDepth = resolveGl("glClearDepth");
        if (!real_glClearDepth)
            unresolvedError("glClearDepth");
    

        *(void **)&real_glClearIndex = resolveGl("glClearIndex");
        if (!real_glClearIndex)
            unresolvedError("glClearIndex");
    

        *(void **)&real_glClearStencil = resolveGl("glClearStencil");
        if (!real_glClearStencil)
            unresolvedError("glClearStencil");
    

        *(void **)&real_glClipPlane = resolveGl("glClipPlane");
        if (!real_glClipPlane)
            unresolvedError("glClipPlane");
    

        *(void **)&real_glColor3b = resolveGl("glColor3b");
        if (!real_glColor3b)
            unresolvedError("glColor3b");
    

        *(void **)&real_glColor3bv = resolveGl("glColor3bv");
        if (!real_glColor3bv)
            unresolvedError("glColor3bv");
    

        *(void **)&real_glColor3d = resolveGl("glColor3d");
        if (!real_glColor3d)
            unresolvedError("glColor3d");
    

        *(void **)&real_glColor3dv = resolveGl("glColor3dv");
        if (!real_glColor3dv)
            unresolvedError("glColor3dv");
    

        *(void **)&real_glColor3f = resolveGl("glColor3f");
        if (!real_glColor3f)
            unresolvedError("glColor3f");
    

        *(void **)&real_glColor3fv = resolveGl("glColor3fv");
        if (!real_glColor3fv)
            unresolvedError("glColor3fv");
    

        *(void **)&real_glColor3i = resolveGl("glColor3i");
        if (!real_glColor3i)
            unresolvedError("glColor3i");
    

        *(void **)&real_glColor3iv = resolveGl("glColor3iv");
        if (!real_glColor3iv)
            unresolvedError("glColor3iv");
    

        *(void **)&real_glColor3s = resolveGl("glColor3s");
        if (!real_glColor3s)
            unresolvedError("glColor3s");
    

        *(void **)&real_glColor3sv = resolveGl("glColor3sv");
        if (!real_glColor3sv)
            unresolvedError("glColor3sv");
    

        *(void **)&real_glColor3ub = resolveGl("glColor3ub");
        if (!real_glColor3ub)
            unresolvedError("glColor3ub");
    

        *(void **)&real_glColor3ubv = resolveGl("glColor3ubv");
        if (!real_glColor3ubv)
            unresolvedError("glColor3ubv");
    

        *(void **)&real_glColor3ui = resolveGl("glColor3ui");
        if (!real_glColor3ui)
            unresolvedError("glColor3ui");
    

        *(void **)&real_glColor3uiv = resolveGl("glColor3uiv");
        if (!real_glColor3uiv)
            unresolvedError("glColor3uiv");
    

        *(void **)&real_glColor3us = resolveGl("glColor3us");
        if (!real_glColor3us)
            unresolvedError("glColor3us");
    

        *(void **)&real_glColor3usv = resolveGl("glColor3usv");
        if (!real_glColor3usv)
            unresolvedError("glColor3usv");
    

        *(void **)&real_glColor4b = resolveGl("glColor4b");
        if (!real_glColor4b)
            unresolvedError("glColor4b");
    

        *(void **)&real_glColor4bv = resolveGl("glColor4bv");
        if (!real_glColor4bv)
            unresolvedError("glColor4bv");
    

        *(void **)&real_glColor4d = resolveGl("glColor4d");
        if (!real_glColor4d)
            unresolvedError("glColor4d");
    

        *(void **)&real_glColor4dv = resolveGl("glColor4dv");
        if (!real_glColor4dv)
            unresolvedError("glColor4dv");
    

        *(void **)&real_glColor4f = resolveGl("glColor4f");
        if (!real_glColor4f)
            unresolvedError("glColor4f");
    

        *(void **)&real_glColor4fv = resolveGl("glColor4fv");
        if (!real_glColor4fv)
            unresolvedError("glColor4fv");
    

        *(void **)&real_glColor4i = resolveGl("glColor4i");
        if (!real_glColor4i)
            unresolvedError("glColor4i");
    

        *(void **)&real_glColor4iv = resolveGl("glColor4iv");
        if (!real_glColor4iv)
            unresolvedError("glColor4iv");
    

        *(void **)&real_glColor4s = resolveGl("glColor4s");
        if (!real_glColor4s)
            unresolvedError("glColor4s");
    

        *(void **)&real_glColor4sv = resolveGl("glColor4sv");
        if (!real_glColor4sv)
            unresolvedError("glColor4sv");
    

        *(void **)&real_glColor4ub = resolveGl("glColor4ub");
        if (!real_glColor4ub)
            unresolvedError("glColor4ub");
    

        *(void **)&real_glColor4ubv = resolveGl("glColor4ubv");
        if (!real_glColor4ubv)
            unresolvedError("glColor4ubv");
    

        *(void **)&real_glColor4ui = resolveGl("glColor4ui");
        if (!real_glColor4ui)
            unresolvedError("glColor4ui");
    

        *(void **)&real_glColor4uiv = resolveGl("glColor4uiv");
        if (!real_glColor4uiv)
            unresolvedError("glColor4uiv");
    

        *(void **)&real_glColor4us = resolveGl("glColor4us");
        if (!real_glColor4us)
            unresolvedError("glColor4us");
    

        *(void **)&real_glColor4usv = resolveGl("glColor4usv");
        if (!real_glColor4usv)
            unresolvedError("glColor4usv");
    

        *(void **)&real_glColorMask = resolveGl("glColorMask");
        if (!real_glColorMask)
            unresolvedError("glColorMask");
    

        *(void **)&real_glColorMaterial = resolveGl("glColorMaterial");
        if (!real_glColorMaterial)
            unresolvedError("glColorMaterial");
    

        *(void **)&real_glColorPointer = resolveGl("glColorPointer");
        if (!real_glColorPointer)
            unresolvedError("glColorPointer");
    

        *(void **)&real_glCopyPixels = resolveGl("glCopyPixels");
        if (!real_glCopyPixels)
            unresolvedError("glCopyPixels");
    

        *(void **)&real_glCopyTexImage1D = resolveGl("glCopyTexImage1D");
        if (!real_glCopyTexImage1D)
            unresolvedError("glCopyTexImage1D");
    

        *(void **)&real_glCopyTexImage2D = resolveGl("glCopyTexImage2D");
        if (!real_glCopyTexImage2D)
            unresolvedError("glCopyTexImage2D");
    

        *(void **)&real_glCopyTexSubImage1D = resolveGl("glCopyTexSubImage1D");
        if (!real_glCopyTexSubImage1D)
            unresolvedError("glCopyTexSubImage1D");
    

        *(void **)&real_glCopyTexSubImage2D = resolveGl("glCopyTexSubImage2D");
        if (!real_glCopyTexSubImage2D)
            unresolvedError("glCopyTexSubImage2D");
    

        *(void **)&real_glCullFace = resolveGl("glCullFace");
        if (!real_glCullFace)
            unresolvedError("glCullFace");
    

        *(void **)&real_glDeleteLists = resolveGl("glDeleteLists");
        if (!real_glDeleteLists)
            unresolvedError("glDeleteLists");
    

        *(void **)&real_glDeleteTextures = resolveGl("glDeleteTextures");
        if (!real_glDeleteTextures)
            unresolvedError("glDeleteTextures");
    

        *(void **)&real_glDepthFunc = resolveGl("glDepthFunc");
        if (!real_glDepthFunc)
            unresolvedError("glDepthFunc");
    

        *(void **)&real_glDepthMask = resolveGl("glDepthMask");
        if (!real_glDepthMask)
            unresolvedError("glDepthMask");
    

        *(void **)&real_glDepthRange = resolveGl("glDepthRange");
        if (!real_glDepthRange)
            unresolvedError("glDepthRange");
    

        *(void **)&real_glDisable = resolveGl("glDisable");
        if (!real_glDisable)
            unresolvedError("glDisable");
    

        *(void **)&real_glDisableClientState = resolveGl("glDisableClientState");
        if (!real_glDisableClientState)
            unresolvedError("glDisableClientState");
    

        *(void **)&real_glDrawArrays = resolveGl("glDrawArrays");
        if (!real_glDrawArrays)
            unresolvedError("glDrawArrays");
    

        *(void **)&real_glDrawBuffer = resolveGl("glDrawBuffer");
        if (!real_glDrawBuffer)
            unresolvedError("glDrawBuffer");
    

        *(void **)&real_glDrawElements = resolveGl("glDrawElements");
        if (!real_glDrawElements)
            unresolvedError("glDrawElements");
    

        *(void **)&real_glDrawPixels = resolveGl("glDrawPixels");
        if (!real_glDrawPixels)
            unresolvedError("glDrawPixels");
    

        *(void **)&real_glEdgeFlag = resolveGl("glEdgeFlag");
        if (!real_glEdgeFlag)
            unresolvedError("glEdgeFlag");
    

        *(void **)&real_glEdgeFlagPointer = resolveGl("glEdgeFlagPointer");
        if (!real_glEdgeFlagPointer)
            unresolvedError("glEdgeFlagPointer");
    

        *(void **)&real_glEdgeFlagv = resolveGl("glEdgeFlagv");
        if (!real_glEdgeFlagv)
            unresolvedError("glEdgeFlagv");
    

        *(void **)&real_glEnable = resolveGl("glEnable");
        if (!real_glEnable)
            unresolvedError("glEnable");
    

        *(void **)&real_glEnableClientState = resolveGl("glEnableClientState");
        if (!real_glEnableClientState)
            unresolvedError("glEnableClientState");
    

        *(void **)&real_glEnd = resolveGl("glEnd");
        if (!real_glEnd)
            unresolvedError("glEnd");
    

        *(void **)&real_glEndList = resolveGl("glEndList");
        if (!real_glEndList)
            unresolvedError("glEndList");
    

        *(void **)&real_glEvalCoord1d = resolveGl("glEvalCoord1d");
        if (!real_glEvalCoord1d)
            unresolvedError("glEvalCoord1d");
    

        *(void **)&real_glEvalCoord1dv = resolveGl("glEvalCoord1dv");
        if (!real_glEvalCoord1dv)
            unresolvedError("glEvalCoord1dv");
    

        *(void **)&real_glEvalCoord1f = resolveGl("glEvalCoord1f");
        if (!real_glEvalCoord1f)
            unresolvedError("glEvalCoord1f");
    

        *(void **)&real_glEvalCoord1fv = resolveGl("glEvalCoord1fv");
        if (!real_glEvalCoord1fv)
            unresolvedError("glEvalCoord1fv");
    

        *(void **)&real_glEvalCoord2d = resolveGl("glEvalCoord2d");
        if (!real_glEvalCoord2d)
            unresolvedError("glEvalCoord2d");
    

        *(void **)&real_glEvalCoord2dv = resolveGl("glEvalCoord2dv");
        if (!real_glEvalCoord2dv)
            unresolvedError("glEvalCoord2dv");
    

        *(void **)&real_glEvalCoord2f = resolveGl("glEvalCoord2f");
        if (!real_glEvalCoord2f)
            unresolvedError("glEvalCoord2f");
    

        *(void **)&real_glEvalCoord2fv = resolveGl("glEvalCoord2fv");
        if (!real_glEvalCoord2fv)
            unresolvedError("glEvalCoord2fv");
    

        *(void **)&real_glEvalMesh1 = resolveGl("glEvalMesh1");
        if (!real_glEvalMesh1)
            unresolvedError("glEvalMesh1");
    

        *(void **)&real_glEvalMesh2 = resolveGl("glEvalMesh2");
        if (!real_glEvalMesh2)
            unresolvedError("glEvalMesh2");
    

        *(void **)&real_glEvalPoint1 = resolveGl("glEvalPoint1");
        if (!real_glEvalPoint1)
            unresolvedError("glEvalPoint1");
    

        *(void **)&real_glEvalPoint2 = resolveGl("glEvalPoint2");
        if (!real_glEvalPoint2)
            unresolvedError("glEvalPoint2");
    

        *(void **)&real_glFeedbackBuffer = resolveGl("glFeedbackBuffer");
        if (!real_glFeedbackBuffer)
            unresolvedError("glFeedbackBuffer");
    

        *(void **)&real_glFinish = resolveGl("glFinish");
        if (!real_glFinish)
            unresolvedError("glFinish");
    

        *(void **)&real_glFlush = resolveGl("glFlush");
        if (!real_glFlush)
            unresolvedError("glFlush");
    

        *(void **)&real_glFogf = resolveGl("glFogf");
        if (!real_glFogf)
            unresolvedError("glFogf");
    

        *(void **)&real_glFogfv = resolveGl("glFogfv");
        if (!real_glFogfv)
            unresolvedError("glFogfv");
    

        *(void **)&real_glFogi = resolveGl("glFogi");
        if (!real_glFogi)
            unresolvedError("glFogi");
    

        *(void **)&real_glFogiv = resolveGl("glFogiv");
        if (!real_glFogiv)
            unresolvedError("glFogiv");
    

        *(void **)&real_glFrontFace = resolveGl("glFrontFace");
        if (!real_glFrontFace)
            unresolvedError("glFrontFace");
    

        *(void **)&real_glFrustum = resolveGl("glFrustum");
        if (!real_glFrustum)
            unresolvedError("glFrustum");
    

        *(void **)&real_glGenLists = resolveGl("glGenLists");
        if (!real_glGenLists)
            unresolvedError("glGenLists");
    

        *(void **)&real_glGenTextures = resolveGl("glGenTextures");
        if (!real_glGenTextures)
            unresolvedError("glGenTextures");
    

        *(void **)&real_glGetBooleanv = resolveGl("glGetBooleanv");
        if (!real_glGetBooleanv)
            unresolvedError("glGetBooleanv");
    

        *(void **)&real_glGetClipPlane = resolveGl("glGetClipPlane");
        if (!real_glGetClipPlane)
            unresolvedError("glGetClipPlane");
    

        *(void **)&real_glGetDoublev = resolveGl("glGetDoublev");
        if (!real_glGetDoublev)
            unresolvedError("glGetDoublev");
    

        *(void **)&real_glGetError = resolveGl("glGetError");
        if (!real_glGetError)
            unresolvedError("glGetError");
    

        *(void **)&real_glGetFloatv = resolveGl("glGetFloatv");
        if (!real_glGetFloatv)
            unresolvedError("glGetFloatv");
    

        *(void **)&real_glGetIntegerv = resolveGl("glGetIntegerv");
        if (!real_glGetIntegerv)
            unresolvedError("glGetIntegerv");
    

        *(void **)&real_glGetLightfv = resolveGl("glGetLightfv");
        if (!real_glGetLightfv)
            unresolvedError("glGetLightfv");
    

        *(void **)&real_glGetLightiv = resolveGl("glGetLightiv");
        if (!real_glGetLightiv)
            unresolvedError("glGetLightiv");
    

        *(void **)&real_glGetMapdv = resolveGl("glGetMapdv");
        if (!real_glGetMapdv)
            unresolvedError("glGetMapdv");
    

        *(void **)&real_glGetMapfv = resolveGl("glGetMapfv");
        if (!real_glGetMapfv)
            unresolvedError("glGetMapfv");
    

        *(void **)&real_glGetMapiv = resolveGl("glGetMapiv");
        if (!real_glGetMapiv)
            unresolvedError("glGetMapiv");
    

        *(void **)&real_glGetMaterialfv = resolveGl("glGetMaterialfv");
        if (!real_glGetMaterialfv)
            unresolvedError("glGetMaterialfv");
    

        *(void **)&real_glGetMaterialiv = resolveGl("glGetMaterialiv");
        if (!real_glGetMaterialiv)
            unresolvedError("glGetMaterialiv");
    

        *(void **)&real_glGetPixelMapfv = resolveGl("glGetPixelMapfv");
        if (!real_glGetPixelMapfv)
            unresolvedError("glGetPixelMapfv");
    

        *(void **)&real_glGetPixelMapuiv = resolveGl("glGetPixelMapuiv");
        if (!real_glGetPixelMapuiv)
            unresolvedError("glGetPixelMapuiv");
    

        *(void **)&real_glGetPixelMapusv = resolveGl("glGetPixelMapusv");
        if (!real_glGetPixelMapusv)
            unresolvedError("glGetPixelMapusv");
    

        *(void **)&real_glGetPointerv = resolveGl("glGetPointerv");
        if (!real_glGetPointerv)
            unresolvedError("glGetPointerv");
    

        *(void **)&real_glGetPolygonStipple = resolveGl("glGetPolygonStipple");
        if (!real_glGetPolygonStipple)
            unresolvedError("glGetPolygonStipple");
    

        *(void **)&real_glGetString = resolveGl("glGetString");
        if (!real_glGetString)
            unresolvedError("glGetString");
    

        *(void **)&real_glGetTexEnvfv = resolveGl("glGetTexEnvfv");
        if (!real_glGetTexEnvfv)
            unresolvedError("glGetTexEnvfv");
    

        *(void **)&real_glGetTexEnviv = resolveGl("glGetTexEnviv");
        if (!real_glGetTexEnviv)
            unresolvedError("glGetTexEnviv");
    

        *(void **)&real_glGetTexGendv = resolveGl("glGetTexGendv");
        if (!real_glGetTexGendv)
            unresolvedError("glGetTexGendv");
    

        *(void **)&real_glGetTexGenfv = resolveGl("glGetTexGenfv");
        if (!real_glGetTexGenfv)
            unresolvedError("glGetTexGenfv");
    

        *(void **)&real_glGetTexGeniv = resolveGl("glGetTexGeniv");
        if (!real_glGetTexGeniv)
            unresolvedError("glGetTexGeniv");
    

        *(void **)&real_glGetTexImage = resolveGl("glGetTexImage");
        if (!real_glGetTexImage)
            unresolvedError("glGetTexImage");
    

        *(void **)&real_glGetTexLevelParameterfv = resolveGl("glGetTexLevelParameterfv");
        if (!real_glGetTexLevelParameterfv)
            unresolvedError("glGetTexLevelParameterfv");
    

        *(void **)&real_glGetTexLevelParameteriv = resolveGl("glGetTexLevelParameteriv");
        if (!real_glGetTexLevelParameteriv)
            unresolvedError("glGetTexLevelParameteriv");
    

        *(void **)&real_glGetTexParameterfv = resolveGl("glGetTexParameterfv");
        if (!real_glGetTexParameterfv)
            unresolvedError("glGetTexParameterfv");
    

        *(void **)&real_glGetTexParameteriv = resolveGl("glGetTexParameteriv");
        if (!real_glGetTexParameteriv)
            unresolvedError("glGetTexParameteriv");
    

        *(void **)&real_glHint = resolveGl("glHint");
        if (!real_glHint)
            unresolvedError("glHint");
    

        *(void **)&real_glIndexMask = resolveGl("glIndexMask");
        if (!real_glIndexMask)
            unresolvedError("glIndexMask");
    

        *(void **)&real_glIndexPointer = resolveGl("glIndexPointer");
        if (!real_glIndexPointer)
            unresolvedError("glIndexPointer");
    

        *(void **)&real_glIndexd = resolveGl("glIndexd");
        if (!real_glIndexd)
            unresolvedError("glIndexd");
    

        *(void **)&real_glIndexdv = resolveGl("glIndexdv");
        if (!real_glIndexdv)
            unresolvedError("glIndexdv");
    

        *(void **)&real_glIndexf = resolveGl("glIndexf");
        if (!real_glIndexf)
            unresolvedError("glIndexf");
    

        *(void **)&real_glIndexfv = resolveGl("glIndexfv");
        if (!real_glIndexfv)
            unresolvedError("glIndexfv");
    

        *(void **)&real_glIndexi = resolveGl("glIndexi");
        if (!real_glIndexi)
            unresolvedError("glIndexi");
    

        *(void **)&real_glIndexiv = resolveGl("glIndexiv");
        if (!real_glIndexiv)
            unresolvedError("glIndexiv");
    

        *(void **)&real_glIndexs = resolveGl("glIndexs");
        if (!real_glIndexs)
            unresolvedError("glIndexs");
    

        *(void **)&real_glIndexsv = resolveGl("glIndexsv");
        if (!real_glIndexsv)
            unresolvedError("glIndexsv");
    

        *(void **)&real_glIndexub = resolveGl("glIndexub");
        if (!real_glIndexub)
            unresolvedError("glIndexub");
    

        *(void **)&real_glIndexubv = resolveGl("glIndexubv");
        if (!real_glIndexubv)
            unresolvedError("glIndexubv");
    

        *(void **)&real_glInitNames = resolveGl("glInitNames");
        if (!real_glInitNames)
            unresolvedError("glInitNames");
    

        *(void **)&real_glInterleavedArrays = resolveGl("glInterleavedArrays");
        if (!real_glInterleavedArrays)
            unresolvedError("glInterleavedArrays");
    

        *(void **)&real_glIsEnabled = resolveGl("glIsEnabled");
        if (!real_glIsEnabled)
            unresolvedError("glIsEnabled");
    

        *(void **)&real_glIsList = resolveGl("glIsList");
        if (!real_glIsList)
            unresolvedError("glIsList");
    

        *(void **)&real_glIsTexture = resolveGl("glIsTexture");
        if (!real_glIsTexture)
            unresolvedError("glIsTexture");
    

        *(void **)&real_glLightModelf = resolveGl("glLightModelf");
        if (!real_glLightModelf)
            unresolvedError("glLightModelf");
    

        *(void **)&real_glLightModelfv = resolveGl("glLightModelfv");
        if (!real_glLightModelfv)
            unresolvedError("glLightModelfv");
    

        *(void **)&real_glLightModeli = resolveGl("glLightModeli");
        if (!real_glLightModeli)
            unresolvedError("glLightModeli");
    

        *(void **)&real_glLightModeliv = resolveGl("glLightModeliv");
        if (!real_glLightModeliv)
            unresolvedError("glLightModeliv");
    

        *(void **)&real_glLightf = resolveGl("glLightf");
        if (!real_glLightf)
            unresolvedError("glLightf");
    

        *(void **)&real_glLightfv = resolveGl("glLightfv");
        if (!real_glLightfv)
            unresolvedError("glLightfv");
    

        *(void **)&real_glLighti = resolveGl("glLighti");
        if (!real_glLighti)
            unresolvedError("glLighti");
    

        *(void **)&real_glLightiv = resolveGl("glLightiv");
        if (!real_glLightiv)
            unresolvedError("glLightiv");
    

        *(void **)&real_glLineStipple = resolveGl("glLineStipple");
        if (!real_glLineStipple)
            unresolvedError("glLineStipple");
    

        *(void **)&real_glLineWidth = resolveGl("glLineWidth");
        if (!real_glLineWidth)
            unresolvedError("glLineWidth");
    

        *(void **)&real_glListBase = resolveGl("glListBase");
        if (!real_glListBase)
            unresolvedError("glListBase");
    

        *(void **)&real_glLoadIdentity = resolveGl("glLoadIdentity");
        if (!real_glLoadIdentity)
            unresolvedError("glLoadIdentity");
    

        *(void **)&real_glLoadMatrixd = resolveGl("glLoadMatrixd");
        if (!real_glLoadMatrixd)
            unresolvedError("glLoadMatrixd");
    

        *(void **)&real_glLoadMatrixf = resolveGl("glLoadMatrixf");
        if (!real_glLoadMatrixf)
            unresolvedError("glLoadMatrixf");
    

        *(void **)&real_glLoadName = resolveGl("glLoadName");
        if (!real_glLoadName)
            unresolvedError("glLoadName");
    

        *(void **)&real_glLogicOp = resolveGl("glLogicOp");
        if (!real_glLogicOp)
            unresolvedError("glLogicOp");
    

        *(void **)&real_glMap1d = resolveGl("glMap1d");
        if (!real_glMap1d)
            unresolvedError("glMap1d");
    

        *(void **)&real_glMap1f = resolveGl("glMap1f");
        if (!real_glMap1f)
            unresolvedError("glMap1f");
    

        *(void **)&real_glMap2d = resolveGl("glMap2d");
        if (!real_glMap2d)
            unresolvedError("glMap2d");
    

        *(void **)&real_glMap2f = resolveGl("glMap2f");
        if (!real_glMap2f)
            unresolvedError("glMap2f");
    

        *(void **)&real_glMapGrid1d = resolveGl("glMapGrid1d");
        if (!real_glMapGrid1d)
            unresolvedError("glMapGrid1d");
    

        *(void **)&real_glMapGrid1f = resolveGl("glMapGrid1f");
        if (!real_glMapGrid1f)
            unresolvedError("glMapGrid1f");
    

        *(void **)&real_glMapGrid2d = resolveGl("glMapGrid2d");
        if (!real_glMapGrid2d)
            unresolvedError("glMapGrid2d");
    

        *(void **)&real_glMapGrid2f = resolveGl("glMapGrid2f");
        if (!real_glMapGrid2f)
            unresolvedError("glMapGrid2f");
    

        *(void **)&real_glMaterialf = resolveGl("glMaterialf");
        if (!real_glMaterialf)
            unresolvedError("glMaterialf");
    

        *(void **)&real_glMaterialfv = resolveGl("glMaterialfv");
        if (!real_glMaterialfv)
            unresolvedError("glMaterialfv");
    

        *(void **)&real_glMateriali = resolveGl("glMateriali");
        if (!real_glMateriali)
            unresolvedError("glMateriali");
    

        *(void **)&real_glMaterialiv = resolveGl("glMaterialiv");
        if (!real_glMaterialiv)
            unresolvedError("glMaterialiv");
    

        *(void **)&real_glMatrixMode = resolveGl("glMatrixMode");
        if (!real_glMatrixMode)
            unresolvedError("glMatrixMode");
    

        *(void **)&real_glMultMatrixd = resolveGl("glMultMatrixd");
        if (!real_glMultMatrixd)
            unresolvedError("glMultMatrixd");
    

        *(void **)&real_glMultMatrixf = resolveGl("glMultMatrixf");
        if (!real_glMultMatrixf)
            unresolvedError("glMultMatrixf");
    

        *(void **)&real_glNewList = resolveGl("glNewList");
        if (!real_glNewList)
            unresolvedError("glNewList");
    

        *(void **)&real_glNormal3b = resolveGl("glNormal3b");
        if (!real_glNormal3b)
            unresolvedError("glNormal3b");
    

        *(void **)&real_glNormal3bv = resolveGl("glNormal3bv");
        if (!real_glNormal3bv)
            unresolvedError("glNormal3bv");
    

        *(void **)&real_glNormal3d = resolveGl("glNormal3d");
        if (!real_glNormal3d)
            unresolvedError("glNormal3d");
    

        *(void **)&real_glNormal3dv = resolveGl("glNormal3dv");
        if (!real_glNormal3dv)
            unresolvedError("glNormal3dv");
    

        *(void **)&real_glNormal3f = resolveGl("glNormal3f");
        if (!real_glNormal3f)
            unresolvedError("glNormal3f");
    

        *(void **)&real_glNormal3fv = resolveGl("glNormal3fv");
        if (!real_glNormal3fv)
            unresolvedError("glNormal3fv");
    

        *(void **)&real_glNormal3i = resolveGl("glNormal3i");
        if (!real_glNormal3i)
            unresolvedError("glNormal3i");
    

        *(void **)&real_glNormal3iv = resolveGl("glNormal3iv");
        if (!real_glNormal3iv)
            unresolvedError("glNormal3iv");
    

        *(void **)&real_glNormal3s = resolveGl("glNormal3s");
        if (!real_glNormal3s)
            unresolvedError("glNormal3s");
    

        *(void **)&real_glNormal3sv = resolveGl("glNormal3sv");
        if (!real_glNormal3sv)
            unresolvedError("glNormal3sv");
    

        *(void **)&real_glNormalPointer = resolveGl("glNormalPointer");
        if (!real_glNormalPointer)
            unresolvedError("glNormalPointer");
    

        *(void **)&real_glOrtho = resolveGl("glOrtho");
        if (!real_glOrtho)
            unresolvedError("glOrtho");
    

        *(void **)&real_glPassThrough = resolveGl("glPassThrough");
        if (!real_glPassThrough)
            unresolvedError("glPassThrough");
    

        *(void **)&real_glPixelMapfv = resolveGl("glPixelMapfv");
        if (!real_glPixelMapfv)
            unresolvedError("glPixelMapfv");
    

        *(void **)&real_glPixelMapuiv = resolveGl("glPixelMapuiv");
        if (!real_glPixelMapuiv)
            unresolvedError("glPixelMapuiv");
    

        *(void **)&real_glPixelMapusv = resolveGl("glPixelMapusv");
        if (!real_glPixelMapusv)
            unresolvedError("glPixelMapusv");
    

        *(void **)&real_glPixelStoref = resolveGl("glPixelStoref");
        if (!real_glPixelStoref)
            unresolvedError("glPixelStoref");
    

        *(void **)&real_glPixelStorei = resolveGl("glPixelStorei");
        if (!real_glPixelStorei)
            unresolvedError("glPixelStorei");
    

        *(void **)&real_glPixelTransferf = resolveGl("glPixelTransferf");
        if (!real_glPixelTransferf)
            unresolvedError("glPixelTransferf");
    

        *(void **)&real_glPixelTransferi = resolveGl("glPixelTransferi");
        if (!real_glPixelTransferi)
            unresolvedError("glPixelTransferi");
    

        *(void **)&real_glPixelZoom = resolveGl("glPixelZoom");
        if (!real_glPixelZoom)
            unresolvedError("glPixelZoom");
    

        *(void **)&real_glPointSize = resolveGl("glPointSize");
        if (!real_glPointSize)
            unresolvedError("glPointSize");
    

        *(void **)&real_glPolygonMode = resolveGl("glPolygonMode");
        if (!real_glPolygonMode)
            unresolvedError("glPolygonMode");
    

        *(void **)&real_glPolygonOffset = resolveGl("glPolygonOffset");
        if (!real_glPolygonOffset)
            unresolvedError("glPolygonOffset");
    

        *(void **)&real_glPolygonStipple = resolveGl("glPolygonStipple");
        if (!real_glPolygonStipple)
            unresolvedError("glPolygonStipple");
    

        *(void **)&real_glPopAttrib = resolveGl("glPopAttrib");
        if (!real_glPopAttrib)
            unresolvedError("glPopAttrib");
    

        *(void **)&real_glPopClientAttrib = resolveGl("glPopClientAttrib");
        if (!real_glPopClientAttrib)
            unresolvedError("glPopClientAttrib");
    

        *(void **)&real_glPopMatrix = resolveGl("glPopMatrix");
        if (!real_glPopMatrix)
            unresolvedError("glPopMatrix");
    

        *(void **)&real_glPopName = resolveGl("glPopName");
        if (!real_glPopName)
            unresolvedError("glPopName");
    

        *(void **)&real_glPrioritizeTextures = resolveGl("glPrioritizeTextures");
        if (!real_glPrioritizeTextures)
            unresolvedError("glPrioritizeTextures");
    

        *(void **)&real_glPushAttrib = resolveGl("glPushAttrib");
        if (!real_glPushAttrib)
            unresolvedError("glPushAttrib");
    

        *(void **)&real_glPushClientAttrib = resolveGl("glPushClientAttrib");
        if (!real_glPushClientAttrib)
            unresolvedError("glPushClientAttrib");
    

        *(void **)&real_glPushMatrix = resolveGl("glPushMatrix");
        if (!real_glPushMatrix)
            unresolvedError("glPushMatrix");
    

        *(void **)&real_glPushName = resolveGl("glPushName");
        if (!real_glPushName)
            unresolvedError("glPushName");
    

        *(void **)&real_glRasterPos2d = resolveGl("glRasterPos2d");
        if (!real_glRasterPos2d)
            unresolvedError("glRasterPos2d");
    

        *(void **)&real_glRasterPos2dv = resolveGl("glRasterPos2dv");
        if (!real_glRasterPos2dv)
            unresolvedError("glRasterPos2dv");
    

        *(void **)&real_glRasterPos2f = resolveGl("glRasterPos2f");
        if (!real_glRasterPos2f)
            unresolvedError("glRasterPos2f");
    

        *(void **)&real_glRasterPos2fv = resolveGl("glRasterPos2fv");
        if (!real_glRasterPos2fv)
            unresolvedError("glRasterPos2fv");
    

        *(void **)&real_glRasterPos2i = resolveGl("glRasterPos2i");
        if (!real_glRasterPos2i)
            unresolvedError("glRasterPos2i");
    

        *(void **)&real_glRasterPos2iv = resolveGl("glRasterPos2iv");
        if (!real_glRasterPos2iv)
            unresolvedError("glRasterPos2iv");
    

        *(void **)&real_glRasterPos2s = resolveGl("glRasterPos2s");
        if (!real_glRasterPos2s)
            unresolvedError("glRasterPos2s");
    

        *(void **)&real_glRasterPos2sv = resolveGl("glRasterPos2sv");
        if (!real_glRasterPos2sv)
            unresolvedError("glRasterPos2sv");
    

        *(void **)&real_glRasterPos3d = resolveGl("glRasterPos3d");
        if (!real_glRasterPos3d)
            unresolvedError("glRasterPos3d");
    

        *(void **)&real_glRasterPos3dv = resolveGl("glRasterPos3dv");
        if (!real_glRasterPos3dv)
            unresolvedError("glRasterPos3dv");
    

        *(void **)&real_glRasterPos3f = resolveGl("glRasterPos3f");
        if (!real_glRasterPos3f)
            unresolvedError("glRasterPos3f");
    

        *(void **)&real_glRasterPos3fv = resolveGl("glRasterPos3fv");
        if (!real_glRasterPos3fv)
            unresolvedError("glRasterPos3fv");
    

        *(void **)&real_glRasterPos3i = resolveGl("glRasterPos3i");
        if (!real_glRasterPos3i)
            unresolvedError("glRasterPos3i");
    

        *(void **)&real_glRasterPos3iv = resolveGl("glRasterPos3iv");
        if (!real_glRasterPos3iv)
            unresolvedError("glRasterPos3iv");
    

        *(void **)&real_glRasterPos3s = resolveGl("glRasterPos3s");
        if (!real_glRasterPos3s)
            unresolvedError("glRasterPos3s");
    

        *(void **)&real_glRasterPos3sv = resolveGl("glRasterPos3sv");
        if (!real_glRasterPos3sv)
            unresolvedError("glRasterPos3sv");
    

        *(void **)&real_glRasterPos4d = resolveGl("glRasterPos4d");
        if (!real_glRasterPos4d)
            unresolvedError("glRasterPos4d");
    

        *(void **)&real_glRasterPos4dv = resolveGl("glRasterPos4dv");
        if (!real_glRasterPos4dv)
            unresolvedError("glRasterPos4dv");
    

        *(void **)&real_glRasterPos4f = resolveGl("glRasterPos4f");
        if (!real_glRasterPos4f)
            unresolvedError("glRasterPos4f");
    

        *(void **)&real_glRasterPos4fv = resolveGl("glRasterPos4fv");
        if (!real_glRasterPos4fv)
            unresolvedError("glRasterPos4fv");
    

        *(void **)&real_glRasterPos4i = resolveGl("glRasterPos4i");
        if (!real_glRasterPos4i)
            unresolvedError("glRasterPos4i");
    

        *(void **)&real_glRasterPos4iv = resolveGl("glRasterPos4iv");
        if (!real_glRasterPos4iv)
            unresolvedError("glRasterPos4iv");
    

        *(void **)&real_glRasterPos4s = resolveGl("glRasterPos4s");
        if (!real_glRasterPos4s)
            unresolvedError("glRasterPos4s");
    

        *(void **)&real_glRasterPos4sv = resolveGl("glRasterPos4sv");
        if (!real_glRasterPos4sv)
            unresolvedError("glRasterPos4sv");
    

        *(void **)&real_glReadBuffer = resolveGl("glReadBuffer");
        if (!real_glReadBuffer)
            unresolvedError("glReadBuffer");
    

        *(void **)&real_glReadPixels = resolveGl("glReadPixels");
        if (!real_glReadPixels)
            unresolvedError("glReadPixels");
    

        *(void **)&real_glRectd = resolveGl("glRectd");
        if (!real_glRectd)
            unresolvedError("glRectd");
    

        *(void **)&real_glRectdv = resolveGl("glRectdv");
        if (!real_glRectdv)
            unresolvedError("glRectdv");
    

        *(void **)&real_glRectf = resolveGl("glRectf");
        if (!real_glRectf)
            unresolvedError("glRectf");
    

        *(void **)&real_glRectfv = resolveGl("glRectfv");
        if (!real_glRectfv)
            unresolvedError("glRectfv");
    

        *(void **)&real_glRecti = resolveGl("glRecti");
        if (!real_glRecti)
            unresolvedError("glRecti");
    

        *(void **)&real_glRectiv = resolveGl("glRectiv");
        if (!real_glRectiv)
            unresolvedError("glRectiv");
    

        *(void **)&real_glRects = resolveGl("glRects");
        if (!real_glRects)
            unresolvedError("glRects");
    

        *(void **)&real_glRectsv = resolveGl("glRectsv");
        if (!real_glRectsv)
            unresolvedError("glRectsv");
    

        *(void **)&real_glRenderMode = resolveGl("glRenderMode");
        if (!real_glRenderMode)
            unresolvedError("glRenderMode");
    

        *(void **)&real_glRotated = resolveGl("glRotated");
        if (!real_glRotated)
            unresolvedError("glRotated");
    

        *(void **)&real_glRotatef = resolveGl("glRotatef");
        if (!real_glRotatef)
            unresolvedError("glRotatef");
    

        *(void **)&real_glScaled = resolveGl("glScaled");
        if (!real_glScaled)
            unresolvedError("glScaled");
    

        *(void **)&real_glScalef = resolveGl("glScalef");
        if (!real_glScalef)
            unresolvedError("glScalef");
    

        *(void **)&real_glScissor = resolveGl("glScissor");
        if (!real_glScissor)
            unresolvedError("glScissor");
    

        *(void **)&real_glSelectBuffer = resolveGl("glSelectBuffer");
        if (!real_glSelectBuffer)
            unresolvedError("glSelectBuffer");
    

        *(void **)&real_glShadeModel = resolveGl("glShadeModel");
        if (!real_glShadeModel)
            unresolvedError("glShadeModel");
    

        *(void **)&real_glStencilFunc = resolveGl("glStencilFunc");
        if (!real_glStencilFunc)
            unresolvedError("glStencilFunc");
    

        *(void **)&real_glStencilMask = resolveGl("glStencilMask");
        if (!real_glStencilMask)
            unresolvedError("glStencilMask");
    

        *(void **)&real_glStencilOp = resolveGl("glStencilOp");
        if (!real_glStencilOp)
            unresolvedError("glStencilOp");
    

        *(void **)&real_glTexCoord1d = resolveGl("glTexCoord1d");
        if (!real_glTexCoord1d)
            unresolvedError("glTexCoord1d");
    

        *(void **)&real_glTexCoord1dv = resolveGl("glTexCoord1dv");
        if (!real_glTexCoord1dv)
            unresolvedError("glTexCoord1dv");
    

        *(void **)&real_glTexCoord1f = resolveGl("glTexCoord1f");
        if (!real_glTexCoord1f)
            unresolvedError("glTexCoord1f");
    

        *(void **)&real_glTexCoord1fv = resolveGl("glTexCoord1fv");
        if (!real_glTexCoord1fv)
            unresolvedError("glTexCoord1fv");
    

        *(void **)&real_glTexCoord1i = resolveGl("glTexCoord1i");
        if (!real_glTexCoord1i)
            unresolvedError("glTexCoord1i");
    

        *(void **)&real_glTexCoord1iv = resolveGl("glTexCoord1iv");
        if (!real_glTexCoord1iv)
            unresolvedError("glTexCoord1iv");
    

        *(void **)&real_glTexCoord1s = resolveGl("glTexCoord1s");
        if (!real_glTexCoord1s)
            unresolvedError("glTexCoord1s");
    

        *(void **)&real_glTexCoord1sv = resolveGl("glTexCoord1sv");
        if (!real_glTexCoord1sv)
            unresolvedError("glTexCoord1sv");
    

        *(void **)&real_glTexCoord2d = resolveGl("glTexCoord2d");
        if (!real_glTexCoord2d)
            unresolvedError("glTexCoord2d");
    

        *(void **)&real_glTexCoord2dv = resolveGl("glTexCoord2dv");
        if (!real_glTexCoord2dv)
            unresolvedError("glTexCoord2dv");
    

        *(void **)&real_glTexCoord2f = resolveGl("glTexCoord2f");
        if (!real_glTexCoord2f)
            unresolvedError("glTexCoord2f");
    

        *(void **)&real_glTexCoord2fv = resolveGl("glTexCoord2fv");
        if (!real_glTexCoord2fv)
            unresolvedError("glTexCoord2fv");
    

        *(void **)&real_glTexCoord2i = resolveGl("glTexCoord2i");
        if (!real_glTexCoord2i)
            unresolvedError("glTexCoord2i");
    

        *(void **)&real_glTexCoord2iv = resolveGl("glTexCoord2iv");
        if (!real_glTexCoord2iv)
            unresolvedError("glTexCoord2iv");
    

        *(void **)&real_glTexCoord2s = resolveGl("glTexCoord2s");
        if (!real_glTexCoord2s)
            unresolvedError("glTexCoord2s");
    

        *(void **)&real_glTexCoord2sv = resolveGl("glTexCoord2sv");
        if (!real_glTexCoord2sv)
            unresolvedError("glTexCoord2sv");
    

        *(void **)&real_glTexCoord3d = resolveGl("glTexCoord3d");
        if (!real_glTexCoord3d)
            unresolvedError("glTexCoord3d");
    

        *(void **)&real_glTexCoord3dv = resolveGl("glTexCoord3dv");
        if (!real_glTexCoord3dv)
            unresolvedError("glTexCoord3dv");
    

        *(void **)&real_glTexCoord3f = resolveGl("glTexCoord3f");
        if (!real_glTexCoord3f)
            unresolvedError("glTexCoord3f");
    

        *(void **)&real_glTexCoord3fv = resolveGl("glTexCoord3fv");
        if (!real_glTexCoord3fv)
            unresolvedError("glTexCoord3fv");
    

        *(void **)&real_glTexCoord3i = resolveGl("glTexCoord3i");
        if (!real_glTexCoord3i)
            unresolvedError("glTexCoord3i");
    

        *(void **)&real_glTexCoord3iv = resolveGl("glTexCoord3iv");
        if (!real_glTexCoord3iv)
            unresolvedError("glTexCoord3iv");
    

        *(void **)&real_glTexCoord3s = resolveGl("glTexCoord3s");
        if (!real_glTexCoord3s)
            unresolvedError("glTexCoord3s");
    

        *(void **)&real_glTexCoord3sv = resolveGl("glTexCoord3sv");
        if (!real_glTexCoord3sv)
            unresolvedError("glTexCoord3sv");
    

        *(void **)&real_glTexCoord4d = resolveGl("glTexCoord4d");
        if (!real_glTexCoord4d)
            unresolvedError("glTexCoord4d");
    

        *(void **)&real_glTexCoord4dv = resolveGl("glTexCoord4dv");
        if (!real_glTexCoord4dv)
            unresolvedError("glTexCoord4dv");
    

        *(void **)&real_glTexCoord4f = resolveGl("glTexCoord4f");
        if (!real_glTexCoord4f)
            unresolvedError("glTexCoord4f");
    

        *(void **)&real_glTexCoord4fv = resolveGl("glTexCoord4fv");
        if (!real_glTexCoord4fv)
            unresolvedError("glTexCoord4fv");
    

        *(void **)&real_glTexCoord4i = resolveGl("glTexCoord4i");
        if (!real_glTexCoord4i)
            unresolvedError("glTexCoord4i");
    

        *(void **)&real_glTexCoord4iv = resolveGl("glTexCoord4iv");
        if (!real_glTexCoord4iv)
            unresolvedError("glTexCoord4iv");
    

        *(void **)&real_glTexCoord4s = resolveGl("glTexCoord4s");
        if (!real_glTexCoord4s)
            unresolvedError("glTexCoord4s");
    

        *(void **)&real_glTexCoord4sv = resolveGl("glTexCoord4sv");
        if (!real_glTexCoord4sv)
            unresolvedError("glTexCoord4sv");
    

        *(void **)&real_glTexCoordPointer = resolveGl("glTexCoordPointer");
        if (!real_glTexCoordPointer)
            unresolvedError("glTexCoordPointer");
    

        *(void **)&real_glTexEnvf = resolveGl("glTexEnvf");
        if (!real_glTexEnvf)
            unresolvedError("glTexEnvf");
    

        *(void **)&real_glTexEnvfv = resolveGl("glTexEnvfv");
        if (!real_glTexEnvfv)
            unresolvedError("glTexEnvfv");
    

        *(void **)&real_glTexEnvi = resolveGl("glTexEnvi");
        if (!real_glTexEnvi)
            unresolvedError("glTexEnvi");
    

        *(void **)&real_glTexEnviv = resolveGl("glTexEnviv");
        if (!real_glTexEnviv)
            unresolvedError("glTexEnviv");
    

        *(void **)&real_glTexGend = resolveGl("glTexGend");
        if (!real_glTexGend)
            unresolvedError("glTexGend");
    

        *(void **)&real_glTexGendv = resolveGl("glTexGendv");
        if (!real_glTexGendv)
            unresolvedError("glTexGendv");
    

        *(void **)&real_glTexGenf = resolveGl("glTexGenf");
        if (!real_glTexGenf)
            unresolvedError("glTexGenf");
    

        *(void **)&real_glTexGenfv = resolveGl("glTexGenfv");
        if (!real_glTexGenfv)
            unresolvedError("glTexGenfv");
    

        *(void **)&real_glTexGeni = resolveGl("glTexGeni");
        if (!real_glTexGeni)
            unresolvedError("glTexGeni");
    

        *(void **)&real_glTexGeniv = resolveGl("glTexGeniv");
        if (!real_glTexGeniv)
            unresolvedError("glTexGeniv");
    

        *(void **)&real_glTexImage1D = resolveGl("glTexImage1D");
        if (!real_glTexImage1D)
            unresolvedError("glTexImage1D");
    

        *(void **)&real_glTexImage2D = resolveGl("glTexImage2D");
        if (!real_glTexImage2D)
            unresolvedError("glTexImage2D");
    

        *(void **)&real_glTexParameterf = resolveGl("glTexParameterf");
        if (!real_glTexParameterf)
            unresolvedError("glTexParameterf");
    

        *(void **)&real_glTexParameterfv = resolveGl("glTexParameterfv");
        if (!real_glTexParameterfv)
            unresolvedError("glTexParameterfv");
    

        *(void **)&real_glTexParameteri = resolveGl("glTexParameteri");
        if (!real_glTexParameteri)
            unresolvedError("glTexParameteri");
    

        *(void **)&real_glTexParameteriv = resolveGl("glTexParameteriv");
        if (!real_glTexParameteriv)
            unresolvedError("glTexParameteriv");
    

        *(void **)&real_glTexSubImage1D = resolveGl("glTexSubImage1D");
        if (!real_glTexSubImage1D)
            unresolvedError("glTexSubImage1D");
    

        *(void **)&real_glTexSubImage2D = resolveGl("glTexSubImage2D");
        if (!real_glTexSubImage2D)
            unresolvedError("glTexSubImage2D");
    

        *(void **)&real_glTranslated = resolveGl("glTranslated");
        if (!real_glTranslated)
            unresolvedError("glTranslated");
    

        *(void **)&real_glTranslatef = resolveGl("glTranslatef");
        if (!real_glTranslatef)
            unresolvedError("glTranslatef");
    

        *(void **)&real_glVertex2d = resolveGl("glVertex2d");
        if (!real_glVertex2d)
            unresolvedError("glVertex2d");
    

        *(void **)&real_glVertex2dv = resolveGl("glVertex2dv");
        if (!real_glVertex2dv)
            unresolvedError("glVertex2dv");
    

        *(void **)&real_glVertex2f = resolveGl("glVertex2f");
        if (!real_glVertex2f)
            unresolvedError("glVertex2f");
    

        *(void **)&real_glVertex2fv = resolveGl("glVertex2fv");
        if (!real_glVertex2fv)
            unresolvedError("glVertex2fv");
    

        *(void **)&real_glVertex2i = resolveGl("glVertex2i");
        if (!real_glVertex2i)
            unresolvedError("glVertex2i");
    

        *(void **)&real_glVertex2iv = resolveGl("glVertex2iv");
        if (!real_glVertex2iv)
            unresolvedError("glVertex2iv");
    

        *(void **)&real_glVertex2s = resolveGl("glVertex2s");
        if (!real_glVertex2s)
            unresolvedError("glVertex2s");
    

        *(void **)&real_glVertex2sv = resolveGl("glVertex2sv");
        if (!real_glVertex2sv)
            unresolvedError("glVertex2sv");
    

        *(void **)&real_glVertex3d = resolveGl("glVertex3d");
        if (!real_glVertex3d)
            unresolvedError("glVertex3d");
    

        *(void **)&real_glVertex3dv = resolveGl("glVertex3dv");
        if (!real_glVertex3dv)
            unresolvedError("glVertex3dv");
    

        *(void **)&real_glVertex3f = resolveGl("glVertex3f");
        if (!real_glVertex3f)
            unresolvedError("glVertex3f");
    

        *(void **)&real_glVertex3fv = resolveGl("glVertex3fv");
        if (!real_glVertex3fv)
            unresolvedError("glVertex3fv");
    

        *(void **)&real_glVertex3i = resolveGl("glVertex3i");
        if (!real_glVertex3i)
            unresolvedError("glVertex3i");
    

        *(void **)&real_glVertex3iv = resolveGl("glVertex3iv");
        if (!real_glVertex3iv)
            unresolvedError("glVertex3iv");
    

        *(void **)&real_glVertex3s = resolveGl("glVertex3s");
        if (!real_glVertex3s)
            unresolvedError("glVertex3s");
    

        *(void **)&real_glVertex3sv = resolveGl("glVertex3sv");
        if (!real_glVertex3sv)
            unresolvedError("glVertex3sv");
    

        *(void **)&real_glVertex4d = resolveGl("glVertex4d");
        if (!real_glVertex4d)
            unresolvedError("glVertex4d");
    

        *(void **)&real_glVertex4dv = resolveGl("glVertex4dv");
        if (!real_glVertex4dv)
            unresolvedError("glVertex4dv");
    

        *(void **)&real_glVertex4f = resolveGl("glVertex4f");
        if (!real_glVertex4f)
            unresolvedError("glVertex4f");
    

        *(void **)&real_glVertex4fv = resolveGl("glVertex4fv");
        if (!real_glVertex4fv)
            unresolvedError("glVertex4fv");
    

        *(void **)&real_glVertex4i = resolveGl("glVertex4i");
        if (!real_glVertex4i)
            unresolvedError("glVertex4i");
    

        *(void **)&real_glVertex4iv = resolveGl("glVertex4iv");
        if (!real_glVertex4iv)
            unresolvedError("glVertex4iv");
    

        *(void **)&real_glVertex4s = resolveGl("glVertex4s");
        if (!real_glVertex4s)
            unresolvedError("glVertex4s");
    

        *(void **)&real_glVertex4sv = resolveGl("glVertex4sv");
        if (!real_glVertex4sv)
            unresolvedError("glVertex4sv");
    

        *(void **)&real_glVertexPointer = resolveGl("glVertexPointer");
        if (!real_glVertexPointer)
            unresolvedError("glVertexPointer");
    

        *(void **)&real_glViewport = resolveGl("glViewport");
        if (!real_glViewport)
            unresolvedError("glViewport");
    

        *(void **)&real_glDrawRangeElements = resolveGl("glDrawRangeElements");
        if (!real_glDrawRangeElements)
            unresolvedError("glDrawRangeElements");
    

        *(void **)&real_glTexImage3D = resolveGl("glTexImage3D");
        if (!real_glTexImage3D)
            unresolvedError("glTexImage3D");
    

        *(void **)&real_glTexSubImage3D = resolveGl("glTexSubImage3D");
        if (!real_glTexSubImage3D)
            unresolvedError("glTexSubImage3D");
    

        *(void **)&real_glCopyTexSubImage3D = resolveGl("glCopyTexSubImage3D");
        if (!real_glCopyTexSubImage3D)
            unresolvedError("glCopyTexSubImage3D");
    

        *(void **)&real_glActiveTexture = resolveGl("glActiveTexture");
        if (!real_glActiveTexture)
            unresolvedError("glActiveTexture");
    

        *(void **)&real_glSampleCoverage = resolveGl("glSampleCoverage");
        if (!real_glSampleCoverage)
            unresolvedError("glSampleCoverage");
    

        *(void **)&real_glCompressedTexImage3D = resolveGl("glCompressedTexImage3D");
        if (!real_glCompressedTexImage3D)
            unresolvedError("glCompressedTexImage3D");
    

        *(void **)&real_glCompressedTexImage2D = resolveGl("glCompressedTexImage2D");
        if (!real_glCompressedTexImage2D)
            unresolvedError("glCompressedTexImage2D");
    

        *(void **)&real_glCompressedTexImage1D = resolveGl("glCompressedTexImage1D");
        if (!real_glCompressedTexImage1D)
            unresolvedError("glCompressedTexImage1D");
    

        *(void **)&real_glCompressedTexSubImage3D = resolveGl("glCompressedTexSubImage3D");
        if (!real_glCompressedTexSubImage3D)
            unresolvedError("glCompressedTexSubImage3D");
    

        *(void **)&real_glCompressedTexSubImage2D = resolveGl("glCompressedTexSubImage2D");
        if (!real_glCompressedTexSubImage2D)
            unresolvedError("glCompressedTexSubImage2D");
    

        *(void **)&real_glCompressedTexSubImage1D = resolveGl("glCompressedTexSubImage1D");
        if (!real_glCompressedTexSubImage1D)
            unresolvedError("glCompressedTexSubImage1D");
    

        *(void **)&real_glGetCompressedTexImage = resolveGl("glGetCompressedTexImage");
        if (!real_glGetCompressedTexImage)
            unresolvedError("glGetCompressedTexImage");
    

        *(void **)&real_glClientActiveTexture = resolveGl("glClientActiveTexture");
        if (!real_glClientActiveTexture)
            unresolvedError("glClientActiveTexture");
    

        *(void **)&real_glMultiTexCoord1d = resolveGl("glMultiTexCoord1d");
        if (!real_glMultiTexCoord1d)
            unresolvedError("glMultiTexCoord1d");
    

        *(void **)&real_glMultiTexCoord1dv = resolveGl("glMultiTexCoord1dv");
        if (!real_glMultiTexCoord1dv)
            unresolvedError("glMultiTexCoord1dv");
    

        *(void **)&real_glMultiTexCoord1f = resolveGl("glMultiTexCoord1f");
        if (!real_glMultiTexCoord1f)
            unresolvedError("glMultiTexCoord1f");
    

        *(void **)&real_glMultiTexCoord1fv = resolveGl("glMultiTexCoord1fv");
        if (!real_glMultiTexCoord1fv)
            unresolvedError("glMultiTexCoord1fv");
    

        *(void **)&real_glMultiTexCoord1i = resolveGl("glMultiTexCoord1i");
        if (!real_glMultiTexCoord1i)
            unresolvedError("glMultiTexCoord1i");
    

        *(void **)&real_glMultiTexCoord1iv = resolveGl("glMultiTexCoord1iv");
        if (!real_glMultiTexCoord1iv)
            unresolvedError("glMultiTexCoord1iv");
    

        *(void **)&real_glMultiTexCoord1s = resolveGl("glMultiTexCoord1s");
        if (!real_glMultiTexCoord1s)
            unresolvedError("glMultiTexCoord1s");
    

        *(void **)&real_glMultiTexCoord1sv = resolveGl("glMultiTexCoord1sv");
        if (!real_glMultiTexCoord1sv)
            unresolvedError("glMultiTexCoord1sv");
    

        *(void **)&real_glMultiTexCoord2d = resolveGl("glMultiTexCoord2d");
        if (!real_glMultiTexCoord2d)
            unresolvedError("glMultiTexCoord2d");
    

        *(void **)&real_glMultiTexCoord2dv = resolveGl("glMultiTexCoord2dv");
        if (!real_glMultiTexCoord2dv)
            unresolvedError("glMultiTexCoord2dv");
    

        *(void **)&real_glMultiTexCoord2f = resolveGl("glMultiTexCoord2f");
        if (!real_glMultiTexCoord2f)
            unresolvedError("glMultiTexCoord2f");
    

        *(void **)&real_glMultiTexCoord2fv = resolveGl("glMultiTexCoord2fv");
        if (!real_glMultiTexCoord2fv)
            unresolvedError("glMultiTexCoord2fv");
    

        *(void **)&real_glMultiTexCoord2i = resolveGl("glMultiTexCoord2i");
        if (!real_glMultiTexCoord2i)
            unresolvedError("glMultiTexCoord2i");
    

        *(void **)&real_glMultiTexCoord2iv = resolveGl("glMultiTexCoord2iv");
        if (!real_glMultiTexCoord2iv)
            unresolvedError("glMultiTexCoord2iv");
    

        *(void **)&real_glMultiTexCoord2s = resolveGl("glMultiTexCoord2s");
        if (!real_glMultiTexCoord2s)
            unresolvedError("glMultiTexCoord2s");
    

        *(void **)&real_glMultiTexCoord2sv = resolveGl("glMultiTexCoord2sv");
        if (!real_glMultiTexCoord2sv)
            unresolvedError("glMultiTexCoord2sv");
    

        *(void **)&real_glMultiTexCoord3d = resolveGl("glMultiTexCoord3d");
        if (!real_glMultiTexCoord3d)
            unresolvedError("glMultiTexCoord3d");
    

        *(void **)&real_glMultiTexCoord3dv = resolveGl("glMultiTexCoord3dv");
        if (!real_glMultiTexCoord3dv)
            unresolvedError("glMultiTexCoord3dv");
    

        *(void **)&real_glMultiTexCoord3f = resolveGl("glMultiTexCoord3f");
        if (!real_glMultiTexCoord3f)
            unresolvedError("glMultiTexCoord3f");
    

        *(void **)&real_glMultiTexCoord3fv = resolveGl("glMultiTexCoord3fv");
        if (!real_glMultiTexCoord3fv)
            unresolvedError("glMultiTexCoord3fv");
    

        *(void **)&real_glMultiTexCoord3i = resolveGl("glMultiTexCoord3i");
        if (!real_glMultiTexCoord3i)
            unresolvedError("glMultiTexCoord3i");
    

        *(void **)&real_glMultiTexCoord3iv = resolveGl("glMultiTexCoord3iv");
        if (!real_glMultiTexCoord3iv)
            unresolvedError("glMultiTexCoord3iv");
    

        *(void **)&real_glMultiTexCoord3s = resolveGl("glMultiTexCoord3s");
        if (!real_glMultiTexCoord3s)
            unresolvedError("glMultiTexCoord3s");
    

        *(void **)&real_glMultiTexCoord3sv = resolveGl("glMultiTexCoord3sv");
        if (!real_glMultiTexCoord3sv)
            unresolvedError("glMultiTexCoord3sv");
    

        *(void **)&real_glMultiTexCoord4d = resolveGl("glMultiTexCoord4d");
        if (!real_glMultiTexCoord4d)
            unresolvedError("glMultiTexCoord4d");
    

        *(void **)&real_glMultiTexCoord4dv = resolveGl("glMultiTexCoord4dv");
        if (!real_glMultiTexCoord4dv)
            unresolvedError("glMultiTexCoord4dv");
    

        *(void **)&real_glMultiTexCoord4f = resolveGl("glMultiTexCoord4f");
        if (!real_glMultiTexCoord4f)
            unresolvedError("glMultiTexCoord4f");
    

        *(void **)&real_glMultiTexCoord4fv = resolveGl("glMultiTexCoord4fv");
        if (!real_glMultiTexCoord4fv)
            unresolvedError("glMultiTexCoord4fv");
    

        *(void **)&real_glMultiTexCoord4i = resolveGl("glMultiTexCoord4i");
        if (!real_glMultiTexCoord4i)
            unresolvedError("glMultiTexCoord4i");
    

        *(void **)&real_glMultiTexCoord4iv = resolveGl("glMultiTexCoord4iv");
        if (!real_glMultiTexCoord4iv)
            unresolvedError("glMultiTexCoord4iv");
    

        *(void **)&real_glMultiTexCoord4s = resolveGl("glMultiTexCoord4s");
        if (!real_glMultiTexCoord4s)
            unresolvedError("glMultiTexCoord4s");
    

        *(void **)&real_glMultiTexCoord4sv = resolveGl("glMultiTexCoord4sv");
        if (!real_glMultiTexCoord4sv)
            unresolvedError("glMultiTexCoord4sv");
    

        *(void **)&real_glLoadTransposeMatrixf = resolveGl("glLoadTransposeMatrixf");
        if (!real_glLoadTransposeMatrixf)
            unresolvedError("glLoadTransposeMatrixf");
    

        *(void **)&real_glLoadTransposeMatrixd = resolveGl("glLoadTransposeMatrixd");
        if (!real_glLoadTransposeMatrixd)
            unresolvedError("glLoadTransposeMatrixd");
    

        *(void **)&real_glMultTransposeMatrixf = resolveGl("glMultTransposeMatrixf");
        if (!real_glMultTransposeMatrixf)
            unresolvedError("glMultTransposeMatrixf");
    

        *(void **)&real_glMultTransposeMatrixd = resolveGl("glMultTransposeMatrixd");
        if (!real_glMultTransposeMatrixd)
            unresolvedError("glMultTransposeMatrixd");
    

        *(void **)&real_glBlendFuncSeparate = resolveGl("glBlendFuncSeparate");
        if (!real_glBlendFuncSeparate)
            unresolvedError("glBlendFuncSeparate");
    

        *(void **)&real_glMultiDrawArrays = resolveGl("glMultiDrawArrays");
        if (!real_glMultiDrawArrays)
            unresolvedError("glMultiDrawArrays");
    

        *(void **)&real_glMultiDrawElements = resolveGl("glMultiDrawElements");
        if (!real_glMultiDrawElements)
            unresolvedError("glMultiDrawElements");
    

        *(void **)&real_glPointParameterf = resolveGl("glPointParameterf");
        if (!real_glPointParameterf)
            unresolvedError("glPointParameterf");
    

        *(void **)&real_glPointParameterfv = resolveGl("glPointParameterfv");
        if (!real_glPointParameterfv)
            unresolvedError("glPointParameterfv");
    

        *(void **)&real_glPointParameteri = resolveGl("glPointParameteri");
        if (!real_glPointParameteri)
            unresolvedError("glPointParameteri");
    

        *(void **)&real_glPointParameteriv = resolveGl("glPointParameteriv");
        if (!real_glPointParameteriv)
            unresolvedError("glPointParameteriv");
    

        *(void **)&real_glFogCoordf = resolveGl("glFogCoordf");
        if (!real_glFogCoordf)
            unresolvedError("glFogCoordf");
    

        *(void **)&real_glFogCoordfv = resolveGl("glFogCoordfv");
        if (!real_glFogCoordfv)
            unresolvedError("glFogCoordfv");
    

        *(void **)&real_glFogCoordd = resolveGl("glFogCoordd");
        if (!real_glFogCoordd)
            unresolvedError("glFogCoordd");
    

        *(void **)&real_glFogCoorddv = resolveGl("glFogCoorddv");
        if (!real_glFogCoorddv)
            unresolvedError("glFogCoorddv");
    

        *(void **)&real_glFogCoordPointer = resolveGl("glFogCoordPointer");
        if (!real_glFogCoordPointer)
            unresolvedError("glFogCoordPointer");
    

        *(void **)&real_glSecondaryColor3b = resolveGl("glSecondaryColor3b");
        if (!real_glSecondaryColor3b)
            unresolvedError("glSecondaryColor3b");
    

        *(void **)&real_glSecondaryColor3bv = resolveGl("glSecondaryColor3bv");
        if (!real_glSecondaryColor3bv)
            unresolvedError("glSecondaryColor3bv");
    

        *(void **)&real_glSecondaryColor3d = resolveGl("glSecondaryColor3d");
        if (!real_glSecondaryColor3d)
            unresolvedError("glSecondaryColor3d");
    

        *(void **)&real_glSecondaryColor3dv = resolveGl("glSecondaryColor3dv");
        if (!real_glSecondaryColor3dv)
            unresolvedError("glSecondaryColor3dv");
    

        *(void **)&real_glSecondaryColor3f = resolveGl("glSecondaryColor3f");
        if (!real_glSecondaryColor3f)
            unresolvedError("glSecondaryColor3f");
    

        *(void **)&real_glSecondaryColor3fv = resolveGl("glSecondaryColor3fv");
        if (!real_glSecondaryColor3fv)
            unresolvedError("glSecondaryColor3fv");
    

        *(void **)&real_glSecondaryColor3i = resolveGl("glSecondaryColor3i");
        if (!real_glSecondaryColor3i)
            unresolvedError("glSecondaryColor3i");
    

        *(void **)&real_glSecondaryColor3iv = resolveGl("glSecondaryColor3iv");
        if (!real_glSecondaryColor3iv)
            unresolvedError("glSecondaryColor3iv");
    

        *(void **)&real_glSecondaryColor3s = resolveGl("glSecondaryColor3s");
        if (!real_glSecondaryColor3s)
            unresolvedError("glSecondaryColor3s");
    

        *(void **)&real_glSecondaryColor3sv = resolveGl("glSecondaryColor3sv");
        if (!real_glSecondaryColor3sv)
            unresolvedError("glSecondaryColor3sv");
    

        *(void **)&real_glSecondaryColor3ub = resolveGl("glSecondaryColor3ub");
        if (!real_glSecondaryColor3ub)
            unresolvedError("glSecondaryColor3ub");
    

        *(void **)&real_glSecondaryColor3ubv = resolveGl("glSecondaryColor3ubv");
        if (!real_glSecondaryColor3ubv)
            unresolvedError("glSecondaryColor3ubv");
    

        *(void **)&real_glSecondaryColor3ui = resolveGl("glSecondaryColor3ui");
        if (!real_glSecondaryColor3ui)
            unresolvedError("glSecondaryColor3ui");
    

        *(void **)&real_glSecondaryColor3uiv = resolveGl("glSecondaryColor3uiv");
        if (!real_glSecondaryColor3uiv)
            unresolvedError("glSecondaryColor3uiv");
    

        *(void **)&real_glSecondaryColor3us = resolveGl("glSecondaryColor3us");
        if (!real_glSecondaryColor3us)
            unresolvedError("glSecondaryColor3us");
    

        *(void **)&real_glSecondaryColor3usv = resolveGl("glSecondaryColor3usv");
        if (!real_glSecondaryColor3usv)
            unresolvedError("glSecondaryColor3usv");
    

        *(void **)&real_glSecondaryColorPointer = resolveGl("glSecondaryColorPointer");
        if (!real_glSecondaryColorPointer)
            unresolvedError("glSecondaryColorPointer");
    

        *(void **)&real_glWindowPos2d = resolveGl("glWindowPos2d");
        if (!real_glWindowPos2d)
            unresolvedError("glWindowPos2d");
    

        *(void **)&real_glWindowPos2dv = resolveGl("glWindowPos2dv");
        if (!real_glWindowPos2dv)
            unresolvedError("glWindowPos2dv");
    

        *(void **)&real_glWindowPos2f = resolveGl("glWindowPos2f");
        if (!real_glWindowPos2f)
            unresolvedError("glWindowPos2f");
    

        *(void **)&real_glWindowPos2fv = resolveGl("glWindowPos2fv");
        if (!real_glWindowPos2fv)
            unresolvedError("glWindowPos2fv");
    

        *(void **)&real_glWindowPos2i = resolveGl("glWindowPos2i");
        if (!real_glWindowPos2i)
            unresolvedError("glWindowPos2i");
    

        *(void **)&real_glWindowPos2iv = resolveGl("glWindowPos2iv");
        if (!real_glWindowPos2iv)
            unresolvedError("glWindowPos2iv");
    

        *(void **)&real_glWindowPos2s = resolveGl("glWindowPos2s");
        if (!real_glWindowPos2s)
            unresolvedError("glWindowPos2s");
    

        *(void **)&real_glWindowPos2sv = resolveGl("glWindowPos2sv");
        if (!real_glWindowPos2sv)
            unresolvedError("glWindowPos2sv");
    

        *(void **)&real_glWindowPos3d = resolveGl("glWindowPos3d");
        if (!real_glWindowPos3d)
            unresolvedError("glWindowPos3d");
    

        *(void **)&real_glWindowPos3dv = resolveGl("glWindowPos3dv");
        if (!real_glWindowPos3dv)
            unresolvedError("glWindowPos3dv");
    

        *(void **)&real_glWindowPos3f = resolveGl("glWindowPos3f");
        if (!real_glWindowPos3f)
            unresolvedError("glWindowPos3f");
    

        *(void **)&real_glWindowPos3fv = resolveGl("glWindowPos3fv");
        if (!real_glWindowPos3fv)
            unresolvedError("glWindowPos3fv");
    

        *(void **)&real_glWindowPos3i = resolveGl("glWindowPos3i");
        if (!real_glWindowPos3i)
            unresolvedError("glWindowPos3i");
    

        *(void **)&real_glWindowPos3iv = resolveGl("glWindowPos3iv");
        if (!real_glWindowPos3iv)
            unresolvedError("glWindowPos3iv");
    

        *(void **)&real_glWindowPos3s = resolveGl("glWindowPos3s");
        if (!real_glWindowPos3s)
            unresolvedError("glWindowPos3s");
    

        *(void **)&real_glWindowPos3sv = resolveGl("glWindowPos3sv");
        if (!real_glWindowPos3sv)
            unresolvedError("glWindowPos3sv");
    

        *(void **)&real_glBlendColor = resolveGl("glBlendColor");
        if (!real_glBlendColor)
            unresolvedError("glBlendColor");
    

        *(void **)&real_glBlendEquation = resolveGl("glBlendEquation");
        if (!real_glBlendEquation)
            unresolvedError("glBlendEquation");
    

        *(void **)&real_glGenQueries = resolveGl("glGenQueries");
        if (!real_glGenQueries)
            unresolvedError("glGenQueries");
    

        *(void **)&real_glDeleteQueries = resolveGl("glDeleteQueries");
        if (!real_glDeleteQueries)
            unresolvedError("glDeleteQueries");
    

        *(void **)&real_glIsQuery = resolveGl("glIsQuery");
        if (!real_glIsQuery)
            unresolvedError("glIsQuery");
    

        *(void **)&real_glBeginQuery = resolveGl("glBeginQuery");
        if (!real_glBeginQuery)
            unresolvedError("glBeginQuery");
    

        *(void **)&real_glEndQuery = resolveGl("glEndQuery");
        if (!real_glEndQuery)
            unresolvedError("glEndQuery");
    

        *(void **)&real_glGetQueryiv = resolveGl("glGetQueryiv");
        if (!real_glGetQueryiv)
            unresolvedError("glGetQueryiv");
    

        *(void **)&real_glGetQueryObjectiv = resolveGl("glGetQueryObjectiv");
        if (!real_glGetQueryObjectiv)
            unresolvedError("glGetQueryObjectiv");
    

        *(void **)&real_glGetQueryObjectuiv = resolveGl("glGetQueryObjectuiv");
        if (!real_glGetQueryObjectuiv)
            unresolvedError("glGetQueryObjectuiv");
    

        *(void **)&real_glBindBuffer = resolveGl("glBindBuffer");
        if (!real_glBindBuffer)
            unresolvedError("glBindBuffer");
    

        *(void **)&real_glDeleteBuffers = resolveGl("glDeleteBuffers");
        if (!real_glDeleteBuffers)
            unresolvedError("glDeleteBuffers");
    

        *(void **)&real_glGenBuffers = resolveGl("glGenBuffers");
        if (!real_glGenBuffers)
            unresolvedError("glGenBuffers");
    

        *(void **)&real_glIsBuffer = resolveGl("glIsBuffer");
        if (!real_glIsBuffer)
            unresolvedError("glIsBuffer");
    

        *(void **)&real_glBufferData = resolveGl("glBufferData");
        if (!real_glBufferData)
            unresolvedError("glBufferData");
    

        *(void **)&real_glBufferSubData = resolveGl("glBufferSubData");
        if (!real_glBufferSubData)
            unresolvedError("glBufferSubData");
    

        *(void **)&real_glGetBufferSubData = resolveGl("glGetBufferSubData");
        if (!real_glGetBufferSubData)
            unresolvedError("glGetBufferSubData");
    

        *(void **)&real_glMapBuffer = resolveGl("glMapBuffer");
        if (!real_glMapBuffer)
            unresolvedError("glMapBuffer");
    

        *(void **)&real_glUnmapBuffer = resolveGl("glUnmapBuffer");
        if (!real_glUnmapBuffer)
            unresolvedError("glUnmapBuffer");
    

        *(void **)&real_glGetBufferParameteriv = resolveGl("glGetBufferParameteriv");
        if (!real_glGetBufferParameteriv)
            unresolvedError("glGetBufferParameteriv");
    

        *(void **)&real_glGetBufferPointerv = resolveGl("glGetBufferPointerv");
        if (!real_glGetBufferPointerv)
            unresolvedError("glGetBufferPointerv");
    

        *(void **)&real_glBlendEquationSeparate = resolveGl("glBlendEquationSeparate");
        if (!real_glBlendEquationSeparate)
            unresolvedError("glBlendEquationSeparate");
    

        *(void **)&real_glDrawBuffers = resolveGl("glDrawBuffers");
        if (!real_glDrawBuffers)
            unresolvedError("glDrawBuffers");
    

        *(void **)&real_glStencilOpSeparate = resolveGl("glStencilOpSeparate");
        if (!real_glStencilOpSeparate)
            unresolvedError("glStencilOpSeparate");
    

        *(void **)&real_glStencilFuncSeparate = resolveGl("glStencilFuncSeparate");
        if (!real_glStencilFuncSeparate)
            unresolvedError("glStencilFuncSeparate");
    

        *(void **)&real_glStencilMaskSeparate = resolveGl("glStencilMaskSeparate");
        if (!real_glStencilMaskSeparate)
            unresolvedError("glStencilMaskSeparate");
    

        *(void **)&real_glAttachShader = resolveGl("glAttachShader");
        if (!real_glAttachShader)
            unresolvedError("glAttachShader");
    

        *(void **)&real_glBindAttribLocation = resolveGl("glBindAttribLocation");
        if (!real_glBindAttribLocation)
            unresolvedError("glBindAttribLocation");
    

        *(void **)&real_glCompileShader = resolveGl("glCompileShader");
        if (!real_glCompileShader)
            unresolvedError("glCompileShader");
    

        *(void **)&real_glCreateProgram = resolveGl("glCreateProgram");
        if (!real_glCreateProgram)
            unresolvedError("glCreateProgram");
    

        *(void **)&real_glCreateShader = resolveGl("glCreateShader");
        if (!real_glCreateShader)
            unresolvedError("glCreateShader");
    

        *(void **)&real_glDeleteProgram = resolveGl("glDeleteProgram");
        if (!real_glDeleteProgram)
            unresolvedError("glDeleteProgram");
    

        *(void **)&real_glDeleteShader = resolveGl("glDeleteShader");
        if (!real_glDeleteShader)
            unresolvedError("glDeleteShader");
    

        *(void **)&real_glDetachShader = resolveGl("glDetachShader");
        if (!real_glDetachShader)
            unresolvedError("glDetachShader");
    

        *(void **)&real_glDisableVertexAttribArray = resolveGl("glDisableVertexAttribArray");
        if (!real_glDisableVertexAttribArray)
            unresolvedError("glDisableVertexAttribArray");
    

        *(void **)&real_glEnableVertexAttribArray = resolveGl("glEnableVertexAttribArray");
        if (!real_glEnableVertexAttribArray)
            unresolvedError("glEnableVertexAttribArray");
    

        *(void **)&real_glGetActiveAttrib = resolveGl("glGetActiveAttrib");
        if (!real_glGetActiveAttrib)
            unresolvedError("glGetActiveAttrib");
    

        *(void **)&real_glGetActiveUniform = resolveGl("glGetActiveUniform");
        if (!real_glGetActiveUniform)
            unresolvedError("glGetActiveUniform");
    

        *(void **)&real_glGetAttachedShaders = resolveGl("glGetAttachedShaders");
        if (!real_glGetAttachedShaders)
            unresolvedError("glGetAttachedShaders");
    

        *(void **)&real_glGetAttribLocation = resolveGl("glGetAttribLocation");
        if (!real_glGetAttribLocation)
            unresolvedError("glGetAttribLocation");
    

        *(void **)&real_glGetProgramiv = resolveGl("glGetProgramiv");
        if (!real_glGetProgramiv)
            unresolvedError("glGetProgramiv");
    

        *(void **)&real_glGetProgramInfoLog = resolveGl("glGetProgramInfoLog");
        if (!real_glGetProgramInfoLog)
            unresolvedError("glGetProgramInfoLog");
    

        *(void **)&real_glGetShaderiv = resolveGl("glGetShaderiv");
        if (!real_glGetShaderiv)
            unresolvedError("glGetShaderiv");
    

        *(void **)&real_glGetShaderInfoLog = resolveGl("glGetShaderInfoLog");
        if (!real_glGetShaderInfoLog)
            unresolvedError("glGetShaderInfoLog");
    

        *(void **)&real_glGetShaderSource = resolveGl("glGetShaderSource");
        if (!real_glGetShaderSource)
            unresolvedError("glGetShaderSource");
    

        *(void **)&real_glGetUniformLocation = resolveGl("glGetUniformLocation");
        if (!real_glGetUniformLocation)
            unresolvedError("glGetUniformLocation");
    

        *(void **)&real_glGetUniformfv = resolveGl("glGetUniformfv");
        if (!real_glGetUniformfv)
            unresolvedError("glGetUniformfv");
    

        *(void **)&real_glGetUniformiv = resolveGl("glGetUniformiv");
        if (!real_glGetUniformiv)
            unresolvedError("glGetUniformiv");
    

        *(void **)&real_glGetVertexAttribdv = resolveGl("glGetVertexAttribdv");
        if (!real_glGetVertexAttribdv)
            unresolvedError("glGetVertexAttribdv");
    

        *(void **)&real_glGetVertexAttribfv = resolveGl("glGetVertexAttribfv");
        if (!real_glGetVertexAttribfv)
            unresolvedError("glGetVertexAttribfv");
    

        *(void **)&real_glGetVertexAttribiv = resolveGl("glGetVertexAttribiv");
        if (!real_glGetVertexAttribiv)
            unresolvedError("glGetVertexAttribiv");
    

        *(void **)&real_glGetVertexAttribPointerv = resolveGl("glGetVertexAttribPointerv");
        if (!real_glGetVertexAttribPointerv)
            unresolvedError("glGetVertexAttribPointerv");
    

        *(void **)&real_glIsProgram = resolveGl("glIsProgram");
        if (!real_glIsProgram)
            unresolvedError("glIsProgram");
    

        *(void **)&real_glIsShader = resolveGl("glIsShader");
        if (!real_glIsShader)
            unresolvedError("glIsShader");
    

        *(void **)&real_glLinkProgram = resolveGl("glLinkProgram");
        if (!real_glLinkProgram)
            unresolvedError("glLinkProgram");
    

        *(void **)&real_glShaderSource = resolveGl("glShaderSource");
        if (!real_glShaderSource)
            unresolvedError("glShaderSource");
    

        *(void **)&real_glUseProgram = resolveGl("glUseProgram");
        if (!real_glUseProgram)
            unresolvedError("glUseProgram");
    

        *(void **)&real_glUniform1f = resolveGl("glUniform1f");
        if (!real_glUniform1f)
            unresolvedError("glUniform1f");
    

        *(void **)&real_glUniform2f = resolveGl("glUniform2f");
        if (!real_glUniform2f)
            unresolvedError("glUniform2f");
    

        *(void **)&real_glUniform3f = resolveGl("glUniform3f");
        if (!real_glUniform3f)
            unresolvedError("glUniform3f");
    

        *(void **)&real_glUniform4f = resolveGl("glUniform4f");
        if (!real_glUniform4f)
            unresolvedError("glUniform4f");
    

        *(void **)&real_glUniform1i = resolveGl("glUniform1i");
        if (!real_glUniform1i)
            unresolvedError("glUniform1i");
    

        *(void **)&real_glUniform2i = resolveGl("glUniform2i");
        if (!real_glUniform2i)
            unresolvedError("glUniform2i");
    

        *(void **)&real_glUniform3i = resolveGl("glUniform3i");
        if (!real_glUniform3i)
            unresolvedError("glUniform3i");
    

        *(void **)&real_glUniform4i = resolveGl("glUniform4i");
        if (!real_glUniform4i)
            unresolvedError("glUniform4i");
    

        *(void **)&real_glUniform1fv = resolveGl("glUniform1fv");
        if (!real_glUniform1fv)
            unresolvedError("glUniform1fv");
    

        *(void **)&real_glUniform2fv = resolveGl("glUniform2fv");
        if (!real_glUniform2fv)
            unresolvedError("glUniform2fv");
    

        *(void **)&real_glUniform3fv = resolveGl("glUniform3fv");
        if (!real_glUniform3fv)
            unresolvedError("glUniform3fv");
    

        *(void **)&real_glUniform4fv = resolveGl("glUniform4fv");
        if (!real_glUniform4fv)
            unresolvedError("glUniform4fv");
    

        *(void **)&real_glUniform1iv = resolveGl("glUniform1iv");
        if (!real_glUniform1iv)
            unresolvedError("glUniform1iv");
    

        *(void **)&real_glUniform2iv = resolveGl("glUniform2iv");
        if (!real_glUniform2iv)
            unresolvedError("glUniform2iv");
    

        *(void **)&real_glUniform3iv = resolveGl("glUniform3iv");
        if (!real_glUniform3iv)
            unresolvedError("glUniform3iv");
    

        *(void **)&real_glUniform4iv = resolveGl("glUniform4iv");
        if (!real_glUniform4iv)
            unresolvedError("glUniform4iv");
    

        *(void **)&real_glUniformMatrix2fv = resolveGl("glUniformMatrix2fv");
        if (!real_glUniformMatrix2fv)
            unresolvedError("glUniformMatrix2fv");
    

        *(void **)&real_glUniformMatrix3fv = resolveGl("glUniformMatrix3fv");
        if (!real_glUniformMatrix3fv)
            unresolvedError("glUniformMatrix3fv");
    

        *(void **)&real_glUniformMatrix4fv = resolveGl("glUniformMatrix4fv");
        if (!real_glUniformMatrix4fv)
            unresolvedError("glUniformMatrix4fv");
    

        *(void **)&real_glValidateProgram = resolveGl("glValidateProgram");
        if (!real_glValidateProgram)
            unresolvedError("glValidateProgram");
    

        *(void **)&real_glVertexAttrib1d = resolveGl("glVertexAttrib1d");
        if (!real_glVertexAttrib1d)
            unresolvedError("glVertexAttrib1d");
    

        *(void **)&real_glVertexAttrib1dv = resolveGl("glVertexAttrib1dv");
        if (!real_glVertexAttrib1dv)
            unresolvedError("glVertexAttrib1dv");
    

        *(void **)&real_glVertexAttrib1f = resolveGl("glVertexAttrib1f");
        if (!real_glVertexAttrib1f)
            unresolvedError("glVertexAttrib1f");
    

        *(void **)&real_glVertexAttrib1fv = resolveGl("glVertexAttrib1fv");
        if (!real_glVertexAttrib1fv)
            unresolvedError("glVertexAttrib1fv");
    

        *(void **)&real_glVertexAttrib1s = resolveGl("glVertexAttrib1s");
        if (!real_glVertexAttrib1s)
            unresolvedError("glVertexAttrib1s");
    

        *(void **)&real_glVertexAttrib1sv = resolveGl("glVertexAttrib1sv");
        if (!real_glVertexAttrib1sv)
            unresolvedError("glVertexAttrib1sv");
    

        *(void **)&real_glVertexAttrib2d = resolveGl("glVertexAttrib2d");
        if (!real_glVertexAttrib2d)
            unresolvedError("glVertexAttrib2d");
    

        *(void **)&real_glVertexAttrib2dv = resolveGl("glVertexAttrib2dv");
        if (!real_glVertexAttrib2dv)
            unresolvedError("glVertexAttrib2dv");
    

        *(void **)&real_glVertexAttrib2f = resolveGl("glVertexAttrib2f");
        if (!real_glVertexAttrib2f)
            unresolvedError("glVertexAttrib2f");
    

        *(void **)&real_glVertexAttrib2fv = resolveGl("glVertexAttrib2fv");
        if (!real_glVertexAttrib2fv)
            unresolvedError("glVertexAttrib2fv");
    

        *(void **)&real_glVertexAttrib2s = resolveGl("glVertexAttrib2s");
        if (!real_glVertexAttrib2s)
            unresolvedError("glVertexAttrib2s");
    

        *(void **)&real_glVertexAttrib2sv = resolveGl("glVertexAttrib2sv");
        if (!real_glVertexAttrib2sv)
            unresolvedError("glVertexAttrib2sv");
    

        *(void **)&real_glVertexAttrib3d = resolveGl("glVertexAttrib3d");
        if (!real_glVertexAttrib3d)
            unresolvedError("glVertexAttrib3d");
    

        *(void **)&real_glVertexAttrib3dv = resolveGl("glVertexAttrib3dv");
        if (!real_glVertexAttrib3dv)
            unresolvedError("glVertexAttrib3dv");
    

        *(void **)&real_glVertexAttrib3f = resolveGl("glVertexAttrib3f");
        if (!real_glVertexAttrib3f)
            unresolvedError("glVertexAttrib3f");
    

        *(void **)&real_glVertexAttrib3fv = resolveGl("glVertexAttrib3fv");
        if (!real_glVertexAttrib3fv)
            unresolvedError("glVertexAttrib3fv");
    

        *(void **)&real_glVertexAttrib3s = resolveGl("glVertexAttrib3s");
        if (!real_glVertexAttrib3s)
            unresolvedError("glVertexAttrib3s");
    

        *(void **)&real_glVertexAttrib3sv = resolveGl("glVertexAttrib3sv");
        if (!real_glVertexAttrib3sv)
            unresolvedError("glVertexAttrib3sv");
    

        *(void **)&real_glVertexAttrib4Nbv = resolveGl("glVertexAttrib4Nbv");
        if (!real_glVertexAttrib4Nbv)
            unresolvedError("glVertexAttrib4Nbv");
    

        *(void **)&real_glVertexAttrib4Niv = resolveGl("glVertexAttrib4Niv");
        if (!real_glVertexAttrib4Niv)
            unresolvedError("glVertexAttrib4Niv");
    

        *(void **)&real_glVertexAttrib4Nsv = resolveGl("glVertexAttrib4Nsv");
        if (!real_glVertexAttrib4Nsv)
            unresolvedError("glVertexAttrib4Nsv");
    

        *(void **)&real_glVertexAttrib4Nub = resolveGl("glVertexAttrib4Nub");
        if (!real_glVertexAttrib4Nub)
            unresolvedError("glVertexAttrib4Nub");
    

        *(void **)&real_glVertexAttrib4Nubv = resolveGl("glVertexAttrib4Nubv");
        if (!real_glVertexAttrib4Nubv)
            unresolvedError("glVertexAttrib4Nubv");
    

        *(void **)&real_glVertexAttrib4Nuiv = resolveGl("glVertexAttrib4Nuiv");
        if (!real_glVertexAttrib4Nuiv)
            unresolvedError("glVertexAttrib4Nuiv");
    

        *(void **)&real_glVertexAttrib4Nusv = resolveGl("glVertexAttrib4Nusv");
        if (!real_glVertexAttrib4Nusv)
            unresolvedError("glVertexAttrib4Nusv");
    

        *(void **)&real_glVertexAttrib4bv = resolveGl("glVertexAttrib4bv");
        if (!real_glVertexAttrib4bv)
            unresolvedError("glVertexAttrib4bv");
    

        *(void **)&real_glVertexAttrib4d = resolveGl("glVertexAttrib4d");
        if (!real_glVertexAttrib4d)
            unresolvedError("glVertexAttrib4d");
    

        *(void **)&real_glVertexAttrib4dv = resolveGl("glVertexAttrib4dv");
        if (!real_glVertexAttrib4dv)
            unresolvedError("glVertexAttrib4dv");
    

        *(void **)&real_glVertexAttrib4f = resolveGl("glVertexAttrib4f");
        if (!real_glVertexAttrib4f)
            unresolvedError("glVertexAttrib4f");
    

        *(void **)&real_glVertexAttrib4fv = resolveGl("glVertexAttrib4fv");
        if (!real_glVertexAttrib4fv)
            unresolvedError("glVertexAttrib4fv");
    

        *(void **)&real_glVertexAttrib4iv = resolveGl("glVertexAttrib4iv");
        if (!real_glVertexAttrib4iv)
            unresolvedError("glVertexAttrib4iv");
    

        *(void **)&real_glVertexAttrib4s = resolveGl("glVertexAttrib4s");
        if (!real_glVertexAttrib4s)
            unresolvedError("glVertexAttrib4s");
    

        *(void **)&real_glVertexAttrib4sv = resolveGl("glVertexAttrib4sv");
        if (!real_glVertexAttrib4sv)
            unresolvedError("glVertexAttrib4sv");
    

        *(void **)&real_glVertexAttrib4ubv = resolveGl("glVertexAttrib4ubv");
        if (!real_glVertexAttrib4ubv)
            unresolvedError("glVertexAttrib4ubv");
    

        *(void **)&real_glVertexAttrib4uiv = resolveGl("glVertexAttrib4uiv");
        if (!real_glVertexAttrib4uiv)
            unresolvedError("glVertexAttrib4uiv");
    

        *(void **)&real_glVertexAttrib4usv = resolveGl("glVertexAttrib4usv");
        if (!real_glVertexAttrib4usv)
            unresolvedError("glVertexAttrib4usv");
    

        *(void **)&real_glVertexAttribPointer = resolveGl("glVertexAttribPointer");
        if (!real_glVertexAttribPointer)
            unresolvedError("glVertexAttribPointer");
    

        *(void **)&real_glUniformMatrix2x3fv = resolveGl("glUniformMatrix2x3fv");
        if (!real_glUniformMatrix2x3fv)
            unresolvedError("glUniformMatrix2x3fv");
    

        *(void **)&real_glUniformMatrix3x2fv = resolveGl("glUniformMatrix3x2fv");
        if (!real_glUniformMatrix3x2fv)
            unresolvedError("glUniformMatrix3x2fv");
    

        *(void **)&real_glUniformMatrix2x4fv = resolveGl("glUniformMatrix2x4fv");
        if (!real_glUniformMatrix2x4fv)
            unresolvedError("glUniformMatrix2x4fv");
    

        *(void **)&real_glUniformMatrix4x2fv = resolveGl("glUniformMatrix4x2fv");
        if (!real_glUniformMatrix4x2fv)
            unresolvedError("glUniformMatrix4x2fv");
    

        *(void **)&real_glUniformMatrix3x4fv = resolveGl("glUniformMatrix3x4fv");
        if (!real_glUniformMatrix3x4fv)
            unresolvedError("glUniformMatrix3x4fv");
    

        *(void **)&real_glUniformMatrix4x3fv = resolveGl("glUniformMatrix4x3fv");
        if (!real_glUniformMatrix4x3fv)
            unresolvedError("glUniformMatrix4x3fv");
    

        *(void **)&real_glColorMaski = resolveGl("glColorMaski");
        if (!real_glColorMaski)
            unresolvedError("glColorMaski");
    

        *(void **)&real_glGetBooleani_v = resolveGl("glGetBooleani_v");
        if (!real_glGetBooleani_v)
            unresolvedError("glGetBooleani_v");
    

        *(void **)&real_glGetIntegeri_v = resolveGl("glGetIntegeri_v");
        if (!real_glGetIntegeri_v)
            unresolvedError("glGetIntegeri_v");
    

        *(void **)&real_glEnablei = resolveGl("glEnablei");
        if (!real_glEnablei)
            unresolvedError("glEnablei");
    

        *(void **)&real_glDisablei = resolveGl("glDisablei");
        if (!real_glDisablei)
            unresolvedError("glDisablei");
    

        *(void **)&real_glIsEnabledi = resolveGl("glIsEnabledi");
        if (!real_glIsEnabledi)
            unresolvedError("glIsEnabledi");
    

        *(void **)&real_glBeginTransformFeedback = resolveGl("glBeginTransformFeedback");
        if (!real_glBeginTransformFeedback)
            unresolvedError("glBeginTransformFeedback");
    

        *(void **)&real_glEndTransformFeedback = resolveGl("glEndTransformFeedback");
        if (!real_glEndTransformFeedback)
            unresolvedError("glEndTransformFeedback");
    

        *(void **)&real_glBindBufferRange = resolveGl("glBindBufferRange");
        if (!real_glBindBufferRange)
            unresolvedError("glBindBufferRange");
    

        *(void **)&real_glBindBufferBase = resolveGl("glBindBufferBase");
        if (!real_glBindBufferBase)
            unresolvedError("glBindBufferBase");
    

        *(void **)&real_glTransformFeedbackVaryings = resolveGl("glTransformFeedbackVaryings");
        if (!real_glTransformFeedbackVaryings)
            unresolvedError("glTransformFeedbackVaryings");
    

        *(void **)&real_glGetTransformFeedbackVarying = resolveGl("glGetTransformFeedbackVarying");
        if (!real_glGetTransformFeedbackVarying)
            unresolvedError("glGetTransformFeedbackVarying");
    

        *(void **)&real_glClampColor = resolveGl("glClampColor");
        if (!real_glClampColor)
            unresolvedError("glClampColor");
    

        *(void **)&real_glBeginConditionalRender = resolveGl("glBeginConditionalRender");
        if (!real_glBeginConditionalRender)
            unresolvedError("glBeginConditionalRender");
    

        *(void **)&real_glEndConditionalRender = resolveGl("glEndConditionalRender");
        if (!real_glEndConditionalRender)
            unresolvedError("glEndConditionalRender");
    

        *(void **)&real_glVertexAttribIPointer = resolveGl("glVertexAttribIPointer");
        if (!real_glVertexAttribIPointer)
            unresolvedError("glVertexAttribIPointer");
    

        *(void **)&real_glGetVertexAttribIiv = resolveGl("glGetVertexAttribIiv");
        if (!real_glGetVertexAttribIiv)
            unresolvedError("glGetVertexAttribIiv");
    

        *(void **)&real_glGetVertexAttribIuiv = resolveGl("glGetVertexAttribIuiv");
        if (!real_glGetVertexAttribIuiv)
            unresolvedError("glGetVertexAttribIuiv");
    

        *(void **)&real_glVertexAttribI1i = resolveGl("glVertexAttribI1i");
        if (!real_glVertexAttribI1i)
            unresolvedError("glVertexAttribI1i");
    

        *(void **)&real_glVertexAttribI2i = resolveGl("glVertexAttribI2i");
        if (!real_glVertexAttribI2i)
            unresolvedError("glVertexAttribI2i");
    

        *(void **)&real_glVertexAttribI3i = resolveGl("glVertexAttribI3i");
        if (!real_glVertexAttribI3i)
            unresolvedError("glVertexAttribI3i");
    

        *(void **)&real_glVertexAttribI4i = resolveGl("glVertexAttribI4i");
        if (!real_glVertexAttribI4i)
            unresolvedError("glVertexAttribI4i");
    

        *(void **)&real_glVertexAttribI1ui = resolveGl("glVertexAttribI1ui");
        if (!real_glVertexAttribI1ui)
            unresolvedError("glVertexAttribI1ui");
    

        *(void **)&real_glVertexAttribI2ui = resolveGl("glVertexAttribI2ui");
        if (!real_glVertexAttribI2ui)
            unresolvedError("glVertexAttribI2ui");
    

        *(void **)&real_glVertexAttribI3ui = resolveGl("glVertexAttribI3ui");
        if (!real_glVertexAttribI3ui)
            unresolvedError("glVertexAttribI3ui");
    

        *(void **)&real_glVertexAttribI4ui = resolveGl("glVertexAttribI4ui");
        if (!real_glVertexAttribI4ui)
            unresolvedError("glVertexAttribI4ui");
    

        *(void **)&real_glVertexAttribI1iv = resolveGl("glVertexAttribI1iv");
        if (!real_glVertexAttribI1iv)
            unresolvedError("glVertexAttribI1iv");
    

        *(void **)&real_glVertexAttribI2iv = resolveGl("glVertexAttribI2iv");
        if (!real_glVertexAttribI2iv)
            unresolvedError("glVertexAttribI2iv");
    

        *(void **)&real_glVertexAttribI3iv = resolveGl("glVertexAttribI3iv");
        if (!real_glVertexAttribI3iv)
            unresolvedError("glVertexAttribI3iv");
    

        *(void **)&real_glVertexAttribI4iv = resolveGl("glVertexAttribI4iv");
        if (!real_glVertexAttribI4iv)
            unresolvedError("glVertexAttribI4iv");
    

        *(void **)&real_glVertexAttribI1uiv = resolveGl("glVertexAttribI1uiv");
        if (!real_glVertexAttribI1uiv)
            unresolvedError("glVertexAttribI1uiv");
    

        *(void **)&real_glVertexAttribI2uiv = resolveGl("glVertexAttribI2uiv");
        if (!real_glVertexAttribI2uiv)
            unresolvedError("glVertexAttribI2uiv");
    

        *(void **)&real_glVertexAttribI3uiv = resolveGl("glVertexAttribI3uiv");
        if (!real_glVertexAttribI3uiv)
            unresolvedError("glVertexAttribI3uiv");
    

        *(void **)&real_glVertexAttribI4uiv = resolveGl("glVertexAttribI4uiv");
        if (!real_glVertexAttribI4uiv)
            unresolvedError("glVertexAttribI4uiv");
    

        *(void **)&real_glVertexAttribI4bv = resolveGl("glVertexAttribI4bv");
        if (!real_glVertexAttribI4bv)
            unresolvedError("glVertexAttribI4bv");
    

        *(void **)&real_glVertexAttribI4sv = resolveGl("glVertexAttribI4sv");
        if (!real_glVertexAttribI4sv)
            unresolvedError("glVertexAttribI4sv");
    

        *(void **)&real_glVertexAttribI4ubv = resolveGl("glVertexAttribI4ubv");
        if (!real_glVertexAttribI4ubv)
            unresolvedError("glVertexAttribI4ubv");
    

        *(void **)&real_glVertexAttribI4usv = resolveGl("glVertexAttribI4usv");
        if (!real_glVertexAttribI4usv)
            unresolvedError("glVertexAttribI4usv");
    

        *(void **)&real_glGetUniformuiv = resolveGl("glGetUniformuiv");
        if (!real_glGetUniformuiv)
            unresolvedError("glGetUniformuiv");
    

        *(void **)&real_glBindFragDataLocation = resolveGl("glBindFragDataLocation");
        if (!real_glBindFragDataLocation)
            unresolvedError("glBindFragDataLocation");
    

        *(void **)&real_glGetFragDataLocation = resolveGl("glGetFragDataLocation");
        if (!real_glGetFragDataLocation)
            unresolvedError("glGetFragDataLocation");
    

        *(void **)&real_glUniform1ui = resolveGl("glUniform1ui");
        if (!real_glUniform1ui)
            unresolvedError("glUniform1ui");
    

        *(void **)&real_glUniform2ui = resolveGl("glUniform2ui");
        if (!real_glUniform2ui)
            unresolvedError("glUniform2ui");
    

        *(void **)&real_glUniform3ui = resolveGl("glUniform3ui");
        if (!real_glUniform3ui)
            unresolvedError("glUniform3ui");
    

        *(void **)&real_glUniform4ui = resolveGl("glUniform4ui");
        if (!real_glUniform4ui)
            unresolvedError("glUniform4ui");
    

        *(void **)&real_glUniform1uiv = resolveGl("glUniform1uiv");
        if (!real_glUniform1uiv)
            unresolvedError("glUniform1uiv");
    

        *(void **)&real_glUniform2uiv = resolveGl("glUniform2uiv");
        if (!real_glUniform2uiv)
            unresolvedError("glUniform2uiv");
    

        *(void **)&real_glUniform3uiv = resolveGl("glUniform3uiv");
        if (!real_glUniform3uiv)
            unresolvedError("glUniform3uiv");
    

        *(void **)&real_glUniform4uiv = resolveGl("glUniform4uiv");
        if (!real_glUniform4uiv)
            unresolvedError("glUniform4uiv");
    

        *(void **)&real_glTexParameterIiv = resolveGl("glTexParameterIiv");
        if (!real_glTexParameterIiv)
            unresolvedError("glTexParameterIiv");
    

        *(void **)&real_glTexParameterIuiv = resolveGl("glTexParameterIuiv");
        if (!real_glTexParameterIuiv)
            unresolvedError("glTexParameterIuiv");
    

        *(void **)&real_glGetTexParameterIiv = resolveGl("glGetTexParameterIiv");
        if (!real_glGetTexParameterIiv)
            unresolvedError("glGetTexParameterIiv");
    

        *(void **)&real_glGetTexParameterIuiv = resolveGl("glGetTexParameterIuiv");
        if (!real_glGetTexParameterIuiv)
            unresolvedError("glGetTexParameterIuiv");
    

        *(void **)&real_glClearBufferiv = resolveGl("glClearBufferiv");
        if (!real_glClearBufferiv)
            unresolvedError("glClearBufferiv");
    

        *(void **)&real_glClearBufferuiv = resolveGl("glClearBufferuiv");
        if (!real_glClearBufferuiv)
            unresolvedError("glClearBufferuiv");
    

        *(void **)&real_glClearBufferfv = resolveGl("glClearBufferfv");
        if (!real_glClearBufferfv)
            unresolvedError("glClearBufferfv");
    

        *(void **)&real_glClearBufferfi = resolveGl("glClearBufferfi");
        if (!real_glClearBufferfi)
            unresolvedError("glClearBufferfi");
    

        *(void **)&real_glGetStringi = resolveGl("glGetStringi");
        if (!real_glGetStringi)
            unresolvedError("glGetStringi");
    

        *(void **)&real_glIsRenderbuffer = resolveGl("glIsRenderbuffer");
        if (!real_glIsRenderbuffer)
            unresolvedError("glIsRenderbuffer");
    

        *(void **)&real_glBindRenderbuffer = resolveGl("glBindRenderbuffer");
        if (!real_glBindRenderbuffer)
            unresolvedError("glBindRenderbuffer");
    

        *(void **)&real_glDeleteRenderbuffers = resolveGl("glDeleteRenderbuffers");
        if (!real_glDeleteRenderbuffers)
            unresolvedError("glDeleteRenderbuffers");
    

        *(void **)&real_glGenRenderbuffers = resolveGl("glGenRenderbuffers");
        if (!real_glGenRenderbuffers)
            unresolvedError("glGenRenderbuffers");
    

        *(void **)&real_glRenderbufferStorage = resolveGl("glRenderbufferStorage");
        if (!real_glRenderbufferStorage)
            unresolvedError("glRenderbufferStorage");
    

        *(void **)&real_glGetRenderbufferParameteriv = resolveGl("glGetRenderbufferParameteriv");
        if (!real_glGetRenderbufferParameteriv)
            unresolvedError("glGetRenderbufferParameteriv");
    

        *(void **)&real_glIsFramebuffer = resolveGl("glIsFramebuffer");
        if (!real_glIsFramebuffer)
            unresolvedError("glIsFramebuffer");
    

        *(void **)&real_glBindFramebuffer = resolveGl("glBindFramebuffer");
        if (!real_glBindFramebuffer)
            unresolvedError("glBindFramebuffer");
    

        *(void **)&real_glDeleteFramebuffers = resolveGl("glDeleteFramebuffers");
        if (!real_glDeleteFramebuffers)
            unresolvedError("glDeleteFramebuffers");
    

        *(void **)&real_glGenFramebuffers = resolveGl("glGenFramebuffers");
        if (!real_glGenFramebuffers)
            unresolvedError("glGenFramebuffers");
    

        *(void **)&real_glCheckFramebufferStatus = resolveGl("glCheckFramebufferStatus");
        if (!real_glCheckFramebufferStatus)
            unresolvedError("glCheckFramebufferStatus");
    

        *(void **)&real_glFramebufferTexture1D = resolveGl("glFramebufferTexture1D");
        if (!real_glFramebufferTexture1D)
            unresolvedError("glFramebufferTexture1D");
    

        *(void **)&real_glFramebufferTexture2D = resolveGl("glFramebufferTexture2D");
        if (!real_glFramebufferTexture2D)
            unresolvedError("glFramebufferTexture2D");
    

        *(void **)&real_glFramebufferTexture3D = resolveGl("glFramebufferTexture3D");
        if (!real_glFramebufferTexture3D)
            unresolvedError("glFramebufferTexture3D");
    

        *(void **)&real_glFramebufferRenderbuffer = resolveGl("glFramebufferRenderbuffer");
        if (!real_glFramebufferRenderbuffer)
            unresolvedError("glFramebufferRenderbuffer");
    

        *(void **)&real_glGetFramebufferAttachmentParameteriv = resolveGl("glGetFramebufferAttachmentParameteriv");
        if (!real_glGetFramebufferAttachmentParameteriv)
            unresolvedError("glGetFramebufferAttachmentParameteriv");
    

        *(void **)&real_glGenerateMipmap = resolveGl("glGenerateMipmap");
        if (!real_glGenerateMipmap)
            unresolvedError("glGenerateMipmap");
    

        *(void **)&real_glBlitFramebuffer = resolveGl("glBlitFramebuffer");
        if (!real_glBlitFramebuffer)
            unresolvedError("glBlitFramebuffer");
    

        *(void **)&real_glRenderbufferStorageMultisample = resolveGl("glRenderbufferStorageMultisample");
        if (!real_glRenderbufferStorageMultisample)
            unresolvedError("glRenderbufferStorageMultisample");
    

        *(void **)&real_glFramebufferTextureLayer = resolveGl("glFramebufferTextureLayer");
        if (!real_glFramebufferTextureLayer)
            unresolvedError("glFramebufferTextureLayer");
    

        *(void **)&real_glMapBufferRange = resolveGl("glMapBufferRange");
        if (!real_glMapBufferRange)
            unresolvedError("glMapBufferRange");
    

        *(void **)&real_glFlushMappedBufferRange = resolveGl("glFlushMappedBufferRange");
        if (!real_glFlushMappedBufferRange)
            unresolvedError("glFlushMappedBufferRange");
    

        *(void **)&real_glBindVertexArray = resolveGl("glBindVertexArray");
        if (!real_glBindVertexArray)
            unresolvedError("glBindVertexArray");
    

        *(void **)&real_glDeleteVertexArrays = resolveGl("glDeleteVertexArrays");
        if (!real_glDeleteVertexArrays)
            unresolvedError("glDeleteVertexArrays");
    

        *(void **)&real_glGenVertexArrays = resolveGl("glGenVertexArrays");
        if (!real_glGenVertexArrays)
            unresolvedError("glGenVertexArrays");
    

        *(void **)&real_glIsVertexArray = resolveGl("glIsVertexArray");
        if (!real_glIsVertexArray)
            unresolvedError("glIsVertexArray");
    

        *(void **)&real_glDrawArraysInstanced = resolveGl("glDrawArraysInstanced");
        if (!real_glDrawArraysInstanced)
            unresolvedError("glDrawArraysInstanced");
    

        *(void **)&real_glDrawElementsInstanced = resolveGl("glDrawElementsInstanced");
        if (!real_glDrawElementsInstanced)
            unresolvedError("glDrawElementsInstanced");
    

        *(void **)&real_glTexBuffer = resolveGl("glTexBuffer");
        if (!real_glTexBuffer)
            unresolvedError("glTexBuffer");
    

        *(void **)&real_glPrimitiveRestartIndex = resolveGl("glPrimitiveRestartIndex");
        if (!real_glPrimitiveRestartIndex)
            unresolvedError("glPrimitiveRestartIndex");
    

        *(void **)&real_glCopyBufferSubData = resolveGl("glCopyBufferSubData");
        if (!real_glCopyBufferSubData)
            unresolvedError("glCopyBufferSubData");
    

        *(void **)&real_glGetUniformIndices = resolveGl("glGetUniformIndices");
        if (!real_glGetUniformIndices)
            unresolvedError("glGetUniformIndices");
    

        *(void **)&real_glGetActiveUniformsiv = resolveGl("glGetActiveUniformsiv");
        if (!real_glGetActiveUniformsiv)
            unresolvedError("glGetActiveUniformsiv");
    

        *(void **)&real_glGetActiveUniformName = resolveGl("glGetActiveUniformName");
        if (!real_glGetActiveUniformName)
            unresolvedError("glGetActiveUniformName");
    

        *(void **)&real_glGetUniformBlockIndex = resolveGl("glGetUniformBlockIndex");
        if (!real_glGetUniformBlockIndex)
            unresolvedError("glGetUniformBlockIndex");
    

        *(void **)&real_glGetActiveUniformBlockiv = resolveGl("glGetActiveUniformBlockiv");
        if (!real_glGetActiveUniformBlockiv)
            unresolvedError("glGetActiveUniformBlockiv");
    

        *(void **)&real_glGetActiveUniformBlockName = resolveGl("glGetActiveUniformBlockName");
        if (!real_glGetActiveUniformBlockName)
            unresolvedError("glGetActiveUniformBlockName");
    

        *(void **)&real_glUniformBlockBinding = resolveGl("glUniformBlockBinding");
        if (!real_glUniformBlockBinding)
            unresolvedError("glUniformBlockBinding");
    

        *(void **)&real_glDrawElementsBaseVertex = resolveGl("glDrawElementsBaseVertex");
        if (!real_glDrawElementsBaseVertex)
            unresolvedError("glDrawElementsBaseVertex");
    

        *(void **)&real_glDrawRangeElementsBaseVertex = resolveGl("glDrawRangeElementsBaseVertex");
        if (!real_glDrawRangeElementsBaseVertex)
            unresolvedError("glDrawRangeElementsBaseVertex");
    

        *(void **)&real_glDrawElementsInstancedBaseVertex = resolveGl("glDrawElementsInstancedBaseVertex");
        if (!real_glDrawElementsInstancedBaseVertex)
            unresolvedError("glDrawElementsInstancedBaseVertex");
    

        *(void **)&real_glMultiDrawElementsBaseVertex = resolveGl("glMultiDrawElementsBaseVertex");
        if (!real_glMultiDrawElementsBaseVertex)
            unresolvedError("glMultiDrawElementsBaseVertex");
    

        *(void **)&real_glProvokingVertex = resolveGl("glProvokingVertex");
        if (!real_glProvokingVertex)
            unresolvedError("glProvokingVertex");
    

        *(void **)&real_glFenceSync = resolveGl("glFenceSync");
        if (!real_glFenceSync)
            unresolvedError("glFenceSync");
    

        *(void **)&real_glIsSync = resolveGl("glIsSync");
        if (!real_glIsSync)
            unresolvedError("glIsSync");
    

        *(void **)&real_glDeleteSync = resolveGl("glDeleteSync");
        if (!real_glDeleteSync)
            unresolvedError("glDeleteSync");
    

        *(void **)&real_glClientWaitSync = resolveGl("glClientWaitSync");
        if (!real_glClientWaitSync)
            unresolvedError("glClientWaitSync");
    

        *(void **)&real_glWaitSync = resolveGl("glWaitSync");
        if (!real_glWaitSync)
            unresolvedError("glWaitSync");
    

        *(void **)&real_glGetInteger64v = resolveGl("glGetInteger64v");
        if (!real_glGetInteger64v)
            unresolvedError("glGetInteger64v");
    

        *(void **)&real_glGetSynciv = resolveGl("glGetSynciv");
        if (!real_glGetSynciv)
            unresolvedError("glGetSynciv");
    

        *(void **)&real_glGetInteger64i_v = resolveGl("glGetInteger64i_v");
        if (!real_glGetInteger64i_v)
            unresolvedError("glGetInteger64i_v");
    

        *(void **)&real_glGetBufferParameteri64v = resolveGl("glGetBufferParameteri64v");
        if (!real_glGetBufferParameteri64v)
            unresolvedError("glGetBufferParameteri64v");
    

        *(void **)&real_glFramebufferTexture = resolveGl("glFramebufferTexture");
        if (!real_glFramebufferTexture)
            unresolvedError("glFramebufferTexture");
    

        *(void **)&real_glTexImage2DMultisample = resolveGl("glTexImage2DMultisample");
        if (!real_glTexImage2DMultisample)
            unresolvedError("glTexImage2DMultisample");
    

        *(void **)&real_glTexImage3DMultisample = resolveGl("glTexImage3DMultisample");
        if (!real_glTexImage3DMultisample)
            unresolvedError("glTexImage3DMultisample");
    

        *(void **)&real_glGetMultisamplefv = resolveGl("glGetMultisamplefv");
        if (!real_glGetMultisamplefv)
            unresolvedError("glGetMultisamplefv");
    

        *(void **)&real_glSampleMaski = resolveGl("glSampleMaski");
        if (!real_glSampleMaski)
            unresolvedError("glSampleMaski");
    

        *(void **)&real_glBindFragDataLocationIndexed = resolveGl("glBindFragDataLocationIndexed");
        if (!real_glBindFragDataLocationIndexed)
            unresolvedError("glBindFragDataLocationIndexed");
    

        *(void **)&real_glGetFragDataIndex = resolveGl("glGetFragDataIndex");
        if (!real_glGetFragDataIndex)
            unresolvedError("glGetFragDataIndex");
    

        *(void **)&real_glGenSamplers = resolveGl("glGenSamplers");
        if (!real_glGenSamplers)
            unresolvedError("glGenSamplers");
    

        *(void **)&real_glDeleteSamplers = resolveGl("glDeleteSamplers");
        if (!real_glDeleteSamplers)
            unresolvedError("glDeleteSamplers");
    

        *(void **)&real_glIsSampler = resolveGl("glIsSampler");
        if (!real_glIsSampler)
            unresolvedError("glIsSampler");
    

        *(void **)&real_glBindSampler = resolveGl("glBindSampler");
        if (!real_glBindSampler)
            unresolvedError("glBindSampler");
    

        *(void **)&real_glSamplerParameteri = resolveGl("glSamplerParameteri");
        if (!real_glSamplerParameteri)
            unresolvedError("glSamplerParameteri");
    

        *(void **)&real_glSamplerParameteriv = resolveGl("glSamplerParameteriv");
        if (!real_glSamplerParameteriv)
            unresolvedError("glSamplerParameteriv");
    

        *(void **)&real_glSamplerParameterf = resolveGl("glSamplerParameterf");
        if (!real_glSamplerParameterf)
            unresolvedError("glSamplerParameterf");
    

        *(void **)&real_glSamplerParameterfv = resolveGl("glSamplerParameterfv");
        if (!real_glSamplerParameterfv)
            unresolvedError("glSamplerParameterfv");
    

        *(void **)&real_glSamplerParameterIiv = resolveGl("glSamplerParameterIiv");
        if (!real_glSamplerParameterIiv)
            unresolvedError("glSamplerParameterIiv");
    

        *(void **)&real_glSamplerParameterIuiv = resolveGl("glSamplerParameterIuiv");
        if (!real_glSamplerParameterIuiv)
            unresolvedError("glSamplerParameterIuiv");
    

        *(void **)&real_glGetSamplerParameteriv = resolveGl("glGetSamplerParameteriv");
        if (!real_glGetSamplerParameteriv)
            unresolvedError("glGetSamplerParameteriv");
    

        *(void **)&real_glGetSamplerParameterIiv = resolveGl("glGetSamplerParameterIiv");
        if (!real_glGetSamplerParameterIiv)
            unresolvedError("glGetSamplerParameterIiv");
    

        *(void **)&real_glGetSamplerParameterfv = resolveGl("glGetSamplerParameterfv");
        if (!real_glGetSamplerParameterfv)
            unresolvedError("glGetSamplerParameterfv");
    

        *(void **)&real_glGetSamplerParameterIuiv = resolveGl("glGetSamplerParameterIuiv");
        if (!real_glGetSamplerParameterIuiv)
            unresolvedError("glGetSamplerParameterIuiv");
    

        *(void **)&real_glQueryCounter = resolveGl("glQueryCounter");
        if (!real_glQueryCounter)
            unresolvedError("glQueryCounter");
    

        *(void **)&real_glGetQueryObjecti64v = resolveGl("glGetQueryObjecti64v");
        if (!real_glGetQueryObjecti64v)
            unresolvedError("glGetQueryObjecti64v");
    

        *(void **)&real_glGetQueryObjectui64v = resolveGl("glGetQueryObjectui64v");
        if (!real_glGetQueryObjectui64v)
            unresolvedError("glGetQueryObjectui64v");
    

        *(void **)&real_glVertexAttribDivisor = resolveGl("glVertexAttribDivisor");
        if (!real_glVertexAttribDivisor)
            unresolvedError("glVertexAttribDivisor");
    

        *(void **)&real_glVertexAttribP1ui = resolveGl("glVertexAttribP1ui");
        if (!real_glVertexAttribP1ui)
            unresolvedError("glVertexAttribP1ui");
    

        *(void **)&real_glVertexAttribP1uiv = resolveGl("glVertexAttribP1uiv");
        if (!real_glVertexAttribP1uiv)
            unresolvedError("glVertexAttribP1uiv");
    

        *(void **)&real_glVertexAttribP2ui = resolveGl("glVertexAttribP2ui");
        if (!real_glVertexAttribP2ui)
            unresolvedError("glVertexAttribP2ui");
    

        *(void **)&real_glVertexAttribP2uiv = resolveGl("glVertexAttribP2uiv");
        if (!real_glVertexAttribP2uiv)
            unresolvedError("glVertexAttribP2uiv");
    

        *(void **)&real_glVertexAttribP3ui = resolveGl("glVertexAttribP3ui");
        if (!real_glVertexAttribP3ui)
            unresolvedError("glVertexAttribP3ui");
    

        *(void **)&real_glVertexAttribP3uiv = resolveGl("glVertexAttribP3uiv");
        if (!real_glVertexAttribP3uiv)
            unresolvedError("glVertexAttribP3uiv");
    

        *(void **)&real_glVertexAttribP4ui = resolveGl("glVertexAttribP4ui");
        if (!real_glVertexAttribP4ui)
            unresolvedError("glVertexAttribP4ui");
    

        *(void **)&real_glVertexAttribP4uiv = resolveGl("glVertexAttribP4uiv");
        if (!real_glVertexAttribP4uiv)
            unresolvedError("glVertexAttribP4uiv");
    

        *(void **)&real_glVertexP2ui = resolveGl("glVertexP2ui");
        if (!real_glVertexP2ui)
            unresolvedError("glVertexP2ui");
    

        *(void **)&real_glVertexP2uiv = resolveGl("glVertexP2uiv");
        if (!real_glVertexP2uiv)
            unresolvedError("glVertexP2uiv");
    

        *(void **)&real_glVertexP3ui = resolveGl("glVertexP3ui");
        if (!real_glVertexP3ui)
            unresolvedError("glVertexP3ui");
    

        *(void **)&real_glVertexP3uiv = resolveGl("glVertexP3uiv");
        if (!real_glVertexP3uiv)
            unresolvedError("glVertexP3uiv");
    

        *(void **)&real_glVertexP4ui = resolveGl("glVertexP4ui");
        if (!real_glVertexP4ui)
            unresolvedError("glVertexP4ui");
    

        *(void **)&real_glVertexP4uiv = resolveGl("glVertexP4uiv");
        if (!real_glVertexP4uiv)
            unresolvedError("glVertexP4uiv");
    

        *(void **)&real_glTexCoordP1ui = resolveGl("glTexCoordP1ui");
        if (!real_glTexCoordP1ui)
            unresolvedError("glTexCoordP1ui");
    

        *(void **)&real_glTexCoordP1uiv = resolveGl("glTexCoordP1uiv");
        if (!real_glTexCoordP1uiv)
            unresolvedError("glTexCoordP1uiv");
    

        *(void **)&real_glTexCoordP2ui = resolveGl("glTexCoordP2ui");
        if (!real_glTexCoordP2ui)
            unresolvedError("glTexCoordP2ui");
    

        *(void **)&real_glTexCoordP2uiv = resolveGl("glTexCoordP2uiv");
        if (!real_glTexCoordP2uiv)
            unresolvedError("glTexCoordP2uiv");
    

        *(void **)&real_glTexCoordP3ui = resolveGl("glTexCoordP3ui");
        if (!real_glTexCoordP3ui)
            unresolvedError("glTexCoordP3ui");
    

        *(void **)&real_glTexCoordP3uiv = resolveGl("glTexCoordP3uiv");
        if (!real_glTexCoordP3uiv)
            unresolvedError("glTexCoordP3uiv");
    

        *(void **)&real_glTexCoordP4ui = resolveGl("glTexCoordP4ui");
        if (!real_glTexCoordP4ui)
            unresolvedError("glTexCoordP4ui");
    

        *(void **)&real_glTexCoordP4uiv = resolveGl("glTexCoordP4uiv");
        if (!real_glTexCoordP4uiv)
            unresolvedError("glTexCoordP4uiv");
    

        *(void **)&real_glMultiTexCoordP1ui = resolveGl("glMultiTexCoordP1ui");
        if (!real_glMultiTexCoordP1ui)
            unresolvedError("glMultiTexCoordP1ui");
    

        *(void **)&real_glMultiTexCoordP1uiv = resolveGl("glMultiTexCoordP1uiv");
        if (!real_glMultiTexCoordP1uiv)
            unresolvedError("glMultiTexCoordP1uiv");
    

        *(void **)&real_glMultiTexCoordP2ui = resolveGl("glMultiTexCoordP2ui");
        if (!real_glMultiTexCoordP2ui)
            unresolvedError("glMultiTexCoordP2ui");
    

        *(void **)&real_glMultiTexCoordP2uiv = resolveGl("glMultiTexCoordP2uiv");
        if (!real_glMultiTexCoordP2uiv)
            unresolvedError("glMultiTexCoordP2uiv");
    

        *(void **)&real_glMultiTexCoordP3ui = resolveGl("glMultiTexCoordP3ui");
        if (!real_glMultiTexCoordP3ui)
            unresolvedError("glMultiTexCoordP3ui");
    

        *(void **)&real_glMultiTexCoordP3uiv = resolveGl("glMultiTexCoordP3uiv");
        if (!real_glMultiTexCoordP3uiv)
            unresolvedError("glMultiTexCoordP3uiv");
    

        *(void **)&real_glMultiTexCoordP4ui = resolveGl("glMultiTexCoordP4ui");
        if (!real_glMultiTexCoordP4ui)
            unresolvedError("glMultiTexCoordP4ui");
    

        *(void **)&real_glMultiTexCoordP4uiv = resolveGl("glMultiTexCoordP4uiv");
        if (!real_glMultiTexCoordP4uiv)
            unresolvedError("glMultiTexCoordP4uiv");
    

        *(void **)&real_glNormalP3ui = resolveGl("glNormalP3ui");
        if (!real_glNormalP3ui)
            unresolvedError("glNormalP3ui");
    

        *(void **)&real_glNormalP3uiv = resolveGl("glNormalP3uiv");
        if (!real_glNormalP3uiv)
            unresolvedError("glNormalP3uiv");
    

        *(void **)&real_glColorP3ui = resolveGl("glColorP3ui");
        if (!real_glColorP3ui)
            unresolvedError("glColorP3ui");
    

        *(void **)&real_glColorP3uiv = resolveGl("glColorP3uiv");
        if (!real_glColorP3uiv)
            unresolvedError("glColorP3uiv");
    

        *(void **)&real_glColorP4ui = resolveGl("glColorP4ui");
        if (!real_glColorP4ui)
            unresolvedError("glColorP4ui");
    

        *(void **)&real_glColorP4uiv = resolveGl("glColorP4uiv");
        if (!real_glColorP4uiv)
            unresolvedError("glColorP4uiv");
    

        *(void **)&real_glSecondaryColorP3ui = resolveGl("glSecondaryColorP3ui");
        if (!real_glSecondaryColorP3ui)
            unresolvedError("glSecondaryColorP3ui");
    

        *(void **)&real_glSecondaryColorP3uiv = resolveGl("glSecondaryColorP3uiv");
        if (!real_glSecondaryColorP3uiv)
            unresolvedError("glSecondaryColorP3uiv");
    

        *(void **)&real_glMinSampleShading = resolveGl("glMinSampleShading");
        if (!real_glMinSampleShading)
            unresolvedError("glMinSampleShading");
    

        *(void **)&real_glBlendEquationi = resolveGl("glBlendEquationi");
        if (!real_glBlendEquationi)
            unresolvedError("glBlendEquationi");
    

        *(void **)&real_glBlendEquationSeparatei = resolveGl("glBlendEquationSeparatei");
        if (!real_glBlendEquationSeparatei)
            unresolvedError("glBlendEquationSeparatei");
    

        *(void **)&real_glBlendFunci = resolveGl("glBlendFunci");
        if (!real_glBlendFunci)
            unresolvedError("glBlendFunci");
    

        *(void **)&real_glBlendFuncSeparatei = resolveGl("glBlendFuncSeparatei");
        if (!real_glBlendFuncSeparatei)
            unresolvedError("glBlendFuncSeparatei");
    

        *(void **)&real_glDrawArraysIndirect = resolveGl("glDrawArraysIndirect");
        if (!real_glDrawArraysIndirect)
            unresolvedError("glDrawArraysIndirect");
    

        *(void **)&real_glDrawElementsIndirect = resolveGl("glDrawElementsIndirect");
        if (!real_glDrawElementsIndirect)
            unresolvedError("glDrawElementsIndirect");
    

        *(void **)&real_glUniform1d = resolveGl("glUniform1d");
        if (!real_glUniform1d)
            unresolvedError("glUniform1d");
    

        *(void **)&real_glUniform2d = resolveGl("glUniform2d");
        if (!real_glUniform2d)
            unresolvedError("glUniform2d");
    

        *(void **)&real_glUniform3d = resolveGl("glUniform3d");
        if (!real_glUniform3d)
            unresolvedError("glUniform3d");
    

        *(void **)&real_glUniform4d = resolveGl("glUniform4d");
        if (!real_glUniform4d)
            unresolvedError("glUniform4d");
    

        *(void **)&real_glUniform1dv = resolveGl("glUniform1dv");
        if (!real_glUniform1dv)
            unresolvedError("glUniform1dv");
    

        *(void **)&real_glUniform2dv = resolveGl("glUniform2dv");
        if (!real_glUniform2dv)
            unresolvedError("glUniform2dv");
    

        *(void **)&real_glUniform3dv = resolveGl("glUniform3dv");
        if (!real_glUniform3dv)
            unresolvedError("glUniform3dv");
    

        *(void **)&real_glUniform4dv = resolveGl("glUniform4dv");
        if (!real_glUniform4dv)
            unresolvedError("glUniform4dv");
    

        *(void **)&real_glUniformMatrix2dv = resolveGl("glUniformMatrix2dv");
        if (!real_glUniformMatrix2dv)
            unresolvedError("glUniformMatrix2dv");
    

        *(void **)&real_glUniformMatrix3dv = resolveGl("glUniformMatrix3dv");
        if (!real_glUniformMatrix3dv)
            unresolvedError("glUniformMatrix3dv");
    

        *(void **)&real_glUniformMatrix4dv = resolveGl("glUniformMatrix4dv");
        if (!real_glUniformMatrix4dv)
            unresolvedError("glUniformMatrix4dv");
    

        *(void **)&real_glUniformMatrix2x3dv = resolveGl("glUniformMatrix2x3dv");
        if (!real_glUniformMatrix2x3dv)
            unresolvedError("glUniformMatrix2x3dv");
    

        *(void **)&real_glUniformMatrix2x4dv = resolveGl("glUniformMatrix2x4dv");
        if (!real_glUniformMatrix2x4dv)
            unresolvedError("glUniformMatrix2x4dv");
    

        *(void **)&real_glUniformMatrix3x2dv = resolveGl("glUniformMatrix3x2dv");
        if (!real_glUniformMatrix3x2dv)
            unresolvedError("glUniformMatrix3x2dv");
    

        *(void **)&real_glUniformMatrix3x4dv = resolveGl("glUniformMatrix3x4dv");
        if (!real_glUniformMatrix3x4dv)
            unresolvedError("glUniformMatrix3x4dv");
    

        *(void **)&real_glUniformMatrix4x2dv = resolveGl("glUniformMatrix4x2dv");
        if (!real_glUniformMatrix4x2dv)
            unresolvedError("glUniformMatrix4x2dv");
    

        *(void **)&real_glUniformMatrix4x3dv = resolveGl("glUniformMatrix4x3dv");
        if (!real_glUniformMatrix4x3dv)
            unresolvedError("glUniformMatrix4x3dv");
    

        *(void **)&real_glGetUniformdv = resolveGl("glGetUniformdv");
        if (!real_glGetUniformdv)
            unresolvedError("glGetUniformdv");
    

        *(void **)&real_glGetSubroutineUniformLocation = resolveGl("glGetSubroutineUniformLocation");
        if (!real_glGetSubroutineUniformLocation)
            unresolvedError("glGetSubroutineUniformLocation");
    

        *(void **)&real_glGetSubroutineIndex = resolveGl("glGetSubroutineIndex");
        if (!real_glGetSubroutineIndex)
            unresolvedError("glGetSubroutineIndex");
    

        *(void **)&real_glGetActiveSubroutineUniformiv = resolveGl("glGetActiveSubroutineUniformiv");
        if (!real_glGetActiveSubroutineUniformiv)
            unresolvedError("glGetActiveSubroutineUniformiv");
    

        *(void **)&real_glGetActiveSubroutineUniformName = resolveGl("glGetActiveSubroutineUniformName");
        if (!real_glGetActiveSubroutineUniformName)
            unresolvedError("glGetActiveSubroutineUniformName");
    

        *(void **)&real_glGetActiveSubroutineName = resolveGl("glGetActiveSubroutineName");
        if (!real_glGetActiveSubroutineName)
            unresolvedError("glGetActiveSubroutineName");
    

        *(void **)&real_glUniformSubroutinesuiv = resolveGl("glUniformSubroutinesuiv");
        if (!real_glUniformSubroutinesuiv)
            unresolvedError("glUniformSubroutinesuiv");
    

        *(void **)&real_glGetUniformSubroutineuiv = resolveGl("glGetUniformSubroutineuiv");
        if (!real_glGetUniformSubroutineuiv)
            unresolvedError("glGetUniformSubroutineuiv");
    

        *(void **)&real_glGetProgramStageiv = resolveGl("glGetProgramStageiv");
        if (!real_glGetProgramStageiv)
            unresolvedError("glGetProgramStageiv");
    

        *(void **)&real_glPatchParameteri = resolveGl("glPatchParameteri");
        if (!real_glPatchParameteri)
            unresolvedError("glPatchParameteri");
    

        *(void **)&real_glPatchParameterfv = resolveGl("glPatchParameterfv");
        if (!real_glPatchParameterfv)
            unresolvedError("glPatchParameterfv");
    

        *(void **)&real_glBindTransformFeedback = resolveGl("glBindTransformFeedback");
        if (!real_glBindTransformFeedback)
            unresolvedError("glBindTransformFeedback");
    

        *(void **)&real_glDeleteTransformFeedbacks = resolveGl("glDeleteTransformFeedbacks");
        if (!real_glDeleteTransformFeedbacks)
            unresolvedError("glDeleteTransformFeedbacks");
    

        *(void **)&real_glGenTransformFeedbacks = resolveGl("glGenTransformFeedbacks");
        if (!real_glGenTransformFeedbacks)
            unresolvedError("glGenTransformFeedbacks");
    

        *(void **)&real_glIsTransformFeedback = resolveGl("glIsTransformFeedback");
        if (!real_glIsTransformFeedback)
            unresolvedError("glIsTransformFeedback");
    

        *(void **)&real_glPauseTransformFeedback = resolveGl("glPauseTransformFeedback");
        if (!real_glPauseTransformFeedback)
            unresolvedError("glPauseTransformFeedback");
    

        *(void **)&real_glResumeTransformFeedback = resolveGl("glResumeTransformFeedback");
        if (!real_glResumeTransformFeedback)
            unresolvedError("glResumeTransformFeedback");
    

        *(void **)&real_glDrawTransformFeedback = resolveGl("glDrawTransformFeedback");
        if (!real_glDrawTransformFeedback)
            unresolvedError("glDrawTransformFeedback");
    

        *(void **)&real_glDrawTransformFeedbackStream = resolveGl("glDrawTransformFeedbackStream");
        if (!real_glDrawTransformFeedbackStream)
            unresolvedError("glDrawTransformFeedbackStream");
    

        *(void **)&real_glBeginQueryIndexed = resolveGl("glBeginQueryIndexed");
        if (!real_glBeginQueryIndexed)
            unresolvedError("glBeginQueryIndexed");
    

        *(void **)&real_glEndQueryIndexed = resolveGl("glEndQueryIndexed");
        if (!real_glEndQueryIndexed)
            unresolvedError("glEndQueryIndexed");
    

        *(void **)&real_glGetQueryIndexediv = resolveGl("glGetQueryIndexediv");
        if (!real_glGetQueryIndexediv)
            unresolvedError("glGetQueryIndexediv");
    

        *(void **)&real_glReleaseShaderCompiler = resolveGl("glReleaseShaderCompiler");
        if (!real_glReleaseShaderCompiler)
            unresolvedError("glReleaseShaderCompiler");
    

        *(void **)&real_glShaderBinary = resolveGl("glShaderBinary");
        if (!real_glShaderBinary)
            unresolvedError("glShaderBinary");
    

        *(void **)&real_glGetShaderPrecisionFormat = resolveGl("glGetShaderPrecisionFormat");
        if (!real_glGetShaderPrecisionFormat)
            unresolvedError("glGetShaderPrecisionFormat");
    

        *(void **)&real_glDepthRangef = resolveGl("glDepthRangef");
        if (!real_glDepthRangef)
            unresolvedError("glDepthRangef");
    

        *(void **)&real_glClearDepthf = resolveGl("glClearDepthf");
        if (!real_glClearDepthf)
            unresolvedError("glClearDepthf");
    

        *(void **)&real_glGetProgramBinary = resolveGl("glGetProgramBinary");
        if (!real_glGetProgramBinary)
            unresolvedError("glGetProgramBinary");
    

        *(void **)&real_glProgramBinary = resolveGl("glProgramBinary");
        if (!real_glProgramBinary)
            unresolvedError("glProgramBinary");
    

        *(void **)&real_glProgramParameteri = resolveGl("glProgramParameteri");
        if (!real_glProgramParameteri)
            unresolvedError("glProgramParameteri");
    

        *(void **)&real_glUseProgramStages = resolveGl("glUseProgramStages");
        if (!real_glUseProgramStages)
            unresolvedError("glUseProgramStages");
    

        *(void **)&real_glActiveShaderProgram = resolveGl("glActiveShaderProgram");
        if (!real_glActiveShaderProgram)
            unresolvedError("glActiveShaderProgram");
    

        *(void **)&real_glCreateShaderProgramv = resolveGl("glCreateShaderProgramv");
        if (!real_glCreateShaderProgramv)
            unresolvedError("glCreateShaderProgramv");
    

        *(void **)&real_glBindProgramPipeline = resolveGl("glBindProgramPipeline");
        if (!real_glBindProgramPipeline)
            unresolvedError("glBindProgramPipeline");
    

        *(void **)&real_glDeleteProgramPipelines = resolveGl("glDeleteProgramPipelines");
        if (!real_glDeleteProgramPipelines)
            unresolvedError("glDeleteProgramPipelines");
    

        *(void **)&real_glGenProgramPipelines = resolveGl("glGenProgramPipelines");
        if (!real_glGenProgramPipelines)
            unresolvedError("glGenProgramPipelines");
    

        *(void **)&real_glIsProgramPipeline = resolveGl("glIsProgramPipeline");
        if (!real_glIsProgramPipeline)
            unresolvedError("glIsProgramPipeline");
    

        *(void **)&real_glGetProgramPipelineiv = resolveGl("glGetProgramPipelineiv");
        if (!real_glGetProgramPipelineiv)
            unresolvedError("glGetProgramPipelineiv");
    

        *(void **)&real_glProgramUniform1i = resolveGl("glProgramUniform1i");
        if (!real_glProgramUniform1i)
            unresolvedError("glProgramUniform1i");
    

        *(void **)&real_glProgramUniform1iv = resolveGl("glProgramUniform1iv");
        if (!real_glProgramUniform1iv)
            unresolvedError("glProgramUniform1iv");
    

        *(void **)&real_glProgramUniform1f = resolveGl("glProgramUniform1f");
        if (!real_glProgramUniform1f)
            unresolvedError("glProgramUniform1f");
    

        *(void **)&real_glProgramUniform1fv = resolveGl("glProgramUniform1fv");
        if (!real_glProgramUniform1fv)
            unresolvedError("glProgramUniform1fv");
    

        *(void **)&real_glProgramUniform1d = resolveGl("glProgramUniform1d");
        if (!real_glProgramUniform1d)
            unresolvedError("glProgramUniform1d");
    

        *(void **)&real_glProgramUniform1dv = resolveGl("glProgramUniform1dv");
        if (!real_glProgramUniform1dv)
            unresolvedError("glProgramUniform1dv");
    

        *(void **)&real_glProgramUniform1ui = resolveGl("glProgramUniform1ui");
        if (!real_glProgramUniform1ui)
            unresolvedError("glProgramUniform1ui");
    

        *(void **)&real_glProgramUniform1uiv = resolveGl("glProgramUniform1uiv");
        if (!real_glProgramUniform1uiv)
            unresolvedError("glProgramUniform1uiv");
    

        *(void **)&real_glProgramUniform2i = resolveGl("glProgramUniform2i");
        if (!real_glProgramUniform2i)
            unresolvedError("glProgramUniform2i");
    

        *(void **)&real_glProgramUniform2iv = resolveGl("glProgramUniform2iv");
        if (!real_glProgramUniform2iv)
            unresolvedError("glProgramUniform2iv");
    

        *(void **)&real_glProgramUniform2f = resolveGl("glProgramUniform2f");
        if (!real_glProgramUniform2f)
            unresolvedError("glProgramUniform2f");
    

        *(void **)&real_glProgramUniform2fv = resolveGl("glProgramUniform2fv");
        if (!real_glProgramUniform2fv)
            unresolvedError("glProgramUniform2fv");
    

        *(void **)&real_glProgramUniform2d = resolveGl("glProgramUniform2d");
        if (!real_glProgramUniform2d)
            unresolvedError("glProgramUniform2d");
    

        *(void **)&real_glProgramUniform2dv = resolveGl("glProgramUniform2dv");
        if (!real_glProgramUniform2dv)
            unresolvedError("glProgramUniform2dv");
    

        *(void **)&real_glProgramUniform2ui = resolveGl("glProgramUniform2ui");
        if (!real_glProgramUniform2ui)
            unresolvedError("glProgramUniform2ui");
    

        *(void **)&real_glProgramUniform2uiv = resolveGl("glProgramUniform2uiv");
        if (!real_glProgramUniform2uiv)
            unresolvedError("glProgramUniform2uiv");
    

        *(void **)&real_glProgramUniform3i = resolveGl("glProgramUniform3i");
        if (!real_glProgramUniform3i)
            unresolvedError("glProgramUniform3i");
    

        *(void **)&real_glProgramUniform3iv = resolveGl("glProgramUniform3iv");
        if (!real_glProgramUniform3iv)
            unresolvedError("glProgramUniform3iv");
    

        *(void **)&real_glProgramUniform3f = resolveGl("glProgramUniform3f");
        if (!real_glProgramUniform3f)
            unresolvedError("glProgramUniform3f");
    

        *(void **)&real_glProgramUniform3fv = resolveGl("glProgramUniform3fv");
        if (!real_glProgramUniform3fv)
            unresolvedError("glProgramUniform3fv");
    

        *(void **)&real_glProgramUniform3d = resolveGl("glProgramUniform3d");
        if (!real_glProgramUniform3d)
            unresolvedError("glProgramUniform3d");
    

        *(void **)&real_glProgramUniform3dv = resolveGl("glProgramUniform3dv");
        if (!real_glProgramUniform3dv)
            unresolvedError("glProgramUniform3dv");
    

        *(void **)&real_glProgramUniform3ui = resolveGl("glProgramUniform3ui");
        if (!real_glProgramUniform3ui)
            unresolvedError("glProgramUniform3ui");
    

        *(void **)&real_glProgramUniform3uiv = resolveGl("glProgramUniform3uiv");
        if (!real_glProgramUniform3uiv)
            unresolvedError("glProgramUniform3uiv");
    

        *(void **)&real_glProgramUniform4i = resolveGl("glProgramUniform4i");
        if (!real_glProgramUniform4i)
            unresolvedError("glProgramUniform4i");
    

        *(void **)&real_glProgramUniform4iv = resolveGl("glProgramUniform4iv");
        if (!real_glProgramUniform4iv)
            unresolvedError("glProgramUniform4iv");
    

        *(void **)&real_glProgramUniform4f = resolveGl("glProgramUniform4f");
        if (!real_glProgramUniform4f)
            unresolvedError("glProgramUniform4f");
    

        *(void **)&real_glProgramUniform4fv = resolveGl("glProgramUniform4fv");
        if (!real_glProgramUniform4fv)
            unresolvedError("glProgramUniform4fv");
    

        *(void **)&real_glProgramUniform4d = resolveGl("glProgramUniform4d");
        if (!real_glProgramUniform4d)
            unresolvedError("glProgramUniform4d");
    

        *(void **)&real_glProgramUniform4dv = resolveGl("glProgramUniform4dv");
        if (!real_glProgramUniform4dv)
            unresolvedError("glProgramUniform4dv");
    

        *(void **)&real_glProgramUniform4ui = resolveGl("glProgramUniform4ui");
        if (!real_glProgramUniform4ui)
            unresolvedError("glProgramUniform4ui");
    

        *(void **)&real_glProgramUniform4uiv = resolveGl("glProgramUniform4uiv");
        if (!real_glProgramUniform4uiv)
            unresolvedError("glProgramUniform4uiv");
    

        *(void **)&real_glProgramUniformMatrix2fv = resolveGl("glProgramUniformMatrix2fv");
        if (!real_glProgramUniformMatrix2fv)
            unresolvedError("glProgramUniformMatrix2fv");
    

        *(void **)&real_glProgramUniformMatrix3fv = resolveGl("glProgramUniformMatrix3fv");
        if (!real_glProgramUniformMatrix3fv)
            unresolvedError("glProgramUniformMatrix3fv");
    

        *(void **)&real_glProgramUniformMatrix4fv = resolveGl("glProgramUniformMatrix4fv");
        if (!real_glProgramUniformMatrix4fv)
            unresolvedError("glProgramUniformMatrix4fv");
    

        *(void **)&real_glProgramUniformMatrix2dv = resolveGl("glProgramUniformMatrix2dv");
        if (!real_glProgramUniformMatrix2dv)
            unresolvedError("glProgramUniformMatrix2dv");
    

        *(void **)&real_glProgramUniformMatrix3dv = resolveGl("glProgramUniformMatrix3dv");
        if (!real_glProgramUniformMatrix3dv)
            unresolvedError("glProgramUniformMatrix3dv");
    

        *(void **)&real_glProgramUniformMatrix4dv = resolveGl("glProgramUniformMatrix4dv");
        if (!real_glProgramUniformMatrix4dv)
            unresolvedError("glProgramUniformMatrix4dv");
    

        *(void **)&real_glProgramUniformMatrix2x3fv = resolveGl("glProgramUniformMatrix2x3fv");
        if (!real_glProgramUniformMatrix2x3fv)
            unresolvedError("glProgramUniformMatrix2x3fv");
    

        *(void **)&real_glProgramUniformMatrix3x2fv = resolveGl("glProgramUniformMatrix3x2fv");
        if (!real_glProgramUniformMatrix3x2fv)
            unresolvedError("glProgramUniformMatrix3x2fv");
    

        *(void **)&real_glProgramUniformMatrix2x4fv = resolveGl("glProgramUniformMatrix2x4fv");
        if (!real_glProgramUniformMatrix2x4fv)
            unresolvedError("glProgramUniformMatrix2x4fv");
    

        *(void **)&real_glProgramUniformMatrix4x2fv = resolveGl("glProgramUniformMatrix4x2fv");
        if (!real_glProgramUniformMatrix4x2fv)
            unresolvedError("glProgramUniformMatrix4x2fv");
    

        *(void **)&real_glProgramUniformMatrix3x4fv = resolveGl("glProgramUniformMatrix3x4fv");
        if (!real_glProgramUniformMatrix3x4fv)
            unresolvedError("glProgramUniformMatrix3x4fv");
    

        *(void **)&real_glProgramUniformMatrix4x3fv = resolveGl("glProgramUniformMatrix4x3fv");
        if (!real_glProgramUniformMatrix4x3fv)
            unresolvedError("glProgramUniformMatrix4x3fv");
    

        *(void **)&real_glProgramUniformMatrix2x3dv = resolveGl("glProgramUniformMatrix2x3dv");
        if (!real_glProgramUniformMatrix2x3dv)
            unresolvedError("glProgramUniformMatrix2x3dv");
    

        *(void **)&real_glProgramUniformMatrix3x2dv = resolveGl("glProgramUniformMatrix3x2dv");
        if (!real_glProgramUniformMatrix3x2dv)
            unresolvedError("glProgramUniformMatrix3x2dv");
    

        *(void **)&real_glProgramUniformMatrix2x4dv = resolveGl("glProgramUniformMatrix2x4dv");
        if (!real_glProgramUniformMatrix2x4dv)
            unresolvedError("glProgramUniformMatrix2x4dv");
    

        *(void **)&real_glProgramUniformMatrix4x2dv = resolveGl("glProgramUniformMatrix4x2dv");
        if (!real_glProgramUniformMatrix4x2dv)
            unresolvedError("glProgramUniformMatrix4x2dv");
    

        *(void **)&real_glProgramUniformMatrix3x4dv = resolveGl("glProgramUniformMatrix3x4dv");
        if (!real_glProgramUniformMatrix3x4dv)
            unresolvedError("glProgramUniformMatrix3x4dv");
    

        *(void **)&real_glProgramUniformMatrix4x3dv = resolveGl("glProgramUniformMatrix4x3dv");
        if (!real_glProgramUniformMatrix4x3dv)
            unresolvedError("glProgramUniformMatrix4x3dv");
    

        *(void **)&real_glValidateProgramPipeline = resolveGl("glValidateProgramPipeline");
        if (!real_glValidateProgramPipeline)
            unresolvedError("glValidateProgramPipeline");
    

        *(void **)&real_glGetProgramPipelineInfoLog = resolveGl("glGetProgramPipelineInfoLog");
        if (!real_glGetProgramPipelineInfoLog)
            unresolvedError("glGetProgramPipelineInfoLog");
    

        *(void **)&real_glVertexAttribL1d = resolveGl("glVertexAttribL1d");
        if (!real_glVertexAttribL1d)
            unresolvedError("glVertexAttribL1d");
    

        *(void **)&real_glVertexAttribL2d = resolveGl("glVertexAttribL2d");
        if (!real_glVertexAttribL2d)
            unresolvedError("glVertexAttribL2d");
    

        *(void **)&real_glVertexAttribL3d = resolveGl("glVertexAttribL3d");
        if (!real_glVertexAttribL3d)
            unresolvedError("glVertexAttribL3d");
    

        *(void **)&real_glVertexAttribL4d = resolveGl("glVertexAttribL4d");
        if (!real_glVertexAttribL4d)
            unresolvedError("glVertexAttribL4d");
    

        *(void **)&real_glVertexAttribL1dv = resolveGl("glVertexAttribL1dv");
        if (!real_glVertexAttribL1dv)
            unresolvedError("glVertexAttribL1dv");
    

        *(void **)&real_glVertexAttribL2dv = resolveGl("glVertexAttribL2dv");
        if (!real_glVertexAttribL2dv)
            unresolvedError("glVertexAttribL2dv");
    

        *(void **)&real_glVertexAttribL3dv = resolveGl("glVertexAttribL3dv");
        if (!real_glVertexAttribL3dv)
            unresolvedError("glVertexAttribL3dv");
    

        *(void **)&real_glVertexAttribL4dv = resolveGl("glVertexAttribL4dv");
        if (!real_glVertexAttribL4dv)
            unresolvedError("glVertexAttribL4dv");
    

        *(void **)&real_glVertexAttribLPointer = resolveGl("glVertexAttribLPointer");
        if (!real_glVertexAttribLPointer)
            unresolvedError("glVertexAttribLPointer");
    

        *(void **)&real_glGetVertexAttribLdv = resolveGl("glGetVertexAttribLdv");
        if (!real_glGetVertexAttribLdv)
            unresolvedError("glGetVertexAttribLdv");
    

        *(void **)&real_glViewportArrayv = resolveGl("glViewportArrayv");
        if (!real_glViewportArrayv)
            unresolvedError("glViewportArrayv");
    

        *(void **)&real_glViewportIndexedf = resolveGl("glViewportIndexedf");
        if (!real_glViewportIndexedf)
            unresolvedError("glViewportIndexedf");
    

        *(void **)&real_glViewportIndexedfv = resolveGl("glViewportIndexedfv");
        if (!real_glViewportIndexedfv)
            unresolvedError("glViewportIndexedfv");
    

        *(void **)&real_glScissorArrayv = resolveGl("glScissorArrayv");
        if (!real_glScissorArrayv)
            unresolvedError("glScissorArrayv");
    

        *(void **)&real_glScissorIndexed = resolveGl("glScissorIndexed");
        if (!real_glScissorIndexed)
            unresolvedError("glScissorIndexed");
    

        *(void **)&real_glScissorIndexedv = resolveGl("glScissorIndexedv");
        if (!real_glScissorIndexedv)
            unresolvedError("glScissorIndexedv");
    

        *(void **)&real_glDepthRangeArrayv = resolveGl("glDepthRangeArrayv");
        if (!real_glDepthRangeArrayv)
            unresolvedError("glDepthRangeArrayv");
    

        *(void **)&real_glDepthRangeIndexed = resolveGl("glDepthRangeIndexed");
        if (!real_glDepthRangeIndexed)
            unresolvedError("glDepthRangeIndexed");
    

        *(void **)&real_glGetFloati_v = resolveGl("glGetFloati_v");
        if (!real_glGetFloati_v)
            unresolvedError("glGetFloati_v");
    

        *(void **)&real_glGetDoublei_v = resolveGl("glGetDoublei_v");
        if (!real_glGetDoublei_v)
            unresolvedError("glGetDoublei_v");
    

        *(void **)&real_glDrawArraysInstancedBaseInstance = resolveGl("glDrawArraysInstancedBaseInstance");
        if (!real_glDrawArraysInstancedBaseInstance)
            unresolvedError("glDrawArraysInstancedBaseInstance");
    

        *(void **)&real_glDrawElementsInstancedBaseInstance = resolveGl("glDrawElementsInstancedBaseInstance");
        if (!real_glDrawElementsInstancedBaseInstance)
            unresolvedError("glDrawElementsInstancedBaseInstance");
    

        *(void **)&real_glDrawElementsInstancedBaseVertexBaseInstance = resolveGl("glDrawElementsInstancedBaseVertexBaseInstance");
        if (!real_glDrawElementsInstancedBaseVertexBaseInstance)
            unresolvedError("glDrawElementsInstancedBaseVertexBaseInstance");
    

        *(void **)&real_glGetInternalformativ = resolveGl("glGetInternalformativ");
        if (!real_glGetInternalformativ)
            unresolvedError("glGetInternalformativ");
    

        *(void **)&real_glGetActiveAtomicCounterBufferiv = resolveGl("glGetActiveAtomicCounterBufferiv");
        if (!real_glGetActiveAtomicCounterBufferiv)
            unresolvedError("glGetActiveAtomicCounterBufferiv");
    

        *(void **)&real_glBindImageTexture = resolveGl("glBindImageTexture");
        if (!real_glBindImageTexture)
            unresolvedError("glBindImageTexture");
    

        *(void **)&real_glMemoryBarrier = resolveGl("glMemoryBarrier");
        if (!real_glMemoryBarrier)
            unresolvedError("glMemoryBarrier");
    

        *(void **)&real_glTexStorage1D = resolveGl("glTexStorage1D");
        if (!real_glTexStorage1D)
            unresolvedError("glTexStorage1D");
    

        *(void **)&real_glTexStorage2D = resolveGl("glTexStorage2D");
        if (!real_glTexStorage2D)
            unresolvedError("glTexStorage2D");
    

        *(void **)&real_glTexStorage3D = resolveGl("glTexStorage3D");
        if (!real_glTexStorage3D)
            unresolvedError("glTexStorage3D");
    

        *(void **)&real_glDrawTransformFeedbackInstanced = resolveGl("glDrawTransformFeedbackInstanced");
        if (!real_glDrawTransformFeedbackInstanced)
            unresolvedError("glDrawTransformFeedbackInstanced");
    

        *(void **)&real_glDrawTransformFeedbackStreamInstanced = resolveGl("glDrawTransformFeedbackStreamInstanced");
        if (!real_glDrawTransformFeedbackStreamInstanced)
            unresolvedError("glDrawTransformFeedbackStreamInstanced");
    

        *(void **)&real_glClearBufferData = resolveGl("glClearBufferData");
        if (!real_glClearBufferData)
            unresolvedError("glClearBufferData");
    

        *(void **)&real_glClearBufferSubData = resolveGl("glClearBufferSubData");
        if (!real_glClearBufferSubData)
            unresolvedError("glClearBufferSubData");
    

        *(void **)&real_glDispatchCompute = resolveGl("glDispatchCompute");
        if (!real_glDispatchCompute)
            unresolvedError("glDispatchCompute");
    

        *(void **)&real_glDispatchComputeIndirect = resolveGl("glDispatchComputeIndirect");
        if (!real_glDispatchComputeIndirect)
            unresolvedError("glDispatchComputeIndirect");
    

        *(void **)&real_glCopyImageSubData = resolveGl("glCopyImageSubData");
        if (!real_glCopyImageSubData)
            unresolvedError("glCopyImageSubData");
    

        *(void **)&real_glFramebufferParameteri = resolveGl("glFramebufferParameteri");
        if (!real_glFramebufferParameteri)
            unresolvedError("glFramebufferParameteri");
    

        *(void **)&real_glGetFramebufferParameteriv = resolveGl("glGetFramebufferParameteriv");
        if (!real_glGetFramebufferParameteriv)
            unresolvedError("glGetFramebufferParameteriv");
    

        *(void **)&real_glGetInternalformati64v = resolveGl("glGetInternalformati64v");
        if (!real_glGetInternalformati64v)
            unresolvedError("glGetInternalformati64v");
    

        *(void **)&real_glInvalidateTexSubImage = resolveGl("glInvalidateTexSubImage");
        if (!real_glInvalidateTexSubImage)
            unresolvedError("glInvalidateTexSubImage");
    

        *(void **)&real_glInvalidateTexImage = resolveGl("glInvalidateTexImage");
        if (!real_glInvalidateTexImage)
            unresolvedError("glInvalidateTexImage");
    

        *(void **)&real_glInvalidateBufferSubData = resolveGl("glInvalidateBufferSubData");
        if (!real_glInvalidateBufferSubData)
            unresolvedError("glInvalidateBufferSubData");
    

        *(void **)&real_glInvalidateBufferData = resolveGl("glInvalidateBufferData");
        if (!real_glInvalidateBufferData)
            unresolvedError("glInvalidateBufferData");
    

        *(void **)&real_glInvalidateFramebuffer = resolveGl("glInvalidateFramebuffer");
        if (!real_glInvalidateFramebuffer)
            unresolvedError("glInvalidateFramebuffer");
    

        *(void **)&real_glInvalidateSubFramebuffer = resolveGl("glInvalidateSubFramebuffer");
        if (!real_glInvalidateSubFramebuffer)
            unresolvedError("glInvalidateSubFramebuffer");
    

        *(void **)&real_glMultiDrawArraysIndirect = resolveGl("glMultiDrawArraysIndirect");
        if (!real_glMultiDrawArraysIndirect)
            unresolvedError("glMultiDrawArraysIndirect");
    

        *(void **)&real_glMultiDrawElementsIndirect = resolveGl("glMultiDrawElementsIndirect");
        if (!real_glMultiDrawElementsIndirect)
            unresolvedError("glMultiDrawElementsIndirect");
    

        *(void **)&real_glGetProgramInterfaceiv = resolveGl("glGetProgramInterfaceiv");
        if (!real_glGetProgramInterfaceiv)
            unresolvedError("glGetProgramInterfaceiv");
    

        *(void **)&real_glGetProgramResourceIndex = resolveGl("glGetProgramResourceIndex");
        if (!real_glGetProgramResourceIndex)
            unresolvedError("glGetProgramResourceIndex");
    

        *(void **)&real_glGetProgramResourceName = resolveGl("glGetProgramResourceName");
        if (!real_glGetProgramResourceName)
            unresolvedError("glGetProgramResourceName");
    

        *(void **)&real_glGetProgramResourceiv = resolveGl("glGetProgramResourceiv");
        if (!real_glGetProgramResourceiv)
            unresolvedError("glGetProgramResourceiv");
    

        *(void **)&real_glGetProgramResourceLocation = resolveGl("glGetProgramResourceLocation");
        if (!real_glGetProgramResourceLocation)
            unresolvedError("glGetProgramResourceLocation");
    

        *(void **)&real_glGetProgramResourceLocationIndex = resolveGl("glGetProgramResourceLocationIndex");
        if (!real_glGetProgramResourceLocationIndex)
            unresolvedError("glGetProgramResourceLocationIndex");
    

        *(void **)&real_glShaderStorageBlockBinding = resolveGl("glShaderStorageBlockBinding");
        if (!real_glShaderStorageBlockBinding)
            unresolvedError("glShaderStorageBlockBinding");
    

        *(void **)&real_glTexBufferRange = resolveGl("glTexBufferRange");
        if (!real_glTexBufferRange)
            unresolvedError("glTexBufferRange");
    

        *(void **)&real_glTexStorage2DMultisample = resolveGl("glTexStorage2DMultisample");
        if (!real_glTexStorage2DMultisample)
            unresolvedError("glTexStorage2DMultisample");
    

        *(void **)&real_glTexStorage3DMultisample = resolveGl("glTexStorage3DMultisample");
        if (!real_glTexStorage3DMultisample)
            unresolvedError("glTexStorage3DMultisample");
    

        *(void **)&real_glTextureView = resolveGl("glTextureView");
        if (!real_glTextureView)
            unresolvedError("glTextureView");
    

        *(void **)&real_glBindVertexBuffer = resolveGl("glBindVertexBuffer");
        if (!real_glBindVertexBuffer)
            unresolvedError("glBindVertexBuffer");
    

        *(void **)&real_glVertexAttribFormat = resolveGl("glVertexAttribFormat");
        if (!real_glVertexAttribFormat)
            unresolvedError("glVertexAttribFormat");
    

        *(void **)&real_glVertexAttribIFormat = resolveGl("glVertexAttribIFormat");
        if (!real_glVertexAttribIFormat)
            unresolvedError("glVertexAttribIFormat");
    

        *(void **)&real_glVertexAttribLFormat = resolveGl("glVertexAttribLFormat");
        if (!real_glVertexAttribLFormat)
            unresolvedError("glVertexAttribLFormat");
    

        *(void **)&real_glVertexAttribBinding = resolveGl("glVertexAttribBinding");
        if (!real_glVertexAttribBinding)
            unresolvedError("glVertexAttribBinding");
    

        *(void **)&real_glVertexBindingDivisor = resolveGl("glVertexBindingDivisor");
        if (!real_glVertexBindingDivisor)
            unresolvedError("glVertexBindingDivisor");
    

        *(void **)&real_glDebugMessageControl = resolveGl("glDebugMessageControl");
        if (!real_glDebugMessageControl)
            unresolvedError("glDebugMessageControl");
    

        *(void **)&real_glDebugMessageInsert = resolveGl("glDebugMessageInsert");
        if (!real_glDebugMessageInsert)
            unresolvedError("glDebugMessageInsert");
    

        *(void **)&real_glDebugMessageCallback = resolveGl("glDebugMessageCallback");
        if (!real_glDebugMessageCallback)
            unresolvedError("glDebugMessageCallback");
    

        *(void **)&real_glGetDebugMessageLog = resolveGl("glGetDebugMessageLog");
        if (!real_glGetDebugMessageLog)
            unresolvedError("glGetDebugMessageLog");
    

        *(void **)&real_glPushDebugGroup = resolveGl("glPushDebugGroup");
        if (!real_glPushDebugGroup)
            unresolvedError("glPushDebugGroup");
    

        *(void **)&real_glPopDebugGroup = resolveGl("glPopDebugGroup");
        if (!real_glPopDebugGroup)
            unresolvedError("glPopDebugGroup");
    

        *(void **)&real_glObjectLabel = resolveGl("glObjectLabel");
        if (!real_glObjectLabel)
            unresolvedError("glObjectLabel");
    

        *(void **)&real_glGetObjectLabel = resolveGl("glGetObjectLabel");
        if (!real_glGetObjectLabel)
            unresolvedError("glGetObjectLabel");
    

        *(void **)&real_glObjectPtrLabel = resolveGl("glObjectPtrLabel");
        if (!real_glObjectPtrLabel)
            unresolvedError("glObjectPtrLabel");
    

        *(void **)&real_glGetObjectPtrLabel = resolveGl("glGetObjectPtrLabel");
        if (!real_glGetObjectPtrLabel)
            unresolvedError("glGetObjectPtrLabel");
    

        *(void **)&real_glBufferStorage = resolveGl("glBufferStorage");
        if (!real_glBufferStorage)
            unresolvedError("glBufferStorage");
    

        *(void **)&real_glClearTexImage = resolveGl("glClearTexImage");
        if (!real_glClearTexImage)
            unresolvedError("glClearTexImage");
    

        *(void **)&real_glClearTexSubImage = resolveGl("glClearTexSubImage");
        if (!real_glClearTexSubImage)
            unresolvedError("glClearTexSubImage");
    

        *(void **)&real_glBindBuffersBase = resolveGl("glBindBuffersBase");
        if (!real_glBindBuffersBase)
            unresolvedError("glBindBuffersBase");
    

        *(void **)&real_glBindBuffersRange = resolveGl("glBindBuffersRange");
        if (!real_glBindBuffersRange)
            unresolvedError("glBindBuffersRange");
    

        *(void **)&real_glBindTextures = resolveGl("glBindTextures");
        if (!real_glBindTextures)
            unresolvedError("glBindTextures");
    

        *(void **)&real_glBindSamplers = resolveGl("glBindSamplers");
        if (!real_glBindSamplers)
            unresolvedError("glBindSamplers");
    

        *(void **)&real_glBindImageTextures = resolveGl("glBindImageTextures");
        if (!real_glBindImageTextures)
            unresolvedError("glBindImageTextures");
    

        *(void **)&real_glBindVertexBuffers = resolveGl("glBindVertexBuffers");
        if (!real_glBindVertexBuffers)
            unresolvedError("glBindVertexBuffers");
    

        *(void **)&real_glClipControl = resolveGl("glClipControl");
        if (!real_glClipControl)
            unresolvedError("glClipControl");
    

        *(void **)&real_glCreateTransformFeedbacks = resolveGl("glCreateTransformFeedbacks");
        if (!real_glCreateTransformFeedbacks)
            unresolvedError("glCreateTransformFeedbacks");
    

        *(void **)&real_glTransformFeedbackBufferBase = resolveGl("glTransformFeedbackBufferBase");
        if (!real_glTransformFeedbackBufferBase)
            unresolvedError("glTransformFeedbackBufferBase");
    

        *(void **)&real_glTransformFeedbackBufferRange = resolveGl("glTransformFeedbackBufferRange");
        if (!real_glTransformFeedbackBufferRange)
            unresolvedError("glTransformFeedbackBufferRange");
    

        *(void **)&real_glGetTransformFeedbackiv = resolveGl("glGetTransformFeedbackiv");
        if (!real_glGetTransformFeedbackiv)
            unresolvedError("glGetTransformFeedbackiv");
    

        *(void **)&real_glGetTransformFeedbacki_v = resolveGl("glGetTransformFeedbacki_v");
        if (!real_glGetTransformFeedbacki_v)
            unresolvedError("glGetTransformFeedbacki_v");
    

        *(void **)&real_glGetTransformFeedbacki64_v = resolveGl("glGetTransformFeedbacki64_v");
        if (!real_glGetTransformFeedbacki64_v)
            unresolvedError("glGetTransformFeedbacki64_v");
    

        *(void **)&real_glCreateBuffers = resolveGl("glCreateBuffers");
        if (!real_glCreateBuffers)
            unresolvedError("glCreateBuffers");
    

        *(void **)&real_glNamedBufferStorage = resolveGl("glNamedBufferStorage");
        if (!real_glNamedBufferStorage)
            unresolvedError("glNamedBufferStorage");
    

        *(void **)&real_glNamedBufferData = resolveGl("glNamedBufferData");
        if (!real_glNamedBufferData)
            unresolvedError("glNamedBufferData");
    

        *(void **)&real_glNamedBufferSubData = resolveGl("glNamedBufferSubData");
        if (!real_glNamedBufferSubData)
            unresolvedError("glNamedBufferSubData");
    

        *(void **)&real_glCopyNamedBufferSubData = resolveGl("glCopyNamedBufferSubData");
        if (!real_glCopyNamedBufferSubData)
            unresolvedError("glCopyNamedBufferSubData");
    

        *(void **)&real_glClearNamedBufferData = resolveGl("glClearNamedBufferData");
        if (!real_glClearNamedBufferData)
            unresolvedError("glClearNamedBufferData");
    

        *(void **)&real_glClearNamedBufferSubData = resolveGl("glClearNamedBufferSubData");
        if (!real_glClearNamedBufferSubData)
            unresolvedError("glClearNamedBufferSubData");
    

        *(void **)&real_glMapNamedBuffer = resolveGl("glMapNamedBuffer");
        if (!real_glMapNamedBuffer)
            unresolvedError("glMapNamedBuffer");
    

        *(void **)&real_glMapNamedBufferRange = resolveGl("glMapNamedBufferRange");
        if (!real_glMapNamedBufferRange)
            unresolvedError("glMapNamedBufferRange");
    

        *(void **)&real_glUnmapNamedBuffer = resolveGl("glUnmapNamedBuffer");
        if (!real_glUnmapNamedBuffer)
            unresolvedError("glUnmapNamedBuffer");
    

        *(void **)&real_glFlushMappedNamedBufferRange = resolveGl("glFlushMappedNamedBufferRange");
        if (!real_glFlushMappedNamedBufferRange)
            unresolvedError("glFlushMappedNamedBufferRange");
    

        *(void **)&real_glGetNamedBufferParameteriv = resolveGl("glGetNamedBufferParameteriv");
        if (!real_glGetNamedBufferParameteriv)
            unresolvedError("glGetNamedBufferParameteriv");
    

        *(void **)&real_glGetNamedBufferParameteri64v = resolveGl("glGetNamedBufferParameteri64v");
        if (!real_glGetNamedBufferParameteri64v)
            unresolvedError("glGetNamedBufferParameteri64v");
    

        *(void **)&real_glGetNamedBufferPointerv = resolveGl("glGetNamedBufferPointerv");
        if (!real_glGetNamedBufferPointerv)
            unresolvedError("glGetNamedBufferPointerv");
    

        *(void **)&real_glGetNamedBufferSubData = resolveGl("glGetNamedBufferSubData");
        if (!real_glGetNamedBufferSubData)
            unresolvedError("glGetNamedBufferSubData");
    

        *(void **)&real_glCreateFramebuffers = resolveGl("glCreateFramebuffers");
        if (!real_glCreateFramebuffers)
            unresolvedError("glCreateFramebuffers");
    

        *(void **)&real_glNamedFramebufferRenderbuffer = resolveGl("glNamedFramebufferRenderbuffer");
        if (!real_glNamedFramebufferRenderbuffer)
            unresolvedError("glNamedFramebufferRenderbuffer");
    

        *(void **)&real_glNamedFramebufferParameteri = resolveGl("glNamedFramebufferParameteri");
        if (!real_glNamedFramebufferParameteri)
            unresolvedError("glNamedFramebufferParameteri");
    

        *(void **)&real_glNamedFramebufferTexture = resolveGl("glNamedFramebufferTexture");
        if (!real_glNamedFramebufferTexture)
            unresolvedError("glNamedFramebufferTexture");
    

        *(void **)&real_glNamedFramebufferTextureLayer = resolveGl("glNamedFramebufferTextureLayer");
        if (!real_glNamedFramebufferTextureLayer)
            unresolvedError("glNamedFramebufferTextureLayer");
    

        *(void **)&real_glNamedFramebufferDrawBuffer = resolveGl("glNamedFramebufferDrawBuffer");
        if (!real_glNamedFramebufferDrawBuffer)
            unresolvedError("glNamedFramebufferDrawBuffer");
    

        *(void **)&real_glNamedFramebufferDrawBuffers = resolveGl("glNamedFramebufferDrawBuffers");
        if (!real_glNamedFramebufferDrawBuffers)
            unresolvedError("glNamedFramebufferDrawBuffers");
    

        *(void **)&real_glNamedFramebufferReadBuffer = resolveGl("glNamedFramebufferReadBuffer");
        if (!real_glNamedFramebufferReadBuffer)
            unresolvedError("glNamedFramebufferReadBuffer");
    

        *(void **)&real_glInvalidateNamedFramebufferData = resolveGl("glInvalidateNamedFramebufferData");
        if (!real_glInvalidateNamedFramebufferData)
            unresolvedError("glInvalidateNamedFramebufferData");
    

        *(void **)&real_glInvalidateNamedFramebufferSubData = resolveGl("glInvalidateNamedFramebufferSubData");
        if (!real_glInvalidateNamedFramebufferSubData)
            unresolvedError("glInvalidateNamedFramebufferSubData");
    

        *(void **)&real_glClearNamedFramebufferiv = resolveGl("glClearNamedFramebufferiv");
        if (!real_glClearNamedFramebufferiv)
            unresolvedError("glClearNamedFramebufferiv");
    

        *(void **)&real_glClearNamedFramebufferuiv = resolveGl("glClearNamedFramebufferuiv");
        if (!real_glClearNamedFramebufferuiv)
            unresolvedError("glClearNamedFramebufferuiv");
    

        *(void **)&real_glClearNamedFramebufferfv = resolveGl("glClearNamedFramebufferfv");
        if (!real_glClearNamedFramebufferfv)
            unresolvedError("glClearNamedFramebufferfv");
    

        *(void **)&real_glClearNamedFramebufferfi = resolveGl("glClearNamedFramebufferfi");
        if (!real_glClearNamedFramebufferfi)
            unresolvedError("glClearNamedFramebufferfi");
    

        *(void **)&real_glBlitNamedFramebuffer = resolveGl("glBlitNamedFramebuffer");
        if (!real_glBlitNamedFramebuffer)
            unresolvedError("glBlitNamedFramebuffer");
    

        *(void **)&real_glCheckNamedFramebufferStatus = resolveGl("glCheckNamedFramebufferStatus");
        if (!real_glCheckNamedFramebufferStatus)
            unresolvedError("glCheckNamedFramebufferStatus");
    

        *(void **)&real_glGetNamedFramebufferParameteriv = resolveGl("glGetNamedFramebufferParameteriv");
        if (!real_glGetNamedFramebufferParameteriv)
            unresolvedError("glGetNamedFramebufferParameteriv");
    

        *(void **)&real_glGetNamedFramebufferAttachmentParameteriv = resolveGl("glGetNamedFramebufferAttachmentParameteriv");
        if (!real_glGetNamedFramebufferAttachmentParameteriv)
            unresolvedError("glGetNamedFramebufferAttachmentParameteriv");
    

        *(void **)&real_glCreateRenderbuffers = resolveGl("glCreateRenderbuffers");
        if (!real_glCreateRenderbuffers)
            unresolvedError("glCreateRenderbuffers");
    

        *(void **)&real_glNamedRenderbufferStorage = resolveGl("glNamedRenderbufferStorage");
        if (!real_glNamedRenderbufferStorage)
            unresolvedError("glNamedRenderbufferStorage");
    

        *(void **)&real_glNamedRenderbufferStorageMultisample = resolveGl("glNamedRenderbufferStorageMultisample");
        if (!real_glNamedRenderbufferStorageMultisample)
            unresolvedError("glNamedRenderbufferStorageMultisample");
    

        *(void **)&real_glGetNamedRenderbufferParameteriv = resolveGl("glGetNamedRenderbufferParameteriv");
        if (!real_glGetNamedRenderbufferParameteriv)
            unresolvedError("glGetNamedRenderbufferParameteriv");
    

        *(void **)&real_glCreateTextures = resolveGl("glCreateTextures");
        if (!real_glCreateTextures)
            unresolvedError("glCreateTextures");
    

        *(void **)&real_glTextureBuffer = resolveGl("glTextureBuffer");
        if (!real_glTextureBuffer)
            unresolvedError("glTextureBuffer");
    

        *(void **)&real_glTextureBufferRange = resolveGl("glTextureBufferRange");
        if (!real_glTextureBufferRange)
            unresolvedError("glTextureBufferRange");
    

        *(void **)&real_glTextureStorage1D = resolveGl("glTextureStorage1D");
        if (!real_glTextureStorage1D)
            unresolvedError("glTextureStorage1D");
    

        *(void **)&real_glTextureStorage2D = resolveGl("glTextureStorage2D");
        if (!real_glTextureStorage2D)
            unresolvedError("glTextureStorage2D");
    

        *(void **)&real_glTextureStorage3D = resolveGl("glTextureStorage3D");
        if (!real_glTextureStorage3D)
            unresolvedError("glTextureStorage3D");
    

        *(void **)&real_glTextureStorage2DMultisample = resolveGl("glTextureStorage2DMultisample");
        if (!real_glTextureStorage2DMultisample)
            unresolvedError("glTextureStorage2DMultisample");
    

        *(void **)&real_glTextureStorage3DMultisample = resolveGl("glTextureStorage3DMultisample");
        if (!real_glTextureStorage3DMultisample)
            unresolvedError("glTextureStorage3DMultisample");
    

        *(void **)&real_glTextureSubImage1D = resolveGl("glTextureSubImage1D");
        if (!real_glTextureSubImage1D)
            unresolvedError("glTextureSubImage1D");
    

        *(void **)&real_glTextureSubImage2D = resolveGl("glTextureSubImage2D");
        if (!real_glTextureSubImage2D)
            unresolvedError("glTextureSubImage2D");
    

        *(void **)&real_glTextureSubImage3D = resolveGl("glTextureSubImage3D");
        if (!real_glTextureSubImage3D)
            unresolvedError("glTextureSubImage3D");
    

        *(void **)&real_glCompressedTextureSubImage1D = resolveGl("glCompressedTextureSubImage1D");
        if (!real_glCompressedTextureSubImage1D)
            unresolvedError("glCompressedTextureSubImage1D");
    

        *(void **)&real_glCompressedTextureSubImage2D = resolveGl("glCompressedTextureSubImage2D");
        if (!real_glCompressedTextureSubImage2D)
            unresolvedError("glCompressedTextureSubImage2D");
    

        *(void **)&real_glCompressedTextureSubImage3D = resolveGl("glCompressedTextureSubImage3D");
        if (!real_glCompressedTextureSubImage3D)
            unresolvedError("glCompressedTextureSubImage3D");
    

        *(void **)&real_glCopyTextureSubImage1D = resolveGl("glCopyTextureSubImage1D");
        if (!real_glCopyTextureSubImage1D)
            unresolvedError("glCopyTextureSubImage1D");
    

        *(void **)&real_glCopyTextureSubImage2D = resolveGl("glCopyTextureSubImage2D");
        if (!real_glCopyTextureSubImage2D)
            unresolvedError("glCopyTextureSubImage2D");
    

        *(void **)&real_glCopyTextureSubImage3D = resolveGl("glCopyTextureSubImage3D");
        if (!real_glCopyTextureSubImage3D)
            unresolvedError("glCopyTextureSubImage3D");
    

        *(void **)&real_glTextureParameterf = resolveGl("glTextureParameterf");
        if (!real_glTextureParameterf)
            unresolvedError("glTextureParameterf");
    

        *(void **)&real_glTextureParameterfv = resolveGl("glTextureParameterfv");
        if (!real_glTextureParameterfv)
            unresolvedError("glTextureParameterfv");
    

        *(void **)&real_glTextureParameteri = resolveGl("glTextureParameteri");
        if (!real_glTextureParameteri)
            unresolvedError("glTextureParameteri");
    

        *(void **)&real_glTextureParameterIiv = resolveGl("glTextureParameterIiv");
        if (!real_glTextureParameterIiv)
            unresolvedError("glTextureParameterIiv");
    

        *(void **)&real_glTextureParameterIuiv = resolveGl("glTextureParameterIuiv");
        if (!real_glTextureParameterIuiv)
            unresolvedError("glTextureParameterIuiv");
    

        *(void **)&real_glTextureParameteriv = resolveGl("glTextureParameteriv");
        if (!real_glTextureParameteriv)
            unresolvedError("glTextureParameteriv");
    

        *(void **)&real_glGenerateTextureMipmap = resolveGl("glGenerateTextureMipmap");
        if (!real_glGenerateTextureMipmap)
            unresolvedError("glGenerateTextureMipmap");
    

        *(void **)&real_glBindTextureUnit = resolveGl("glBindTextureUnit");
        if (!real_glBindTextureUnit)
            unresolvedError("glBindTextureUnit");
    

        *(void **)&real_glGetTextureImage = resolveGl("glGetTextureImage");
        if (!real_glGetTextureImage)
            unresolvedError("glGetTextureImage");
    

        *(void **)&real_glGetCompressedTextureImage = resolveGl("glGetCompressedTextureImage");
        if (!real_glGetCompressedTextureImage)
            unresolvedError("glGetCompressedTextureImage");
    

        *(void **)&real_glGetTextureLevelParameterfv = resolveGl("glGetTextureLevelParameterfv");
        if (!real_glGetTextureLevelParameterfv)
            unresolvedError("glGetTextureLevelParameterfv");
    

        *(void **)&real_glGetTextureLevelParameteriv = resolveGl("glGetTextureLevelParameteriv");
        if (!real_glGetTextureLevelParameteriv)
            unresolvedError("glGetTextureLevelParameteriv");
    

        *(void **)&real_glGetTextureParameterfv = resolveGl("glGetTextureParameterfv");
        if (!real_glGetTextureParameterfv)
            unresolvedError("glGetTextureParameterfv");
    

        *(void **)&real_glGetTextureParameterIiv = resolveGl("glGetTextureParameterIiv");
        if (!real_glGetTextureParameterIiv)
            unresolvedError("glGetTextureParameterIiv");
    

        *(void **)&real_glGetTextureParameterIuiv = resolveGl("glGetTextureParameterIuiv");
        if (!real_glGetTextureParameterIuiv)
            unresolvedError("glGetTextureParameterIuiv");
    

        *(void **)&real_glGetTextureParameteriv = resolveGl("glGetTextureParameteriv");
        if (!real_glGetTextureParameteriv)
            unresolvedError("glGetTextureParameteriv");
    

        *(void **)&real_glCreateVertexArrays = resolveGl("glCreateVertexArrays");
        if (!real_glCreateVertexArrays)
            unresolvedError("glCreateVertexArrays");
    

        *(void **)&real_glDisableVertexArrayAttrib = resolveGl("glDisableVertexArrayAttrib");
        if (!real_glDisableVertexArrayAttrib)
            unresolvedError("glDisableVertexArrayAttrib");
    

        *(void **)&real_glEnableVertexArrayAttrib = resolveGl("glEnableVertexArrayAttrib");
        if (!real_glEnableVertexArrayAttrib)
            unresolvedError("glEnableVertexArrayAttrib");
    

        *(void **)&real_glVertexArrayElementBuffer = resolveGl("glVertexArrayElementBuffer");
        if (!real_glVertexArrayElementBuffer)
            unresolvedError("glVertexArrayElementBuffer");
    

        *(void **)&real_glVertexArrayVertexBuffer = resolveGl("glVertexArrayVertexBuffer");
        if (!real_glVertexArrayVertexBuffer)
            unresolvedError("glVertexArrayVertexBuffer");
    

        *(void **)&real_glVertexArrayVertexBuffers = resolveGl("glVertexArrayVertexBuffers");
        if (!real_glVertexArrayVertexBuffers)
            unresolvedError("glVertexArrayVertexBuffers");
    

        *(void **)&real_glVertexArrayAttribBinding = resolveGl("glVertexArrayAttribBinding");
        if (!real_glVertexArrayAttribBinding)
            unresolvedError("glVertexArrayAttribBinding");
    

        *(void **)&real_glVertexArrayAttribFormat = resolveGl("glVertexArrayAttribFormat");
        if (!real_glVertexArrayAttribFormat)
            unresolvedError("glVertexArrayAttribFormat");
    

        *(void **)&real_glVertexArrayAttribIFormat = resolveGl("glVertexArrayAttribIFormat");
        if (!real_glVertexArrayAttribIFormat)
            unresolvedError("glVertexArrayAttribIFormat");
    

        *(void **)&real_glVertexArrayAttribLFormat = resolveGl("glVertexArrayAttribLFormat");
        if (!real_glVertexArrayAttribLFormat)
            unresolvedError("glVertexArrayAttribLFormat");
    

        *(void **)&real_glVertexArrayBindingDivisor = resolveGl("glVertexArrayBindingDivisor");
        if (!real_glVertexArrayBindingDivisor)
            unresolvedError("glVertexArrayBindingDivisor");
    

        *(void **)&real_glGetVertexArrayiv = resolveGl("glGetVertexArrayiv");
        if (!real_glGetVertexArrayiv)
            unresolvedError("glGetVertexArrayiv");
    

        *(void **)&real_glGetVertexArrayIndexediv = resolveGl("glGetVertexArrayIndexediv");
        if (!real_glGetVertexArrayIndexediv)
            unresolvedError("glGetVertexArrayIndexediv");
    

        *(void **)&real_glGetVertexArrayIndexed64iv = resolveGl("glGetVertexArrayIndexed64iv");
        if (!real_glGetVertexArrayIndexed64iv)
            unresolvedError("glGetVertexArrayIndexed64iv");
    

        *(void **)&real_glCreateSamplers = resolveGl("glCreateSamplers");
        if (!real_glCreateSamplers)
            unresolvedError("glCreateSamplers");
    

        *(void **)&real_glCreateProgramPipelines = resolveGl("glCreateProgramPipelines");
        if (!real_glCreateProgramPipelines)
            unresolvedError("glCreateProgramPipelines");
    

        *(void **)&real_glCreateQueries = resolveGl("glCreateQueries");
        if (!real_glCreateQueries)
            unresolvedError("glCreateQueries");
    

        *(void **)&real_glGetQueryBufferObjecti64v = resolveGl("glGetQueryBufferObjecti64v");
        if (!real_glGetQueryBufferObjecti64v)
            unresolvedError("glGetQueryBufferObjecti64v");
    

        *(void **)&real_glGetQueryBufferObjectiv = resolveGl("glGetQueryBufferObjectiv");
        if (!real_glGetQueryBufferObjectiv)
            unresolvedError("glGetQueryBufferObjectiv");
    

        *(void **)&real_glGetQueryBufferObjectui64v = resolveGl("glGetQueryBufferObjectui64v");
        if (!real_glGetQueryBufferObjectui64v)
            unresolvedError("glGetQueryBufferObjectui64v");
    

        *(void **)&real_glGetQueryBufferObjectuiv = resolveGl("glGetQueryBufferObjectuiv");
        if (!real_glGetQueryBufferObjectuiv)
            unresolvedError("glGetQueryBufferObjectuiv");
    

        *(void **)&real_glMemoryBarrierByRegion = resolveGl("glMemoryBarrierByRegion");
        if (!real_glMemoryBarrierByRegion)
            unresolvedError("glMemoryBarrierByRegion");
    

        *(void **)&real_glGetTextureSubImage = resolveGl("glGetTextureSubImage");
        if (!real_glGetTextureSubImage)
            unresolvedError("glGetTextureSubImage");
    

        *(void **)&real_glGetCompressedTextureSubImage = resolveGl("glGetCompressedTextureSubImage");
        if (!real_glGetCompressedTextureSubImage)
            unresolvedError("glGetCompressedTextureSubImage");
    

        *(void **)&real_glGetGraphicsResetStatus = resolveGl("glGetGraphicsResetStatus");
        if (!real_glGetGraphicsResetStatus)
            unresolvedError("glGetGraphicsResetStatus");
    

        *(void **)&real_glGetnCompressedTexImage = resolveGl("glGetnCompressedTexImage");
        if (!real_glGetnCompressedTexImage)
            unresolvedError("glGetnCompressedTexImage");
    

        *(void **)&real_glGetnTexImage = resolveGl("glGetnTexImage");
        if (!real_glGetnTexImage)
            unresolvedError("glGetnTexImage");
    

        *(void **)&real_glGetnUniformdv = resolveGl("glGetnUniformdv");
        if (!real_glGetnUniformdv)
            unresolvedError("glGetnUniformdv");
    

        *(void **)&real_glGetnUniformfv = resolveGl("glGetnUniformfv");
        if (!real_glGetnUniformfv)
            unresolvedError("glGetnUniformfv");
    

        *(void **)&real_glGetnUniformiv = resolveGl("glGetnUniformiv");
        if (!real_glGetnUniformiv)
            unresolvedError("glGetnUniformiv");
    

        *(void **)&real_glGetnUniformuiv = resolveGl("glGetnUniformuiv");
        if (!real_glGetnUniformuiv)
            unresolvedError("glGetnUniformuiv");
    

        *(void **)&real_glReadnPixels = resolveGl("glReadnPixels");
        if (!real_glReadnPixels)
            unresolvedError("glReadnPixels");
    

        *(void **)&real_glGetnMapdv = resolveGl("glGetnMapdv");
        if (!real_glGetnMapdv)
            unresolvedError("glGetnMapdv");
    

        *(void **)&real_glGetnMapfv = resolveGl("glGetnMapfv");
        if (!real_glGetnMapfv)
            unresolvedError("glGetnMapfv");
    

        *(void **)&real_glGetnMapiv = resolveGl("glGetnMapiv");
        if (!real_glGetnMapiv)
            unresolvedError("glGetnMapiv");
    

        *(void **)&real_glGetnPixelMapfv = resolveGl("glGetnPixelMapfv");
        if (!real_glGetnPixelMapfv)
            unresolvedError("glGetnPixelMapfv");
    

        *(void **)&real_glGetnPixelMapuiv = resolveGl("glGetnPixelMapuiv");
        if (!real_glGetnPixelMapuiv)
            unresolvedError("glGetnPixelMapuiv");
    

        *(void **)&real_glGetnPixelMapusv = resolveGl("glGetnPixelMapusv");
        if (!real_glGetnPixelMapusv)
            unresolvedError("glGetnPixelMapusv");
    

        *(void **)&real_glGetnPolygonStipple = resolveGl("glGetnPolygonStipple");
        if (!real_glGetnPolygonStipple)
            unresolvedError("glGetnPolygonStipple");
    

        *(void **)&real_glGetnColorTable = resolveGl("glGetnColorTable");
        if (!real_glGetnColorTable)
            unresolvedError("glGetnColorTable");
    

        *(void **)&real_glGetnConvolutionFilter = resolveGl("glGetnConvolutionFilter");
        if (!real_glGetnConvolutionFilter)
            unresolvedError("glGetnConvolutionFilter");
    

        *(void **)&real_glGetnSeparableFilter = resolveGl("glGetnSeparableFilter");
        if (!real_glGetnSeparableFilter)
            unresolvedError("glGetnSeparableFilter");
    

        *(void **)&real_glGetnHistogram = resolveGl("glGetnHistogram");
        if (!real_glGetnHistogram)
            unresolvedError("glGetnHistogram");
    

        *(void **)&real_glGetnMinmax = resolveGl("glGetnMinmax");
        if (!real_glGetnMinmax)
            unresolvedError("glGetnMinmax");
    

        *(void **)&real_glTextureBarrier = resolveGl("glTextureBarrier");
        if (!real_glTextureBarrier)
            unresolvedError("glTextureBarrier");
    

        *(void **)&real_glSpecializeShader = resolveGl("glSpecializeShader");
        if (!real_glSpecializeShader)
            unresolvedError("glSpecializeShader");
    

        *(void **)&real_glMultiDrawArraysIndirectCount = resolveGl("glMultiDrawArraysIndirectCount");
        if (!real_glMultiDrawArraysIndirectCount)
            unresolvedError("glMultiDrawArraysIndirectCount");
    

        *(void **)&real_glMultiDrawElementsIndirectCount = resolveGl("glMultiDrawElementsIndirectCount");
        if (!real_glMultiDrawElementsIndirectCount)
            unresolvedError("glMultiDrawElementsIndirectCount");
    

        *(void **)&real_glPolygonOffsetClamp = resolveGl("glPolygonOffsetClamp");
        if (!real_glPolygonOffsetClamp)
            unresolvedError("glPolygonOffsetClamp");
    

        *(void **)&real_glPrimitiveBoundingBoxARB = resolveGl("glPrimitiveBoundingBoxARB");
        if (!real_glPrimitiveBoundingBoxARB)
            unresolvedError("glPrimitiveBoundingBoxARB");
    

        *(void **)&real_glGetTextureHandleARB = resolveGl("glGetTextureHandleARB");
        if (!real_glGetTextureHandleARB)
            unresolvedError("glGetTextureHandleARB");
    

        *(void **)&real_glGetTextureSamplerHandleARB = resolveGl("glGetTextureSamplerHandleARB");
        if (!real_glGetTextureSamplerHandleARB)
            unresolvedError("glGetTextureSamplerHandleARB");
    

        *(void **)&real_glMakeTextureHandleResidentARB = resolveGl("glMakeTextureHandleResidentARB");
        if (!real_glMakeTextureHandleResidentARB)
            unresolvedError("glMakeTextureHandleResidentARB");
    

        *(void **)&real_glMakeTextureHandleNonResidentARB = resolveGl("glMakeTextureHandleNonResidentARB");
        if (!real_glMakeTextureHandleNonResidentARB)
            unresolvedError("glMakeTextureHandleNonResidentARB");
    

        *(void **)&real_glGetImageHandleARB = resolveGl("glGetImageHandleARB");
        if (!real_glGetImageHandleARB)
            unresolvedError("glGetImageHandleARB");
    

        *(void **)&real_glMakeImageHandleResidentARB = resolveGl("glMakeImageHandleResidentARB");
        if (!real_glMakeImageHandleResidentARB)
            unresolvedError("glMakeImageHandleResidentARB");
    

        *(void **)&real_glMakeImageHandleNonResidentARB = resolveGl("glMakeImageHandleNonResidentARB");
        if (!real_glMakeImageHandleNonResidentARB)
            unresolvedError("glMakeImageHandleNonResidentARB");
    

        *(void **)&real_glUniformHandleui64ARB = resolveGl("glUniformHandleui64ARB");
        if (!real_glUniformHandleui64ARB)
            unresolvedError("glUniformHandleui64ARB");
    

        *(void **)&real_glUniformHandleui64vARB = resolveGl("glUniformHandleui64vARB");
        if (!real_glUniformHandleui64vARB)
            unresolvedError("glUniformHandleui64vARB");
    

        *(void **)&real_glProgramUniformHandleui64ARB = resolveGl("glProgramUniformHandleui64ARB");
        if (!real_glProgramUniformHandleui64ARB)
            unresolvedError("glProgramUniformHandleui64ARB");
    

        *(void **)&real_glProgramUniformHandleui64vARB = resolveGl("glProgramUniformHandleui64vARB");
        if (!real_glProgramUniformHandleui64vARB)
            unresolvedError("glProgramUniformHandleui64vARB");
    

        *(void **)&real_glIsTextureHandleResidentARB = resolveGl("glIsTextureHandleResidentARB");
        if (!real_glIsTextureHandleResidentARB)
            unresolvedError("glIsTextureHandleResidentARB");
    

        *(void **)&real_glIsImageHandleResidentARB = resolveGl("glIsImageHandleResidentARB");
        if (!real_glIsImageHandleResidentARB)
            unresolvedError("glIsImageHandleResidentARB");
    

        *(void **)&real_glVertexAttribL1ui64ARB = resolveGl("glVertexAttribL1ui64ARB");
        if (!real_glVertexAttribL1ui64ARB)
            unresolvedError("glVertexAttribL1ui64ARB");
    

        *(void **)&real_glVertexAttribL1ui64vARB = resolveGl("glVertexAttribL1ui64vARB");
        if (!real_glVertexAttribL1ui64vARB)
            unresolvedError("glVertexAttribL1ui64vARB");
    

        *(void **)&real_glGetVertexAttribLui64vARB = resolveGl("glGetVertexAttribLui64vARB");
        if (!real_glGetVertexAttribLui64vARB)
            unresolvedError("glGetVertexAttribLui64vARB");
    

        *(void **)&real_glCreateSyncFromCLeventARB = resolveGl("glCreateSyncFromCLeventARB");
        if (!real_glCreateSyncFromCLeventARB)
            unresolvedError("glCreateSyncFromCLeventARB");
    

        *(void **)&real_glClampColorARB = resolveGl("glClampColorARB");
        if (!real_glClampColorARB)
            unresolvedError("glClampColorARB");
    

        *(void **)&real_glDispatchComputeGroupSizeARB = resolveGl("glDispatchComputeGroupSizeARB");
        if (!real_glDispatchComputeGroupSizeARB)
            unresolvedError("glDispatchComputeGroupSizeARB");
    

        *(void **)&real_glDebugMessageControlARB = resolveGl("glDebugMessageControlARB");
        if (!real_glDebugMessageControlARB)
            unresolvedError("glDebugMessageControlARB");
    

        *(void **)&real_glDebugMessageInsertARB = resolveGl("glDebugMessageInsertARB");
        if (!real_glDebugMessageInsertARB)
            unresolvedError("glDebugMessageInsertARB");
    

        *(void **)&real_glDebugMessageCallbackARB = resolveGl("glDebugMessageCallbackARB");
        if (!real_glDebugMessageCallbackARB)
            unresolvedError("glDebugMessageCallbackARB");
    

        *(void **)&real_glGetDebugMessageLogARB = resolveGl("glGetDebugMessageLogARB");
        if (!real_glGetDebugMessageLogARB)
            unresolvedError("glGetDebugMessageLogARB");
    

        *(void **)&real_glDrawBuffersARB = resolveGl("glDrawBuffersARB");
        if (!real_glDrawBuffersARB)
            unresolvedError("glDrawBuffersARB");
    

        *(void **)&real_glBlendEquationiARB = resolveGl("glBlendEquationiARB");
        if (!real_glBlendEquationiARB)
            unresolvedError("glBlendEquationiARB");
    

        *(void **)&real_glBlendEquationSeparateiARB = resolveGl("glBlendEquationSeparateiARB");
        if (!real_glBlendEquationSeparateiARB)
            unresolvedError("glBlendEquationSeparateiARB");
    

        *(void **)&real_glBlendFunciARB = resolveGl("glBlendFunciARB");
        if (!real_glBlendFunciARB)
            unresolvedError("glBlendFunciARB");
    

        *(void **)&real_glBlendFuncSeparateiARB = resolveGl("glBlendFuncSeparateiARB");
        if (!real_glBlendFuncSeparateiARB)
            unresolvedError("glBlendFuncSeparateiARB");
    

        *(void **)&real_glDrawArraysInstancedARB = resolveGl("glDrawArraysInstancedARB");
        if (!real_glDrawArraysInstancedARB)
            unresolvedError("glDrawArraysInstancedARB");
    

        *(void **)&real_glDrawElementsInstancedARB = resolveGl("glDrawElementsInstancedARB");
        if (!real_glDrawElementsInstancedARB)
            unresolvedError("glDrawElementsInstancedARB");
    

        *(void **)&real_glProgramStringARB = resolveGl("glProgramStringARB");
        if (!real_glProgramStringARB)
            unresolvedError("glProgramStringARB");
    

        *(void **)&real_glBindProgramARB = resolveGl("glBindProgramARB");
        if (!real_glBindProgramARB)
            unresolvedError("glBindProgramARB");
    

        *(void **)&real_glDeleteProgramsARB = resolveGl("glDeleteProgramsARB");
        if (!real_glDeleteProgramsARB)
            unresolvedError("glDeleteProgramsARB");
    

        *(void **)&real_glGenProgramsARB = resolveGl("glGenProgramsARB");
        if (!real_glGenProgramsARB)
            unresolvedError("glGenProgramsARB");
    

        *(void **)&real_glProgramEnvParameter4dARB = resolveGl("glProgramEnvParameter4dARB");
        if (!real_glProgramEnvParameter4dARB)
            unresolvedError("glProgramEnvParameter4dARB");
    

        *(void **)&real_glProgramEnvParameter4dvARB = resolveGl("glProgramEnvParameter4dvARB");
        if (!real_glProgramEnvParameter4dvARB)
            unresolvedError("glProgramEnvParameter4dvARB");
    

        *(void **)&real_glProgramEnvParameter4fARB = resolveGl("glProgramEnvParameter4fARB");
        if (!real_glProgramEnvParameter4fARB)
            unresolvedError("glProgramEnvParameter4fARB");
    

        *(void **)&real_glProgramEnvParameter4fvARB = resolveGl("glProgramEnvParameter4fvARB");
        if (!real_glProgramEnvParameter4fvARB)
            unresolvedError("glProgramEnvParameter4fvARB");
    

        *(void **)&real_glProgramLocalParameter4dARB = resolveGl("glProgramLocalParameter4dARB");
        if (!real_glProgramLocalParameter4dARB)
            unresolvedError("glProgramLocalParameter4dARB");
    

        *(void **)&real_glProgramLocalParameter4dvARB = resolveGl("glProgramLocalParameter4dvARB");
        if (!real_glProgramLocalParameter4dvARB)
            unresolvedError("glProgramLocalParameter4dvARB");
    

        *(void **)&real_glProgramLocalParameter4fARB = resolveGl("glProgramLocalParameter4fARB");
        if (!real_glProgramLocalParameter4fARB)
            unresolvedError("glProgramLocalParameter4fARB");
    

        *(void **)&real_glProgramLocalParameter4fvARB = resolveGl("glProgramLocalParameter4fvARB");
        if (!real_glProgramLocalParameter4fvARB)
            unresolvedError("glProgramLocalParameter4fvARB");
    

        *(void **)&real_glGetProgramEnvParameterdvARB = resolveGl("glGetProgramEnvParameterdvARB");
        if (!real_glGetProgramEnvParameterdvARB)
            unresolvedError("glGetProgramEnvParameterdvARB");
    

        *(void **)&real_glGetProgramEnvParameterfvARB = resolveGl("glGetProgramEnvParameterfvARB");
        if (!real_glGetProgramEnvParameterfvARB)
            unresolvedError("glGetProgramEnvParameterfvARB");
    

        *(void **)&real_glGetProgramLocalParameterdvARB = resolveGl("glGetProgramLocalParameterdvARB");
        if (!real_glGetProgramLocalParameterdvARB)
            unresolvedError("glGetProgramLocalParameterdvARB");
    

        *(void **)&real_glGetProgramLocalParameterfvARB = resolveGl("glGetProgramLocalParameterfvARB");
        if (!real_glGetProgramLocalParameterfvARB)
            unresolvedError("glGetProgramLocalParameterfvARB");
    

        *(void **)&real_glGetProgramivARB = resolveGl("glGetProgramivARB");
        if (!real_glGetProgramivARB)
            unresolvedError("glGetProgramivARB");
    

        *(void **)&real_glGetProgramStringARB = resolveGl("glGetProgramStringARB");
        if (!real_glGetProgramStringARB)
            unresolvedError("glGetProgramStringARB");
    

        *(void **)&real_glIsProgramARB = resolveGl("glIsProgramARB");
        if (!real_glIsProgramARB)
            unresolvedError("glIsProgramARB");
    

        *(void **)&real_glProgramParameteriARB = resolveGl("glProgramParameteriARB");
        if (!real_glProgramParameteriARB)
            unresolvedError("glProgramParameteriARB");
    

        *(void **)&real_glFramebufferTextureARB = resolveGl("glFramebufferTextureARB");
        if (!real_glFramebufferTextureARB)
            unresolvedError("glFramebufferTextureARB");
    

        *(void **)&real_glFramebufferTextureLayerARB = resolveGl("glFramebufferTextureLayerARB");
        if (!real_glFramebufferTextureLayerARB)
            unresolvedError("glFramebufferTextureLayerARB");
    

        *(void **)&real_glFramebufferTextureFaceARB = resolveGl("glFramebufferTextureFaceARB");
        if (!real_glFramebufferTextureFaceARB)
            unresolvedError("glFramebufferTextureFaceARB");
    

        *(void **)&real_glSpecializeShaderARB = resolveGl("glSpecializeShaderARB");
        if (!real_glSpecializeShaderARB)
            unresolvedError("glSpecializeShaderARB");
    

        *(void **)&real_glUniform1i64ARB = resolveGl("glUniform1i64ARB");
        if (!real_glUniform1i64ARB)
            unresolvedError("glUniform1i64ARB");
    

        *(void **)&real_glUniform2i64ARB = resolveGl("glUniform2i64ARB");
        if (!real_glUniform2i64ARB)
            unresolvedError("glUniform2i64ARB");
    

        *(void **)&real_glUniform3i64ARB = resolveGl("glUniform3i64ARB");
        if (!real_glUniform3i64ARB)
            unresolvedError("glUniform3i64ARB");
    

        *(void **)&real_glUniform4i64ARB = resolveGl("glUniform4i64ARB");
        if (!real_glUniform4i64ARB)
            unresolvedError("glUniform4i64ARB");
    

        *(void **)&real_glUniform1i64vARB = resolveGl("glUniform1i64vARB");
        if (!real_glUniform1i64vARB)
            unresolvedError("glUniform1i64vARB");
    

        *(void **)&real_glUniform2i64vARB = resolveGl("glUniform2i64vARB");
        if (!real_glUniform2i64vARB)
            unresolvedError("glUniform2i64vARB");
    

        *(void **)&real_glUniform3i64vARB = resolveGl("glUniform3i64vARB");
        if (!real_glUniform3i64vARB)
            unresolvedError("glUniform3i64vARB");
    

        *(void **)&real_glUniform4i64vARB = resolveGl("glUniform4i64vARB");
        if (!real_glUniform4i64vARB)
            unresolvedError("glUniform4i64vARB");
    

        *(void **)&real_glUniform1ui64ARB = resolveGl("glUniform1ui64ARB");
        if (!real_glUniform1ui64ARB)
            unresolvedError("glUniform1ui64ARB");
    

        *(void **)&real_glUniform2ui64ARB = resolveGl("glUniform2ui64ARB");
        if (!real_glUniform2ui64ARB)
            unresolvedError("glUniform2ui64ARB");
    

        *(void **)&real_glUniform3ui64ARB = resolveGl("glUniform3ui64ARB");
        if (!real_glUniform3ui64ARB)
            unresolvedError("glUniform3ui64ARB");
    

        *(void **)&real_glUniform4ui64ARB = resolveGl("glUniform4ui64ARB");
        if (!real_glUniform4ui64ARB)
            unresolvedError("glUniform4ui64ARB");
    

        *(void **)&real_glUniform1ui64vARB = resolveGl("glUniform1ui64vARB");
        if (!real_glUniform1ui64vARB)
            unresolvedError("glUniform1ui64vARB");
    

        *(void **)&real_glUniform2ui64vARB = resolveGl("glUniform2ui64vARB");
        if (!real_glUniform2ui64vARB)
            unresolvedError("glUniform2ui64vARB");
    

        *(void **)&real_glUniform3ui64vARB = resolveGl("glUniform3ui64vARB");
        if (!real_glUniform3ui64vARB)
            unresolvedError("glUniform3ui64vARB");
    

        *(void **)&real_glUniform4ui64vARB = resolveGl("glUniform4ui64vARB");
        if (!real_glUniform4ui64vARB)
            unresolvedError("glUniform4ui64vARB");
    

        *(void **)&real_glGetUniformi64vARB = resolveGl("glGetUniformi64vARB");
        if (!real_glGetUniformi64vARB)
            unresolvedError("glGetUniformi64vARB");
    

        *(void **)&real_glGetUniformui64vARB = resolveGl("glGetUniformui64vARB");
        if (!real_glGetUniformui64vARB)
            unresolvedError("glGetUniformui64vARB");
    

        *(void **)&real_glGetnUniformi64vARB = resolveGl("glGetnUniformi64vARB");
        if (!real_glGetnUniformi64vARB)
            unresolvedError("glGetnUniformi64vARB");
    

        *(void **)&real_glGetnUniformui64vARB = resolveGl("glGetnUniformui64vARB");
        if (!real_glGetnUniformui64vARB)
            unresolvedError("glGetnUniformui64vARB");
    

        *(void **)&real_glProgramUniform1i64ARB = resolveGl("glProgramUniform1i64ARB");
        if (!real_glProgramUniform1i64ARB)
            unresolvedError("glProgramUniform1i64ARB");
    

        *(void **)&real_glProgramUniform2i64ARB = resolveGl("glProgramUniform2i64ARB");
        if (!real_glProgramUniform2i64ARB)
            unresolvedError("glProgramUniform2i64ARB");
    

        *(void **)&real_glProgramUniform3i64ARB = resolveGl("glProgramUniform3i64ARB");
        if (!real_glProgramUniform3i64ARB)
            unresolvedError("glProgramUniform3i64ARB");
    

        *(void **)&real_glProgramUniform4i64ARB = resolveGl("glProgramUniform4i64ARB");
        if (!real_glProgramUniform4i64ARB)
            unresolvedError("glProgramUniform4i64ARB");
    

        *(void **)&real_glProgramUniform1i64vARB = resolveGl("glProgramUniform1i64vARB");
        if (!real_glProgramUniform1i64vARB)
            unresolvedError("glProgramUniform1i64vARB");
    

        *(void **)&real_glProgramUniform2i64vARB = resolveGl("glProgramUniform2i64vARB");
        if (!real_glProgramUniform2i64vARB)
            unresolvedError("glProgramUniform2i64vARB");
    

        *(void **)&real_glProgramUniform3i64vARB = resolveGl("glProgramUniform3i64vARB");
        if (!real_glProgramUniform3i64vARB)
            unresolvedError("glProgramUniform3i64vARB");
    

        *(void **)&real_glProgramUniform4i64vARB = resolveGl("glProgramUniform4i64vARB");
        if (!real_glProgramUniform4i64vARB)
            unresolvedError("glProgramUniform4i64vARB");
    

        *(void **)&real_glProgramUniform1ui64ARB = resolveGl("glProgramUniform1ui64ARB");
        if (!real_glProgramUniform1ui64ARB)
            unresolvedError("glProgramUniform1ui64ARB");
    

        *(void **)&real_glProgramUniform2ui64ARB = resolveGl("glProgramUniform2ui64ARB");
        if (!real_glProgramUniform2ui64ARB)
            unresolvedError("glProgramUniform2ui64ARB");
    

        *(void **)&real_glProgramUniform3ui64ARB = resolveGl("glProgramUniform3ui64ARB");
        if (!real_glProgramUniform3ui64ARB)
            unresolvedError("glProgramUniform3ui64ARB");
    

        *(void **)&real_glProgramUniform4ui64ARB = resolveGl("glProgramUniform4ui64ARB");
        if (!real_glProgramUniform4ui64ARB)
            unresolvedError("glProgramUniform4ui64ARB");
    

        *(void **)&real_glProgramUniform1ui64vARB = resolveGl("glProgramUniform1ui64vARB");
        if (!real_glProgramUniform1ui64vARB)
            unresolvedError("glProgramUniform1ui64vARB");
    

        *(void **)&real_glProgramUniform2ui64vARB = resolveGl("glProgramUniform2ui64vARB");
        if (!real_glProgramUniform2ui64vARB)
            unresolvedError("glProgramUniform2ui64vARB");
    

        *(void **)&real_glProgramUniform3ui64vARB = resolveGl("glProgramUniform3ui64vARB");
        if (!real_glProgramUniform3ui64vARB)
            unresolvedError("glProgramUniform3ui64vARB");
    

        *(void **)&real_glProgramUniform4ui64vARB = resolveGl("glProgramUniform4ui64vARB");
        if (!real_glProgramUniform4ui64vARB)
            unresolvedError("glProgramUniform4ui64vARB");
    

        *(void **)&real_glColorTable = resolveGl("glColorTable");
        if (!real_glColorTable)
            unresolvedError("glColorTable");
    

        *(void **)&real_glColorTableParameterfv = resolveGl("glColorTableParameterfv");
        if (!real_glColorTableParameterfv)
            unresolvedError("glColorTableParameterfv");
    

        *(void **)&real_glColorTableParameteriv = resolveGl("glColorTableParameteriv");
        if (!real_glColorTableParameteriv)
            unresolvedError("glColorTableParameteriv");
    

        *(void **)&real_glCopyColorTable = resolveGl("glCopyColorTable");
        if (!real_glCopyColorTable)
            unresolvedError("glCopyColorTable");
    

        *(void **)&real_glGetColorTable = resolveGl("glGetColorTable");
        if (!real_glGetColorTable)
            unresolvedError("glGetColorTable");
    

        *(void **)&real_glGetColorTableParameterfv = resolveGl("glGetColorTableParameterfv");
        if (!real_glGetColorTableParameterfv)
            unresolvedError("glGetColorTableParameterfv");
    

        *(void **)&real_glGetColorTableParameteriv = resolveGl("glGetColorTableParameteriv");
        if (!real_glGetColorTableParameteriv)
            unresolvedError("glGetColorTableParameteriv");
    

        *(void **)&real_glColorSubTable = resolveGl("glColorSubTable");
        if (!real_glColorSubTable)
            unresolvedError("glColorSubTable");
    

        *(void **)&real_glCopyColorSubTable = resolveGl("glCopyColorSubTable");
        if (!real_glCopyColorSubTable)
            unresolvedError("glCopyColorSubTable");
    

        *(void **)&real_glConvolutionFilter1D = resolveGl("glConvolutionFilter1D");
        if (!real_glConvolutionFilter1D)
            unresolvedError("glConvolutionFilter1D");
    

        *(void **)&real_glConvolutionFilter2D = resolveGl("glConvolutionFilter2D");
        if (!real_glConvolutionFilter2D)
            unresolvedError("glConvolutionFilter2D");
    

        *(void **)&real_glConvolutionParameterf = resolveGl("glConvolutionParameterf");
        if (!real_glConvolutionParameterf)
            unresolvedError("glConvolutionParameterf");
    

        *(void **)&real_glConvolutionParameterfv = resolveGl("glConvolutionParameterfv");
        if (!real_glConvolutionParameterfv)
            unresolvedError("glConvolutionParameterfv");
    

        *(void **)&real_glConvolutionParameteri = resolveGl("glConvolutionParameteri");
        if (!real_glConvolutionParameteri)
            unresolvedError("glConvolutionParameteri");
    

        *(void **)&real_glConvolutionParameteriv = resolveGl("glConvolutionParameteriv");
        if (!real_glConvolutionParameteriv)
            unresolvedError("glConvolutionParameteriv");
    

        *(void **)&real_glCopyConvolutionFilter1D = resolveGl("glCopyConvolutionFilter1D");
        if (!real_glCopyConvolutionFilter1D)
            unresolvedError("glCopyConvolutionFilter1D");
    

        *(void **)&real_glCopyConvolutionFilter2D = resolveGl("glCopyConvolutionFilter2D");
        if (!real_glCopyConvolutionFilter2D)
            unresolvedError("glCopyConvolutionFilter2D");
    

        *(void **)&real_glGetConvolutionFilter = resolveGl("glGetConvolutionFilter");
        if (!real_glGetConvolutionFilter)
            unresolvedError("glGetConvolutionFilter");
    

        *(void **)&real_glGetConvolutionParameterfv = resolveGl("glGetConvolutionParameterfv");
        if (!real_glGetConvolutionParameterfv)
            unresolvedError("glGetConvolutionParameterfv");
    

        *(void **)&real_glGetConvolutionParameteriv = resolveGl("glGetConvolutionParameteriv");
        if (!real_glGetConvolutionParameteriv)
            unresolvedError("glGetConvolutionParameteriv");
    

        *(void **)&real_glGetSeparableFilter = resolveGl("glGetSeparableFilter");
        if (!real_glGetSeparableFilter)
            unresolvedError("glGetSeparableFilter");
    

        *(void **)&real_glSeparableFilter2D = resolveGl("glSeparableFilter2D");
        if (!real_glSeparableFilter2D)
            unresolvedError("glSeparableFilter2D");
    

        *(void **)&real_glGetHistogram = resolveGl("glGetHistogram");
        if (!real_glGetHistogram)
            unresolvedError("glGetHistogram");
    

        *(void **)&real_glGetHistogramParameterfv = resolveGl("glGetHistogramParameterfv");
        if (!real_glGetHistogramParameterfv)
            unresolvedError("glGetHistogramParameterfv");
    

        *(void **)&real_glGetHistogramParameteriv = resolveGl("glGetHistogramParameteriv");
        if (!real_glGetHistogramParameteriv)
            unresolvedError("glGetHistogramParameteriv");
    

        *(void **)&real_glGetMinmax = resolveGl("glGetMinmax");
        if (!real_glGetMinmax)
            unresolvedError("glGetMinmax");
    

        *(void **)&real_glGetMinmaxParameterfv = resolveGl("glGetMinmaxParameterfv");
        if (!real_glGetMinmaxParameterfv)
            unresolvedError("glGetMinmaxParameterfv");
    

        *(void **)&real_glGetMinmaxParameteriv = resolveGl("glGetMinmaxParameteriv");
        if (!real_glGetMinmaxParameteriv)
            unresolvedError("glGetMinmaxParameteriv");
    

        *(void **)&real_glHistogram = resolveGl("glHistogram");
        if (!real_glHistogram)
            unresolvedError("glHistogram");
    

        *(void **)&real_glMinmax = resolveGl("glMinmax");
        if (!real_glMinmax)
            unresolvedError("glMinmax");
    

        *(void **)&real_glResetHistogram = resolveGl("glResetHistogram");
        if (!real_glResetHistogram)
            unresolvedError("glResetHistogram");
    

        *(void **)&real_glResetMinmax = resolveGl("glResetMinmax");
        if (!real_glResetMinmax)
            unresolvedError("glResetMinmax");
    

        *(void **)&real_glMultiDrawArraysIndirectCountARB = resolveGl("glMultiDrawArraysIndirectCountARB");
        if (!real_glMultiDrawArraysIndirectCountARB)
            unresolvedError("glMultiDrawArraysIndirectCountARB");
    

        *(void **)&real_glMultiDrawElementsIndirectCountARB = resolveGl("glMultiDrawElementsIndirectCountARB");
        if (!real_glMultiDrawElementsIndirectCountARB)
            unresolvedError("glMultiDrawElementsIndirectCountARB");
    

        *(void **)&real_glVertexAttribDivisorARB = resolveGl("glVertexAttribDivisorARB");
        if (!real_glVertexAttribDivisorARB)
            unresolvedError("glVertexAttribDivisorARB");
    

        *(void **)&real_glCurrentPaletteMatrixARB = resolveGl("glCurrentPaletteMatrixARB");
        if (!real_glCurrentPaletteMatrixARB)
            unresolvedError("glCurrentPaletteMatrixARB");
    

        *(void **)&real_glMatrixIndexubvARB = resolveGl("glMatrixIndexubvARB");
        if (!real_glMatrixIndexubvARB)
            unresolvedError("glMatrixIndexubvARB");
    

        *(void **)&real_glMatrixIndexusvARB = resolveGl("glMatrixIndexusvARB");
        if (!real_glMatrixIndexusvARB)
            unresolvedError("glMatrixIndexusvARB");
    

        *(void **)&real_glMatrixIndexuivARB = resolveGl("glMatrixIndexuivARB");
        if (!real_glMatrixIndexuivARB)
            unresolvedError("glMatrixIndexuivARB");
    

        *(void **)&real_glMatrixIndexPointerARB = resolveGl("glMatrixIndexPointerARB");
        if (!real_glMatrixIndexPointerARB)
            unresolvedError("glMatrixIndexPointerARB");
    

        *(void **)&real_glSampleCoverageARB = resolveGl("glSampleCoverageARB");
        if (!real_glSampleCoverageARB)
            unresolvedError("glSampleCoverageARB");
    

        *(void **)&real_glActiveTextureARB = resolveGl("glActiveTextureARB");
        if (!real_glActiveTextureARB)
            unresolvedError("glActiveTextureARB");
    

        *(void **)&real_glClientActiveTextureARB = resolveGl("glClientActiveTextureARB");
        if (!real_glClientActiveTextureARB)
            unresolvedError("glClientActiveTextureARB");
    

        *(void **)&real_glMultiTexCoord1dARB = resolveGl("glMultiTexCoord1dARB");
        if (!real_glMultiTexCoord1dARB)
            unresolvedError("glMultiTexCoord1dARB");
    

        *(void **)&real_glMultiTexCoord1dvARB = resolveGl("glMultiTexCoord1dvARB");
        if (!real_glMultiTexCoord1dvARB)
            unresolvedError("glMultiTexCoord1dvARB");
    

        *(void **)&real_glMultiTexCoord1fARB = resolveGl("glMultiTexCoord1fARB");
        if (!real_glMultiTexCoord1fARB)
            unresolvedError("glMultiTexCoord1fARB");
    

        *(void **)&real_glMultiTexCoord1fvARB = resolveGl("glMultiTexCoord1fvARB");
        if (!real_glMultiTexCoord1fvARB)
            unresolvedError("glMultiTexCoord1fvARB");
    

        *(void **)&real_glMultiTexCoord1iARB = resolveGl("glMultiTexCoord1iARB");
        if (!real_glMultiTexCoord1iARB)
            unresolvedError("glMultiTexCoord1iARB");
    

        *(void **)&real_glMultiTexCoord1ivARB = resolveGl("glMultiTexCoord1ivARB");
        if (!real_glMultiTexCoord1ivARB)
            unresolvedError("glMultiTexCoord1ivARB");
    

        *(void **)&real_glMultiTexCoord1sARB = resolveGl("glMultiTexCoord1sARB");
        if (!real_glMultiTexCoord1sARB)
            unresolvedError("glMultiTexCoord1sARB");
    

        *(void **)&real_glMultiTexCoord1svARB = resolveGl("glMultiTexCoord1svARB");
        if (!real_glMultiTexCoord1svARB)
            unresolvedError("glMultiTexCoord1svARB");
    

        *(void **)&real_glMultiTexCoord2dARB = resolveGl("glMultiTexCoord2dARB");
        if (!real_glMultiTexCoord2dARB)
            unresolvedError("glMultiTexCoord2dARB");
    

        *(void **)&real_glMultiTexCoord2dvARB = resolveGl("glMultiTexCoord2dvARB");
        if (!real_glMultiTexCoord2dvARB)
            unresolvedError("glMultiTexCoord2dvARB");
    

        *(void **)&real_glMultiTexCoord2fARB = resolveGl("glMultiTexCoord2fARB");
        if (!real_glMultiTexCoord2fARB)
            unresolvedError("glMultiTexCoord2fARB");
    

        *(void **)&real_glMultiTexCoord2fvARB = resolveGl("glMultiTexCoord2fvARB");
        if (!real_glMultiTexCoord2fvARB)
            unresolvedError("glMultiTexCoord2fvARB");
    

        *(void **)&real_glMultiTexCoord2iARB = resolveGl("glMultiTexCoord2iARB");
        if (!real_glMultiTexCoord2iARB)
            unresolvedError("glMultiTexCoord2iARB");
    

        *(void **)&real_glMultiTexCoord2ivARB = resolveGl("glMultiTexCoord2ivARB");
        if (!real_glMultiTexCoord2ivARB)
            unresolvedError("glMultiTexCoord2ivARB");
    

        *(void **)&real_glMultiTexCoord2sARB = resolveGl("glMultiTexCoord2sARB");
        if (!real_glMultiTexCoord2sARB)
            unresolvedError("glMultiTexCoord2sARB");
    

        *(void **)&real_glMultiTexCoord2svARB = resolveGl("glMultiTexCoord2svARB");
        if (!real_glMultiTexCoord2svARB)
            unresolvedError("glMultiTexCoord2svARB");
    

        *(void **)&real_glMultiTexCoord3dARB = resolveGl("glMultiTexCoord3dARB");
        if (!real_glMultiTexCoord3dARB)
            unresolvedError("glMultiTexCoord3dARB");
    

        *(void **)&real_glMultiTexCoord3dvARB = resolveGl("glMultiTexCoord3dvARB");
        if (!real_glMultiTexCoord3dvARB)
            unresolvedError("glMultiTexCoord3dvARB");
    

        *(void **)&real_glMultiTexCoord3fARB = resolveGl("glMultiTexCoord3fARB");
        if (!real_glMultiTexCoord3fARB)
            unresolvedError("glMultiTexCoord3fARB");
    

        *(void **)&real_glMultiTexCoord3fvARB = resolveGl("glMultiTexCoord3fvARB");
        if (!real_glMultiTexCoord3fvARB)
            unresolvedError("glMultiTexCoord3fvARB");
    

        *(void **)&real_glMultiTexCoord3iARB = resolveGl("glMultiTexCoord3iARB");
        if (!real_glMultiTexCoord3iARB)
            unresolvedError("glMultiTexCoord3iARB");
    

        *(void **)&real_glMultiTexCoord3ivARB = resolveGl("glMultiTexCoord3ivARB");
        if (!real_glMultiTexCoord3ivARB)
            unresolvedError("glMultiTexCoord3ivARB");
    

        *(void **)&real_glMultiTexCoord3sARB = resolveGl("glMultiTexCoord3sARB");
        if (!real_glMultiTexCoord3sARB)
            unresolvedError("glMultiTexCoord3sARB");
    

        *(void **)&real_glMultiTexCoord3svARB = resolveGl("glMultiTexCoord3svARB");
        if (!real_glMultiTexCoord3svARB)
            unresolvedError("glMultiTexCoord3svARB");
    

        *(void **)&real_glMultiTexCoord4dARB = resolveGl("glMultiTexCoord4dARB");
        if (!real_glMultiTexCoord4dARB)
            unresolvedError("glMultiTexCoord4dARB");
    

        *(void **)&real_glMultiTexCoord4dvARB = resolveGl("glMultiTexCoord4dvARB");
        if (!real_glMultiTexCoord4dvARB)
            unresolvedError("glMultiTexCoord4dvARB");
    

        *(void **)&real_glMultiTexCoord4fARB = resolveGl("glMultiTexCoord4fARB");
        if (!real_glMultiTexCoord4fARB)
            unresolvedError("glMultiTexCoord4fARB");
    

        *(void **)&real_glMultiTexCoord4fvARB = resolveGl("glMultiTexCoord4fvARB");
        if (!real_glMultiTexCoord4fvARB)
            unresolvedError("glMultiTexCoord4fvARB");
    

        *(void **)&real_glMultiTexCoord4iARB = resolveGl("glMultiTexCoord4iARB");
        if (!real_glMultiTexCoord4iARB)
            unresolvedError("glMultiTexCoord4iARB");
    

        *(void **)&real_glMultiTexCoord4ivARB = resolveGl("glMultiTexCoord4ivARB");
        if (!real_glMultiTexCoord4ivARB)
            unresolvedError("glMultiTexCoord4ivARB");
    

        *(void **)&real_glMultiTexCoord4sARB = resolveGl("glMultiTexCoord4sARB");
        if (!real_glMultiTexCoord4sARB)
            unresolvedError("glMultiTexCoord4sARB");
    

        *(void **)&real_glMultiTexCoord4svARB = resolveGl("glMultiTexCoord4svARB");
        if (!real_glMultiTexCoord4svARB)
            unresolvedError("glMultiTexCoord4svARB");
    

        *(void **)&real_glGenQueriesARB = resolveGl("glGenQueriesARB");
        if (!real_glGenQueriesARB)
            unresolvedError("glGenQueriesARB");
    

        *(void **)&real_glDeleteQueriesARB = resolveGl("glDeleteQueriesARB");
        if (!real_glDeleteQueriesARB)
            unresolvedError("glDeleteQueriesARB");
    

        *(void **)&real_glIsQueryARB = resolveGl("glIsQueryARB");
        if (!real_glIsQueryARB)
            unresolvedError("glIsQueryARB");
    

        *(void **)&real_glBeginQueryARB = resolveGl("glBeginQueryARB");
        if (!real_glBeginQueryARB)
            unresolvedError("glBeginQueryARB");
    

        *(void **)&real_glEndQueryARB = resolveGl("glEndQueryARB");
        if (!real_glEndQueryARB)
            unresolvedError("glEndQueryARB");
    

        *(void **)&real_glGetQueryivARB = resolveGl("glGetQueryivARB");
        if (!real_glGetQueryivARB)
            unresolvedError("glGetQueryivARB");
    

        *(void **)&real_glGetQueryObjectivARB = resolveGl("glGetQueryObjectivARB");
        if (!real_glGetQueryObjectivARB)
            unresolvedError("glGetQueryObjectivARB");
    

        *(void **)&real_glGetQueryObjectuivARB = resolveGl("glGetQueryObjectuivARB");
        if (!real_glGetQueryObjectuivARB)
            unresolvedError("glGetQueryObjectuivARB");
    

        *(void **)&real_glMaxShaderCompilerThreadsARB = resolveGl("glMaxShaderCompilerThreadsARB");
        if (!real_glMaxShaderCompilerThreadsARB)
            unresolvedError("glMaxShaderCompilerThreadsARB");
    

        *(void **)&real_glPointParameterfARB = resolveGl("glPointParameterfARB");
        if (!real_glPointParameterfARB)
            unresolvedError("glPointParameterfARB");
    

        *(void **)&real_glPointParameterfvARB = resolveGl("glPointParameterfvARB");
        if (!real_glPointParameterfvARB)
            unresolvedError("glPointParameterfvARB");
    

        *(void **)&real_glGetGraphicsResetStatusARB = resolveGl("glGetGraphicsResetStatusARB");
        if (!real_glGetGraphicsResetStatusARB)
            unresolvedError("glGetGraphicsResetStatusARB");
    

        *(void **)&real_glGetnTexImageARB = resolveGl("glGetnTexImageARB");
        if (!real_glGetnTexImageARB)
            unresolvedError("glGetnTexImageARB");
    

        *(void **)&real_glReadnPixelsARB = resolveGl("glReadnPixelsARB");
        if (!real_glReadnPixelsARB)
            unresolvedError("glReadnPixelsARB");
    

        *(void **)&real_glGetnCompressedTexImageARB = resolveGl("glGetnCompressedTexImageARB");
        if (!real_glGetnCompressedTexImageARB)
            unresolvedError("glGetnCompressedTexImageARB");
    

        *(void **)&real_glGetnUniformfvARB = resolveGl("glGetnUniformfvARB");
        if (!real_glGetnUniformfvARB)
            unresolvedError("glGetnUniformfvARB");
    

        *(void **)&real_glGetnUniformivARB = resolveGl("glGetnUniformivARB");
        if (!real_glGetnUniformivARB)
            unresolvedError("glGetnUniformivARB");
    

        *(void **)&real_glGetnUniformuivARB = resolveGl("glGetnUniformuivARB");
        if (!real_glGetnUniformuivARB)
            unresolvedError("glGetnUniformuivARB");
    

        *(void **)&real_glGetnUniformdvARB = resolveGl("glGetnUniformdvARB");
        if (!real_glGetnUniformdvARB)
            unresolvedError("glGetnUniformdvARB");
    

        *(void **)&real_glGetnMapdvARB = resolveGl("glGetnMapdvARB");
        if (!real_glGetnMapdvARB)
            unresolvedError("glGetnMapdvARB");
    

        *(void **)&real_glGetnMapfvARB = resolveGl("glGetnMapfvARB");
        if (!real_glGetnMapfvARB)
            unresolvedError("glGetnMapfvARB");
    

        *(void **)&real_glGetnMapivARB = resolveGl("glGetnMapivARB");
        if (!real_glGetnMapivARB)
            unresolvedError("glGetnMapivARB");
    

        *(void **)&real_glGetnPixelMapfvARB = resolveGl("glGetnPixelMapfvARB");
        if (!real_glGetnPixelMapfvARB)
            unresolvedError("glGetnPixelMapfvARB");
    

        *(void **)&real_glGetnPixelMapuivARB = resolveGl("glGetnPixelMapuivARB");
        if (!real_glGetnPixelMapuivARB)
            unresolvedError("glGetnPixelMapuivARB");
    

        *(void **)&real_glGetnPixelMapusvARB = resolveGl("glGetnPixelMapusvARB");
        if (!real_glGetnPixelMapusvARB)
            unresolvedError("glGetnPixelMapusvARB");
    

        *(void **)&real_glGetnPolygonStippleARB = resolveGl("glGetnPolygonStippleARB");
        if (!real_glGetnPolygonStippleARB)
            unresolvedError("glGetnPolygonStippleARB");
    

        *(void **)&real_glGetnColorTableARB = resolveGl("glGetnColorTableARB");
        if (!real_glGetnColorTableARB)
            unresolvedError("glGetnColorTableARB");
    

        *(void **)&real_glGetnConvolutionFilterARB = resolveGl("glGetnConvolutionFilterARB");
        if (!real_glGetnConvolutionFilterARB)
            unresolvedError("glGetnConvolutionFilterARB");
    

        *(void **)&real_glGetnSeparableFilterARB = resolveGl("glGetnSeparableFilterARB");
        if (!real_glGetnSeparableFilterARB)
            unresolvedError("glGetnSeparableFilterARB");
    

        *(void **)&real_glGetnHistogramARB = resolveGl("glGetnHistogramARB");
        if (!real_glGetnHistogramARB)
            unresolvedError("glGetnHistogramARB");
    

        *(void **)&real_glGetnMinmaxARB = resolveGl("glGetnMinmaxARB");
        if (!real_glGetnMinmaxARB)
            unresolvedError("glGetnMinmaxARB");
    

        *(void **)&real_glFramebufferSampleLocationsfvARB = resolveGl("glFramebufferSampleLocationsfvARB");
        if (!real_glFramebufferSampleLocationsfvARB)
            unresolvedError("glFramebufferSampleLocationsfvARB");
    

        *(void **)&real_glNamedFramebufferSampleLocationsfvARB = resolveGl("glNamedFramebufferSampleLocationsfvARB");
        if (!real_glNamedFramebufferSampleLocationsfvARB)
            unresolvedError("glNamedFramebufferSampleLocationsfvARB");
    

        *(void **)&real_glEvaluateDepthValuesARB = resolveGl("glEvaluateDepthValuesARB");
        if (!real_glEvaluateDepthValuesARB)
            unresolvedError("glEvaluateDepthValuesARB");
    

        *(void **)&real_glMinSampleShadingARB = resolveGl("glMinSampleShadingARB");
        if (!real_glMinSampleShadingARB)
            unresolvedError("glMinSampleShadingARB");
    

        *(void **)&real_glDeleteObjectARB = resolveGl("glDeleteObjectARB");
        if (!real_glDeleteObjectARB)
            unresolvedError("glDeleteObjectARB");
    

        *(void **)&real_glGetHandleARB = resolveGl("glGetHandleARB");
        if (!real_glGetHandleARB)
            unresolvedError("glGetHandleARB");
    

        *(void **)&real_glDetachObjectARB = resolveGl("glDetachObjectARB");
        if (!real_glDetachObjectARB)
            unresolvedError("glDetachObjectARB");
    

        *(void **)&real_glCreateShaderObjectARB = resolveGl("glCreateShaderObjectARB");
        if (!real_glCreateShaderObjectARB)
            unresolvedError("glCreateShaderObjectARB");
    

        *(void **)&real_glShaderSourceARB = resolveGl("glShaderSourceARB");
        if (!real_glShaderSourceARB)
            unresolvedError("glShaderSourceARB");
    

        *(void **)&real_glCompileShaderARB = resolveGl("glCompileShaderARB");
        if (!real_glCompileShaderARB)
            unresolvedError("glCompileShaderARB");
    

        *(void **)&real_glCreateProgramObjectARB = resolveGl("glCreateProgramObjectARB");
        if (!real_glCreateProgramObjectARB)
            unresolvedError("glCreateProgramObjectARB");
    

        *(void **)&real_glAttachObjectARB = resolveGl("glAttachObjectARB");
        if (!real_glAttachObjectARB)
            unresolvedError("glAttachObjectARB");
    

        *(void **)&real_glLinkProgramARB = resolveGl("glLinkProgramARB");
        if (!real_glLinkProgramARB)
            unresolvedError("glLinkProgramARB");
    

        *(void **)&real_glUseProgramObjectARB = resolveGl("glUseProgramObjectARB");
        if (!real_glUseProgramObjectARB)
            unresolvedError("glUseProgramObjectARB");
    

        *(void **)&real_glValidateProgramARB = resolveGl("glValidateProgramARB");
        if (!real_glValidateProgramARB)
            unresolvedError("glValidateProgramARB");
    

        *(void **)&real_glUniform1fARB = resolveGl("glUniform1fARB");
        if (!real_glUniform1fARB)
            unresolvedError("glUniform1fARB");
    

        *(void **)&real_glUniform2fARB = resolveGl("glUniform2fARB");
        if (!real_glUniform2fARB)
            unresolvedError("glUniform2fARB");
    

        *(void **)&real_glUniform3fARB = resolveGl("glUniform3fARB");
        if (!real_glUniform3fARB)
            unresolvedError("glUniform3fARB");
    

        *(void **)&real_glUniform4fARB = resolveGl("glUniform4fARB");
        if (!real_glUniform4fARB)
            unresolvedError("glUniform4fARB");
    

        *(void **)&real_glUniform1iARB = resolveGl("glUniform1iARB");
        if (!real_glUniform1iARB)
            unresolvedError("glUniform1iARB");
    

        *(void **)&real_glUniform2iARB = resolveGl("glUniform2iARB");
        if (!real_glUniform2iARB)
            unresolvedError("glUniform2iARB");
    

        *(void **)&real_glUniform3iARB = resolveGl("glUniform3iARB");
        if (!real_glUniform3iARB)
            unresolvedError("glUniform3iARB");
    

        *(void **)&real_glUniform4iARB = resolveGl("glUniform4iARB");
        if (!real_glUniform4iARB)
            unresolvedError("glUniform4iARB");
    

        *(void **)&real_glUniform1fvARB = resolveGl("glUniform1fvARB");
        if (!real_glUniform1fvARB)
            unresolvedError("glUniform1fvARB");
    

        *(void **)&real_glUniform2fvARB = resolveGl("glUniform2fvARB");
        if (!real_glUniform2fvARB)
            unresolvedError("glUniform2fvARB");
    

        *(void **)&real_glUniform3fvARB = resolveGl("glUniform3fvARB");
        if (!real_glUniform3fvARB)
            unresolvedError("glUniform3fvARB");
    

        *(void **)&real_glUniform4fvARB = resolveGl("glUniform4fvARB");
        if (!real_glUniform4fvARB)
            unresolvedError("glUniform4fvARB");
    

        *(void **)&real_glUniform1ivARB = resolveGl("glUniform1ivARB");
        if (!real_glUniform1ivARB)
            unresolvedError("glUniform1ivARB");
    

        *(void **)&real_glUniform2ivARB = resolveGl("glUniform2ivARB");
        if (!real_glUniform2ivARB)
            unresolvedError("glUniform2ivARB");
    

        *(void **)&real_glUniform3ivARB = resolveGl("glUniform3ivARB");
        if (!real_glUniform3ivARB)
            unresolvedError("glUniform3ivARB");
    

        *(void **)&real_glUniform4ivARB = resolveGl("glUniform4ivARB");
        if (!real_glUniform4ivARB)
            unresolvedError("glUniform4ivARB");
    

        *(void **)&real_glUniformMatrix2fvARB = resolveGl("glUniformMatrix2fvARB");
        if (!real_glUniformMatrix2fvARB)
            unresolvedError("glUniformMatrix2fvARB");
    

        *(void **)&real_glUniformMatrix3fvARB = resolveGl("glUniformMatrix3fvARB");
        if (!real_glUniformMatrix3fvARB)
            unresolvedError("glUniformMatrix3fvARB");
    

        *(void **)&real_glUniformMatrix4fvARB = resolveGl("glUniformMatrix4fvARB");
        if (!real_glUniformMatrix4fvARB)
            unresolvedError("glUniformMatrix4fvARB");
    

        *(void **)&real_glGetObjectParameterfvARB = resolveGl("glGetObjectParameterfvARB");
        if (!real_glGetObjectParameterfvARB)
            unresolvedError("glGetObjectParameterfvARB");
    

        *(void **)&real_glGetObjectParameterivARB = resolveGl("glGetObjectParameterivARB");
        if (!real_glGetObjectParameterivARB)
            unresolvedError("glGetObjectParameterivARB");
    

        *(void **)&real_glGetInfoLogARB = resolveGl("glGetInfoLogARB");
        if (!real_glGetInfoLogARB)
            unresolvedError("glGetInfoLogARB");
    

        *(void **)&real_glGetAttachedObjectsARB = resolveGl("glGetAttachedObjectsARB");
        if (!real_glGetAttachedObjectsARB)
            unresolvedError("glGetAttachedObjectsARB");
    

        *(void **)&real_glGetUniformLocationARB = resolveGl("glGetUniformLocationARB");
        if (!real_glGetUniformLocationARB)
            unresolvedError("glGetUniformLocationARB");
    

        *(void **)&real_glGetActiveUniformARB = resolveGl("glGetActiveUniformARB");
        if (!real_glGetActiveUniformARB)
            unresolvedError("glGetActiveUniformARB");
    

        *(void **)&real_glGetUniformfvARB = resolveGl("glGetUniformfvARB");
        if (!real_glGetUniformfvARB)
            unresolvedError("glGetUniformfvARB");
    

        *(void **)&real_glGetUniformivARB = resolveGl("glGetUniformivARB");
        if (!real_glGetUniformivARB)
            unresolvedError("glGetUniformivARB");
    

        *(void **)&real_glGetShaderSourceARB = resolveGl("glGetShaderSourceARB");
        if (!real_glGetShaderSourceARB)
            unresolvedError("glGetShaderSourceARB");
    

        *(void **)&real_glNamedStringARB = resolveGl("glNamedStringARB");
        if (!real_glNamedStringARB)
            unresolvedError("glNamedStringARB");
    

        *(void **)&real_glDeleteNamedStringARB = resolveGl("glDeleteNamedStringARB");
        if (!real_glDeleteNamedStringARB)
            unresolvedError("glDeleteNamedStringARB");
    

        *(void **)&real_glCompileShaderIncludeARB = resolveGl("glCompileShaderIncludeARB");
        if (!real_glCompileShaderIncludeARB)
            unresolvedError("glCompileShaderIncludeARB");
    

        *(void **)&real_glIsNamedStringARB = resolveGl("glIsNamedStringARB");
        if (!real_glIsNamedStringARB)
            unresolvedError("glIsNamedStringARB");
    

        *(void **)&real_glGetNamedStringARB = resolveGl("glGetNamedStringARB");
        if (!real_glGetNamedStringARB)
            unresolvedError("glGetNamedStringARB");
    

        *(void **)&real_glGetNamedStringivARB = resolveGl("glGetNamedStringivARB");
        if (!real_glGetNamedStringivARB)
            unresolvedError("glGetNamedStringivARB");
    

        *(void **)&real_glBufferPageCommitmentARB = resolveGl("glBufferPageCommitmentARB");
        if (!real_glBufferPageCommitmentARB)
            unresolvedError("glBufferPageCommitmentARB");
    

        *(void **)&real_glNamedBufferPageCommitmentEXT = resolveGl("glNamedBufferPageCommitmentEXT");
        if (!real_glNamedBufferPageCommitmentEXT)
            unresolvedError("glNamedBufferPageCommitmentEXT");
    

        *(void **)&real_glNamedBufferPageCommitmentARB = resolveGl("glNamedBufferPageCommitmentARB");
        if (!real_glNamedBufferPageCommitmentARB)
            unresolvedError("glNamedBufferPageCommitmentARB");
    

        *(void **)&real_glTexPageCommitmentARB = resolveGl("glTexPageCommitmentARB");
        if (!real_glTexPageCommitmentARB)
            unresolvedError("glTexPageCommitmentARB");
    

        *(void **)&real_glTexBufferARB = resolveGl("glTexBufferARB");
        if (!real_glTexBufferARB)
            unresolvedError("glTexBufferARB");
    

        *(void **)&real_glCompressedTexImage3DARB = resolveGl("glCompressedTexImage3DARB");
        if (!real_glCompressedTexImage3DARB)
            unresolvedError("glCompressedTexImage3DARB");
    

        *(void **)&real_glCompressedTexImage2DARB = resolveGl("glCompressedTexImage2DARB");
        if (!real_glCompressedTexImage2DARB)
            unresolvedError("glCompressedTexImage2DARB");
    

        *(void **)&real_glCompressedTexImage1DARB = resolveGl("glCompressedTexImage1DARB");
        if (!real_glCompressedTexImage1DARB)
            unresolvedError("glCompressedTexImage1DARB");
    

        *(void **)&real_glCompressedTexSubImage3DARB = resolveGl("glCompressedTexSubImage3DARB");
        if (!real_glCompressedTexSubImage3DARB)
            unresolvedError("glCompressedTexSubImage3DARB");
    

        *(void **)&real_glCompressedTexSubImage2DARB = resolveGl("glCompressedTexSubImage2DARB");
        if (!real_glCompressedTexSubImage2DARB)
            unresolvedError("glCompressedTexSubImage2DARB");
    

        *(void **)&real_glCompressedTexSubImage1DARB = resolveGl("glCompressedTexSubImage1DARB");
        if (!real_glCompressedTexSubImage1DARB)
            unresolvedError("glCompressedTexSubImage1DARB");
    

        *(void **)&real_glGetCompressedTexImageARB = resolveGl("glGetCompressedTexImageARB");
        if (!real_glGetCompressedTexImageARB)
            unresolvedError("glGetCompressedTexImageARB");
    

        *(void **)&real_glLoadTransposeMatrixfARB = resolveGl("glLoadTransposeMatrixfARB");
        if (!real_glLoadTransposeMatrixfARB)
            unresolvedError("glLoadTransposeMatrixfARB");
    

        *(void **)&real_glLoadTransposeMatrixdARB = resolveGl("glLoadTransposeMatrixdARB");
        if (!real_glLoadTransposeMatrixdARB)
            unresolvedError("glLoadTransposeMatrixdARB");
    

        *(void **)&real_glMultTransposeMatrixfARB = resolveGl("glMultTransposeMatrixfARB");
        if (!real_glMultTransposeMatrixfARB)
            unresolvedError("glMultTransposeMatrixfARB");
    

        *(void **)&real_glMultTransposeMatrixdARB = resolveGl("glMultTransposeMatrixdARB");
        if (!real_glMultTransposeMatrixdARB)
            unresolvedError("glMultTransposeMatrixdARB");
    

        *(void **)&real_glWeightbvARB = resolveGl("glWeightbvARB");
        if (!real_glWeightbvARB)
            unresolvedError("glWeightbvARB");
    

        *(void **)&real_glWeightsvARB = resolveGl("glWeightsvARB");
        if (!real_glWeightsvARB)
            unresolvedError("glWeightsvARB");
    

        *(void **)&real_glWeightivARB = resolveGl("glWeightivARB");
        if (!real_glWeightivARB)
            unresolvedError("glWeightivARB");
    

        *(void **)&real_glWeightfvARB = resolveGl("glWeightfvARB");
        if (!real_glWeightfvARB)
            unresolvedError("glWeightfvARB");
    

        *(void **)&real_glWeightdvARB = resolveGl("glWeightdvARB");
        if (!real_glWeightdvARB)
            unresolvedError("glWeightdvARB");
    

        *(void **)&real_glWeightubvARB = resolveGl("glWeightubvARB");
        if (!real_glWeightubvARB)
            unresolvedError("glWeightubvARB");
    

        *(void **)&real_glWeightusvARB = resolveGl("glWeightusvARB");
        if (!real_glWeightusvARB)
            unresolvedError("glWeightusvARB");
    

        *(void **)&real_glWeightuivARB = resolveGl("glWeightuivARB");
        if (!real_glWeightuivARB)
            unresolvedError("glWeightuivARB");
    

        *(void **)&real_glWeightPointerARB = resolveGl("glWeightPointerARB");
        if (!real_glWeightPointerARB)
            unresolvedError("glWeightPointerARB");
    

        *(void **)&real_glVertexBlendARB = resolveGl("glVertexBlendARB");
        if (!real_glVertexBlendARB)
            unresolvedError("glVertexBlendARB");
    

        *(void **)&real_glBindBufferARB = resolveGl("glBindBufferARB");
        if (!real_glBindBufferARB)
            unresolvedError("glBindBufferARB");
    

        *(void **)&real_glDeleteBuffersARB = resolveGl("glDeleteBuffersARB");
        if (!real_glDeleteBuffersARB)
            unresolvedError("glDeleteBuffersARB");
    

        *(void **)&real_glGenBuffersARB = resolveGl("glGenBuffersARB");
        if (!real_glGenBuffersARB)
            unresolvedError("glGenBuffersARB");
    

        *(void **)&real_glIsBufferARB = resolveGl("glIsBufferARB");
        if (!real_glIsBufferARB)
            unresolvedError("glIsBufferARB");
    

        *(void **)&real_glBufferDataARB = resolveGl("glBufferDataARB");
        if (!real_glBufferDataARB)
            unresolvedError("glBufferDataARB");
    

        *(void **)&real_glBufferSubDataARB = resolveGl("glBufferSubDataARB");
        if (!real_glBufferSubDataARB)
            unresolvedError("glBufferSubDataARB");
    

        *(void **)&real_glGetBufferSubDataARB = resolveGl("glGetBufferSubDataARB");
        if (!real_glGetBufferSubDataARB)
            unresolvedError("glGetBufferSubDataARB");
    

        *(void **)&real_glMapBufferARB = resolveGl("glMapBufferARB");
        if (!real_glMapBufferARB)
            unresolvedError("glMapBufferARB");
    

        *(void **)&real_glUnmapBufferARB = resolveGl("glUnmapBufferARB");
        if (!real_glUnmapBufferARB)
            unresolvedError("glUnmapBufferARB");
    

        *(void **)&real_glGetBufferParameterivARB = resolveGl("glGetBufferParameterivARB");
        if (!real_glGetBufferParameterivARB)
            unresolvedError("glGetBufferParameterivARB");
    

        *(void **)&real_glGetBufferPointervARB = resolveGl("glGetBufferPointervARB");
        if (!real_glGetBufferPointervARB)
            unresolvedError("glGetBufferPointervARB");
    

        *(void **)&real_glVertexAttrib1dARB = resolveGl("glVertexAttrib1dARB");
        if (!real_glVertexAttrib1dARB)
            unresolvedError("glVertexAttrib1dARB");
    

        *(void **)&real_glVertexAttrib1dvARB = resolveGl("glVertexAttrib1dvARB");
        if (!real_glVertexAttrib1dvARB)
            unresolvedError("glVertexAttrib1dvARB");
    

        *(void **)&real_glVertexAttrib1fARB = resolveGl("glVertexAttrib1fARB");
        if (!real_glVertexAttrib1fARB)
            unresolvedError("glVertexAttrib1fARB");
    

        *(void **)&real_glVertexAttrib1fvARB = resolveGl("glVertexAttrib1fvARB");
        if (!real_glVertexAttrib1fvARB)
            unresolvedError("glVertexAttrib1fvARB");
    

        *(void **)&real_glVertexAttrib1sARB = resolveGl("glVertexAttrib1sARB");
        if (!real_glVertexAttrib1sARB)
            unresolvedError("glVertexAttrib1sARB");
    

        *(void **)&real_glVertexAttrib1svARB = resolveGl("glVertexAttrib1svARB");
        if (!real_glVertexAttrib1svARB)
            unresolvedError("glVertexAttrib1svARB");
    

        *(void **)&real_glVertexAttrib2dARB = resolveGl("glVertexAttrib2dARB");
        if (!real_glVertexAttrib2dARB)
            unresolvedError("glVertexAttrib2dARB");
    

        *(void **)&real_glVertexAttrib2dvARB = resolveGl("glVertexAttrib2dvARB");
        if (!real_glVertexAttrib2dvARB)
            unresolvedError("glVertexAttrib2dvARB");
    

        *(void **)&real_glVertexAttrib2fARB = resolveGl("glVertexAttrib2fARB");
        if (!real_glVertexAttrib2fARB)
            unresolvedError("glVertexAttrib2fARB");
    

        *(void **)&real_glVertexAttrib2fvARB = resolveGl("glVertexAttrib2fvARB");
        if (!real_glVertexAttrib2fvARB)
            unresolvedError("glVertexAttrib2fvARB");
    

        *(void **)&real_glVertexAttrib2sARB = resolveGl("glVertexAttrib2sARB");
        if (!real_glVertexAttrib2sARB)
            unresolvedError("glVertexAttrib2sARB");
    

        *(void **)&real_glVertexAttrib2svARB = resolveGl("glVertexAttrib2svARB");
        if (!real_glVertexAttrib2svARB)
            unresolvedError("glVertexAttrib2svARB");
    

        *(void **)&real_glVertexAttrib3dARB = resolveGl("glVertexAttrib3dARB");
        if (!real_glVertexAttrib3dARB)
            unresolvedError("glVertexAttrib3dARB");
    

        *(void **)&real_glVertexAttrib3dvARB = resolveGl("glVertexAttrib3dvARB");
        if (!real_glVertexAttrib3dvARB)
            unresolvedError("glVertexAttrib3dvARB");
    

        *(void **)&real_glVertexAttrib3fARB = resolveGl("glVertexAttrib3fARB");
        if (!real_glVertexAttrib3fARB)
            unresolvedError("glVertexAttrib3fARB");
    

        *(void **)&real_glVertexAttrib3fvARB = resolveGl("glVertexAttrib3fvARB");
        if (!real_glVertexAttrib3fvARB)
            unresolvedError("glVertexAttrib3fvARB");
    

        *(void **)&real_glVertexAttrib3sARB = resolveGl("glVertexAttrib3sARB");
        if (!real_glVertexAttrib3sARB)
            unresolvedError("glVertexAttrib3sARB");
    

        *(void **)&real_glVertexAttrib3svARB = resolveGl("glVertexAttrib3svARB");
        if (!real_glVertexAttrib3svARB)
            unresolvedError("glVertexAttrib3svARB");
    

        *(void **)&real_glVertexAttrib4NbvARB = resolveGl("glVertexAttrib4NbvARB");
        if (!real_glVertexAttrib4NbvARB)
            unresolvedError("glVertexAttrib4NbvARB");
    

        *(void **)&real_glVertexAttrib4NivARB = resolveGl("glVertexAttrib4NivARB");
        if (!real_glVertexAttrib4NivARB)
            unresolvedError("glVertexAttrib4NivARB");
    

        *(void **)&real_glVertexAttrib4NsvARB = resolveGl("glVertexAttrib4NsvARB");
        if (!real_glVertexAttrib4NsvARB)
            unresolvedError("glVertexAttrib4NsvARB");
    

        *(void **)&real_glVertexAttrib4NubARB = resolveGl("glVertexAttrib4NubARB");
        if (!real_glVertexAttrib4NubARB)
            unresolvedError("glVertexAttrib4NubARB");
    

        *(void **)&real_glVertexAttrib4NubvARB = resolveGl("glVertexAttrib4NubvARB");
        if (!real_glVertexAttrib4NubvARB)
            unresolvedError("glVertexAttrib4NubvARB");
    

        *(void **)&real_glVertexAttrib4NuivARB = resolveGl("glVertexAttrib4NuivARB");
        if (!real_glVertexAttrib4NuivARB)
            unresolvedError("glVertexAttrib4NuivARB");
    

        *(void **)&real_glVertexAttrib4NusvARB = resolveGl("glVertexAttrib4NusvARB");
        if (!real_glVertexAttrib4NusvARB)
            unresolvedError("glVertexAttrib4NusvARB");
    

        *(void **)&real_glVertexAttrib4bvARB = resolveGl("glVertexAttrib4bvARB");
        if (!real_glVertexAttrib4bvARB)
            unresolvedError("glVertexAttrib4bvARB");
    

        *(void **)&real_glVertexAttrib4dARB = resolveGl("glVertexAttrib4dARB");
        if (!real_glVertexAttrib4dARB)
            unresolvedError("glVertexAttrib4dARB");
    

        *(void **)&real_glVertexAttrib4dvARB = resolveGl("glVertexAttrib4dvARB");
        if (!real_glVertexAttrib4dvARB)
            unresolvedError("glVertexAttrib4dvARB");
    

        *(void **)&real_glVertexAttrib4fARB = resolveGl("glVertexAttrib4fARB");
        if (!real_glVertexAttrib4fARB)
            unresolvedError("glVertexAttrib4fARB");
    

        *(void **)&real_glVertexAttrib4fvARB = resolveGl("glVertexAttrib4fvARB");
        if (!real_glVertexAttrib4fvARB)
            unresolvedError("glVertexAttrib4fvARB");
    

        *(void **)&real_glVertexAttrib4ivARB = resolveGl("glVertexAttrib4ivARB");
        if (!real_glVertexAttrib4ivARB)
            unresolvedError("glVertexAttrib4ivARB");
    

        *(void **)&real_glVertexAttrib4sARB = resolveGl("glVertexAttrib4sARB");
        if (!real_glVertexAttrib4sARB)
            unresolvedError("glVertexAttrib4sARB");
    

        *(void **)&real_glVertexAttrib4svARB = resolveGl("glVertexAttrib4svARB");
        if (!real_glVertexAttrib4svARB)
            unresolvedError("glVertexAttrib4svARB");
    

        *(void **)&real_glVertexAttrib4ubvARB = resolveGl("glVertexAttrib4ubvARB");
        if (!real_glVertexAttrib4ubvARB)
            unresolvedError("glVertexAttrib4ubvARB");
    

        *(void **)&real_glVertexAttrib4uivARB = resolveGl("glVertexAttrib4uivARB");
        if (!real_glVertexAttrib4uivARB)
            unresolvedError("glVertexAttrib4uivARB");
    

        *(void **)&real_glVertexAttrib4usvARB = resolveGl("glVertexAttrib4usvARB");
        if (!real_glVertexAttrib4usvARB)
            unresolvedError("glVertexAttrib4usvARB");
    

        *(void **)&real_glVertexAttribPointerARB = resolveGl("glVertexAttribPointerARB");
        if (!real_glVertexAttribPointerARB)
            unresolvedError("glVertexAttribPointerARB");
    

        *(void **)&real_glEnableVertexAttribArrayARB = resolveGl("glEnableVertexAttribArrayARB");
        if (!real_glEnableVertexAttribArrayARB)
            unresolvedError("glEnableVertexAttribArrayARB");
    

        *(void **)&real_glDisableVertexAttribArrayARB = resolveGl("glDisableVertexAttribArrayARB");
        if (!real_glDisableVertexAttribArrayARB)
            unresolvedError("glDisableVertexAttribArrayARB");
    

        *(void **)&real_glGetVertexAttribdvARB = resolveGl("glGetVertexAttribdvARB");
        if (!real_glGetVertexAttribdvARB)
            unresolvedError("glGetVertexAttribdvARB");
    

        *(void **)&real_glGetVertexAttribfvARB = resolveGl("glGetVertexAttribfvARB");
        if (!real_glGetVertexAttribfvARB)
            unresolvedError("glGetVertexAttribfvARB");
    

        *(void **)&real_glGetVertexAttribivARB = resolveGl("glGetVertexAttribivARB");
        if (!real_glGetVertexAttribivARB)
            unresolvedError("glGetVertexAttribivARB");
    

        *(void **)&real_glGetVertexAttribPointervARB = resolveGl("glGetVertexAttribPointervARB");
        if (!real_glGetVertexAttribPointervARB)
            unresolvedError("glGetVertexAttribPointervARB");
    

        *(void **)&real_glBindAttribLocationARB = resolveGl("glBindAttribLocationARB");
        if (!real_glBindAttribLocationARB)
            unresolvedError("glBindAttribLocationARB");
    

        *(void **)&real_glGetActiveAttribARB = resolveGl("glGetActiveAttribARB");
        if (!real_glGetActiveAttribARB)
            unresolvedError("glGetActiveAttribARB");
    

        *(void **)&real_glGetAttribLocationARB = resolveGl("glGetAttribLocationARB");
        if (!real_glGetAttribLocationARB)
            unresolvedError("glGetAttribLocationARB");
    

        *(void **)&real_glWindowPos2dARB = resolveGl("glWindowPos2dARB");
        if (!real_glWindowPos2dARB)
            unresolvedError("glWindowPos2dARB");
    

        *(void **)&real_glWindowPos2dvARB = resolveGl("glWindowPos2dvARB");
        if (!real_glWindowPos2dvARB)
            unresolvedError("glWindowPos2dvARB");
    

        *(void **)&real_glWindowPos2fARB = resolveGl("glWindowPos2fARB");
        if (!real_glWindowPos2fARB)
            unresolvedError("glWindowPos2fARB");
    

        *(void **)&real_glWindowPos2fvARB = resolveGl("glWindowPos2fvARB");
        if (!real_glWindowPos2fvARB)
            unresolvedError("glWindowPos2fvARB");
    

        *(void **)&real_glWindowPos2iARB = resolveGl("glWindowPos2iARB");
        if (!real_glWindowPos2iARB)
            unresolvedError("glWindowPos2iARB");
    

        *(void **)&real_glWindowPos2ivARB = resolveGl("glWindowPos2ivARB");
        if (!real_glWindowPos2ivARB)
            unresolvedError("glWindowPos2ivARB");
    

        *(void **)&real_glWindowPos2sARB = resolveGl("glWindowPos2sARB");
        if (!real_glWindowPos2sARB)
            unresolvedError("glWindowPos2sARB");
    

        *(void **)&real_glWindowPos2svARB = resolveGl("glWindowPos2svARB");
        if (!real_glWindowPos2svARB)
            unresolvedError("glWindowPos2svARB");
    

        *(void **)&real_glWindowPos3dARB = resolveGl("glWindowPos3dARB");
        if (!real_glWindowPos3dARB)
            unresolvedError("glWindowPos3dARB");
    

        *(void **)&real_glWindowPos3dvARB = resolveGl("glWindowPos3dvARB");
        if (!real_glWindowPos3dvARB)
            unresolvedError("glWindowPos3dvARB");
    

        *(void **)&real_glWindowPos3fARB = resolveGl("glWindowPos3fARB");
        if (!real_glWindowPos3fARB)
            unresolvedError("glWindowPos3fARB");
    

        *(void **)&real_glWindowPos3fvARB = resolveGl("glWindowPos3fvARB");
        if (!real_glWindowPos3fvARB)
            unresolvedError("glWindowPos3fvARB");
    

        *(void **)&real_glWindowPos3iARB = resolveGl("glWindowPos3iARB");
        if (!real_glWindowPos3iARB)
            unresolvedError("glWindowPos3iARB");
    

        *(void **)&real_glWindowPos3ivARB = resolveGl("glWindowPos3ivARB");
        if (!real_glWindowPos3ivARB)
            unresolvedError("glWindowPos3ivARB");
    

        *(void **)&real_glWindowPos3sARB = resolveGl("glWindowPos3sARB");
        if (!real_glWindowPos3sARB)
            unresolvedError("glWindowPos3sARB");
    

        *(void **)&real_glWindowPos3svARB = resolveGl("glWindowPos3svARB");
        if (!real_glWindowPos3svARB)
            unresolvedError("glWindowPos3svARB");
    

        *(void **)&real_glBlendBarrierKHR = resolveGl("glBlendBarrierKHR");
        if (!real_glBlendBarrierKHR)
            unresolvedError("glBlendBarrierKHR");
    

        *(void **)&real_glMaxShaderCompilerThreadsKHR = resolveGl("glMaxShaderCompilerThreadsKHR");
        if (!real_glMaxShaderCompilerThreadsKHR)
            unresolvedError("glMaxShaderCompilerThreadsKHR");
    

        *(void **)&real_glMultiTexCoord1bOES = resolveGl("glMultiTexCoord1bOES");
        if (!real_glMultiTexCoord1bOES)
            unresolvedError("glMultiTexCoord1bOES");
    

        *(void **)&real_glMultiTexCoord1bvOES = resolveGl("glMultiTexCoord1bvOES");
        if (!real_glMultiTexCoord1bvOES)
            unresolvedError("glMultiTexCoord1bvOES");
    

        *(void **)&real_glMultiTexCoord2bOES = resolveGl("glMultiTexCoord2bOES");
        if (!real_glMultiTexCoord2bOES)
            unresolvedError("glMultiTexCoord2bOES");
    

        *(void **)&real_glMultiTexCoord2bvOES = resolveGl("glMultiTexCoord2bvOES");
        if (!real_glMultiTexCoord2bvOES)
            unresolvedError("glMultiTexCoord2bvOES");
    

        *(void **)&real_glMultiTexCoord3bOES = resolveGl("glMultiTexCoord3bOES");
        if (!real_glMultiTexCoord3bOES)
            unresolvedError("glMultiTexCoord3bOES");
    

        *(void **)&real_glMultiTexCoord3bvOES = resolveGl("glMultiTexCoord3bvOES");
        if (!real_glMultiTexCoord3bvOES)
            unresolvedError("glMultiTexCoord3bvOES");
    

        *(void **)&real_glMultiTexCoord4bOES = resolveGl("glMultiTexCoord4bOES");
        if (!real_glMultiTexCoord4bOES)
            unresolvedError("glMultiTexCoord4bOES");
    

        *(void **)&real_glMultiTexCoord4bvOES = resolveGl("glMultiTexCoord4bvOES");
        if (!real_glMultiTexCoord4bvOES)
            unresolvedError("glMultiTexCoord4bvOES");
    

        *(void **)&real_glTexCoord1bOES = resolveGl("glTexCoord1bOES");
        if (!real_glTexCoord1bOES)
            unresolvedError("glTexCoord1bOES");
    

        *(void **)&real_glTexCoord1bvOES = resolveGl("glTexCoord1bvOES");
        if (!real_glTexCoord1bvOES)
            unresolvedError("glTexCoord1bvOES");
    

        *(void **)&real_glTexCoord2bOES = resolveGl("glTexCoord2bOES");
        if (!real_glTexCoord2bOES)
            unresolvedError("glTexCoord2bOES");
    

        *(void **)&real_glTexCoord2bvOES = resolveGl("glTexCoord2bvOES");
        if (!real_glTexCoord2bvOES)
            unresolvedError("glTexCoord2bvOES");
    

        *(void **)&real_glTexCoord3bOES = resolveGl("glTexCoord3bOES");
        if (!real_glTexCoord3bOES)
            unresolvedError("glTexCoord3bOES");
    

        *(void **)&real_glTexCoord3bvOES = resolveGl("glTexCoord3bvOES");
        if (!real_glTexCoord3bvOES)
            unresolvedError("glTexCoord3bvOES");
    

        *(void **)&real_glTexCoord4bOES = resolveGl("glTexCoord4bOES");
        if (!real_glTexCoord4bOES)
            unresolvedError("glTexCoord4bOES");
    

        *(void **)&real_glTexCoord4bvOES = resolveGl("glTexCoord4bvOES");
        if (!real_glTexCoord4bvOES)
            unresolvedError("glTexCoord4bvOES");
    

        *(void **)&real_glVertex2bOES = resolveGl("glVertex2bOES");
        if (!real_glVertex2bOES)
            unresolvedError("glVertex2bOES");
    

        *(void **)&real_glVertex2bvOES = resolveGl("glVertex2bvOES");
        if (!real_glVertex2bvOES)
            unresolvedError("glVertex2bvOES");
    

        *(void **)&real_glVertex3bOES = resolveGl("glVertex3bOES");
        if (!real_glVertex3bOES)
            unresolvedError("glVertex3bOES");
    

        *(void **)&real_glVertex3bvOES = resolveGl("glVertex3bvOES");
        if (!real_glVertex3bvOES)
            unresolvedError("glVertex3bvOES");
    

        *(void **)&real_glVertex4bOES = resolveGl("glVertex4bOES");
        if (!real_glVertex4bOES)
            unresolvedError("glVertex4bOES");
    

        *(void **)&real_glVertex4bvOES = resolveGl("glVertex4bvOES");
        if (!real_glVertex4bvOES)
            unresolvedError("glVertex4bvOES");
    

        *(void **)&real_glAlphaFuncxOES = resolveGl("glAlphaFuncxOES");
        if (!real_glAlphaFuncxOES)
            unresolvedError("glAlphaFuncxOES");
    

        *(void **)&real_glClearColorxOES = resolveGl("glClearColorxOES");
        if (!real_glClearColorxOES)
            unresolvedError("glClearColorxOES");
    

        *(void **)&real_glClearDepthxOES = resolveGl("glClearDepthxOES");
        if (!real_glClearDepthxOES)
            unresolvedError("glClearDepthxOES");
    

        *(void **)&real_glClipPlanexOES = resolveGl("glClipPlanexOES");
        if (!real_glClipPlanexOES)
            unresolvedError("glClipPlanexOES");
    

        *(void **)&real_glColor4xOES = resolveGl("glColor4xOES");
        if (!real_glColor4xOES)
            unresolvedError("glColor4xOES");
    

        *(void **)&real_glDepthRangexOES = resolveGl("glDepthRangexOES");
        if (!real_glDepthRangexOES)
            unresolvedError("glDepthRangexOES");
    

        *(void **)&real_glFogxOES = resolveGl("glFogxOES");
        if (!real_glFogxOES)
            unresolvedError("glFogxOES");
    

        *(void **)&real_glFogxvOES = resolveGl("glFogxvOES");
        if (!real_glFogxvOES)
            unresolvedError("glFogxvOES");
    

        *(void **)&real_glFrustumxOES = resolveGl("glFrustumxOES");
        if (!real_glFrustumxOES)
            unresolvedError("glFrustumxOES");
    

        *(void **)&real_glGetClipPlanexOES = resolveGl("glGetClipPlanexOES");
        if (!real_glGetClipPlanexOES)
            unresolvedError("glGetClipPlanexOES");
    

        *(void **)&real_glGetFixedvOES = resolveGl("glGetFixedvOES");
        if (!real_glGetFixedvOES)
            unresolvedError("glGetFixedvOES");
    

        *(void **)&real_glGetTexEnvxvOES = resolveGl("glGetTexEnvxvOES");
        if (!real_glGetTexEnvxvOES)
            unresolvedError("glGetTexEnvxvOES");
    

        *(void **)&real_glGetTexParameterxvOES = resolveGl("glGetTexParameterxvOES");
        if (!real_glGetTexParameterxvOES)
            unresolvedError("glGetTexParameterxvOES");
    

        *(void **)&real_glLightModelxOES = resolveGl("glLightModelxOES");
        if (!real_glLightModelxOES)
            unresolvedError("glLightModelxOES");
    

        *(void **)&real_glLightModelxvOES = resolveGl("glLightModelxvOES");
        if (!real_glLightModelxvOES)
            unresolvedError("glLightModelxvOES");
    

        *(void **)&real_glLightxOES = resolveGl("glLightxOES");
        if (!real_glLightxOES)
            unresolvedError("glLightxOES");
    

        *(void **)&real_glLightxvOES = resolveGl("glLightxvOES");
        if (!real_glLightxvOES)
            unresolvedError("glLightxvOES");
    

        *(void **)&real_glLineWidthxOES = resolveGl("glLineWidthxOES");
        if (!real_glLineWidthxOES)
            unresolvedError("glLineWidthxOES");
    

        *(void **)&real_glLoadMatrixxOES = resolveGl("glLoadMatrixxOES");
        if (!real_glLoadMatrixxOES)
            unresolvedError("glLoadMatrixxOES");
    

        *(void **)&real_glMaterialxOES = resolveGl("glMaterialxOES");
        if (!real_glMaterialxOES)
            unresolvedError("glMaterialxOES");
    

        *(void **)&real_glMaterialxvOES = resolveGl("glMaterialxvOES");
        if (!real_glMaterialxvOES)
            unresolvedError("glMaterialxvOES");
    

        *(void **)&real_glMultMatrixxOES = resolveGl("glMultMatrixxOES");
        if (!real_glMultMatrixxOES)
            unresolvedError("glMultMatrixxOES");
    

        *(void **)&real_glMultiTexCoord4xOES = resolveGl("glMultiTexCoord4xOES");
        if (!real_glMultiTexCoord4xOES)
            unresolvedError("glMultiTexCoord4xOES");
    

        *(void **)&real_glNormal3xOES = resolveGl("glNormal3xOES");
        if (!real_glNormal3xOES)
            unresolvedError("glNormal3xOES");
    

        *(void **)&real_glOrthoxOES = resolveGl("glOrthoxOES");
        if (!real_glOrthoxOES)
            unresolvedError("glOrthoxOES");
    

        *(void **)&real_glPointParameterxvOES = resolveGl("glPointParameterxvOES");
        if (!real_glPointParameterxvOES)
            unresolvedError("glPointParameterxvOES");
    

        *(void **)&real_glPointSizexOES = resolveGl("glPointSizexOES");
        if (!real_glPointSizexOES)
            unresolvedError("glPointSizexOES");
    

        *(void **)&real_glPolygonOffsetxOES = resolveGl("glPolygonOffsetxOES");
        if (!real_glPolygonOffsetxOES)
            unresolvedError("glPolygonOffsetxOES");
    

        *(void **)&real_glRotatexOES = resolveGl("glRotatexOES");
        if (!real_glRotatexOES)
            unresolvedError("glRotatexOES");
    

        *(void **)&real_glScalexOES = resolveGl("glScalexOES");
        if (!real_glScalexOES)
            unresolvedError("glScalexOES");
    

        *(void **)&real_glTexEnvxOES = resolveGl("glTexEnvxOES");
        if (!real_glTexEnvxOES)
            unresolvedError("glTexEnvxOES");
    

        *(void **)&real_glTexEnvxvOES = resolveGl("glTexEnvxvOES");
        if (!real_glTexEnvxvOES)
            unresolvedError("glTexEnvxvOES");
    

        *(void **)&real_glTexParameterxOES = resolveGl("glTexParameterxOES");
        if (!real_glTexParameterxOES)
            unresolvedError("glTexParameterxOES");
    

        *(void **)&real_glTexParameterxvOES = resolveGl("glTexParameterxvOES");
        if (!real_glTexParameterxvOES)
            unresolvedError("glTexParameterxvOES");
    

        *(void **)&real_glTranslatexOES = resolveGl("glTranslatexOES");
        if (!real_glTranslatexOES)
            unresolvedError("glTranslatexOES");
    

        *(void **)&real_glAccumxOES = resolveGl("glAccumxOES");
        if (!real_glAccumxOES)
            unresolvedError("glAccumxOES");
    

        *(void **)&real_glBitmapxOES = resolveGl("glBitmapxOES");
        if (!real_glBitmapxOES)
            unresolvedError("glBitmapxOES");
    

        *(void **)&real_glBlendColorxOES = resolveGl("glBlendColorxOES");
        if (!real_glBlendColorxOES)
            unresolvedError("glBlendColorxOES");
    

        *(void **)&real_glClearAccumxOES = resolveGl("glClearAccumxOES");
        if (!real_glClearAccumxOES)
            unresolvedError("glClearAccumxOES");
    

        *(void **)&real_glColor3xOES = resolveGl("glColor3xOES");
        if (!real_glColor3xOES)
            unresolvedError("glColor3xOES");
    

        *(void **)&real_glColor3xvOES = resolveGl("glColor3xvOES");
        if (!real_glColor3xvOES)
            unresolvedError("glColor3xvOES");
    

        *(void **)&real_glColor4xvOES = resolveGl("glColor4xvOES");
        if (!real_glColor4xvOES)
            unresolvedError("glColor4xvOES");
    

        *(void **)&real_glConvolutionParameterxOES = resolveGl("glConvolutionParameterxOES");
        if (!real_glConvolutionParameterxOES)
            unresolvedError("glConvolutionParameterxOES");
    

        *(void **)&real_glConvolutionParameterxvOES = resolveGl("glConvolutionParameterxvOES");
        if (!real_glConvolutionParameterxvOES)
            unresolvedError("glConvolutionParameterxvOES");
    

        *(void **)&real_glEvalCoord1xOES = resolveGl("glEvalCoord1xOES");
        if (!real_glEvalCoord1xOES)
            unresolvedError("glEvalCoord1xOES");
    

        *(void **)&real_glEvalCoord1xvOES = resolveGl("glEvalCoord1xvOES");
        if (!real_glEvalCoord1xvOES)
            unresolvedError("glEvalCoord1xvOES");
    

        *(void **)&real_glEvalCoord2xOES = resolveGl("glEvalCoord2xOES");
        if (!real_glEvalCoord2xOES)
            unresolvedError("glEvalCoord2xOES");
    

        *(void **)&real_glEvalCoord2xvOES = resolveGl("glEvalCoord2xvOES");
        if (!real_glEvalCoord2xvOES)
            unresolvedError("glEvalCoord2xvOES");
    

        *(void **)&real_glFeedbackBufferxOES = resolveGl("glFeedbackBufferxOES");
        if (!real_glFeedbackBufferxOES)
            unresolvedError("glFeedbackBufferxOES");
    

        *(void **)&real_glGetConvolutionParameterxvOES = resolveGl("glGetConvolutionParameterxvOES");
        if (!real_glGetConvolutionParameterxvOES)
            unresolvedError("glGetConvolutionParameterxvOES");
    

        *(void **)&real_glGetHistogramParameterxvOES = resolveGl("glGetHistogramParameterxvOES");
        if (!real_glGetHistogramParameterxvOES)
            unresolvedError("glGetHistogramParameterxvOES");
    

        *(void **)&real_glGetLightxOES = resolveGl("glGetLightxOES");
        if (!real_glGetLightxOES)
            unresolvedError("glGetLightxOES");
    

        *(void **)&real_glGetMapxvOES = resolveGl("glGetMapxvOES");
        if (!real_glGetMapxvOES)
            unresolvedError("glGetMapxvOES");
    

        *(void **)&real_glGetMaterialxOES = resolveGl("glGetMaterialxOES");
        if (!real_glGetMaterialxOES)
            unresolvedError("glGetMaterialxOES");
    

        *(void **)&real_glGetPixelMapxv = resolveGl("glGetPixelMapxv");
        if (!real_glGetPixelMapxv)
            unresolvedError("glGetPixelMapxv");
    

        *(void **)&real_glGetTexGenxvOES = resolveGl("glGetTexGenxvOES");
        if (!real_glGetTexGenxvOES)
            unresolvedError("glGetTexGenxvOES");
    

        *(void **)&real_glGetTexLevelParameterxvOES = resolveGl("glGetTexLevelParameterxvOES");
        if (!real_glGetTexLevelParameterxvOES)
            unresolvedError("glGetTexLevelParameterxvOES");
    

        *(void **)&real_glIndexxOES = resolveGl("glIndexxOES");
        if (!real_glIndexxOES)
            unresolvedError("glIndexxOES");
    

        *(void **)&real_glIndexxvOES = resolveGl("glIndexxvOES");
        if (!real_glIndexxvOES)
            unresolvedError("glIndexxvOES");
    

        *(void **)&real_glLoadTransposeMatrixxOES = resolveGl("glLoadTransposeMatrixxOES");
        if (!real_glLoadTransposeMatrixxOES)
            unresolvedError("glLoadTransposeMatrixxOES");
    

        *(void **)&real_glMap1xOES = resolveGl("glMap1xOES");
        if (!real_glMap1xOES)
            unresolvedError("glMap1xOES");
    

        *(void **)&real_glMap2xOES = resolveGl("glMap2xOES");
        if (!real_glMap2xOES)
            unresolvedError("glMap2xOES");
    

        *(void **)&real_glMapGrid1xOES = resolveGl("glMapGrid1xOES");
        if (!real_glMapGrid1xOES)
            unresolvedError("glMapGrid1xOES");
    

        *(void **)&real_glMapGrid2xOES = resolveGl("glMapGrid2xOES");
        if (!real_glMapGrid2xOES)
            unresolvedError("glMapGrid2xOES");
    

        *(void **)&real_glMultTransposeMatrixxOES = resolveGl("glMultTransposeMatrixxOES");
        if (!real_glMultTransposeMatrixxOES)
            unresolvedError("glMultTransposeMatrixxOES");
    

        *(void **)&real_glMultiTexCoord1xOES = resolveGl("glMultiTexCoord1xOES");
        if (!real_glMultiTexCoord1xOES)
            unresolvedError("glMultiTexCoord1xOES");
    

        *(void **)&real_glMultiTexCoord1xvOES = resolveGl("glMultiTexCoord1xvOES");
        if (!real_glMultiTexCoord1xvOES)
            unresolvedError("glMultiTexCoord1xvOES");
    

        *(void **)&real_glMultiTexCoord2xOES = resolveGl("glMultiTexCoord2xOES");
        if (!real_glMultiTexCoord2xOES)
            unresolvedError("glMultiTexCoord2xOES");
    

        *(void **)&real_glMultiTexCoord2xvOES = resolveGl("glMultiTexCoord2xvOES");
        if (!real_glMultiTexCoord2xvOES)
            unresolvedError("glMultiTexCoord2xvOES");
    

        *(void **)&real_glMultiTexCoord3xOES = resolveGl("glMultiTexCoord3xOES");
        if (!real_glMultiTexCoord3xOES)
            unresolvedError("glMultiTexCoord3xOES");
    

        *(void **)&real_glMultiTexCoord3xvOES = resolveGl("glMultiTexCoord3xvOES");
        if (!real_glMultiTexCoord3xvOES)
            unresolvedError("glMultiTexCoord3xvOES");
    

        *(void **)&real_glMultiTexCoord4xvOES = resolveGl("glMultiTexCoord4xvOES");
        if (!real_glMultiTexCoord4xvOES)
            unresolvedError("glMultiTexCoord4xvOES");
    

        *(void **)&real_glNormal3xvOES = resolveGl("glNormal3xvOES");
        if (!real_glNormal3xvOES)
            unresolvedError("glNormal3xvOES");
    

        *(void **)&real_glPassThroughxOES = resolveGl("glPassThroughxOES");
        if (!real_glPassThroughxOES)
            unresolvedError("glPassThroughxOES");
    

        *(void **)&real_glPixelMapx = resolveGl("glPixelMapx");
        if (!real_glPixelMapx)
            unresolvedError("glPixelMapx");
    

        *(void **)&real_glPixelStorex = resolveGl("glPixelStorex");
        if (!real_glPixelStorex)
            unresolvedError("glPixelStorex");
    

        *(void **)&real_glPixelTransferxOES = resolveGl("glPixelTransferxOES");
        if (!real_glPixelTransferxOES)
            unresolvedError("glPixelTransferxOES");
    

        *(void **)&real_glPixelZoomxOES = resolveGl("glPixelZoomxOES");
        if (!real_glPixelZoomxOES)
            unresolvedError("glPixelZoomxOES");
    

        *(void **)&real_glPrioritizeTexturesxOES = resolveGl("glPrioritizeTexturesxOES");
        if (!real_glPrioritizeTexturesxOES)
            unresolvedError("glPrioritizeTexturesxOES");
    

        *(void **)&real_glRasterPos2xOES = resolveGl("glRasterPos2xOES");
        if (!real_glRasterPos2xOES)
            unresolvedError("glRasterPos2xOES");
    

        *(void **)&real_glRasterPos2xvOES = resolveGl("glRasterPos2xvOES");
        if (!real_glRasterPos2xvOES)
            unresolvedError("glRasterPos2xvOES");
    

        *(void **)&real_glRasterPos3xOES = resolveGl("glRasterPos3xOES");
        if (!real_glRasterPos3xOES)
            unresolvedError("glRasterPos3xOES");
    

        *(void **)&real_glRasterPos3xvOES = resolveGl("glRasterPos3xvOES");
        if (!real_glRasterPos3xvOES)
            unresolvedError("glRasterPos3xvOES");
    

        *(void **)&real_glRasterPos4xOES = resolveGl("glRasterPos4xOES");
        if (!real_glRasterPos4xOES)
            unresolvedError("glRasterPos4xOES");
    

        *(void **)&real_glRasterPos4xvOES = resolveGl("glRasterPos4xvOES");
        if (!real_glRasterPos4xvOES)
            unresolvedError("glRasterPos4xvOES");
    

        *(void **)&real_glRectxOES = resolveGl("glRectxOES");
        if (!real_glRectxOES)
            unresolvedError("glRectxOES");
    

        *(void **)&real_glRectxvOES = resolveGl("glRectxvOES");
        if (!real_glRectxvOES)
            unresolvedError("glRectxvOES");
    

        *(void **)&real_glTexCoord1xOES = resolveGl("glTexCoord1xOES");
        if (!real_glTexCoord1xOES)
            unresolvedError("glTexCoord1xOES");
    

        *(void **)&real_glTexCoord1xvOES = resolveGl("glTexCoord1xvOES");
        if (!real_glTexCoord1xvOES)
            unresolvedError("glTexCoord1xvOES");
    

        *(void **)&real_glTexCoord2xOES = resolveGl("glTexCoord2xOES");
        if (!real_glTexCoord2xOES)
            unresolvedError("glTexCoord2xOES");
    

        *(void **)&real_glTexCoord2xvOES = resolveGl("glTexCoord2xvOES");
        if (!real_glTexCoord2xvOES)
            unresolvedError("glTexCoord2xvOES");
    

        *(void **)&real_glTexCoord3xOES = resolveGl("glTexCoord3xOES");
        if (!real_glTexCoord3xOES)
            unresolvedError("glTexCoord3xOES");
    

        *(void **)&real_glTexCoord3xvOES = resolveGl("glTexCoord3xvOES");
        if (!real_glTexCoord3xvOES)
            unresolvedError("glTexCoord3xvOES");
    

        *(void **)&real_glTexCoord4xOES = resolveGl("glTexCoord4xOES");
        if (!real_glTexCoord4xOES)
            unresolvedError("glTexCoord4xOES");
    

        *(void **)&real_glTexCoord4xvOES = resolveGl("glTexCoord4xvOES");
        if (!real_glTexCoord4xvOES)
            unresolvedError("glTexCoord4xvOES");
    

        *(void **)&real_glTexGenxOES = resolveGl("glTexGenxOES");
        if (!real_glTexGenxOES)
            unresolvedError("glTexGenxOES");
    

        *(void **)&real_glTexGenxvOES = resolveGl("glTexGenxvOES");
        if (!real_glTexGenxvOES)
            unresolvedError("glTexGenxvOES");
    

        *(void **)&real_glVertex2xOES = resolveGl("glVertex2xOES");
        if (!real_glVertex2xOES)
            unresolvedError("glVertex2xOES");
    

        *(void **)&real_glVertex2xvOES = resolveGl("glVertex2xvOES");
        if (!real_glVertex2xvOES)
            unresolvedError("glVertex2xvOES");
    

        *(void **)&real_glVertex3xOES = resolveGl("glVertex3xOES");
        if (!real_glVertex3xOES)
            unresolvedError("glVertex3xOES");
    

        *(void **)&real_glVertex3xvOES = resolveGl("glVertex3xvOES");
        if (!real_glVertex3xvOES)
            unresolvedError("glVertex3xvOES");
    

        *(void **)&real_glVertex4xOES = resolveGl("glVertex4xOES");
        if (!real_glVertex4xOES)
            unresolvedError("glVertex4xOES");
    

        *(void **)&real_glVertex4xvOES = resolveGl("glVertex4xvOES");
        if (!real_glVertex4xvOES)
            unresolvedError("glVertex4xvOES");
    

        *(void **)&real_glQueryMatrixxOES = resolveGl("glQueryMatrixxOES");
        if (!real_glQueryMatrixxOES)
            unresolvedError("glQueryMatrixxOES");
    

        *(void **)&real_glClearDepthfOES = resolveGl("glClearDepthfOES");
        if (!real_glClearDepthfOES)
            unresolvedError("glClearDepthfOES");
    

        *(void **)&real_glClipPlanefOES = resolveGl("glClipPlanefOES");
        if (!real_glClipPlanefOES)
            unresolvedError("glClipPlanefOES");
    

        *(void **)&real_glDepthRangefOES = resolveGl("glDepthRangefOES");
        if (!real_glDepthRangefOES)
            unresolvedError("glDepthRangefOES");
    

        *(void **)&real_glFrustumfOES = resolveGl("glFrustumfOES");
        if (!real_glFrustumfOES)
            unresolvedError("glFrustumfOES");
    

        *(void **)&real_glGetClipPlanefOES = resolveGl("glGetClipPlanefOES");
        if (!real_glGetClipPlanefOES)
            unresolvedError("glGetClipPlanefOES");
    

        *(void **)&real_glOrthofOES = resolveGl("glOrthofOES");
        if (!real_glOrthofOES)
            unresolvedError("glOrthofOES");
    

        *(void **)&real_glTbufferMask3DFX = resolveGl("glTbufferMask3DFX");
        if (!real_glTbufferMask3DFX)
            unresolvedError("glTbufferMask3DFX");
    

        *(void **)&real_glDebugMessageEnableAMD = resolveGl("glDebugMessageEnableAMD");
        if (!real_glDebugMessageEnableAMD)
            unresolvedError("glDebugMessageEnableAMD");
    

        *(void **)&real_glDebugMessageInsertAMD = resolveGl("glDebugMessageInsertAMD");
        if (!real_glDebugMessageInsertAMD)
            unresolvedError("glDebugMessageInsertAMD");
    

        *(void **)&real_glDebugMessageCallbackAMD = resolveGl("glDebugMessageCallbackAMD");
        if (!real_glDebugMessageCallbackAMD)
            unresolvedError("glDebugMessageCallbackAMD");
    

        *(void **)&real_glGetDebugMessageLogAMD = resolveGl("glGetDebugMessageLogAMD");
        if (!real_glGetDebugMessageLogAMD)
            unresolvedError("glGetDebugMessageLogAMD");
    

        *(void **)&real_glBlendFuncIndexedAMD = resolveGl("glBlendFuncIndexedAMD");
        if (!real_glBlendFuncIndexedAMD)
            unresolvedError("glBlendFuncIndexedAMD");
    

        *(void **)&real_glBlendFuncSeparateIndexedAMD = resolveGl("glBlendFuncSeparateIndexedAMD");
        if (!real_glBlendFuncSeparateIndexedAMD)
            unresolvedError("glBlendFuncSeparateIndexedAMD");
    

        *(void **)&real_glBlendEquationIndexedAMD = resolveGl("glBlendEquationIndexedAMD");
        if (!real_glBlendEquationIndexedAMD)
            unresolvedError("glBlendEquationIndexedAMD");
    

        *(void **)&real_glBlendEquationSeparateIndexedAMD = resolveGl("glBlendEquationSeparateIndexedAMD");
        if (!real_glBlendEquationSeparateIndexedAMD)
            unresolvedError("glBlendEquationSeparateIndexedAMD");
    

        *(void **)&real_glRenderbufferStorageMultisampleAdvancedAMD = resolveGl("glRenderbufferStorageMultisampleAdvancedAMD");
        if (!real_glRenderbufferStorageMultisampleAdvancedAMD)
            unresolvedError("glRenderbufferStorageMultisampleAdvancedAMD");
    

        *(void **)&real_glNamedRenderbufferStorageMultisampleAdvancedAMD = resolveGl("glNamedRenderbufferStorageMultisampleAdvancedAMD");
        if (!real_glNamedRenderbufferStorageMultisampleAdvancedAMD)
            unresolvedError("glNamedRenderbufferStorageMultisampleAdvancedAMD");
    

        *(void **)&real_glFramebufferSamplePositionsfvAMD = resolveGl("glFramebufferSamplePositionsfvAMD");
        if (!real_glFramebufferSamplePositionsfvAMD)
            unresolvedError("glFramebufferSamplePositionsfvAMD");
    

        *(void **)&real_glNamedFramebufferSamplePositionsfvAMD = resolveGl("glNamedFramebufferSamplePositionsfvAMD");
        if (!real_glNamedFramebufferSamplePositionsfvAMD)
            unresolvedError("glNamedFramebufferSamplePositionsfvAMD");
    

        *(void **)&real_glGetFramebufferParameterfvAMD = resolveGl("glGetFramebufferParameterfvAMD");
        if (!real_glGetFramebufferParameterfvAMD)
            unresolvedError("glGetFramebufferParameterfvAMD");
    

        *(void **)&real_glGetNamedFramebufferParameterfvAMD = resolveGl("glGetNamedFramebufferParameterfvAMD");
        if (!real_glGetNamedFramebufferParameterfvAMD)
            unresolvedError("glGetNamedFramebufferParameterfvAMD");
    

        *(void **)&real_glUniform1i64NV = resolveGl("glUniform1i64NV");
        if (!real_glUniform1i64NV)
            unresolvedError("glUniform1i64NV");
    

        *(void **)&real_glUniform2i64NV = resolveGl("glUniform2i64NV");
        if (!real_glUniform2i64NV)
            unresolvedError("glUniform2i64NV");
    

        *(void **)&real_glUniform3i64NV = resolveGl("glUniform3i64NV");
        if (!real_glUniform3i64NV)
            unresolvedError("glUniform3i64NV");
    

        *(void **)&real_glUniform4i64NV = resolveGl("glUniform4i64NV");
        if (!real_glUniform4i64NV)
            unresolvedError("glUniform4i64NV");
    

        *(void **)&real_glUniform1i64vNV = resolveGl("glUniform1i64vNV");
        if (!real_glUniform1i64vNV)
            unresolvedError("glUniform1i64vNV");
    

        *(void **)&real_glUniform2i64vNV = resolveGl("glUniform2i64vNV");
        if (!real_glUniform2i64vNV)
            unresolvedError("glUniform2i64vNV");
    

        *(void **)&real_glUniform3i64vNV = resolveGl("glUniform3i64vNV");
        if (!real_glUniform3i64vNV)
            unresolvedError("glUniform3i64vNV");
    

        *(void **)&real_glUniform4i64vNV = resolveGl("glUniform4i64vNV");
        if (!real_glUniform4i64vNV)
            unresolvedError("glUniform4i64vNV");
    

        *(void **)&real_glUniform1ui64NV = resolveGl("glUniform1ui64NV");
        if (!real_glUniform1ui64NV)
            unresolvedError("glUniform1ui64NV");
    

        *(void **)&real_glUniform2ui64NV = resolveGl("glUniform2ui64NV");
        if (!real_glUniform2ui64NV)
            unresolvedError("glUniform2ui64NV");
    

        *(void **)&real_glUniform3ui64NV = resolveGl("glUniform3ui64NV");
        if (!real_glUniform3ui64NV)
            unresolvedError("glUniform3ui64NV");
    

        *(void **)&real_glUniform4ui64NV = resolveGl("glUniform4ui64NV");
        if (!real_glUniform4ui64NV)
            unresolvedError("glUniform4ui64NV");
    

        *(void **)&real_glUniform1ui64vNV = resolveGl("glUniform1ui64vNV");
        if (!real_glUniform1ui64vNV)
            unresolvedError("glUniform1ui64vNV");
    

        *(void **)&real_glUniform2ui64vNV = resolveGl("glUniform2ui64vNV");
        if (!real_glUniform2ui64vNV)
            unresolvedError("glUniform2ui64vNV");
    

        *(void **)&real_glUniform3ui64vNV = resolveGl("glUniform3ui64vNV");
        if (!real_glUniform3ui64vNV)
            unresolvedError("glUniform3ui64vNV");
    

        *(void **)&real_glUniform4ui64vNV = resolveGl("glUniform4ui64vNV");
        if (!real_glUniform4ui64vNV)
            unresolvedError("glUniform4ui64vNV");
    

        *(void **)&real_glGetUniformi64vNV = resolveGl("glGetUniformi64vNV");
        if (!real_glGetUniformi64vNV)
            unresolvedError("glGetUniformi64vNV");
    

        *(void **)&real_glGetUniformui64vNV = resolveGl("glGetUniformui64vNV");
        if (!real_glGetUniformui64vNV)
            unresolvedError("glGetUniformui64vNV");
    

        *(void **)&real_glProgramUniform1i64NV = resolveGl("glProgramUniform1i64NV");
        if (!real_glProgramUniform1i64NV)
            unresolvedError("glProgramUniform1i64NV");
    

        *(void **)&real_glProgramUniform2i64NV = resolveGl("glProgramUniform2i64NV");
        if (!real_glProgramUniform2i64NV)
            unresolvedError("glProgramUniform2i64NV");
    

        *(void **)&real_glProgramUniform3i64NV = resolveGl("glProgramUniform3i64NV");
        if (!real_glProgramUniform3i64NV)
            unresolvedError("glProgramUniform3i64NV");
    

        *(void **)&real_glProgramUniform4i64NV = resolveGl("glProgramUniform4i64NV");
        if (!real_glProgramUniform4i64NV)
            unresolvedError("glProgramUniform4i64NV");
    

        *(void **)&real_glProgramUniform1i64vNV = resolveGl("glProgramUniform1i64vNV");
        if (!real_glProgramUniform1i64vNV)
            unresolvedError("glProgramUniform1i64vNV");
    

        *(void **)&real_glProgramUniform2i64vNV = resolveGl("glProgramUniform2i64vNV");
        if (!real_glProgramUniform2i64vNV)
            unresolvedError("glProgramUniform2i64vNV");
    

        *(void **)&real_glProgramUniform3i64vNV = resolveGl("glProgramUniform3i64vNV");
        if (!real_glProgramUniform3i64vNV)
            unresolvedError("glProgramUniform3i64vNV");
    

        *(void **)&real_glProgramUniform4i64vNV = resolveGl("glProgramUniform4i64vNV");
        if (!real_glProgramUniform4i64vNV)
            unresolvedError("glProgramUniform4i64vNV");
    

        *(void **)&real_glProgramUniform1ui64NV = resolveGl("glProgramUniform1ui64NV");
        if (!real_glProgramUniform1ui64NV)
            unresolvedError("glProgramUniform1ui64NV");
    

        *(void **)&real_glProgramUniform2ui64NV = resolveGl("glProgramUniform2ui64NV");
        if (!real_glProgramUniform2ui64NV)
            unresolvedError("glProgramUniform2ui64NV");
    

        *(void **)&real_glProgramUniform3ui64NV = resolveGl("glProgramUniform3ui64NV");
        if (!real_glProgramUniform3ui64NV)
            unresolvedError("glProgramUniform3ui64NV");
    

        *(void **)&real_glProgramUniform4ui64NV = resolveGl("glProgramUniform4ui64NV");
        if (!real_glProgramUniform4ui64NV)
            unresolvedError("glProgramUniform4ui64NV");
    

        *(void **)&real_glProgramUniform1ui64vNV = resolveGl("glProgramUniform1ui64vNV");
        if (!real_glProgramUniform1ui64vNV)
            unresolvedError("glProgramUniform1ui64vNV");
    

        *(void **)&real_glProgramUniform2ui64vNV = resolveGl("glProgramUniform2ui64vNV");
        if (!real_glProgramUniform2ui64vNV)
            unresolvedError("glProgramUniform2ui64vNV");
    

        *(void **)&real_glProgramUniform3ui64vNV = resolveGl("glProgramUniform3ui64vNV");
        if (!real_glProgramUniform3ui64vNV)
            unresolvedError("glProgramUniform3ui64vNV");
    

        *(void **)&real_glProgramUniform4ui64vNV = resolveGl("glProgramUniform4ui64vNV");
        if (!real_glProgramUniform4ui64vNV)
            unresolvedError("glProgramUniform4ui64vNV");
    

        *(void **)&real_glVertexAttribParameteriAMD = resolveGl("glVertexAttribParameteriAMD");
        if (!real_glVertexAttribParameteriAMD)
            unresolvedError("glVertexAttribParameteriAMD");
    

        *(void **)&real_glMultiDrawArraysIndirectAMD = resolveGl("glMultiDrawArraysIndirectAMD");
        if (!real_glMultiDrawArraysIndirectAMD)
            unresolvedError("glMultiDrawArraysIndirectAMD");
    

        *(void **)&real_glMultiDrawElementsIndirectAMD = resolveGl("glMultiDrawElementsIndirectAMD");
        if (!real_glMultiDrawElementsIndirectAMD)
            unresolvedError("glMultiDrawElementsIndirectAMD");
    

        *(void **)&real_glGenNamesAMD = resolveGl("glGenNamesAMD");
        if (!real_glGenNamesAMD)
            unresolvedError("glGenNamesAMD");
    

        *(void **)&real_glDeleteNamesAMD = resolveGl("glDeleteNamesAMD");
        if (!real_glDeleteNamesAMD)
            unresolvedError("glDeleteNamesAMD");
    

        *(void **)&real_glIsNameAMD = resolveGl("glIsNameAMD");
        if (!real_glIsNameAMD)
            unresolvedError("glIsNameAMD");
    

        *(void **)&real_glQueryObjectParameteruiAMD = resolveGl("glQueryObjectParameteruiAMD");
        if (!real_glQueryObjectParameteruiAMD)
            unresolvedError("glQueryObjectParameteruiAMD");
    

        *(void **)&real_glGetPerfMonitorGroupsAMD = resolveGl("glGetPerfMonitorGroupsAMD");
        if (!real_glGetPerfMonitorGroupsAMD)
            unresolvedError("glGetPerfMonitorGroupsAMD");
    

        *(void **)&real_glGetPerfMonitorCountersAMD = resolveGl("glGetPerfMonitorCountersAMD");
        if (!real_glGetPerfMonitorCountersAMD)
            unresolvedError("glGetPerfMonitorCountersAMD");
    

        *(void **)&real_glGetPerfMonitorGroupStringAMD = resolveGl("glGetPerfMonitorGroupStringAMD");
        if (!real_glGetPerfMonitorGroupStringAMD)
            unresolvedError("glGetPerfMonitorGroupStringAMD");
    

        *(void **)&real_glGetPerfMonitorCounterStringAMD = resolveGl("glGetPerfMonitorCounterStringAMD");
        if (!real_glGetPerfMonitorCounterStringAMD)
            unresolvedError("glGetPerfMonitorCounterStringAMD");
    

        *(void **)&real_glGetPerfMonitorCounterInfoAMD = resolveGl("glGetPerfMonitorCounterInfoAMD");
        if (!real_glGetPerfMonitorCounterInfoAMD)
            unresolvedError("glGetPerfMonitorCounterInfoAMD");
    

        *(void **)&real_glGenPerfMonitorsAMD = resolveGl("glGenPerfMonitorsAMD");
        if (!real_glGenPerfMonitorsAMD)
            unresolvedError("glGenPerfMonitorsAMD");
    

        *(void **)&real_glDeletePerfMonitorsAMD = resolveGl("glDeletePerfMonitorsAMD");
        if (!real_glDeletePerfMonitorsAMD)
            unresolvedError("glDeletePerfMonitorsAMD");
    

        *(void **)&real_glSelectPerfMonitorCountersAMD = resolveGl("glSelectPerfMonitorCountersAMD");
        if (!real_glSelectPerfMonitorCountersAMD)
            unresolvedError("glSelectPerfMonitorCountersAMD");
    

        *(void **)&real_glBeginPerfMonitorAMD = resolveGl("glBeginPerfMonitorAMD");
        if (!real_glBeginPerfMonitorAMD)
            unresolvedError("glBeginPerfMonitorAMD");
    

        *(void **)&real_glEndPerfMonitorAMD = resolveGl("glEndPerfMonitorAMD");
        if (!real_glEndPerfMonitorAMD)
            unresolvedError("glEndPerfMonitorAMD");
    

        *(void **)&real_glGetPerfMonitorCounterDataAMD = resolveGl("glGetPerfMonitorCounterDataAMD");
        if (!real_glGetPerfMonitorCounterDataAMD)
            unresolvedError("glGetPerfMonitorCounterDataAMD");
    

        *(void **)&real_glSetMultisamplefvAMD = resolveGl("glSetMultisamplefvAMD");
        if (!real_glSetMultisamplefvAMD)
            unresolvedError("glSetMultisamplefvAMD");
    

        *(void **)&real_glTexStorageSparseAMD = resolveGl("glTexStorageSparseAMD");
        if (!real_glTexStorageSparseAMD)
            unresolvedError("glTexStorageSparseAMD");
    

        *(void **)&real_glTextureStorageSparseAMD = resolveGl("glTextureStorageSparseAMD");
        if (!real_glTextureStorageSparseAMD)
            unresolvedError("glTextureStorageSparseAMD");
    

        *(void **)&real_glStencilOpValueAMD = resolveGl("glStencilOpValueAMD");
        if (!real_glStencilOpValueAMD)
            unresolvedError("glStencilOpValueAMD");
    

        *(void **)&real_glTessellationFactorAMD = resolveGl("glTessellationFactorAMD");
        if (!real_glTessellationFactorAMD)
            unresolvedError("glTessellationFactorAMD");
    

        *(void **)&real_glTessellationModeAMD = resolveGl("glTessellationModeAMD");
        if (!real_glTessellationModeAMD)
            unresolvedError("glTessellationModeAMD");
    

        *(void **)&real_glElementPointerAPPLE = resolveGl("glElementPointerAPPLE");
        if (!real_glElementPointerAPPLE)
            unresolvedError("glElementPointerAPPLE");
    

        *(void **)&real_glDrawElementArrayAPPLE = resolveGl("glDrawElementArrayAPPLE");
        if (!real_glDrawElementArrayAPPLE)
            unresolvedError("glDrawElementArrayAPPLE");
    

        *(void **)&real_glDrawRangeElementArrayAPPLE = resolveGl("glDrawRangeElementArrayAPPLE");
        if (!real_glDrawRangeElementArrayAPPLE)
            unresolvedError("glDrawRangeElementArrayAPPLE");
    

        *(void **)&real_glMultiDrawElementArrayAPPLE = resolveGl("glMultiDrawElementArrayAPPLE");
        if (!real_glMultiDrawElementArrayAPPLE)
            unresolvedError("glMultiDrawElementArrayAPPLE");
    

        *(void **)&real_glMultiDrawRangeElementArrayAPPLE = resolveGl("glMultiDrawRangeElementArrayAPPLE");
        if (!real_glMultiDrawRangeElementArrayAPPLE)
            unresolvedError("glMultiDrawRangeElementArrayAPPLE");
    

        *(void **)&real_glGenFencesAPPLE = resolveGl("glGenFencesAPPLE");
        if (!real_glGenFencesAPPLE)
            unresolvedError("glGenFencesAPPLE");
    

        *(void **)&real_glDeleteFencesAPPLE = resolveGl("glDeleteFencesAPPLE");
        if (!real_glDeleteFencesAPPLE)
            unresolvedError("glDeleteFencesAPPLE");
    

        *(void **)&real_glSetFenceAPPLE = resolveGl("glSetFenceAPPLE");
        if (!real_glSetFenceAPPLE)
            unresolvedError("glSetFenceAPPLE");
    

        *(void **)&real_glIsFenceAPPLE = resolveGl("glIsFenceAPPLE");
        if (!real_glIsFenceAPPLE)
            unresolvedError("glIsFenceAPPLE");
    

        *(void **)&real_glTestFenceAPPLE = resolveGl("glTestFenceAPPLE");
        if (!real_glTestFenceAPPLE)
            unresolvedError("glTestFenceAPPLE");
    

        *(void **)&real_glFinishFenceAPPLE = resolveGl("glFinishFenceAPPLE");
        if (!real_glFinishFenceAPPLE)
            unresolvedError("glFinishFenceAPPLE");
    

        *(void **)&real_glTestObjectAPPLE = resolveGl("glTestObjectAPPLE");
        if (!real_glTestObjectAPPLE)
            unresolvedError("glTestObjectAPPLE");
    

        *(void **)&real_glFinishObjectAPPLE = resolveGl("glFinishObjectAPPLE");
        if (!real_glFinishObjectAPPLE)
            unresolvedError("glFinishObjectAPPLE");
    

        *(void **)&real_glBufferParameteriAPPLE = resolveGl("glBufferParameteriAPPLE");
        if (!real_glBufferParameteriAPPLE)
            unresolvedError("glBufferParameteriAPPLE");
    

        *(void **)&real_glFlushMappedBufferRangeAPPLE = resolveGl("glFlushMappedBufferRangeAPPLE");
        if (!real_glFlushMappedBufferRangeAPPLE)
            unresolvedError("glFlushMappedBufferRangeAPPLE");
    

        *(void **)&real_glObjectPurgeableAPPLE = resolveGl("glObjectPurgeableAPPLE");
        if (!real_glObjectPurgeableAPPLE)
            unresolvedError("glObjectPurgeableAPPLE");
    

        *(void **)&real_glObjectUnpurgeableAPPLE = resolveGl("glObjectUnpurgeableAPPLE");
        if (!real_glObjectUnpurgeableAPPLE)
            unresolvedError("glObjectUnpurgeableAPPLE");
    

        *(void **)&real_glGetObjectParameterivAPPLE = resolveGl("glGetObjectParameterivAPPLE");
        if (!real_glGetObjectParameterivAPPLE)
            unresolvedError("glGetObjectParameterivAPPLE");
    

        *(void **)&real_glTextureRangeAPPLE = resolveGl("glTextureRangeAPPLE");
        if (!real_glTextureRangeAPPLE)
            unresolvedError("glTextureRangeAPPLE");
    

        *(void **)&real_glGetTexParameterPointervAPPLE = resolveGl("glGetTexParameterPointervAPPLE");
        if (!real_glGetTexParameterPointervAPPLE)
            unresolvedError("glGetTexParameterPointervAPPLE");
    

        *(void **)&real_glBindVertexArrayAPPLE = resolveGl("glBindVertexArrayAPPLE");
        if (!real_glBindVertexArrayAPPLE)
            unresolvedError("glBindVertexArrayAPPLE");
    

        *(void **)&real_glDeleteVertexArraysAPPLE = resolveGl("glDeleteVertexArraysAPPLE");
        if (!real_glDeleteVertexArraysAPPLE)
            unresolvedError("glDeleteVertexArraysAPPLE");
    

        *(void **)&real_glGenVertexArraysAPPLE = resolveGl("glGenVertexArraysAPPLE");
        if (!real_glGenVertexArraysAPPLE)
            unresolvedError("glGenVertexArraysAPPLE");
    

        *(void **)&real_glIsVertexArrayAPPLE = resolveGl("glIsVertexArrayAPPLE");
        if (!real_glIsVertexArrayAPPLE)
            unresolvedError("glIsVertexArrayAPPLE");
    

        *(void **)&real_glVertexArrayRangeAPPLE = resolveGl("glVertexArrayRangeAPPLE");
        if (!real_glVertexArrayRangeAPPLE)
            unresolvedError("glVertexArrayRangeAPPLE");
    

        *(void **)&real_glFlushVertexArrayRangeAPPLE = resolveGl("glFlushVertexArrayRangeAPPLE");
        if (!real_glFlushVertexArrayRangeAPPLE)
            unresolvedError("glFlushVertexArrayRangeAPPLE");
    

        *(void **)&real_glVertexArrayParameteriAPPLE = resolveGl("glVertexArrayParameteriAPPLE");
        if (!real_glVertexArrayParameteriAPPLE)
            unresolvedError("glVertexArrayParameteriAPPLE");
    

        *(void **)&real_glEnableVertexAttribAPPLE = resolveGl("glEnableVertexAttribAPPLE");
        if (!real_glEnableVertexAttribAPPLE)
            unresolvedError("glEnableVertexAttribAPPLE");
    

        *(void **)&real_glDisableVertexAttribAPPLE = resolveGl("glDisableVertexAttribAPPLE");
        if (!real_glDisableVertexAttribAPPLE)
            unresolvedError("glDisableVertexAttribAPPLE");
    

        *(void **)&real_glIsVertexAttribEnabledAPPLE = resolveGl("glIsVertexAttribEnabledAPPLE");
        if (!real_glIsVertexAttribEnabledAPPLE)
            unresolvedError("glIsVertexAttribEnabledAPPLE");
    

        *(void **)&real_glMapVertexAttrib1dAPPLE = resolveGl("glMapVertexAttrib1dAPPLE");
        if (!real_glMapVertexAttrib1dAPPLE)
            unresolvedError("glMapVertexAttrib1dAPPLE");
    

        *(void **)&real_glMapVertexAttrib1fAPPLE = resolveGl("glMapVertexAttrib1fAPPLE");
        if (!real_glMapVertexAttrib1fAPPLE)
            unresolvedError("glMapVertexAttrib1fAPPLE");
    

        *(void **)&real_glMapVertexAttrib2dAPPLE = resolveGl("glMapVertexAttrib2dAPPLE");
        if (!real_glMapVertexAttrib2dAPPLE)
            unresolvedError("glMapVertexAttrib2dAPPLE");
    

        *(void **)&real_glMapVertexAttrib2fAPPLE = resolveGl("glMapVertexAttrib2fAPPLE");
        if (!real_glMapVertexAttrib2fAPPLE)
            unresolvedError("glMapVertexAttrib2fAPPLE");
    

        *(void **)&real_glDrawBuffersATI = resolveGl("glDrawBuffersATI");
        if (!real_glDrawBuffersATI)
            unresolvedError("glDrawBuffersATI");
    

        *(void **)&real_glElementPointerATI = resolveGl("glElementPointerATI");
        if (!real_glElementPointerATI)
            unresolvedError("glElementPointerATI");
    

        *(void **)&real_glDrawElementArrayATI = resolveGl("glDrawElementArrayATI");
        if (!real_glDrawElementArrayATI)
            unresolvedError("glDrawElementArrayATI");
    

        *(void **)&real_glDrawRangeElementArrayATI = resolveGl("glDrawRangeElementArrayATI");
        if (!real_glDrawRangeElementArrayATI)
            unresolvedError("glDrawRangeElementArrayATI");
    

        *(void **)&real_glTexBumpParameterivATI = resolveGl("glTexBumpParameterivATI");
        if (!real_glTexBumpParameterivATI)
            unresolvedError("glTexBumpParameterivATI");
    

        *(void **)&real_glTexBumpParameterfvATI = resolveGl("glTexBumpParameterfvATI");
        if (!real_glTexBumpParameterfvATI)
            unresolvedError("glTexBumpParameterfvATI");
    

        *(void **)&real_glGetTexBumpParameterivATI = resolveGl("glGetTexBumpParameterivATI");
        if (!real_glGetTexBumpParameterivATI)
            unresolvedError("glGetTexBumpParameterivATI");
    

        *(void **)&real_glGetTexBumpParameterfvATI = resolveGl("glGetTexBumpParameterfvATI");
        if (!real_glGetTexBumpParameterfvATI)
            unresolvedError("glGetTexBumpParameterfvATI");
    

        *(void **)&real_glGenFragmentShadersATI = resolveGl("glGenFragmentShadersATI");
        if (!real_glGenFragmentShadersATI)
            unresolvedError("glGenFragmentShadersATI");
    

        *(void **)&real_glBindFragmentShaderATI = resolveGl("glBindFragmentShaderATI");
        if (!real_glBindFragmentShaderATI)
            unresolvedError("glBindFragmentShaderATI");
    

        *(void **)&real_glDeleteFragmentShaderATI = resolveGl("glDeleteFragmentShaderATI");
        if (!real_glDeleteFragmentShaderATI)
            unresolvedError("glDeleteFragmentShaderATI");
    

        *(void **)&real_glBeginFragmentShaderATI = resolveGl("glBeginFragmentShaderATI");
        if (!real_glBeginFragmentShaderATI)
            unresolvedError("glBeginFragmentShaderATI");
    

        *(void **)&real_glEndFragmentShaderATI = resolveGl("glEndFragmentShaderATI");
        if (!real_glEndFragmentShaderATI)
            unresolvedError("glEndFragmentShaderATI");
    

        *(void **)&real_glPassTexCoordATI = resolveGl("glPassTexCoordATI");
        if (!real_glPassTexCoordATI)
            unresolvedError("glPassTexCoordATI");
    

        *(void **)&real_glSampleMapATI = resolveGl("glSampleMapATI");
        if (!real_glSampleMapATI)
            unresolvedError("glSampleMapATI");
    

        *(void **)&real_glColorFragmentOp1ATI = resolveGl("glColorFragmentOp1ATI");
        if (!real_glColorFragmentOp1ATI)
            unresolvedError("glColorFragmentOp1ATI");
    

        *(void **)&real_glColorFragmentOp2ATI = resolveGl("glColorFragmentOp2ATI");
        if (!real_glColorFragmentOp2ATI)
            unresolvedError("glColorFragmentOp2ATI");
    

        *(void **)&real_glColorFragmentOp3ATI = resolveGl("glColorFragmentOp3ATI");
        if (!real_glColorFragmentOp3ATI)
            unresolvedError("glColorFragmentOp3ATI");
    

        *(void **)&real_glAlphaFragmentOp1ATI = resolveGl("glAlphaFragmentOp1ATI");
        if (!real_glAlphaFragmentOp1ATI)
            unresolvedError("glAlphaFragmentOp1ATI");
    

        *(void **)&real_glAlphaFragmentOp2ATI = resolveGl("glAlphaFragmentOp2ATI");
        if (!real_glAlphaFragmentOp2ATI)
            unresolvedError("glAlphaFragmentOp2ATI");
    

        *(void **)&real_glAlphaFragmentOp3ATI = resolveGl("glAlphaFragmentOp3ATI");
        if (!real_glAlphaFragmentOp3ATI)
            unresolvedError("glAlphaFragmentOp3ATI");
    

        *(void **)&real_glSetFragmentShaderConstantATI = resolveGl("glSetFragmentShaderConstantATI");
        if (!real_glSetFragmentShaderConstantATI)
            unresolvedError("glSetFragmentShaderConstantATI");
    

        *(void **)&real_glMapObjectBufferATI = resolveGl("glMapObjectBufferATI");
        if (!real_glMapObjectBufferATI)
            unresolvedError("glMapObjectBufferATI");
    

        *(void **)&real_glUnmapObjectBufferATI = resolveGl("glUnmapObjectBufferATI");
        if (!real_glUnmapObjectBufferATI)
            unresolvedError("glUnmapObjectBufferATI");
    

        *(void **)&real_glPNTrianglesiATI = resolveGl("glPNTrianglesiATI");
        if (!real_glPNTrianglesiATI)
            unresolvedError("glPNTrianglesiATI");
    

        *(void **)&real_glPNTrianglesfATI = resolveGl("glPNTrianglesfATI");
        if (!real_glPNTrianglesfATI)
            unresolvedError("glPNTrianglesfATI");
    

        *(void **)&real_glStencilOpSeparateATI = resolveGl("glStencilOpSeparateATI");
        if (!real_glStencilOpSeparateATI)
            unresolvedError("glStencilOpSeparateATI");
    

        *(void **)&real_glStencilFuncSeparateATI = resolveGl("glStencilFuncSeparateATI");
        if (!real_glStencilFuncSeparateATI)
            unresolvedError("glStencilFuncSeparateATI");
    

        *(void **)&real_glNewObjectBufferATI = resolveGl("glNewObjectBufferATI");
        if (!real_glNewObjectBufferATI)
            unresolvedError("glNewObjectBufferATI");
    

        *(void **)&real_glIsObjectBufferATI = resolveGl("glIsObjectBufferATI");
        if (!real_glIsObjectBufferATI)
            unresolvedError("glIsObjectBufferATI");
    

        *(void **)&real_glUpdateObjectBufferATI = resolveGl("glUpdateObjectBufferATI");
        if (!real_glUpdateObjectBufferATI)
            unresolvedError("glUpdateObjectBufferATI");
    

        *(void **)&real_glGetObjectBufferfvATI = resolveGl("glGetObjectBufferfvATI");
        if (!real_glGetObjectBufferfvATI)
            unresolvedError("glGetObjectBufferfvATI");
    

        *(void **)&real_glGetObjectBufferivATI = resolveGl("glGetObjectBufferivATI");
        if (!real_glGetObjectBufferivATI)
            unresolvedError("glGetObjectBufferivATI");
    

        *(void **)&real_glFreeObjectBufferATI = resolveGl("glFreeObjectBufferATI");
        if (!real_glFreeObjectBufferATI)
            unresolvedError("glFreeObjectBufferATI");
    

        *(void **)&real_glArrayObjectATI = resolveGl("glArrayObjectATI");
        if (!real_glArrayObjectATI)
            unresolvedError("glArrayObjectATI");
    

        *(void **)&real_glGetArrayObjectfvATI = resolveGl("glGetArrayObjectfvATI");
        if (!real_glGetArrayObjectfvATI)
            unresolvedError("glGetArrayObjectfvATI");
    

        *(void **)&real_glGetArrayObjectivATI = resolveGl("glGetArrayObjectivATI");
        if (!real_glGetArrayObjectivATI)
            unresolvedError("glGetArrayObjectivATI");
    

        *(void **)&real_glVariantArrayObjectATI = resolveGl("glVariantArrayObjectATI");
        if (!real_glVariantArrayObjectATI)
            unresolvedError("glVariantArrayObjectATI");
    

        *(void **)&real_glGetVariantArrayObjectfvATI = resolveGl("glGetVariantArrayObjectfvATI");
        if (!real_glGetVariantArrayObjectfvATI)
            unresolvedError("glGetVariantArrayObjectfvATI");
    

        *(void **)&real_glGetVariantArrayObjectivATI = resolveGl("glGetVariantArrayObjectivATI");
        if (!real_glGetVariantArrayObjectivATI)
            unresolvedError("glGetVariantArrayObjectivATI");
    

        *(void **)&real_glVertexAttribArrayObjectATI = resolveGl("glVertexAttribArrayObjectATI");
        if (!real_glVertexAttribArrayObjectATI)
            unresolvedError("glVertexAttribArrayObjectATI");
    

        *(void **)&real_glGetVertexAttribArrayObjectfvATI = resolveGl("glGetVertexAttribArrayObjectfvATI");
        if (!real_glGetVertexAttribArrayObjectfvATI)
            unresolvedError("glGetVertexAttribArrayObjectfvATI");
    

        *(void **)&real_glGetVertexAttribArrayObjectivATI = resolveGl("glGetVertexAttribArrayObjectivATI");
        if (!real_glGetVertexAttribArrayObjectivATI)
            unresolvedError("glGetVertexAttribArrayObjectivATI");
    

        *(void **)&real_glVertexStream1sATI = resolveGl("glVertexStream1sATI");
        if (!real_glVertexStream1sATI)
            unresolvedError("glVertexStream1sATI");
    

        *(void **)&real_glVertexStream1svATI = resolveGl("glVertexStream1svATI");
        if (!real_glVertexStream1svATI)
            unresolvedError("glVertexStream1svATI");
    

        *(void **)&real_glVertexStream1iATI = resolveGl("glVertexStream1iATI");
        if (!real_glVertexStream1iATI)
            unresolvedError("glVertexStream1iATI");
    

        *(void **)&real_glVertexStream1ivATI = resolveGl("glVertexStream1ivATI");
        if (!real_glVertexStream1ivATI)
            unresolvedError("glVertexStream1ivATI");
    

        *(void **)&real_glVertexStream1fATI = resolveGl("glVertexStream1fATI");
        if (!real_glVertexStream1fATI)
            unresolvedError("glVertexStream1fATI");
    

        *(void **)&real_glVertexStream1fvATI = resolveGl("glVertexStream1fvATI");
        if (!real_glVertexStream1fvATI)
            unresolvedError("glVertexStream1fvATI");
    

        *(void **)&real_glVertexStream1dATI = resolveGl("glVertexStream1dATI");
        if (!real_glVertexStream1dATI)
            unresolvedError("glVertexStream1dATI");
    

        *(void **)&real_glVertexStream1dvATI = resolveGl("glVertexStream1dvATI");
        if (!real_glVertexStream1dvATI)
            unresolvedError("glVertexStream1dvATI");
    

        *(void **)&real_glVertexStream2sATI = resolveGl("glVertexStream2sATI");
        if (!real_glVertexStream2sATI)
            unresolvedError("glVertexStream2sATI");
    

        *(void **)&real_glVertexStream2svATI = resolveGl("glVertexStream2svATI");
        if (!real_glVertexStream2svATI)
            unresolvedError("glVertexStream2svATI");
    

        *(void **)&real_glVertexStream2iATI = resolveGl("glVertexStream2iATI");
        if (!real_glVertexStream2iATI)
            unresolvedError("glVertexStream2iATI");
    

        *(void **)&real_glVertexStream2ivATI = resolveGl("glVertexStream2ivATI");
        if (!real_glVertexStream2ivATI)
            unresolvedError("glVertexStream2ivATI");
    

        *(void **)&real_glVertexStream2fATI = resolveGl("glVertexStream2fATI");
        if (!real_glVertexStream2fATI)
            unresolvedError("glVertexStream2fATI");
    

        *(void **)&real_glVertexStream2fvATI = resolveGl("glVertexStream2fvATI");
        if (!real_glVertexStream2fvATI)
            unresolvedError("glVertexStream2fvATI");
    

        *(void **)&real_glVertexStream2dATI = resolveGl("glVertexStream2dATI");
        if (!real_glVertexStream2dATI)
            unresolvedError("glVertexStream2dATI");
    

        *(void **)&real_glVertexStream2dvATI = resolveGl("glVertexStream2dvATI");
        if (!real_glVertexStream2dvATI)
            unresolvedError("glVertexStream2dvATI");
    

        *(void **)&real_glVertexStream3sATI = resolveGl("glVertexStream3sATI");
        if (!real_glVertexStream3sATI)
            unresolvedError("glVertexStream3sATI");
    

        *(void **)&real_glVertexStream3svATI = resolveGl("glVertexStream3svATI");
        if (!real_glVertexStream3svATI)
            unresolvedError("glVertexStream3svATI");
    

        *(void **)&real_glVertexStream3iATI = resolveGl("glVertexStream3iATI");
        if (!real_glVertexStream3iATI)
            unresolvedError("glVertexStream3iATI");
    

        *(void **)&real_glVertexStream3ivATI = resolveGl("glVertexStream3ivATI");
        if (!real_glVertexStream3ivATI)
            unresolvedError("glVertexStream3ivATI");
    

        *(void **)&real_glVertexStream3fATI = resolveGl("glVertexStream3fATI");
        if (!real_glVertexStream3fATI)
            unresolvedError("glVertexStream3fATI");
    

        *(void **)&real_glVertexStream3fvATI = resolveGl("glVertexStream3fvATI");
        if (!real_glVertexStream3fvATI)
            unresolvedError("glVertexStream3fvATI");
    

        *(void **)&real_glVertexStream3dATI = resolveGl("glVertexStream3dATI");
        if (!real_glVertexStream3dATI)
            unresolvedError("glVertexStream3dATI");
    

        *(void **)&real_glVertexStream3dvATI = resolveGl("glVertexStream3dvATI");
        if (!real_glVertexStream3dvATI)
            unresolvedError("glVertexStream3dvATI");
    

        *(void **)&real_glVertexStream4sATI = resolveGl("glVertexStream4sATI");
        if (!real_glVertexStream4sATI)
            unresolvedError("glVertexStream4sATI");
    

        *(void **)&real_glVertexStream4svATI = resolveGl("glVertexStream4svATI");
        if (!real_glVertexStream4svATI)
            unresolvedError("glVertexStream4svATI");
    

        *(void **)&real_glVertexStream4iATI = resolveGl("glVertexStream4iATI");
        if (!real_glVertexStream4iATI)
            unresolvedError("glVertexStream4iATI");
    

        *(void **)&real_glVertexStream4ivATI = resolveGl("glVertexStream4ivATI");
        if (!real_glVertexStream4ivATI)
            unresolvedError("glVertexStream4ivATI");
    

        *(void **)&real_glVertexStream4fATI = resolveGl("glVertexStream4fATI");
        if (!real_glVertexStream4fATI)
            unresolvedError("glVertexStream4fATI");
    

        *(void **)&real_glVertexStream4fvATI = resolveGl("glVertexStream4fvATI");
        if (!real_glVertexStream4fvATI)
            unresolvedError("glVertexStream4fvATI");
    

        *(void **)&real_glVertexStream4dATI = resolveGl("glVertexStream4dATI");
        if (!real_glVertexStream4dATI)
            unresolvedError("glVertexStream4dATI");
    

        *(void **)&real_glVertexStream4dvATI = resolveGl("glVertexStream4dvATI");
        if (!real_glVertexStream4dvATI)
            unresolvedError("glVertexStream4dvATI");
    

        *(void **)&real_glNormalStream3bATI = resolveGl("glNormalStream3bATI");
        if (!real_glNormalStream3bATI)
            unresolvedError("glNormalStream3bATI");
    

        *(void **)&real_glNormalStream3bvATI = resolveGl("glNormalStream3bvATI");
        if (!real_glNormalStream3bvATI)
            unresolvedError("glNormalStream3bvATI");
    

        *(void **)&real_glNormalStream3sATI = resolveGl("glNormalStream3sATI");
        if (!real_glNormalStream3sATI)
            unresolvedError("glNormalStream3sATI");
    

        *(void **)&real_glNormalStream3svATI = resolveGl("glNormalStream3svATI");
        if (!real_glNormalStream3svATI)
            unresolvedError("glNormalStream3svATI");
    

        *(void **)&real_glNormalStream3iATI = resolveGl("glNormalStream3iATI");
        if (!real_glNormalStream3iATI)
            unresolvedError("glNormalStream3iATI");
    

        *(void **)&real_glNormalStream3ivATI = resolveGl("glNormalStream3ivATI");
        if (!real_glNormalStream3ivATI)
            unresolvedError("glNormalStream3ivATI");
    

        *(void **)&real_glNormalStream3fATI = resolveGl("glNormalStream3fATI");
        if (!real_glNormalStream3fATI)
            unresolvedError("glNormalStream3fATI");
    

        *(void **)&real_glNormalStream3fvATI = resolveGl("glNormalStream3fvATI");
        if (!real_glNormalStream3fvATI)
            unresolvedError("glNormalStream3fvATI");
    

        *(void **)&real_glNormalStream3dATI = resolveGl("glNormalStream3dATI");
        if (!real_glNormalStream3dATI)
            unresolvedError("glNormalStream3dATI");
    

        *(void **)&real_glNormalStream3dvATI = resolveGl("glNormalStream3dvATI");
        if (!real_glNormalStream3dvATI)
            unresolvedError("glNormalStream3dvATI");
    

        *(void **)&real_glClientActiveVertexStreamATI = resolveGl("glClientActiveVertexStreamATI");
        if (!real_glClientActiveVertexStreamATI)
            unresolvedError("glClientActiveVertexStreamATI");
    

        *(void **)&real_glVertexBlendEnviATI = resolveGl("glVertexBlendEnviATI");
        if (!real_glVertexBlendEnviATI)
            unresolvedError("glVertexBlendEnviATI");
    

        *(void **)&real_glVertexBlendEnvfATI = resolveGl("glVertexBlendEnvfATI");
        if (!real_glVertexBlendEnvfATI)
            unresolvedError("glVertexBlendEnvfATI");
    

        *(void **)&real_glEGLImageTargetTexStorageEXT = resolveGl("glEGLImageTargetTexStorageEXT");
        if (!real_glEGLImageTargetTexStorageEXT)
            unresolvedError("glEGLImageTargetTexStorageEXT");
    

        *(void **)&real_glEGLImageTargetTextureStorageEXT = resolveGl("glEGLImageTargetTextureStorageEXT");
        if (!real_glEGLImageTargetTextureStorageEXT)
            unresolvedError("glEGLImageTargetTextureStorageEXT");
    

        *(void **)&real_glUniformBufferEXT = resolveGl("glUniformBufferEXT");
        if (!real_glUniformBufferEXT)
            unresolvedError("glUniformBufferEXT");
    

        *(void **)&real_glGetUniformBufferSizeEXT = resolveGl("glGetUniformBufferSizeEXT");
        if (!real_glGetUniformBufferSizeEXT)
            unresolvedError("glGetUniformBufferSizeEXT");
    

        *(void **)&real_glGetUniformOffsetEXT = resolveGl("glGetUniformOffsetEXT");
        if (!real_glGetUniformOffsetEXT)
            unresolvedError("glGetUniformOffsetEXT");
    

        *(void **)&real_glBlendColorEXT = resolveGl("glBlendColorEXT");
        if (!real_glBlendColorEXT)
            unresolvedError("glBlendColorEXT");
    

        *(void **)&real_glBlendEquationSeparateEXT = resolveGl("glBlendEquationSeparateEXT");
        if (!real_glBlendEquationSeparateEXT)
            unresolvedError("glBlendEquationSeparateEXT");
    

        *(void **)&real_glBlendFuncSeparateEXT = resolveGl("glBlendFuncSeparateEXT");
        if (!real_glBlendFuncSeparateEXT)
            unresolvedError("glBlendFuncSeparateEXT");
    

        *(void **)&real_glBlendEquationEXT = resolveGl("glBlendEquationEXT");
        if (!real_glBlendEquationEXT)
            unresolvedError("glBlendEquationEXT");
    

        *(void **)&real_glColorSubTableEXT = resolveGl("glColorSubTableEXT");
        if (!real_glColorSubTableEXT)
            unresolvedError("glColorSubTableEXT");
    

        *(void **)&real_glCopyColorSubTableEXT = resolveGl("glCopyColorSubTableEXT");
        if (!real_glCopyColorSubTableEXT)
            unresolvedError("glCopyColorSubTableEXT");
    

        *(void **)&real_glLockArraysEXT = resolveGl("glLockArraysEXT");
        if (!real_glLockArraysEXT)
            unresolvedError("glLockArraysEXT");
    

        *(void **)&real_glUnlockArraysEXT = resolveGl("glUnlockArraysEXT");
        if (!real_glUnlockArraysEXT)
            unresolvedError("glUnlockArraysEXT");
    

        *(void **)&real_glConvolutionFilter1DEXT = resolveGl("glConvolutionFilter1DEXT");
        if (!real_glConvolutionFilter1DEXT)
            unresolvedError("glConvolutionFilter1DEXT");
    

        *(void **)&real_glConvolutionFilter2DEXT = resolveGl("glConvolutionFilter2DEXT");
        if (!real_glConvolutionFilter2DEXT)
            unresolvedError("glConvolutionFilter2DEXT");
    

        *(void **)&real_glConvolutionParameterfEXT = resolveGl("glConvolutionParameterfEXT");
        if (!real_glConvolutionParameterfEXT)
            unresolvedError("glConvolutionParameterfEXT");
    

        *(void **)&real_glConvolutionParameterfvEXT = resolveGl("glConvolutionParameterfvEXT");
        if (!real_glConvolutionParameterfvEXT)
            unresolvedError("glConvolutionParameterfvEXT");
    

        *(void **)&real_glConvolutionParameteriEXT = resolveGl("glConvolutionParameteriEXT");
        if (!real_glConvolutionParameteriEXT)
            unresolvedError("glConvolutionParameteriEXT");
    

        *(void **)&real_glConvolutionParameterivEXT = resolveGl("glConvolutionParameterivEXT");
        if (!real_glConvolutionParameterivEXT)
            unresolvedError("glConvolutionParameterivEXT");
    

        *(void **)&real_glCopyConvolutionFilter1DEXT = resolveGl("glCopyConvolutionFilter1DEXT");
        if (!real_glCopyConvolutionFilter1DEXT)
            unresolvedError("glCopyConvolutionFilter1DEXT");
    

        *(void **)&real_glCopyConvolutionFilter2DEXT = resolveGl("glCopyConvolutionFilter2DEXT");
        if (!real_glCopyConvolutionFilter2DEXT)
            unresolvedError("glCopyConvolutionFilter2DEXT");
    

        *(void **)&real_glGetConvolutionFilterEXT = resolveGl("glGetConvolutionFilterEXT");
        if (!real_glGetConvolutionFilterEXT)
            unresolvedError("glGetConvolutionFilterEXT");
    

        *(void **)&real_glGetConvolutionParameterfvEXT = resolveGl("glGetConvolutionParameterfvEXT");
        if (!real_glGetConvolutionParameterfvEXT)
            unresolvedError("glGetConvolutionParameterfvEXT");
    

        *(void **)&real_glGetConvolutionParameterivEXT = resolveGl("glGetConvolutionParameterivEXT");
        if (!real_glGetConvolutionParameterivEXT)
            unresolvedError("glGetConvolutionParameterivEXT");
    

        *(void **)&real_glGetSeparableFilterEXT = resolveGl("glGetSeparableFilterEXT");
        if (!real_glGetSeparableFilterEXT)
            unresolvedError("glGetSeparableFilterEXT");
    

        *(void **)&real_glSeparableFilter2DEXT = resolveGl("glSeparableFilter2DEXT");
        if (!real_glSeparableFilter2DEXT)
            unresolvedError("glSeparableFilter2DEXT");
    

        *(void **)&real_glTangent3bEXT = resolveGl("glTangent3bEXT");
        if (!real_glTangent3bEXT)
            unresolvedError("glTangent3bEXT");
    

        *(void **)&real_glTangent3bvEXT = resolveGl("glTangent3bvEXT");
        if (!real_glTangent3bvEXT)
            unresolvedError("glTangent3bvEXT");
    

        *(void **)&real_glTangent3dEXT = resolveGl("glTangent3dEXT");
        if (!real_glTangent3dEXT)
            unresolvedError("glTangent3dEXT");
    

        *(void **)&real_glTangent3dvEXT = resolveGl("glTangent3dvEXT");
        if (!real_glTangent3dvEXT)
            unresolvedError("glTangent3dvEXT");
    

        *(void **)&real_glTangent3fEXT = resolveGl("glTangent3fEXT");
        if (!real_glTangent3fEXT)
            unresolvedError("glTangent3fEXT");
    

        *(void **)&real_glTangent3fvEXT = resolveGl("glTangent3fvEXT");
        if (!real_glTangent3fvEXT)
            unresolvedError("glTangent3fvEXT");
    

        *(void **)&real_glTangent3iEXT = resolveGl("glTangent3iEXT");
        if (!real_glTangent3iEXT)
            unresolvedError("glTangent3iEXT");
    

        *(void **)&real_glTangent3ivEXT = resolveGl("glTangent3ivEXT");
        if (!real_glTangent3ivEXT)
            unresolvedError("glTangent3ivEXT");
    

        *(void **)&real_glTangent3sEXT = resolveGl("glTangent3sEXT");
        if (!real_glTangent3sEXT)
            unresolvedError("glTangent3sEXT");
    

        *(void **)&real_glTangent3svEXT = resolveGl("glTangent3svEXT");
        if (!real_glTangent3svEXT)
            unresolvedError("glTangent3svEXT");
    

        *(void **)&real_glBinormal3bEXT = resolveGl("glBinormal3bEXT");
        if (!real_glBinormal3bEXT)
            unresolvedError("glBinormal3bEXT");
    

        *(void **)&real_glBinormal3bvEXT = resolveGl("glBinormal3bvEXT");
        if (!real_glBinormal3bvEXT)
            unresolvedError("glBinormal3bvEXT");
    

        *(void **)&real_glBinormal3dEXT = resolveGl("glBinormal3dEXT");
        if (!real_glBinormal3dEXT)
            unresolvedError("glBinormal3dEXT");
    

        *(void **)&real_glBinormal3dvEXT = resolveGl("glBinormal3dvEXT");
        if (!real_glBinormal3dvEXT)
            unresolvedError("glBinormal3dvEXT");
    

        *(void **)&real_glBinormal3fEXT = resolveGl("glBinormal3fEXT");
        if (!real_glBinormal3fEXT)
            unresolvedError("glBinormal3fEXT");
    

        *(void **)&real_glBinormal3fvEXT = resolveGl("glBinormal3fvEXT");
        if (!real_glBinormal3fvEXT)
            unresolvedError("glBinormal3fvEXT");
    

        *(void **)&real_glBinormal3iEXT = resolveGl("glBinormal3iEXT");
        if (!real_glBinormal3iEXT)
            unresolvedError("glBinormal3iEXT");
    

        *(void **)&real_glBinormal3ivEXT = resolveGl("glBinormal3ivEXT");
        if (!real_glBinormal3ivEXT)
            unresolvedError("glBinormal3ivEXT");
    

        *(void **)&real_glBinormal3sEXT = resolveGl("glBinormal3sEXT");
        if (!real_glBinormal3sEXT)
            unresolvedError("glBinormal3sEXT");
    

        *(void **)&real_glBinormal3svEXT = resolveGl("glBinormal3svEXT");
        if (!real_glBinormal3svEXT)
            unresolvedError("glBinormal3svEXT");
    

        *(void **)&real_glTangentPointerEXT = resolveGl("glTangentPointerEXT");
        if (!real_glTangentPointerEXT)
            unresolvedError("glTangentPointerEXT");
    

        *(void **)&real_glBinormalPointerEXT = resolveGl("glBinormalPointerEXT");
        if (!real_glBinormalPointerEXT)
            unresolvedError("glBinormalPointerEXT");
    

        *(void **)&real_glCopyTexImage1DEXT = resolveGl("glCopyTexImage1DEXT");
        if (!real_glCopyTexImage1DEXT)
            unresolvedError("glCopyTexImage1DEXT");
    

        *(void **)&real_glCopyTexImage2DEXT = resolveGl("glCopyTexImage2DEXT");
        if (!real_glCopyTexImage2DEXT)
            unresolvedError("glCopyTexImage2DEXT");
    

        *(void **)&real_glCopyTexSubImage1DEXT = resolveGl("glCopyTexSubImage1DEXT");
        if (!real_glCopyTexSubImage1DEXT)
            unresolvedError("glCopyTexSubImage1DEXT");
    

        *(void **)&real_glCopyTexSubImage2DEXT = resolveGl("glCopyTexSubImage2DEXT");
        if (!real_glCopyTexSubImage2DEXT)
            unresolvedError("glCopyTexSubImage2DEXT");
    

        *(void **)&real_glCopyTexSubImage3DEXT = resolveGl("glCopyTexSubImage3DEXT");
        if (!real_glCopyTexSubImage3DEXT)
            unresolvedError("glCopyTexSubImage3DEXT");
    

        *(void **)&real_glCullParameterdvEXT = resolveGl("glCullParameterdvEXT");
        if (!real_glCullParameterdvEXT)
            unresolvedError("glCullParameterdvEXT");
    

        *(void **)&real_glCullParameterfvEXT = resolveGl("glCullParameterfvEXT");
        if (!real_glCullParameterfvEXT)
            unresolvedError("glCullParameterfvEXT");
    

        *(void **)&real_glLabelObjectEXT = resolveGl("glLabelObjectEXT");
        if (!real_glLabelObjectEXT)
            unresolvedError("glLabelObjectEXT");
    

        *(void **)&real_glGetObjectLabelEXT = resolveGl("glGetObjectLabelEXT");
        if (!real_glGetObjectLabelEXT)
            unresolvedError("glGetObjectLabelEXT");
    

        *(void **)&real_glInsertEventMarkerEXT = resolveGl("glInsertEventMarkerEXT");
        if (!real_glInsertEventMarkerEXT)
            unresolvedError("glInsertEventMarkerEXT");
    

        *(void **)&real_glPushGroupMarkerEXT = resolveGl("glPushGroupMarkerEXT");
        if (!real_glPushGroupMarkerEXT)
            unresolvedError("glPushGroupMarkerEXT");
    

        *(void **)&real_glPopGroupMarkerEXT = resolveGl("glPopGroupMarkerEXT");
        if (!real_glPopGroupMarkerEXT)
            unresolvedError("glPopGroupMarkerEXT");
    

        *(void **)&real_glDepthBoundsEXT = resolveGl("glDepthBoundsEXT");
        if (!real_glDepthBoundsEXT)
            unresolvedError("glDepthBoundsEXT");
    

        *(void **)&real_glMatrixLoadfEXT = resolveGl("glMatrixLoadfEXT");
        if (!real_glMatrixLoadfEXT)
            unresolvedError("glMatrixLoadfEXT");
    

        *(void **)&real_glMatrixLoaddEXT = resolveGl("glMatrixLoaddEXT");
        if (!real_glMatrixLoaddEXT)
            unresolvedError("glMatrixLoaddEXT");
    

        *(void **)&real_glMatrixMultfEXT = resolveGl("glMatrixMultfEXT");
        if (!real_glMatrixMultfEXT)
            unresolvedError("glMatrixMultfEXT");
    

        *(void **)&real_glMatrixMultdEXT = resolveGl("glMatrixMultdEXT");
        if (!real_glMatrixMultdEXT)
            unresolvedError("glMatrixMultdEXT");
    

        *(void **)&real_glMatrixLoadIdentityEXT = resolveGl("glMatrixLoadIdentityEXT");
        if (!real_glMatrixLoadIdentityEXT)
            unresolvedError("glMatrixLoadIdentityEXT");
    

        *(void **)&real_glMatrixRotatefEXT = resolveGl("glMatrixRotatefEXT");
        if (!real_glMatrixRotatefEXT)
            unresolvedError("glMatrixRotatefEXT");
    

        *(void **)&real_glMatrixRotatedEXT = resolveGl("glMatrixRotatedEXT");
        if (!real_glMatrixRotatedEXT)
            unresolvedError("glMatrixRotatedEXT");
    

        *(void **)&real_glMatrixScalefEXT = resolveGl("glMatrixScalefEXT");
        if (!real_glMatrixScalefEXT)
            unresolvedError("glMatrixScalefEXT");
    

        *(void **)&real_glMatrixScaledEXT = resolveGl("glMatrixScaledEXT");
        if (!real_glMatrixScaledEXT)
            unresolvedError("glMatrixScaledEXT");
    

        *(void **)&real_glMatrixTranslatefEXT = resolveGl("glMatrixTranslatefEXT");
        if (!real_glMatrixTranslatefEXT)
            unresolvedError("glMatrixTranslatefEXT");
    

        *(void **)&real_glMatrixTranslatedEXT = resolveGl("glMatrixTranslatedEXT");
        if (!real_glMatrixTranslatedEXT)
            unresolvedError("glMatrixTranslatedEXT");
    

        *(void **)&real_glMatrixFrustumEXT = resolveGl("glMatrixFrustumEXT");
        if (!real_glMatrixFrustumEXT)
            unresolvedError("glMatrixFrustumEXT");
    

        *(void **)&real_glMatrixOrthoEXT = resolveGl("glMatrixOrthoEXT");
        if (!real_glMatrixOrthoEXT)
            unresolvedError("glMatrixOrthoEXT");
    

        *(void **)&real_glMatrixPopEXT = resolveGl("glMatrixPopEXT");
        if (!real_glMatrixPopEXT)
            unresolvedError("glMatrixPopEXT");
    

        *(void **)&real_glMatrixPushEXT = resolveGl("glMatrixPushEXT");
        if (!real_glMatrixPushEXT)
            unresolvedError("glMatrixPushEXT");
    

        *(void **)&real_glClientAttribDefaultEXT = resolveGl("glClientAttribDefaultEXT");
        if (!real_glClientAttribDefaultEXT)
            unresolvedError("glClientAttribDefaultEXT");
    

        *(void **)&real_glPushClientAttribDefaultEXT = resolveGl("glPushClientAttribDefaultEXT");
        if (!real_glPushClientAttribDefaultEXT)
            unresolvedError("glPushClientAttribDefaultEXT");
    

        *(void **)&real_glTextureParameterfEXT = resolveGl("glTextureParameterfEXT");
        if (!real_glTextureParameterfEXT)
            unresolvedError("glTextureParameterfEXT");
    

        *(void **)&real_glTextureParameterfvEXT = resolveGl("glTextureParameterfvEXT");
        if (!real_glTextureParameterfvEXT)
            unresolvedError("glTextureParameterfvEXT");
    

        *(void **)&real_glTextureParameteriEXT = resolveGl("glTextureParameteriEXT");
        if (!real_glTextureParameteriEXT)
            unresolvedError("glTextureParameteriEXT");
    

        *(void **)&real_glTextureParameterivEXT = resolveGl("glTextureParameterivEXT");
        if (!real_glTextureParameterivEXT)
            unresolvedError("glTextureParameterivEXT");
    

        *(void **)&real_glTextureImage1DEXT = resolveGl("glTextureImage1DEXT");
        if (!real_glTextureImage1DEXT)
            unresolvedError("glTextureImage1DEXT");
    

        *(void **)&real_glTextureImage2DEXT = resolveGl("glTextureImage2DEXT");
        if (!real_glTextureImage2DEXT)
            unresolvedError("glTextureImage2DEXT");
    

        *(void **)&real_glTextureSubImage1DEXT = resolveGl("glTextureSubImage1DEXT");
        if (!real_glTextureSubImage1DEXT)
            unresolvedError("glTextureSubImage1DEXT");
    

        *(void **)&real_glTextureSubImage2DEXT = resolveGl("glTextureSubImage2DEXT");
        if (!real_glTextureSubImage2DEXT)
            unresolvedError("glTextureSubImage2DEXT");
    

        *(void **)&real_glCopyTextureImage1DEXT = resolveGl("glCopyTextureImage1DEXT");
        if (!real_glCopyTextureImage1DEXT)
            unresolvedError("glCopyTextureImage1DEXT");
    

        *(void **)&real_glCopyTextureImage2DEXT = resolveGl("glCopyTextureImage2DEXT");
        if (!real_glCopyTextureImage2DEXT)
            unresolvedError("glCopyTextureImage2DEXT");
    

        *(void **)&real_glCopyTextureSubImage1DEXT = resolveGl("glCopyTextureSubImage1DEXT");
        if (!real_glCopyTextureSubImage1DEXT)
            unresolvedError("glCopyTextureSubImage1DEXT");
    

        *(void **)&real_glCopyTextureSubImage2DEXT = resolveGl("glCopyTextureSubImage2DEXT");
        if (!real_glCopyTextureSubImage2DEXT)
            unresolvedError("glCopyTextureSubImage2DEXT");
    

        *(void **)&real_glGetTextureImageEXT = resolveGl("glGetTextureImageEXT");
        if (!real_glGetTextureImageEXT)
            unresolvedError("glGetTextureImageEXT");
    

        *(void **)&real_glGetTextureParameterfvEXT = resolveGl("glGetTextureParameterfvEXT");
        if (!real_glGetTextureParameterfvEXT)
            unresolvedError("glGetTextureParameterfvEXT");
    

        *(void **)&real_glGetTextureParameterivEXT = resolveGl("glGetTextureParameterivEXT");
        if (!real_glGetTextureParameterivEXT)
            unresolvedError("glGetTextureParameterivEXT");
    

        *(void **)&real_glGetTextureLevelParameterfvEXT = resolveGl("glGetTextureLevelParameterfvEXT");
        if (!real_glGetTextureLevelParameterfvEXT)
            unresolvedError("glGetTextureLevelParameterfvEXT");
    

        *(void **)&real_glGetTextureLevelParameterivEXT = resolveGl("glGetTextureLevelParameterivEXT");
        if (!real_glGetTextureLevelParameterivEXT)
            unresolvedError("glGetTextureLevelParameterivEXT");
    

        *(void **)&real_glTextureImage3DEXT = resolveGl("glTextureImage3DEXT");
        if (!real_glTextureImage3DEXT)
            unresolvedError("glTextureImage3DEXT");
    

        *(void **)&real_glTextureSubImage3DEXT = resolveGl("glTextureSubImage3DEXT");
        if (!real_glTextureSubImage3DEXT)
            unresolvedError("glTextureSubImage3DEXT");
    

        *(void **)&real_glCopyTextureSubImage3DEXT = resolveGl("glCopyTextureSubImage3DEXT");
        if (!real_glCopyTextureSubImage3DEXT)
            unresolvedError("glCopyTextureSubImage3DEXT");
    

        *(void **)&real_glBindMultiTextureEXT = resolveGl("glBindMultiTextureEXT");
        if (!real_glBindMultiTextureEXT)
            unresolvedError("glBindMultiTextureEXT");
    

        *(void **)&real_glMultiTexCoordPointerEXT = resolveGl("glMultiTexCoordPointerEXT");
        if (!real_glMultiTexCoordPointerEXT)
            unresolvedError("glMultiTexCoordPointerEXT");
    

        *(void **)&real_glMultiTexEnvfEXT = resolveGl("glMultiTexEnvfEXT");
        if (!real_glMultiTexEnvfEXT)
            unresolvedError("glMultiTexEnvfEXT");
    

        *(void **)&real_glMultiTexEnvfvEXT = resolveGl("glMultiTexEnvfvEXT");
        if (!real_glMultiTexEnvfvEXT)
            unresolvedError("glMultiTexEnvfvEXT");
    

        *(void **)&real_glMultiTexEnviEXT = resolveGl("glMultiTexEnviEXT");
        if (!real_glMultiTexEnviEXT)
            unresolvedError("glMultiTexEnviEXT");
    

        *(void **)&real_glMultiTexEnvivEXT = resolveGl("glMultiTexEnvivEXT");
        if (!real_glMultiTexEnvivEXT)
            unresolvedError("glMultiTexEnvivEXT");
    

        *(void **)&real_glMultiTexGendEXT = resolveGl("glMultiTexGendEXT");
        if (!real_glMultiTexGendEXT)
            unresolvedError("glMultiTexGendEXT");
    

        *(void **)&real_glMultiTexGendvEXT = resolveGl("glMultiTexGendvEXT");
        if (!real_glMultiTexGendvEXT)
            unresolvedError("glMultiTexGendvEXT");
    

        *(void **)&real_glMultiTexGenfEXT = resolveGl("glMultiTexGenfEXT");
        if (!real_glMultiTexGenfEXT)
            unresolvedError("glMultiTexGenfEXT");
    

        *(void **)&real_glMultiTexGenfvEXT = resolveGl("glMultiTexGenfvEXT");
        if (!real_glMultiTexGenfvEXT)
            unresolvedError("glMultiTexGenfvEXT");
    

        *(void **)&real_glMultiTexGeniEXT = resolveGl("glMultiTexGeniEXT");
        if (!real_glMultiTexGeniEXT)
            unresolvedError("glMultiTexGeniEXT");
    

        *(void **)&real_glMultiTexGenivEXT = resolveGl("glMultiTexGenivEXT");
        if (!real_glMultiTexGenivEXT)
            unresolvedError("glMultiTexGenivEXT");
    

        *(void **)&real_glGetMultiTexEnvfvEXT = resolveGl("glGetMultiTexEnvfvEXT");
        if (!real_glGetMultiTexEnvfvEXT)
            unresolvedError("glGetMultiTexEnvfvEXT");
    

        *(void **)&real_glGetMultiTexEnvivEXT = resolveGl("glGetMultiTexEnvivEXT");
        if (!real_glGetMultiTexEnvivEXT)
            unresolvedError("glGetMultiTexEnvivEXT");
    

        *(void **)&real_glGetMultiTexGendvEXT = resolveGl("glGetMultiTexGendvEXT");
        if (!real_glGetMultiTexGendvEXT)
            unresolvedError("glGetMultiTexGendvEXT");
    

        *(void **)&real_glGetMultiTexGenfvEXT = resolveGl("glGetMultiTexGenfvEXT");
        if (!real_glGetMultiTexGenfvEXT)
            unresolvedError("glGetMultiTexGenfvEXT");
    

        *(void **)&real_glGetMultiTexGenivEXT = resolveGl("glGetMultiTexGenivEXT");
        if (!real_glGetMultiTexGenivEXT)
            unresolvedError("glGetMultiTexGenivEXT");
    

        *(void **)&real_glMultiTexParameteriEXT = resolveGl("glMultiTexParameteriEXT");
        if (!real_glMultiTexParameteriEXT)
            unresolvedError("glMultiTexParameteriEXT");
    

        *(void **)&real_glMultiTexParameterivEXT = resolveGl("glMultiTexParameterivEXT");
        if (!real_glMultiTexParameterivEXT)
            unresolvedError("glMultiTexParameterivEXT");
    

        *(void **)&real_glMultiTexParameterfEXT = resolveGl("glMultiTexParameterfEXT");
        if (!real_glMultiTexParameterfEXT)
            unresolvedError("glMultiTexParameterfEXT");
    

        *(void **)&real_glMultiTexParameterfvEXT = resolveGl("glMultiTexParameterfvEXT");
        if (!real_glMultiTexParameterfvEXT)
            unresolvedError("glMultiTexParameterfvEXT");
    

        *(void **)&real_glMultiTexImage1DEXT = resolveGl("glMultiTexImage1DEXT");
        if (!real_glMultiTexImage1DEXT)
            unresolvedError("glMultiTexImage1DEXT");
    

        *(void **)&real_glMultiTexImage2DEXT = resolveGl("glMultiTexImage2DEXT");
        if (!real_glMultiTexImage2DEXT)
            unresolvedError("glMultiTexImage2DEXT");
    

        *(void **)&real_glMultiTexSubImage1DEXT = resolveGl("glMultiTexSubImage1DEXT");
        if (!real_glMultiTexSubImage1DEXT)
            unresolvedError("glMultiTexSubImage1DEXT");
    

        *(void **)&real_glMultiTexSubImage2DEXT = resolveGl("glMultiTexSubImage2DEXT");
        if (!real_glMultiTexSubImage2DEXT)
            unresolvedError("glMultiTexSubImage2DEXT");
    

        *(void **)&real_glCopyMultiTexImage1DEXT = resolveGl("glCopyMultiTexImage1DEXT");
        if (!real_glCopyMultiTexImage1DEXT)
            unresolvedError("glCopyMultiTexImage1DEXT");
    

        *(void **)&real_glCopyMultiTexImage2DEXT = resolveGl("glCopyMultiTexImage2DEXT");
        if (!real_glCopyMultiTexImage2DEXT)
            unresolvedError("glCopyMultiTexImage2DEXT");
    

        *(void **)&real_glCopyMultiTexSubImage1DEXT = resolveGl("glCopyMultiTexSubImage1DEXT");
        if (!real_glCopyMultiTexSubImage1DEXT)
            unresolvedError("glCopyMultiTexSubImage1DEXT");
    

        *(void **)&real_glCopyMultiTexSubImage2DEXT = resolveGl("glCopyMultiTexSubImage2DEXT");
        if (!real_glCopyMultiTexSubImage2DEXT)
            unresolvedError("glCopyMultiTexSubImage2DEXT");
    

        *(void **)&real_glGetMultiTexImageEXT = resolveGl("glGetMultiTexImageEXT");
        if (!real_glGetMultiTexImageEXT)
            unresolvedError("glGetMultiTexImageEXT");
    

        *(void **)&real_glGetMultiTexParameterfvEXT = resolveGl("glGetMultiTexParameterfvEXT");
        if (!real_glGetMultiTexParameterfvEXT)
            unresolvedError("glGetMultiTexParameterfvEXT");
    

        *(void **)&real_glGetMultiTexParameterivEXT = resolveGl("glGetMultiTexParameterivEXT");
        if (!real_glGetMultiTexParameterivEXT)
            unresolvedError("glGetMultiTexParameterivEXT");
    

        *(void **)&real_glGetMultiTexLevelParameterfvEXT = resolveGl("glGetMultiTexLevelParameterfvEXT");
        if (!real_glGetMultiTexLevelParameterfvEXT)
            unresolvedError("glGetMultiTexLevelParameterfvEXT");
    

        *(void **)&real_glGetMultiTexLevelParameterivEXT = resolveGl("glGetMultiTexLevelParameterivEXT");
        if (!real_glGetMultiTexLevelParameterivEXT)
            unresolvedError("glGetMultiTexLevelParameterivEXT");
    

        *(void **)&real_glMultiTexImage3DEXT = resolveGl("glMultiTexImage3DEXT");
        if (!real_glMultiTexImage3DEXT)
            unresolvedError("glMultiTexImage3DEXT");
    

        *(void **)&real_glMultiTexSubImage3DEXT = resolveGl("glMultiTexSubImage3DEXT");
        if (!real_glMultiTexSubImage3DEXT)
            unresolvedError("glMultiTexSubImage3DEXT");
    

        *(void **)&real_glCopyMultiTexSubImage3DEXT = resolveGl("glCopyMultiTexSubImage3DEXT");
        if (!real_glCopyMultiTexSubImage3DEXT)
            unresolvedError("glCopyMultiTexSubImage3DEXT");
    

        *(void **)&real_glEnableClientStateIndexedEXT = resolveGl("glEnableClientStateIndexedEXT");
        if (!real_glEnableClientStateIndexedEXT)
            unresolvedError("glEnableClientStateIndexedEXT");
    

        *(void **)&real_glDisableClientStateIndexedEXT = resolveGl("glDisableClientStateIndexedEXT");
        if (!real_glDisableClientStateIndexedEXT)
            unresolvedError("glDisableClientStateIndexedEXT");
    

        *(void **)&real_glGetFloatIndexedvEXT = resolveGl("glGetFloatIndexedvEXT");
        if (!real_glGetFloatIndexedvEXT)
            unresolvedError("glGetFloatIndexedvEXT");
    

        *(void **)&real_glGetDoubleIndexedvEXT = resolveGl("glGetDoubleIndexedvEXT");
        if (!real_glGetDoubleIndexedvEXT)
            unresolvedError("glGetDoubleIndexedvEXT");
    

        *(void **)&real_glGetPointerIndexedvEXT = resolveGl("glGetPointerIndexedvEXT");
        if (!real_glGetPointerIndexedvEXT)
            unresolvedError("glGetPointerIndexedvEXT");
    

        *(void **)&real_glEnableIndexedEXT = resolveGl("glEnableIndexedEXT");
        if (!real_glEnableIndexedEXT)
            unresolvedError("glEnableIndexedEXT");
    

        *(void **)&real_glDisableIndexedEXT = resolveGl("glDisableIndexedEXT");
        if (!real_glDisableIndexedEXT)
            unresolvedError("glDisableIndexedEXT");
    

        *(void **)&real_glIsEnabledIndexedEXT = resolveGl("glIsEnabledIndexedEXT");
        if (!real_glIsEnabledIndexedEXT)
            unresolvedError("glIsEnabledIndexedEXT");
    

        *(void **)&real_glGetIntegerIndexedvEXT = resolveGl("glGetIntegerIndexedvEXT");
        if (!real_glGetIntegerIndexedvEXT)
            unresolvedError("glGetIntegerIndexedvEXT");
    

        *(void **)&real_glGetBooleanIndexedvEXT = resolveGl("glGetBooleanIndexedvEXT");
        if (!real_glGetBooleanIndexedvEXT)
            unresolvedError("glGetBooleanIndexedvEXT");
    

        *(void **)&real_glCompressedTextureImage3DEXT = resolveGl("glCompressedTextureImage3DEXT");
        if (!real_glCompressedTextureImage3DEXT)
            unresolvedError("glCompressedTextureImage3DEXT");
    

        *(void **)&real_glCompressedTextureImage2DEXT = resolveGl("glCompressedTextureImage2DEXT");
        if (!real_glCompressedTextureImage2DEXT)
            unresolvedError("glCompressedTextureImage2DEXT");
    

        *(void **)&real_glCompressedTextureImage1DEXT = resolveGl("glCompressedTextureImage1DEXT");
        if (!real_glCompressedTextureImage1DEXT)
            unresolvedError("glCompressedTextureImage1DEXT");
    

        *(void **)&real_glCompressedTextureSubImage3DEXT = resolveGl("glCompressedTextureSubImage3DEXT");
        if (!real_glCompressedTextureSubImage3DEXT)
            unresolvedError("glCompressedTextureSubImage3DEXT");
    

        *(void **)&real_glCompressedTextureSubImage2DEXT = resolveGl("glCompressedTextureSubImage2DEXT");
        if (!real_glCompressedTextureSubImage2DEXT)
            unresolvedError("glCompressedTextureSubImage2DEXT");
    

        *(void **)&real_glCompressedTextureSubImage1DEXT = resolveGl("glCompressedTextureSubImage1DEXT");
        if (!real_glCompressedTextureSubImage1DEXT)
            unresolvedError("glCompressedTextureSubImage1DEXT");
    

        *(void **)&real_glGetCompressedTextureImageEXT = resolveGl("glGetCompressedTextureImageEXT");
        if (!real_glGetCompressedTextureImageEXT)
            unresolvedError("glGetCompressedTextureImageEXT");
    

        *(void **)&real_glCompressedMultiTexImage3DEXT = resolveGl("glCompressedMultiTexImage3DEXT");
        if (!real_glCompressedMultiTexImage3DEXT)
            unresolvedError("glCompressedMultiTexImage3DEXT");
    

        *(void **)&real_glCompressedMultiTexImage2DEXT = resolveGl("glCompressedMultiTexImage2DEXT");
        if (!real_glCompressedMultiTexImage2DEXT)
            unresolvedError("glCompressedMultiTexImage2DEXT");
    

        *(void **)&real_glCompressedMultiTexImage1DEXT = resolveGl("glCompressedMultiTexImage1DEXT");
        if (!real_glCompressedMultiTexImage1DEXT)
            unresolvedError("glCompressedMultiTexImage1DEXT");
    

        *(void **)&real_glCompressedMultiTexSubImage3DEXT = resolveGl("glCompressedMultiTexSubImage3DEXT");
        if (!real_glCompressedMultiTexSubImage3DEXT)
            unresolvedError("glCompressedMultiTexSubImage3DEXT");
    

        *(void **)&real_glCompressedMultiTexSubImage2DEXT = resolveGl("glCompressedMultiTexSubImage2DEXT");
        if (!real_glCompressedMultiTexSubImage2DEXT)
            unresolvedError("glCompressedMultiTexSubImage2DEXT");
    

        *(void **)&real_glCompressedMultiTexSubImage1DEXT = resolveGl("glCompressedMultiTexSubImage1DEXT");
        if (!real_glCompressedMultiTexSubImage1DEXT)
            unresolvedError("glCompressedMultiTexSubImage1DEXT");
    

        *(void **)&real_glGetCompressedMultiTexImageEXT = resolveGl("glGetCompressedMultiTexImageEXT");
        if (!real_glGetCompressedMultiTexImageEXT)
            unresolvedError("glGetCompressedMultiTexImageEXT");
    

        *(void **)&real_glMatrixLoadTransposefEXT = resolveGl("glMatrixLoadTransposefEXT");
        if (!real_glMatrixLoadTransposefEXT)
            unresolvedError("glMatrixLoadTransposefEXT");
    

        *(void **)&real_glMatrixLoadTransposedEXT = resolveGl("glMatrixLoadTransposedEXT");
        if (!real_glMatrixLoadTransposedEXT)
            unresolvedError("glMatrixLoadTransposedEXT");
    

        *(void **)&real_glMatrixMultTransposefEXT = resolveGl("glMatrixMultTransposefEXT");
        if (!real_glMatrixMultTransposefEXT)
            unresolvedError("glMatrixMultTransposefEXT");
    

        *(void **)&real_glMatrixMultTransposedEXT = resolveGl("glMatrixMultTransposedEXT");
        if (!real_glMatrixMultTransposedEXT)
            unresolvedError("glMatrixMultTransposedEXT");
    

        *(void **)&real_glNamedBufferDataEXT = resolveGl("glNamedBufferDataEXT");
        if (!real_glNamedBufferDataEXT)
            unresolvedError("glNamedBufferDataEXT");
    

        *(void **)&real_glNamedBufferSubDataEXT = resolveGl("glNamedBufferSubDataEXT");
        if (!real_glNamedBufferSubDataEXT)
            unresolvedError("glNamedBufferSubDataEXT");
    

        *(void **)&real_glMapNamedBufferEXT = resolveGl("glMapNamedBufferEXT");
        if (!real_glMapNamedBufferEXT)
            unresolvedError("glMapNamedBufferEXT");
    

        *(void **)&real_glUnmapNamedBufferEXT = resolveGl("glUnmapNamedBufferEXT");
        if (!real_glUnmapNamedBufferEXT)
            unresolvedError("glUnmapNamedBufferEXT");
    

        *(void **)&real_glGetNamedBufferParameterivEXT = resolveGl("glGetNamedBufferParameterivEXT");
        if (!real_glGetNamedBufferParameterivEXT)
            unresolvedError("glGetNamedBufferParameterivEXT");
    

        *(void **)&real_glGetNamedBufferPointervEXT = resolveGl("glGetNamedBufferPointervEXT");
        if (!real_glGetNamedBufferPointervEXT)
            unresolvedError("glGetNamedBufferPointervEXT");
    

        *(void **)&real_glGetNamedBufferSubDataEXT = resolveGl("glGetNamedBufferSubDataEXT");
        if (!real_glGetNamedBufferSubDataEXT)
            unresolvedError("glGetNamedBufferSubDataEXT");
    

        *(void **)&real_glProgramUniform1fEXT = resolveGl("glProgramUniform1fEXT");
        if (!real_glProgramUniform1fEXT)
            unresolvedError("glProgramUniform1fEXT");
    

        *(void **)&real_glProgramUniform2fEXT = resolveGl("glProgramUniform2fEXT");
        if (!real_glProgramUniform2fEXT)
            unresolvedError("glProgramUniform2fEXT");
    

        *(void **)&real_glProgramUniform3fEXT = resolveGl("glProgramUniform3fEXT");
        if (!real_glProgramUniform3fEXT)
            unresolvedError("glProgramUniform3fEXT");
    

        *(void **)&real_glProgramUniform4fEXT = resolveGl("glProgramUniform4fEXT");
        if (!real_glProgramUniform4fEXT)
            unresolvedError("glProgramUniform4fEXT");
    

        *(void **)&real_glProgramUniform1iEXT = resolveGl("glProgramUniform1iEXT");
        if (!real_glProgramUniform1iEXT)
            unresolvedError("glProgramUniform1iEXT");
    

        *(void **)&real_glProgramUniform2iEXT = resolveGl("glProgramUniform2iEXT");
        if (!real_glProgramUniform2iEXT)
            unresolvedError("glProgramUniform2iEXT");
    

        *(void **)&real_glProgramUniform3iEXT = resolveGl("glProgramUniform3iEXT");
        if (!real_glProgramUniform3iEXT)
            unresolvedError("glProgramUniform3iEXT");
    

        *(void **)&real_glProgramUniform4iEXT = resolveGl("glProgramUniform4iEXT");
        if (!real_glProgramUniform4iEXT)
            unresolvedError("glProgramUniform4iEXT");
    

        *(void **)&real_glProgramUniform1fvEXT = resolveGl("glProgramUniform1fvEXT");
        if (!real_glProgramUniform1fvEXT)
            unresolvedError("glProgramUniform1fvEXT");
    

        *(void **)&real_glProgramUniform2fvEXT = resolveGl("glProgramUniform2fvEXT");
        if (!real_glProgramUniform2fvEXT)
            unresolvedError("glProgramUniform2fvEXT");
    

        *(void **)&real_glProgramUniform3fvEXT = resolveGl("glProgramUniform3fvEXT");
        if (!real_glProgramUniform3fvEXT)
            unresolvedError("glProgramUniform3fvEXT");
    

        *(void **)&real_glProgramUniform4fvEXT = resolveGl("glProgramUniform4fvEXT");
        if (!real_glProgramUniform4fvEXT)
            unresolvedError("glProgramUniform4fvEXT");
    

        *(void **)&real_glProgramUniform1ivEXT = resolveGl("glProgramUniform1ivEXT");
        if (!real_glProgramUniform1ivEXT)
            unresolvedError("glProgramUniform1ivEXT");
    

        *(void **)&real_glProgramUniform2ivEXT = resolveGl("glProgramUniform2ivEXT");
        if (!real_glProgramUniform2ivEXT)
            unresolvedError("glProgramUniform2ivEXT");
    

        *(void **)&real_glProgramUniform3ivEXT = resolveGl("glProgramUniform3ivEXT");
        if (!real_glProgramUniform3ivEXT)
            unresolvedError("glProgramUniform3ivEXT");
    

        *(void **)&real_glProgramUniform4ivEXT = resolveGl("glProgramUniform4ivEXT");
        if (!real_glProgramUniform4ivEXT)
            unresolvedError("glProgramUniform4ivEXT");
    

        *(void **)&real_glProgramUniformMatrix2fvEXT = resolveGl("glProgramUniformMatrix2fvEXT");
        if (!real_glProgramUniformMatrix2fvEXT)
            unresolvedError("glProgramUniformMatrix2fvEXT");
    

        *(void **)&real_glProgramUniformMatrix3fvEXT = resolveGl("glProgramUniformMatrix3fvEXT");
        if (!real_glProgramUniformMatrix3fvEXT)
            unresolvedError("glProgramUniformMatrix3fvEXT");
    

        *(void **)&real_glProgramUniformMatrix4fvEXT = resolveGl("glProgramUniformMatrix4fvEXT");
        if (!real_glProgramUniformMatrix4fvEXT)
            unresolvedError("glProgramUniformMatrix4fvEXT");
    

        *(void **)&real_glProgramUniformMatrix2x3fvEXT = resolveGl("glProgramUniformMatrix2x3fvEXT");
        if (!real_glProgramUniformMatrix2x3fvEXT)
            unresolvedError("glProgramUniformMatrix2x3fvEXT");
    

        *(void **)&real_glProgramUniformMatrix3x2fvEXT = resolveGl("glProgramUniformMatrix3x2fvEXT");
        if (!real_glProgramUniformMatrix3x2fvEXT)
            unresolvedError("glProgramUniformMatrix3x2fvEXT");
    

        *(void **)&real_glProgramUniformMatrix2x4fvEXT = resolveGl("glProgramUniformMatrix2x4fvEXT");
        if (!real_glProgramUniformMatrix2x4fvEXT)
            unresolvedError("glProgramUniformMatrix2x4fvEXT");
    

        *(void **)&real_glProgramUniformMatrix4x2fvEXT = resolveGl("glProgramUniformMatrix4x2fvEXT");
        if (!real_glProgramUniformMatrix4x2fvEXT)
            unresolvedError("glProgramUniformMatrix4x2fvEXT");
    

        *(void **)&real_glProgramUniformMatrix3x4fvEXT = resolveGl("glProgramUniformMatrix3x4fvEXT");
        if (!real_glProgramUniformMatrix3x4fvEXT)
            unresolvedError("glProgramUniformMatrix3x4fvEXT");
    

        *(void **)&real_glProgramUniformMatrix4x3fvEXT = resolveGl("glProgramUniformMatrix4x3fvEXT");
        if (!real_glProgramUniformMatrix4x3fvEXT)
            unresolvedError("glProgramUniformMatrix4x3fvEXT");
    

        *(void **)&real_glTextureBufferEXT = resolveGl("glTextureBufferEXT");
        if (!real_glTextureBufferEXT)
            unresolvedError("glTextureBufferEXT");
    

        *(void **)&real_glMultiTexBufferEXT = resolveGl("glMultiTexBufferEXT");
        if (!real_glMultiTexBufferEXT)
            unresolvedError("glMultiTexBufferEXT");
    

        *(void **)&real_glTextureParameterIivEXT = resolveGl("glTextureParameterIivEXT");
        if (!real_glTextureParameterIivEXT)
            unresolvedError("glTextureParameterIivEXT");
    

        *(void **)&real_glTextureParameterIuivEXT = resolveGl("glTextureParameterIuivEXT");
        if (!real_glTextureParameterIuivEXT)
            unresolvedError("glTextureParameterIuivEXT");
    

        *(void **)&real_glGetTextureParameterIivEXT = resolveGl("glGetTextureParameterIivEXT");
        if (!real_glGetTextureParameterIivEXT)
            unresolvedError("glGetTextureParameterIivEXT");
    

        *(void **)&real_glGetTextureParameterIuivEXT = resolveGl("glGetTextureParameterIuivEXT");
        if (!real_glGetTextureParameterIuivEXT)
            unresolvedError("glGetTextureParameterIuivEXT");
    

        *(void **)&real_glMultiTexParameterIivEXT = resolveGl("glMultiTexParameterIivEXT");
        if (!real_glMultiTexParameterIivEXT)
            unresolvedError("glMultiTexParameterIivEXT");
    

        *(void **)&real_glMultiTexParameterIuivEXT = resolveGl("glMultiTexParameterIuivEXT");
        if (!real_glMultiTexParameterIuivEXT)
            unresolvedError("glMultiTexParameterIuivEXT");
    

        *(void **)&real_glGetMultiTexParameterIivEXT = resolveGl("glGetMultiTexParameterIivEXT");
        if (!real_glGetMultiTexParameterIivEXT)
            unresolvedError("glGetMultiTexParameterIivEXT");
    

        *(void **)&real_glGetMultiTexParameterIuivEXT = resolveGl("glGetMultiTexParameterIuivEXT");
        if (!real_glGetMultiTexParameterIuivEXT)
            unresolvedError("glGetMultiTexParameterIuivEXT");
    

        *(void **)&real_glProgramUniform1uiEXT = resolveGl("glProgramUniform1uiEXT");
        if (!real_glProgramUniform1uiEXT)
            unresolvedError("glProgramUniform1uiEXT");
    

        *(void **)&real_glProgramUniform2uiEXT = resolveGl("glProgramUniform2uiEXT");
        if (!real_glProgramUniform2uiEXT)
            unresolvedError("glProgramUniform2uiEXT");
    

        *(void **)&real_glProgramUniform3uiEXT = resolveGl("glProgramUniform3uiEXT");
        if (!real_glProgramUniform3uiEXT)
            unresolvedError("glProgramUniform3uiEXT");
    

        *(void **)&real_glProgramUniform4uiEXT = resolveGl("glProgramUniform4uiEXT");
        if (!real_glProgramUniform4uiEXT)
            unresolvedError("glProgramUniform4uiEXT");
    

        *(void **)&real_glProgramUniform1uivEXT = resolveGl("glProgramUniform1uivEXT");
        if (!real_glProgramUniform1uivEXT)
            unresolvedError("glProgramUniform1uivEXT");
    

        *(void **)&real_glProgramUniform2uivEXT = resolveGl("glProgramUniform2uivEXT");
        if (!real_glProgramUniform2uivEXT)
            unresolvedError("glProgramUniform2uivEXT");
    

        *(void **)&real_glProgramUniform3uivEXT = resolveGl("glProgramUniform3uivEXT");
        if (!real_glProgramUniform3uivEXT)
            unresolvedError("glProgramUniform3uivEXT");
    

        *(void **)&real_glProgramUniform4uivEXT = resolveGl("glProgramUniform4uivEXT");
        if (!real_glProgramUniform4uivEXT)
            unresolvedError("glProgramUniform4uivEXT");
    

        *(void **)&real_glNamedProgramLocalParameters4fvEXT = resolveGl("glNamedProgramLocalParameters4fvEXT");
        if (!real_glNamedProgramLocalParameters4fvEXT)
            unresolvedError("glNamedProgramLocalParameters4fvEXT");
    

        *(void **)&real_glNamedProgramLocalParameterI4iEXT = resolveGl("glNamedProgramLocalParameterI4iEXT");
        if (!real_glNamedProgramLocalParameterI4iEXT)
            unresolvedError("glNamedProgramLocalParameterI4iEXT");
    

        *(void **)&real_glNamedProgramLocalParameterI4ivEXT = resolveGl("glNamedProgramLocalParameterI4ivEXT");
        if (!real_glNamedProgramLocalParameterI4ivEXT)
            unresolvedError("glNamedProgramLocalParameterI4ivEXT");
    

        *(void **)&real_glNamedProgramLocalParametersI4ivEXT = resolveGl("glNamedProgramLocalParametersI4ivEXT");
        if (!real_glNamedProgramLocalParametersI4ivEXT)
            unresolvedError("glNamedProgramLocalParametersI4ivEXT");
    

        *(void **)&real_glNamedProgramLocalParameterI4uiEXT = resolveGl("glNamedProgramLocalParameterI4uiEXT");
        if (!real_glNamedProgramLocalParameterI4uiEXT)
            unresolvedError("glNamedProgramLocalParameterI4uiEXT");
    

        *(void **)&real_glNamedProgramLocalParameterI4uivEXT = resolveGl("glNamedProgramLocalParameterI4uivEXT");
        if (!real_glNamedProgramLocalParameterI4uivEXT)
            unresolvedError("glNamedProgramLocalParameterI4uivEXT");
    

        *(void **)&real_glNamedProgramLocalParametersI4uivEXT = resolveGl("glNamedProgramLocalParametersI4uivEXT");
        if (!real_glNamedProgramLocalParametersI4uivEXT)
            unresolvedError("glNamedProgramLocalParametersI4uivEXT");
    

        *(void **)&real_glGetNamedProgramLocalParameterIivEXT = resolveGl("glGetNamedProgramLocalParameterIivEXT");
        if (!real_glGetNamedProgramLocalParameterIivEXT)
            unresolvedError("glGetNamedProgramLocalParameterIivEXT");
    

        *(void **)&real_glGetNamedProgramLocalParameterIuivEXT = resolveGl("glGetNamedProgramLocalParameterIuivEXT");
        if (!real_glGetNamedProgramLocalParameterIuivEXT)
            unresolvedError("glGetNamedProgramLocalParameterIuivEXT");
    

        *(void **)&real_glEnableClientStateiEXT = resolveGl("glEnableClientStateiEXT");
        if (!real_glEnableClientStateiEXT)
            unresolvedError("glEnableClientStateiEXT");
    

        *(void **)&real_glDisableClientStateiEXT = resolveGl("glDisableClientStateiEXT");
        if (!real_glDisableClientStateiEXT)
            unresolvedError("glDisableClientStateiEXT");
    

        *(void **)&real_glGetFloati_vEXT = resolveGl("glGetFloati_vEXT");
        if (!real_glGetFloati_vEXT)
            unresolvedError("glGetFloati_vEXT");
    

        *(void **)&real_glGetDoublei_vEXT = resolveGl("glGetDoublei_vEXT");
        if (!real_glGetDoublei_vEXT)
            unresolvedError("glGetDoublei_vEXT");
    

        *(void **)&real_glGetPointeri_vEXT = resolveGl("glGetPointeri_vEXT");
        if (!real_glGetPointeri_vEXT)
            unresolvedError("glGetPointeri_vEXT");
    

        *(void **)&real_glNamedProgramStringEXT = resolveGl("glNamedProgramStringEXT");
        if (!real_glNamedProgramStringEXT)
            unresolvedError("glNamedProgramStringEXT");
    

        *(void **)&real_glNamedProgramLocalParameter4dEXT = resolveGl("glNamedProgramLocalParameter4dEXT");
        if (!real_glNamedProgramLocalParameter4dEXT)
            unresolvedError("glNamedProgramLocalParameter4dEXT");
    

        *(void **)&real_glNamedProgramLocalParameter4dvEXT = resolveGl("glNamedProgramLocalParameter4dvEXT");
        if (!real_glNamedProgramLocalParameter4dvEXT)
            unresolvedError("glNamedProgramLocalParameter4dvEXT");
    

        *(void **)&real_glNamedProgramLocalParameter4fEXT = resolveGl("glNamedProgramLocalParameter4fEXT");
        if (!real_glNamedProgramLocalParameter4fEXT)
            unresolvedError("glNamedProgramLocalParameter4fEXT");
    

        *(void **)&real_glNamedProgramLocalParameter4fvEXT = resolveGl("glNamedProgramLocalParameter4fvEXT");
        if (!real_glNamedProgramLocalParameter4fvEXT)
            unresolvedError("glNamedProgramLocalParameter4fvEXT");
    

        *(void **)&real_glGetNamedProgramLocalParameterdvEXT = resolveGl("glGetNamedProgramLocalParameterdvEXT");
        if (!real_glGetNamedProgramLocalParameterdvEXT)
            unresolvedError("glGetNamedProgramLocalParameterdvEXT");
    

        *(void **)&real_glGetNamedProgramLocalParameterfvEXT = resolveGl("glGetNamedProgramLocalParameterfvEXT");
        if (!real_glGetNamedProgramLocalParameterfvEXT)
            unresolvedError("glGetNamedProgramLocalParameterfvEXT");
    

        *(void **)&real_glGetNamedProgramivEXT = resolveGl("glGetNamedProgramivEXT");
        if (!real_glGetNamedProgramivEXT)
            unresolvedError("glGetNamedProgramivEXT");
    

        *(void **)&real_glGetNamedProgramStringEXT = resolveGl("glGetNamedProgramStringEXT");
        if (!real_glGetNamedProgramStringEXT)
            unresolvedError("glGetNamedProgramStringEXT");
    

        *(void **)&real_glNamedRenderbufferStorageEXT = resolveGl("glNamedRenderbufferStorageEXT");
        if (!real_glNamedRenderbufferStorageEXT)
            unresolvedError("glNamedRenderbufferStorageEXT");
    

        *(void **)&real_glGetNamedRenderbufferParameterivEXT = resolveGl("glGetNamedRenderbufferParameterivEXT");
        if (!real_glGetNamedRenderbufferParameterivEXT)
            unresolvedError("glGetNamedRenderbufferParameterivEXT");
    

        *(void **)&real_glNamedRenderbufferStorageMultisampleEXT = resolveGl("glNamedRenderbufferStorageMultisampleEXT");
        if (!real_glNamedRenderbufferStorageMultisampleEXT)
            unresolvedError("glNamedRenderbufferStorageMultisampleEXT");
    

        *(void **)&real_glNamedRenderbufferStorageMultisampleCoverageEXT = resolveGl("glNamedRenderbufferStorageMultisampleCoverageEXT");
        if (!real_glNamedRenderbufferStorageMultisampleCoverageEXT)
            unresolvedError("glNamedRenderbufferStorageMultisampleCoverageEXT");
    

        *(void **)&real_glCheckNamedFramebufferStatusEXT = resolveGl("glCheckNamedFramebufferStatusEXT");
        if (!real_glCheckNamedFramebufferStatusEXT)
            unresolvedError("glCheckNamedFramebufferStatusEXT");
    

        *(void **)&real_glNamedFramebufferTexture1DEXT = resolveGl("glNamedFramebufferTexture1DEXT");
        if (!real_glNamedFramebufferTexture1DEXT)
            unresolvedError("glNamedFramebufferTexture1DEXT");
    

        *(void **)&real_glNamedFramebufferTexture2DEXT = resolveGl("glNamedFramebufferTexture2DEXT");
        if (!real_glNamedFramebufferTexture2DEXT)
            unresolvedError("glNamedFramebufferTexture2DEXT");
    

        *(void **)&real_glNamedFramebufferTexture3DEXT = resolveGl("glNamedFramebufferTexture3DEXT");
        if (!real_glNamedFramebufferTexture3DEXT)
            unresolvedError("glNamedFramebufferTexture3DEXT");
    

        *(void **)&real_glNamedFramebufferRenderbufferEXT = resolveGl("glNamedFramebufferRenderbufferEXT");
        if (!real_glNamedFramebufferRenderbufferEXT)
            unresolvedError("glNamedFramebufferRenderbufferEXT");
    

        *(void **)&real_glGetNamedFramebufferAttachmentParameterivEXT = resolveGl("glGetNamedFramebufferAttachmentParameterivEXT");
        if (!real_glGetNamedFramebufferAttachmentParameterivEXT)
            unresolvedError("glGetNamedFramebufferAttachmentParameterivEXT");
    

        *(void **)&real_glGenerateTextureMipmapEXT = resolveGl("glGenerateTextureMipmapEXT");
        if (!real_glGenerateTextureMipmapEXT)
            unresolvedError("glGenerateTextureMipmapEXT");
    

        *(void **)&real_glGenerateMultiTexMipmapEXT = resolveGl("glGenerateMultiTexMipmapEXT");
        if (!real_glGenerateMultiTexMipmapEXT)
            unresolvedError("glGenerateMultiTexMipmapEXT");
    

        *(void **)&real_glFramebufferDrawBufferEXT = resolveGl("glFramebufferDrawBufferEXT");
        if (!real_glFramebufferDrawBufferEXT)
            unresolvedError("glFramebufferDrawBufferEXT");
    

        *(void **)&real_glFramebufferDrawBuffersEXT = resolveGl("glFramebufferDrawBuffersEXT");
        if (!real_glFramebufferDrawBuffersEXT)
            unresolvedError("glFramebufferDrawBuffersEXT");
    

        *(void **)&real_glFramebufferReadBufferEXT = resolveGl("glFramebufferReadBufferEXT");
        if (!real_glFramebufferReadBufferEXT)
            unresolvedError("glFramebufferReadBufferEXT");
    

        *(void **)&real_glGetFramebufferParameterivEXT = resolveGl("glGetFramebufferParameterivEXT");
        if (!real_glGetFramebufferParameterivEXT)
            unresolvedError("glGetFramebufferParameterivEXT");
    

        *(void **)&real_glNamedCopyBufferSubDataEXT = resolveGl("glNamedCopyBufferSubDataEXT");
        if (!real_glNamedCopyBufferSubDataEXT)
            unresolvedError("glNamedCopyBufferSubDataEXT");
    

        *(void **)&real_glNamedFramebufferTextureEXT = resolveGl("glNamedFramebufferTextureEXT");
        if (!real_glNamedFramebufferTextureEXT)
            unresolvedError("glNamedFramebufferTextureEXT");
    

        *(void **)&real_glNamedFramebufferTextureLayerEXT = resolveGl("glNamedFramebufferTextureLayerEXT");
        if (!real_glNamedFramebufferTextureLayerEXT)
            unresolvedError("glNamedFramebufferTextureLayerEXT");
    

        *(void **)&real_glNamedFramebufferTextureFaceEXT = resolveGl("glNamedFramebufferTextureFaceEXT");
        if (!real_glNamedFramebufferTextureFaceEXT)
            unresolvedError("glNamedFramebufferTextureFaceEXT");
    

        *(void **)&real_glTextureRenderbufferEXT = resolveGl("glTextureRenderbufferEXT");
        if (!real_glTextureRenderbufferEXT)
            unresolvedError("glTextureRenderbufferEXT");
    

        *(void **)&real_glMultiTexRenderbufferEXT = resolveGl("glMultiTexRenderbufferEXT");
        if (!real_glMultiTexRenderbufferEXT)
            unresolvedError("glMultiTexRenderbufferEXT");
    

        *(void **)&real_glVertexArrayVertexOffsetEXT = resolveGl("glVertexArrayVertexOffsetEXT");
        if (!real_glVertexArrayVertexOffsetEXT)
            unresolvedError("glVertexArrayVertexOffsetEXT");
    

        *(void **)&real_glVertexArrayColorOffsetEXT = resolveGl("glVertexArrayColorOffsetEXT");
        if (!real_glVertexArrayColorOffsetEXT)
            unresolvedError("glVertexArrayColorOffsetEXT");
    

        *(void **)&real_glVertexArrayEdgeFlagOffsetEXT = resolveGl("glVertexArrayEdgeFlagOffsetEXT");
        if (!real_glVertexArrayEdgeFlagOffsetEXT)
            unresolvedError("glVertexArrayEdgeFlagOffsetEXT");
    

        *(void **)&real_glVertexArrayIndexOffsetEXT = resolveGl("glVertexArrayIndexOffsetEXT");
        if (!real_glVertexArrayIndexOffsetEXT)
            unresolvedError("glVertexArrayIndexOffsetEXT");
    

        *(void **)&real_glVertexArrayNormalOffsetEXT = resolveGl("glVertexArrayNormalOffsetEXT");
        if (!real_glVertexArrayNormalOffsetEXT)
            unresolvedError("glVertexArrayNormalOffsetEXT");
    

        *(void **)&real_glVertexArrayTexCoordOffsetEXT = resolveGl("glVertexArrayTexCoordOffsetEXT");
        if (!real_glVertexArrayTexCoordOffsetEXT)
            unresolvedError("glVertexArrayTexCoordOffsetEXT");
    

        *(void **)&real_glVertexArrayMultiTexCoordOffsetEXT = resolveGl("glVertexArrayMultiTexCoordOffsetEXT");
        if (!real_glVertexArrayMultiTexCoordOffsetEXT)
            unresolvedError("glVertexArrayMultiTexCoordOffsetEXT");
    

        *(void **)&real_glVertexArrayFogCoordOffsetEXT = resolveGl("glVertexArrayFogCoordOffsetEXT");
        if (!real_glVertexArrayFogCoordOffsetEXT)
            unresolvedError("glVertexArrayFogCoordOffsetEXT");
    

        *(void **)&real_glVertexArraySecondaryColorOffsetEXT = resolveGl("glVertexArraySecondaryColorOffsetEXT");
        if (!real_glVertexArraySecondaryColorOffsetEXT)
            unresolvedError("glVertexArraySecondaryColorOffsetEXT");
    

        *(void **)&real_glVertexArrayVertexAttribOffsetEXT = resolveGl("glVertexArrayVertexAttribOffsetEXT");
        if (!real_glVertexArrayVertexAttribOffsetEXT)
            unresolvedError("glVertexArrayVertexAttribOffsetEXT");
    

        *(void **)&real_glVertexArrayVertexAttribIOffsetEXT = resolveGl("glVertexArrayVertexAttribIOffsetEXT");
        if (!real_glVertexArrayVertexAttribIOffsetEXT)
            unresolvedError("glVertexArrayVertexAttribIOffsetEXT");
    

        *(void **)&real_glEnableVertexArrayEXT = resolveGl("glEnableVertexArrayEXT");
        if (!real_glEnableVertexArrayEXT)
            unresolvedError("glEnableVertexArrayEXT");
    

        *(void **)&real_glDisableVertexArrayEXT = resolveGl("glDisableVertexArrayEXT");
        if (!real_glDisableVertexArrayEXT)
            unresolvedError("glDisableVertexArrayEXT");
    

        *(void **)&real_glEnableVertexArrayAttribEXT = resolveGl("glEnableVertexArrayAttribEXT");
        if (!real_glEnableVertexArrayAttribEXT)
            unresolvedError("glEnableVertexArrayAttribEXT");
    

        *(void **)&real_glDisableVertexArrayAttribEXT = resolveGl("glDisableVertexArrayAttribEXT");
        if (!real_glDisableVertexArrayAttribEXT)
            unresolvedError("glDisableVertexArrayAttribEXT");
    

        *(void **)&real_glGetVertexArrayIntegervEXT = resolveGl("glGetVertexArrayIntegervEXT");
        if (!real_glGetVertexArrayIntegervEXT)
            unresolvedError("glGetVertexArrayIntegervEXT");
    

        *(void **)&real_glGetVertexArrayPointervEXT = resolveGl("glGetVertexArrayPointervEXT");
        if (!real_glGetVertexArrayPointervEXT)
            unresolvedError("glGetVertexArrayPointervEXT");
    

        *(void **)&real_glGetVertexArrayIntegeri_vEXT = resolveGl("glGetVertexArrayIntegeri_vEXT");
        if (!real_glGetVertexArrayIntegeri_vEXT)
            unresolvedError("glGetVertexArrayIntegeri_vEXT");
    

        *(void **)&real_glGetVertexArrayPointeri_vEXT = resolveGl("glGetVertexArrayPointeri_vEXT");
        if (!real_glGetVertexArrayPointeri_vEXT)
            unresolvedError("glGetVertexArrayPointeri_vEXT");
    

        *(void **)&real_glMapNamedBufferRangeEXT = resolveGl("glMapNamedBufferRangeEXT");
        if (!real_glMapNamedBufferRangeEXT)
            unresolvedError("glMapNamedBufferRangeEXT");
    

        *(void **)&real_glFlushMappedNamedBufferRangeEXT = resolveGl("glFlushMappedNamedBufferRangeEXT");
        if (!real_glFlushMappedNamedBufferRangeEXT)
            unresolvedError("glFlushMappedNamedBufferRangeEXT");
    

        *(void **)&real_glNamedBufferStorageEXT = resolveGl("glNamedBufferStorageEXT");
        if (!real_glNamedBufferStorageEXT)
            unresolvedError("glNamedBufferStorageEXT");
    

        *(void **)&real_glClearNamedBufferDataEXT = resolveGl("glClearNamedBufferDataEXT");
        if (!real_glClearNamedBufferDataEXT)
            unresolvedError("glClearNamedBufferDataEXT");
    

        *(void **)&real_glClearNamedBufferSubDataEXT = resolveGl("glClearNamedBufferSubDataEXT");
        if (!real_glClearNamedBufferSubDataEXT)
            unresolvedError("glClearNamedBufferSubDataEXT");
    

        *(void **)&real_glNamedFramebufferParameteriEXT = resolveGl("glNamedFramebufferParameteriEXT");
        if (!real_glNamedFramebufferParameteriEXT)
            unresolvedError("glNamedFramebufferParameteriEXT");
    

        *(void **)&real_glGetNamedFramebufferParameterivEXT = resolveGl("glGetNamedFramebufferParameterivEXT");
        if (!real_glGetNamedFramebufferParameterivEXT)
            unresolvedError("glGetNamedFramebufferParameterivEXT");
    

        *(void **)&real_glProgramUniform1dEXT = resolveGl("glProgramUniform1dEXT");
        if (!real_glProgramUniform1dEXT)
            unresolvedError("glProgramUniform1dEXT");
    

        *(void **)&real_glProgramUniform2dEXT = resolveGl("glProgramUniform2dEXT");
        if (!real_glProgramUniform2dEXT)
            unresolvedError("glProgramUniform2dEXT");
    

        *(void **)&real_glProgramUniform3dEXT = resolveGl("glProgramUniform3dEXT");
        if (!real_glProgramUniform3dEXT)
            unresolvedError("glProgramUniform3dEXT");
    

        *(void **)&real_glProgramUniform4dEXT = resolveGl("glProgramUniform4dEXT");
        if (!real_glProgramUniform4dEXT)
            unresolvedError("glProgramUniform4dEXT");
    

        *(void **)&real_glProgramUniform1dvEXT = resolveGl("glProgramUniform1dvEXT");
        if (!real_glProgramUniform1dvEXT)
            unresolvedError("glProgramUniform1dvEXT");
    

        *(void **)&real_glProgramUniform2dvEXT = resolveGl("glProgramUniform2dvEXT");
        if (!real_glProgramUniform2dvEXT)
            unresolvedError("glProgramUniform2dvEXT");
    

        *(void **)&real_glProgramUniform3dvEXT = resolveGl("glProgramUniform3dvEXT");
        if (!real_glProgramUniform3dvEXT)
            unresolvedError("glProgramUniform3dvEXT");
    

        *(void **)&real_glProgramUniform4dvEXT = resolveGl("glProgramUniform4dvEXT");
        if (!real_glProgramUniform4dvEXT)
            unresolvedError("glProgramUniform4dvEXT");
    

        *(void **)&real_glProgramUniformMatrix2dvEXT = resolveGl("glProgramUniformMatrix2dvEXT");
        if (!real_glProgramUniformMatrix2dvEXT)
            unresolvedError("glProgramUniformMatrix2dvEXT");
    

        *(void **)&real_glProgramUniformMatrix3dvEXT = resolveGl("glProgramUniformMatrix3dvEXT");
        if (!real_glProgramUniformMatrix3dvEXT)
            unresolvedError("glProgramUniformMatrix3dvEXT");
    

        *(void **)&real_glProgramUniformMatrix4dvEXT = resolveGl("glProgramUniformMatrix4dvEXT");
        if (!real_glProgramUniformMatrix4dvEXT)
            unresolvedError("glProgramUniformMatrix4dvEXT");
    

        *(void **)&real_glProgramUniformMatrix2x3dvEXT = resolveGl("glProgramUniformMatrix2x3dvEXT");
        if (!real_glProgramUniformMatrix2x3dvEXT)
            unresolvedError("glProgramUniformMatrix2x3dvEXT");
    

        *(void **)&real_glProgramUniformMatrix2x4dvEXT = resolveGl("glProgramUniformMatrix2x4dvEXT");
        if (!real_glProgramUniformMatrix2x4dvEXT)
            unresolvedError("glProgramUniformMatrix2x4dvEXT");
    

        *(void **)&real_glProgramUniformMatrix3x2dvEXT = resolveGl("glProgramUniformMatrix3x2dvEXT");
        if (!real_glProgramUniformMatrix3x2dvEXT)
            unresolvedError("glProgramUniformMatrix3x2dvEXT");
    

        *(void **)&real_glProgramUniformMatrix3x4dvEXT = resolveGl("glProgramUniformMatrix3x4dvEXT");
        if (!real_glProgramUniformMatrix3x4dvEXT)
            unresolvedError("glProgramUniformMatrix3x4dvEXT");
    

        *(void **)&real_glProgramUniformMatrix4x2dvEXT = resolveGl("glProgramUniformMatrix4x2dvEXT");
        if (!real_glProgramUniformMatrix4x2dvEXT)
            unresolvedError("glProgramUniformMatrix4x2dvEXT");
    

        *(void **)&real_glProgramUniformMatrix4x3dvEXT = resolveGl("glProgramUniformMatrix4x3dvEXT");
        if (!real_glProgramUniformMatrix4x3dvEXT)
            unresolvedError("glProgramUniformMatrix4x3dvEXT");
    

        *(void **)&real_glTextureBufferRangeEXT = resolveGl("glTextureBufferRangeEXT");
        if (!real_glTextureBufferRangeEXT)
            unresolvedError("glTextureBufferRangeEXT");
    

        *(void **)&real_glTextureStorage1DEXT = resolveGl("glTextureStorage1DEXT");
        if (!real_glTextureStorage1DEXT)
            unresolvedError("glTextureStorage1DEXT");
    

        *(void **)&real_glTextureStorage2DEXT = resolveGl("glTextureStorage2DEXT");
        if (!real_glTextureStorage2DEXT)
            unresolvedError("glTextureStorage2DEXT");
    

        *(void **)&real_glTextureStorage3DEXT = resolveGl("glTextureStorage3DEXT");
        if (!real_glTextureStorage3DEXT)
            unresolvedError("glTextureStorage3DEXT");
    

        *(void **)&real_glTextureStorage2DMultisampleEXT = resolveGl("glTextureStorage2DMultisampleEXT");
        if (!real_glTextureStorage2DMultisampleEXT)
            unresolvedError("glTextureStorage2DMultisampleEXT");
    

        *(void **)&real_glTextureStorage3DMultisampleEXT = resolveGl("glTextureStorage3DMultisampleEXT");
        if (!real_glTextureStorage3DMultisampleEXT)
            unresolvedError("glTextureStorage3DMultisampleEXT");
    

        *(void **)&real_glVertexArrayBindVertexBufferEXT = resolveGl("glVertexArrayBindVertexBufferEXT");
        if (!real_glVertexArrayBindVertexBufferEXT)
            unresolvedError("glVertexArrayBindVertexBufferEXT");
    

        *(void **)&real_glVertexArrayVertexAttribFormatEXT = resolveGl("glVertexArrayVertexAttribFormatEXT");
        if (!real_glVertexArrayVertexAttribFormatEXT)
            unresolvedError("glVertexArrayVertexAttribFormatEXT");
    

        *(void **)&real_glVertexArrayVertexAttribIFormatEXT = resolveGl("glVertexArrayVertexAttribIFormatEXT");
        if (!real_glVertexArrayVertexAttribIFormatEXT)
            unresolvedError("glVertexArrayVertexAttribIFormatEXT");
    

        *(void **)&real_glVertexArrayVertexAttribLFormatEXT = resolveGl("glVertexArrayVertexAttribLFormatEXT");
        if (!real_glVertexArrayVertexAttribLFormatEXT)
            unresolvedError("glVertexArrayVertexAttribLFormatEXT");
    

        *(void **)&real_glVertexArrayVertexAttribBindingEXT = resolveGl("glVertexArrayVertexAttribBindingEXT");
        if (!real_glVertexArrayVertexAttribBindingEXT)
            unresolvedError("glVertexArrayVertexAttribBindingEXT");
    

        *(void **)&real_glVertexArrayVertexBindingDivisorEXT = resolveGl("glVertexArrayVertexBindingDivisorEXT");
        if (!real_glVertexArrayVertexBindingDivisorEXT)
            unresolvedError("glVertexArrayVertexBindingDivisorEXT");
    

        *(void **)&real_glVertexArrayVertexAttribLOffsetEXT = resolveGl("glVertexArrayVertexAttribLOffsetEXT");
        if (!real_glVertexArrayVertexAttribLOffsetEXT)
            unresolvedError("glVertexArrayVertexAttribLOffsetEXT");
    

        *(void **)&real_glTexturePageCommitmentEXT = resolveGl("glTexturePageCommitmentEXT");
        if (!real_glTexturePageCommitmentEXT)
            unresolvedError("glTexturePageCommitmentEXT");
    

        *(void **)&real_glVertexArrayVertexAttribDivisorEXT = resolveGl("glVertexArrayVertexAttribDivisorEXT");
        if (!real_glVertexArrayVertexAttribDivisorEXT)
            unresolvedError("glVertexArrayVertexAttribDivisorEXT");
    

        *(void **)&real_glColorMaskIndexedEXT = resolveGl("glColorMaskIndexedEXT");
        if (!real_glColorMaskIndexedEXT)
            unresolvedError("glColorMaskIndexedEXT");
    

        *(void **)&real_glDrawArraysInstancedEXT = resolveGl("glDrawArraysInstancedEXT");
        if (!real_glDrawArraysInstancedEXT)
            unresolvedError("glDrawArraysInstancedEXT");
    

        *(void **)&real_glDrawElementsInstancedEXT = resolveGl("glDrawElementsInstancedEXT");
        if (!real_glDrawElementsInstancedEXT)
            unresolvedError("glDrawElementsInstancedEXT");
    

        *(void **)&real_glDrawRangeElementsEXT = resolveGl("glDrawRangeElementsEXT");
        if (!real_glDrawRangeElementsEXT)
            unresolvedError("glDrawRangeElementsEXT");
    

        *(void **)&real_glBufferStorageExternalEXT = resolveGl("glBufferStorageExternalEXT");
        if (!real_glBufferStorageExternalEXT)
            unresolvedError("glBufferStorageExternalEXT");
    

        *(void **)&real_glNamedBufferStorageExternalEXT = resolveGl("glNamedBufferStorageExternalEXT");
        if (!real_glNamedBufferStorageExternalEXT)
            unresolvedError("glNamedBufferStorageExternalEXT");
    

        *(void **)&real_glFogCoordfEXT = resolveGl("glFogCoordfEXT");
        if (!real_glFogCoordfEXT)
            unresolvedError("glFogCoordfEXT");
    

        *(void **)&real_glFogCoordfvEXT = resolveGl("glFogCoordfvEXT");
        if (!real_glFogCoordfvEXT)
            unresolvedError("glFogCoordfvEXT");
    

        *(void **)&real_glFogCoorddEXT = resolveGl("glFogCoorddEXT");
        if (!real_glFogCoorddEXT)
            unresolvedError("glFogCoorddEXT");
    

        *(void **)&real_glFogCoorddvEXT = resolveGl("glFogCoorddvEXT");
        if (!real_glFogCoorddvEXT)
            unresolvedError("glFogCoorddvEXT");
    

        *(void **)&real_glFogCoordPointerEXT = resolveGl("glFogCoordPointerEXT");
        if (!real_glFogCoordPointerEXT)
            unresolvedError("glFogCoordPointerEXT");
    

        *(void **)&real_glBlitFramebufferEXT = resolveGl("glBlitFramebufferEXT");
        if (!real_glBlitFramebufferEXT)
            unresolvedError("glBlitFramebufferEXT");
    

        *(void **)&real_glRenderbufferStorageMultisampleEXT = resolveGl("glRenderbufferStorageMultisampleEXT");
        if (!real_glRenderbufferStorageMultisampleEXT)
            unresolvedError("glRenderbufferStorageMultisampleEXT");
    

        *(void **)&real_glIsRenderbufferEXT = resolveGl("glIsRenderbufferEXT");
        if (!real_glIsRenderbufferEXT)
            unresolvedError("glIsRenderbufferEXT");
    

        *(void **)&real_glBindRenderbufferEXT = resolveGl("glBindRenderbufferEXT");
        if (!real_glBindRenderbufferEXT)
            unresolvedError("glBindRenderbufferEXT");
    

        *(void **)&real_glDeleteRenderbuffersEXT = resolveGl("glDeleteRenderbuffersEXT");
        if (!real_glDeleteRenderbuffersEXT)
            unresolvedError("glDeleteRenderbuffersEXT");
    

        *(void **)&real_glGenRenderbuffersEXT = resolveGl("glGenRenderbuffersEXT");
        if (!real_glGenRenderbuffersEXT)
            unresolvedError("glGenRenderbuffersEXT");
    

        *(void **)&real_glRenderbufferStorageEXT = resolveGl("glRenderbufferStorageEXT");
        if (!real_glRenderbufferStorageEXT)
            unresolvedError("glRenderbufferStorageEXT");
    

        *(void **)&real_glGetRenderbufferParameterivEXT = resolveGl("glGetRenderbufferParameterivEXT");
        if (!real_glGetRenderbufferParameterivEXT)
            unresolvedError("glGetRenderbufferParameterivEXT");
    

        *(void **)&real_glIsFramebufferEXT = resolveGl("glIsFramebufferEXT");
        if (!real_glIsFramebufferEXT)
            unresolvedError("glIsFramebufferEXT");
    

        *(void **)&real_glBindFramebufferEXT = resolveGl("glBindFramebufferEXT");
        if (!real_glBindFramebufferEXT)
            unresolvedError("glBindFramebufferEXT");
    

        *(void **)&real_glDeleteFramebuffersEXT = resolveGl("glDeleteFramebuffersEXT");
        if (!real_glDeleteFramebuffersEXT)
            unresolvedError("glDeleteFramebuffersEXT");
    

        *(void **)&real_glGenFramebuffersEXT = resolveGl("glGenFramebuffersEXT");
        if (!real_glGenFramebuffersEXT)
            unresolvedError("glGenFramebuffersEXT");
    

        *(void **)&real_glCheckFramebufferStatusEXT = resolveGl("glCheckFramebufferStatusEXT");
        if (!real_glCheckFramebufferStatusEXT)
            unresolvedError("glCheckFramebufferStatusEXT");
    

        *(void **)&real_glFramebufferTexture1DEXT = resolveGl("glFramebufferTexture1DEXT");
        if (!real_glFramebufferTexture1DEXT)
            unresolvedError("glFramebufferTexture1DEXT");
    

        *(void **)&real_glFramebufferTexture2DEXT = resolveGl("glFramebufferTexture2DEXT");
        if (!real_glFramebufferTexture2DEXT)
            unresolvedError("glFramebufferTexture2DEXT");
    

        *(void **)&real_glFramebufferTexture3DEXT = resolveGl("glFramebufferTexture3DEXT");
        if (!real_glFramebufferTexture3DEXT)
            unresolvedError("glFramebufferTexture3DEXT");
    

        *(void **)&real_glFramebufferRenderbufferEXT = resolveGl("glFramebufferRenderbufferEXT");
        if (!real_glFramebufferRenderbufferEXT)
            unresolvedError("glFramebufferRenderbufferEXT");
    

        *(void **)&real_glGetFramebufferAttachmentParameterivEXT = resolveGl("glGetFramebufferAttachmentParameterivEXT");
        if (!real_glGetFramebufferAttachmentParameterivEXT)
            unresolvedError("glGetFramebufferAttachmentParameterivEXT");
    

        *(void **)&real_glGenerateMipmapEXT = resolveGl("glGenerateMipmapEXT");
        if (!real_glGenerateMipmapEXT)
            unresolvedError("glGenerateMipmapEXT");
    

        *(void **)&real_glProgramParameteriEXT = resolveGl("glProgramParameteriEXT");
        if (!real_glProgramParameteriEXT)
            unresolvedError("glProgramParameteriEXT");
    

        *(void **)&real_glProgramEnvParameters4fvEXT = resolveGl("glProgramEnvParameters4fvEXT");
        if (!real_glProgramEnvParameters4fvEXT)
            unresolvedError("glProgramEnvParameters4fvEXT");
    

        *(void **)&real_glProgramLocalParameters4fvEXT = resolveGl("glProgramLocalParameters4fvEXT");
        if (!real_glProgramLocalParameters4fvEXT)
            unresolvedError("glProgramLocalParameters4fvEXT");
    

        *(void **)&real_glGetUniformuivEXT = resolveGl("glGetUniformuivEXT");
        if (!real_glGetUniformuivEXT)
            unresolvedError("glGetUniformuivEXT");
    

        *(void **)&real_glBindFragDataLocationEXT = resolveGl("glBindFragDataLocationEXT");
        if (!real_glBindFragDataLocationEXT)
            unresolvedError("glBindFragDataLocationEXT");
    

        *(void **)&real_glGetFragDataLocationEXT = resolveGl("glGetFragDataLocationEXT");
        if (!real_glGetFragDataLocationEXT)
            unresolvedError("glGetFragDataLocationEXT");
    

        *(void **)&real_glUniform1uiEXT = resolveGl("glUniform1uiEXT");
        if (!real_glUniform1uiEXT)
            unresolvedError("glUniform1uiEXT");
    

        *(void **)&real_glUniform2uiEXT = resolveGl("glUniform2uiEXT");
        if (!real_glUniform2uiEXT)
            unresolvedError("glUniform2uiEXT");
    

        *(void **)&real_glUniform3uiEXT = resolveGl("glUniform3uiEXT");
        if (!real_glUniform3uiEXT)
            unresolvedError("glUniform3uiEXT");
    

        *(void **)&real_glUniform4uiEXT = resolveGl("glUniform4uiEXT");
        if (!real_glUniform4uiEXT)
            unresolvedError("glUniform4uiEXT");
    

        *(void **)&real_glUniform1uivEXT = resolveGl("glUniform1uivEXT");
        if (!real_glUniform1uivEXT)
            unresolvedError("glUniform1uivEXT");
    

        *(void **)&real_glUniform2uivEXT = resolveGl("glUniform2uivEXT");
        if (!real_glUniform2uivEXT)
            unresolvedError("glUniform2uivEXT");
    

        *(void **)&real_glUniform3uivEXT = resolveGl("glUniform3uivEXT");
        if (!real_glUniform3uivEXT)
            unresolvedError("glUniform3uivEXT");
    

        *(void **)&real_glUniform4uivEXT = resolveGl("glUniform4uivEXT");
        if (!real_glUniform4uivEXT)
            unresolvedError("glUniform4uivEXT");
    

        *(void **)&real_glGetHistogramEXT = resolveGl("glGetHistogramEXT");
        if (!real_glGetHistogramEXT)
            unresolvedError("glGetHistogramEXT");
    

        *(void **)&real_glGetHistogramParameterfvEXT = resolveGl("glGetHistogramParameterfvEXT");
        if (!real_glGetHistogramParameterfvEXT)
            unresolvedError("glGetHistogramParameterfvEXT");
    

        *(void **)&real_glGetHistogramParameterivEXT = resolveGl("glGetHistogramParameterivEXT");
        if (!real_glGetHistogramParameterivEXT)
            unresolvedError("glGetHistogramParameterivEXT");
    

        *(void **)&real_glGetMinmaxEXT = resolveGl("glGetMinmaxEXT");
        if (!real_glGetMinmaxEXT)
            unresolvedError("glGetMinmaxEXT");
    

        *(void **)&real_glGetMinmaxParameterfvEXT = resolveGl("glGetMinmaxParameterfvEXT");
        if (!real_glGetMinmaxParameterfvEXT)
            unresolvedError("glGetMinmaxParameterfvEXT");
    

        *(void **)&real_glGetMinmaxParameterivEXT = resolveGl("glGetMinmaxParameterivEXT");
        if (!real_glGetMinmaxParameterivEXT)
            unresolvedError("glGetMinmaxParameterivEXT");
    

        *(void **)&real_glHistogramEXT = resolveGl("glHistogramEXT");
        if (!real_glHistogramEXT)
            unresolvedError("glHistogramEXT");
    

        *(void **)&real_glMinmaxEXT = resolveGl("glMinmaxEXT");
        if (!real_glMinmaxEXT)
            unresolvedError("glMinmaxEXT");
    

        *(void **)&real_glResetHistogramEXT = resolveGl("glResetHistogramEXT");
        if (!real_glResetHistogramEXT)
            unresolvedError("glResetHistogramEXT");
    

        *(void **)&real_glResetMinmaxEXT = resolveGl("glResetMinmaxEXT");
        if (!real_glResetMinmaxEXT)
            unresolvedError("glResetMinmaxEXT");
    

        *(void **)&real_glIndexFuncEXT = resolveGl("glIndexFuncEXT");
        if (!real_glIndexFuncEXT)
            unresolvedError("glIndexFuncEXT");
    

        *(void **)&real_glIndexMaterialEXT = resolveGl("glIndexMaterialEXT");
        if (!real_glIndexMaterialEXT)
            unresolvedError("glIndexMaterialEXT");
    

        *(void **)&real_glApplyTextureEXT = resolveGl("glApplyTextureEXT");
        if (!real_glApplyTextureEXT)
            unresolvedError("glApplyTextureEXT");
    

        *(void **)&real_glTextureLightEXT = resolveGl("glTextureLightEXT");
        if (!real_glTextureLightEXT)
            unresolvedError("glTextureLightEXT");
    

        *(void **)&real_glTextureMaterialEXT = resolveGl("glTextureMaterialEXT");
        if (!real_glTextureMaterialEXT)
            unresolvedError("glTextureMaterialEXT");
    

        *(void **)&real_glGetUnsignedBytevEXT = resolveGl("glGetUnsignedBytevEXT");
        if (!real_glGetUnsignedBytevEXT)
            unresolvedError("glGetUnsignedBytevEXT");
    

        *(void **)&real_glGetUnsignedBytei_vEXT = resolveGl("glGetUnsignedBytei_vEXT");
        if (!real_glGetUnsignedBytei_vEXT)
            unresolvedError("glGetUnsignedBytei_vEXT");
    

        *(void **)&real_glDeleteMemoryObjectsEXT = resolveGl("glDeleteMemoryObjectsEXT");
        if (!real_glDeleteMemoryObjectsEXT)
            unresolvedError("glDeleteMemoryObjectsEXT");
    

        *(void **)&real_glIsMemoryObjectEXT = resolveGl("glIsMemoryObjectEXT");
        if (!real_glIsMemoryObjectEXT)
            unresolvedError("glIsMemoryObjectEXT");
    

        *(void **)&real_glCreateMemoryObjectsEXT = resolveGl("glCreateMemoryObjectsEXT");
        if (!real_glCreateMemoryObjectsEXT)
            unresolvedError("glCreateMemoryObjectsEXT");
    

        *(void **)&real_glMemoryObjectParameterivEXT = resolveGl("glMemoryObjectParameterivEXT");
        if (!real_glMemoryObjectParameterivEXT)
            unresolvedError("glMemoryObjectParameterivEXT");
    

        *(void **)&real_glGetMemoryObjectParameterivEXT = resolveGl("glGetMemoryObjectParameterivEXT");
        if (!real_glGetMemoryObjectParameterivEXT)
            unresolvedError("glGetMemoryObjectParameterivEXT");
    

        *(void **)&real_glTexStorageMem2DEXT = resolveGl("glTexStorageMem2DEXT");
        if (!real_glTexStorageMem2DEXT)
            unresolvedError("glTexStorageMem2DEXT");
    

        *(void **)&real_glTexStorageMem2DMultisampleEXT = resolveGl("glTexStorageMem2DMultisampleEXT");
        if (!real_glTexStorageMem2DMultisampleEXT)
            unresolvedError("glTexStorageMem2DMultisampleEXT");
    

        *(void **)&real_glTexStorageMem3DEXT = resolveGl("glTexStorageMem3DEXT");
        if (!real_glTexStorageMem3DEXT)
            unresolvedError("glTexStorageMem3DEXT");
    

        *(void **)&real_glTexStorageMem3DMultisampleEXT = resolveGl("glTexStorageMem3DMultisampleEXT");
        if (!real_glTexStorageMem3DMultisampleEXT)
            unresolvedError("glTexStorageMem3DMultisampleEXT");
    

        *(void **)&real_glBufferStorageMemEXT = resolveGl("glBufferStorageMemEXT");
        if (!real_glBufferStorageMemEXT)
            unresolvedError("glBufferStorageMemEXT");
    

        *(void **)&real_glTextureStorageMem2DEXT = resolveGl("glTextureStorageMem2DEXT");
        if (!real_glTextureStorageMem2DEXT)
            unresolvedError("glTextureStorageMem2DEXT");
    

        *(void **)&real_glTextureStorageMem2DMultisampleEXT = resolveGl("glTextureStorageMem2DMultisampleEXT");
        if (!real_glTextureStorageMem2DMultisampleEXT)
            unresolvedError("glTextureStorageMem2DMultisampleEXT");
    

        *(void **)&real_glTextureStorageMem3DEXT = resolveGl("glTextureStorageMem3DEXT");
        if (!real_glTextureStorageMem3DEXT)
            unresolvedError("glTextureStorageMem3DEXT");
    

        *(void **)&real_glTextureStorageMem3DMultisampleEXT = resolveGl("glTextureStorageMem3DMultisampleEXT");
        if (!real_glTextureStorageMem3DMultisampleEXT)
            unresolvedError("glTextureStorageMem3DMultisampleEXT");
    

        *(void **)&real_glNamedBufferStorageMemEXT = resolveGl("glNamedBufferStorageMemEXT");
        if (!real_glNamedBufferStorageMemEXT)
            unresolvedError("glNamedBufferStorageMemEXT");
    

        *(void **)&real_glTexStorageMem1DEXT = resolveGl("glTexStorageMem1DEXT");
        if (!real_glTexStorageMem1DEXT)
            unresolvedError("glTexStorageMem1DEXT");
    

        *(void **)&real_glTextureStorageMem1DEXT = resolveGl("glTextureStorageMem1DEXT");
        if (!real_glTextureStorageMem1DEXT)
            unresolvedError("glTextureStorageMem1DEXT");
    

        *(void **)&real_glImportMemoryFdEXT = resolveGl("glImportMemoryFdEXT");
        if (!real_glImportMemoryFdEXT)
            unresolvedError("glImportMemoryFdEXT");
    

        *(void **)&real_glImportMemoryWin32HandleEXT = resolveGl("glImportMemoryWin32HandleEXT");
        if (!real_glImportMemoryWin32HandleEXT)
            unresolvedError("glImportMemoryWin32HandleEXT");
    

        *(void **)&real_glImportMemoryWin32NameEXT = resolveGl("glImportMemoryWin32NameEXT");
        if (!real_glImportMemoryWin32NameEXT)
            unresolvedError("glImportMemoryWin32NameEXT");
    

        *(void **)&real_glMultiDrawArraysEXT = resolveGl("glMultiDrawArraysEXT");
        if (!real_glMultiDrawArraysEXT)
            unresolvedError("glMultiDrawArraysEXT");
    

        *(void **)&real_glMultiDrawElementsEXT = resolveGl("glMultiDrawElementsEXT");
        if (!real_glMultiDrawElementsEXT)
            unresolvedError("glMultiDrawElementsEXT");
    

        *(void **)&real_glSampleMaskEXT = resolveGl("glSampleMaskEXT");
        if (!real_glSampleMaskEXT)
            unresolvedError("glSampleMaskEXT");
    

        *(void **)&real_glSamplePatternEXT = resolveGl("glSamplePatternEXT");
        if (!real_glSamplePatternEXT)
            unresolvedError("glSamplePatternEXT");
    

        *(void **)&real_glColorTableEXT = resolveGl("glColorTableEXT");
        if (!real_glColorTableEXT)
            unresolvedError("glColorTableEXT");
    

        *(void **)&real_glGetColorTableEXT = resolveGl("glGetColorTableEXT");
        if (!real_glGetColorTableEXT)
            unresolvedError("glGetColorTableEXT");
    

        *(void **)&real_glGetColorTableParameterivEXT = resolveGl("glGetColorTableParameterivEXT");
        if (!real_glGetColorTableParameterivEXT)
            unresolvedError("glGetColorTableParameterivEXT");
    

        *(void **)&real_glGetColorTableParameterfvEXT = resolveGl("glGetColorTableParameterfvEXT");
        if (!real_glGetColorTableParameterfvEXT)
            unresolvedError("glGetColorTableParameterfvEXT");
    

        *(void **)&real_glPixelTransformParameteriEXT = resolveGl("glPixelTransformParameteriEXT");
        if (!real_glPixelTransformParameteriEXT)
            unresolvedError("glPixelTransformParameteriEXT");
    

        *(void **)&real_glPixelTransformParameterfEXT = resolveGl("glPixelTransformParameterfEXT");
        if (!real_glPixelTransformParameterfEXT)
            unresolvedError("glPixelTransformParameterfEXT");
    

        *(void **)&real_glPixelTransformParameterivEXT = resolveGl("glPixelTransformParameterivEXT");
        if (!real_glPixelTransformParameterivEXT)
            unresolvedError("glPixelTransformParameterivEXT");
    

        *(void **)&real_glPixelTransformParameterfvEXT = resolveGl("glPixelTransformParameterfvEXT");
        if (!real_glPixelTransformParameterfvEXT)
            unresolvedError("glPixelTransformParameterfvEXT");
    

        *(void **)&real_glGetPixelTransformParameterivEXT = resolveGl("glGetPixelTransformParameterivEXT");
        if (!real_glGetPixelTransformParameterivEXT)
            unresolvedError("glGetPixelTransformParameterivEXT");
    

        *(void **)&real_glGetPixelTransformParameterfvEXT = resolveGl("glGetPixelTransformParameterfvEXT");
        if (!real_glGetPixelTransformParameterfvEXT)
            unresolvedError("glGetPixelTransformParameterfvEXT");
    

        *(void **)&real_glPointParameterfEXT = resolveGl("glPointParameterfEXT");
        if (!real_glPointParameterfEXT)
            unresolvedError("glPointParameterfEXT");
    

        *(void **)&real_glPointParameterfvEXT = resolveGl("glPointParameterfvEXT");
        if (!real_glPointParameterfvEXT)
            unresolvedError("glPointParameterfvEXT");
    

        *(void **)&real_glPolygonOffsetEXT = resolveGl("glPolygonOffsetEXT");
        if (!real_glPolygonOffsetEXT)
            unresolvedError("glPolygonOffsetEXT");
    

        *(void **)&real_glPolygonOffsetClampEXT = resolveGl("glPolygonOffsetClampEXT");
        if (!real_glPolygonOffsetClampEXT)
            unresolvedError("glPolygonOffsetClampEXT");
    

        *(void **)&real_glProvokingVertexEXT = resolveGl("glProvokingVertexEXT");
        if (!real_glProvokingVertexEXT)
            unresolvedError("glProvokingVertexEXT");
    

        *(void **)&real_glRasterSamplesEXT = resolveGl("glRasterSamplesEXT");
        if (!real_glRasterSamplesEXT)
            unresolvedError("glRasterSamplesEXT");
    

        *(void **)&real_glSecondaryColor3bEXT = resolveGl("glSecondaryColor3bEXT");
        if (!real_glSecondaryColor3bEXT)
            unresolvedError("glSecondaryColor3bEXT");
    

        *(void **)&real_glSecondaryColor3bvEXT = resolveGl("glSecondaryColor3bvEXT");
        if (!real_glSecondaryColor3bvEXT)
            unresolvedError("glSecondaryColor3bvEXT");
    

        *(void **)&real_glSecondaryColor3dEXT = resolveGl("glSecondaryColor3dEXT");
        if (!real_glSecondaryColor3dEXT)
            unresolvedError("glSecondaryColor3dEXT");
    

        *(void **)&real_glSecondaryColor3dvEXT = resolveGl("glSecondaryColor3dvEXT");
        if (!real_glSecondaryColor3dvEXT)
            unresolvedError("glSecondaryColor3dvEXT");
    

        *(void **)&real_glSecondaryColor3fEXT = resolveGl("glSecondaryColor3fEXT");
        if (!real_glSecondaryColor3fEXT)
            unresolvedError("glSecondaryColor3fEXT");
    

        *(void **)&real_glSecondaryColor3fvEXT = resolveGl("glSecondaryColor3fvEXT");
        if (!real_glSecondaryColor3fvEXT)
            unresolvedError("glSecondaryColor3fvEXT");
    

        *(void **)&real_glSecondaryColor3iEXT = resolveGl("glSecondaryColor3iEXT");
        if (!real_glSecondaryColor3iEXT)
            unresolvedError("glSecondaryColor3iEXT");
    

        *(void **)&real_glSecondaryColor3ivEXT = resolveGl("glSecondaryColor3ivEXT");
        if (!real_glSecondaryColor3ivEXT)
            unresolvedError("glSecondaryColor3ivEXT");
    

        *(void **)&real_glSecondaryColor3sEXT = resolveGl("glSecondaryColor3sEXT");
        if (!real_glSecondaryColor3sEXT)
            unresolvedError("glSecondaryColor3sEXT");
    

        *(void **)&real_glSecondaryColor3svEXT = resolveGl("glSecondaryColor3svEXT");
        if (!real_glSecondaryColor3svEXT)
            unresolvedError("glSecondaryColor3svEXT");
    

        *(void **)&real_glSecondaryColor3ubEXT = resolveGl("glSecondaryColor3ubEXT");
        if (!real_glSecondaryColor3ubEXT)
            unresolvedError("glSecondaryColor3ubEXT");
    

        *(void **)&real_glSecondaryColor3ubvEXT = resolveGl("glSecondaryColor3ubvEXT");
        if (!real_glSecondaryColor3ubvEXT)
            unresolvedError("glSecondaryColor3ubvEXT");
    

        *(void **)&real_glSecondaryColor3uiEXT = resolveGl("glSecondaryColor3uiEXT");
        if (!real_glSecondaryColor3uiEXT)
            unresolvedError("glSecondaryColor3uiEXT");
    

        *(void **)&real_glSecondaryColor3uivEXT = resolveGl("glSecondaryColor3uivEXT");
        if (!real_glSecondaryColor3uivEXT)
            unresolvedError("glSecondaryColor3uivEXT");
    

        *(void **)&real_glSecondaryColor3usEXT = resolveGl("glSecondaryColor3usEXT");
        if (!real_glSecondaryColor3usEXT)
            unresolvedError("glSecondaryColor3usEXT");
    

        *(void **)&real_glSecondaryColor3usvEXT = resolveGl("glSecondaryColor3usvEXT");
        if (!real_glSecondaryColor3usvEXT)
            unresolvedError("glSecondaryColor3usvEXT");
    

        *(void **)&real_glSecondaryColorPointerEXT = resolveGl("glSecondaryColorPointerEXT");
        if (!real_glSecondaryColorPointerEXT)
            unresolvedError("glSecondaryColorPointerEXT");
    

        *(void **)&real_glGenSemaphoresEXT = resolveGl("glGenSemaphoresEXT");
        if (!real_glGenSemaphoresEXT)
            unresolvedError("glGenSemaphoresEXT");
    

        *(void **)&real_glDeleteSemaphoresEXT = resolveGl("glDeleteSemaphoresEXT");
        if (!real_glDeleteSemaphoresEXT)
            unresolvedError("glDeleteSemaphoresEXT");
    

        *(void **)&real_glIsSemaphoreEXT = resolveGl("glIsSemaphoreEXT");
        if (!real_glIsSemaphoreEXT)
            unresolvedError("glIsSemaphoreEXT");
    

        *(void **)&real_glSemaphoreParameterui64vEXT = resolveGl("glSemaphoreParameterui64vEXT");
        if (!real_glSemaphoreParameterui64vEXT)
            unresolvedError("glSemaphoreParameterui64vEXT");
    

        *(void **)&real_glGetSemaphoreParameterui64vEXT = resolveGl("glGetSemaphoreParameterui64vEXT");
        if (!real_glGetSemaphoreParameterui64vEXT)
            unresolvedError("glGetSemaphoreParameterui64vEXT");
    

        *(void **)&real_glWaitSemaphoreEXT = resolveGl("glWaitSemaphoreEXT");
        if (!real_glWaitSemaphoreEXT)
            unresolvedError("glWaitSemaphoreEXT");
    

        *(void **)&real_glSignalSemaphoreEXT = resolveGl("glSignalSemaphoreEXT");
        if (!real_glSignalSemaphoreEXT)
            unresolvedError("glSignalSemaphoreEXT");
    

        *(void **)&real_glImportSemaphoreFdEXT = resolveGl("glImportSemaphoreFdEXT");
        if (!real_glImportSemaphoreFdEXT)
            unresolvedError("glImportSemaphoreFdEXT");
    

        *(void **)&real_glImportSemaphoreWin32HandleEXT = resolveGl("glImportSemaphoreWin32HandleEXT");
        if (!real_glImportSemaphoreWin32HandleEXT)
            unresolvedError("glImportSemaphoreWin32HandleEXT");
    

        *(void **)&real_glImportSemaphoreWin32NameEXT = resolveGl("glImportSemaphoreWin32NameEXT");
        if (!real_glImportSemaphoreWin32NameEXT)
            unresolvedError("glImportSemaphoreWin32NameEXT");
    

        *(void **)&real_glUseShaderProgramEXT = resolveGl("glUseShaderProgramEXT");
        if (!real_glUseShaderProgramEXT)
            unresolvedError("glUseShaderProgramEXT");
    

        *(void **)&real_glActiveProgramEXT = resolveGl("glActiveProgramEXT");
        if (!real_glActiveProgramEXT)
            unresolvedError("glActiveProgramEXT");
    

        *(void **)&real_glCreateShaderProgramEXT = resolveGl("glCreateShaderProgramEXT");
        if (!real_glCreateShaderProgramEXT)
            unresolvedError("glCreateShaderProgramEXT");
    

        *(void **)&real_glFramebufferFetchBarrierEXT = resolveGl("glFramebufferFetchBarrierEXT");
        if (!real_glFramebufferFetchBarrierEXT)
            unresolvedError("glFramebufferFetchBarrierEXT");
    

        *(void **)&real_glBindImageTextureEXT = resolveGl("glBindImageTextureEXT");
        if (!real_glBindImageTextureEXT)
            unresolvedError("glBindImageTextureEXT");
    

        *(void **)&real_glMemoryBarrierEXT = resolveGl("glMemoryBarrierEXT");
        if (!real_glMemoryBarrierEXT)
            unresolvedError("glMemoryBarrierEXT");
    

        *(void **)&real_glStencilClearTagEXT = resolveGl("glStencilClearTagEXT");
        if (!real_glStencilClearTagEXT)
            unresolvedError("glStencilClearTagEXT");
    

        *(void **)&real_glActiveStencilFaceEXT = resolveGl("glActiveStencilFaceEXT");
        if (!real_glActiveStencilFaceEXT)
            unresolvedError("glActiveStencilFaceEXT");
    

        *(void **)&real_glTexSubImage1DEXT = resolveGl("glTexSubImage1DEXT");
        if (!real_glTexSubImage1DEXT)
            unresolvedError("glTexSubImage1DEXT");
    

        *(void **)&real_glTexSubImage2DEXT = resolveGl("glTexSubImage2DEXT");
        if (!real_glTexSubImage2DEXT)
            unresolvedError("glTexSubImage2DEXT");
    

        *(void **)&real_glTexImage3DEXT = resolveGl("glTexImage3DEXT");
        if (!real_glTexImage3DEXT)
            unresolvedError("glTexImage3DEXT");
    

        *(void **)&real_glTexSubImage3DEXT = resolveGl("glTexSubImage3DEXT");
        if (!real_glTexSubImage3DEXT)
            unresolvedError("glTexSubImage3DEXT");
    

        *(void **)&real_glFramebufferTextureLayerEXT = resolveGl("glFramebufferTextureLayerEXT");
        if (!real_glFramebufferTextureLayerEXT)
            unresolvedError("glFramebufferTextureLayerEXT");
    

        *(void **)&real_glTexBufferEXT = resolveGl("glTexBufferEXT");
        if (!real_glTexBufferEXT)
            unresolvedError("glTexBufferEXT");
    

        *(void **)&real_glTexParameterIivEXT = resolveGl("glTexParameterIivEXT");
        if (!real_glTexParameterIivEXT)
            unresolvedError("glTexParameterIivEXT");
    

        *(void **)&real_glTexParameterIuivEXT = resolveGl("glTexParameterIuivEXT");
        if (!real_glTexParameterIuivEXT)
            unresolvedError("glTexParameterIuivEXT");
    

        *(void **)&real_glGetTexParameterIivEXT = resolveGl("glGetTexParameterIivEXT");
        if (!real_glGetTexParameterIivEXT)
            unresolvedError("glGetTexParameterIivEXT");
    

        *(void **)&real_glGetTexParameterIuivEXT = resolveGl("glGetTexParameterIuivEXT");
        if (!real_glGetTexParameterIuivEXT)
            unresolvedError("glGetTexParameterIuivEXT");
    

        *(void **)&real_glClearColorIiEXT = resolveGl("glClearColorIiEXT");
        if (!real_glClearColorIiEXT)
            unresolvedError("glClearColorIiEXT");
    

        *(void **)&real_glClearColorIuiEXT = resolveGl("glClearColorIuiEXT");
        if (!real_glClearColorIuiEXT)
            unresolvedError("glClearColorIuiEXT");
    

        *(void **)&real_glAreTexturesResidentEXT = resolveGl("glAreTexturesResidentEXT");
        if (!real_glAreTexturesResidentEXT)
            unresolvedError("glAreTexturesResidentEXT");
    

        *(void **)&real_glBindTextureEXT = resolveGl("glBindTextureEXT");
        if (!real_glBindTextureEXT)
            unresolvedError("glBindTextureEXT");
    

        *(void **)&real_glDeleteTexturesEXT = resolveGl("glDeleteTexturesEXT");
        if (!real_glDeleteTexturesEXT)
            unresolvedError("glDeleteTexturesEXT");
    

        *(void **)&real_glGenTexturesEXT = resolveGl("glGenTexturesEXT");
        if (!real_glGenTexturesEXT)
            unresolvedError("glGenTexturesEXT");
    

        *(void **)&real_glIsTextureEXT = resolveGl("glIsTextureEXT");
        if (!real_glIsTextureEXT)
            unresolvedError("glIsTextureEXT");
    

        *(void **)&real_glPrioritizeTexturesEXT = resolveGl("glPrioritizeTexturesEXT");
        if (!real_glPrioritizeTexturesEXT)
            unresolvedError("glPrioritizeTexturesEXT");
    

        *(void **)&real_glTextureNormalEXT = resolveGl("glTextureNormalEXT");
        if (!real_glTextureNormalEXT)
            unresolvedError("glTextureNormalEXT");
    

        *(void **)&real_glGetQueryObjecti64vEXT = resolveGl("glGetQueryObjecti64vEXT");
        if (!real_glGetQueryObjecti64vEXT)
            unresolvedError("glGetQueryObjecti64vEXT");
    

        *(void **)&real_glGetQueryObjectui64vEXT = resolveGl("glGetQueryObjectui64vEXT");
        if (!real_glGetQueryObjectui64vEXT)
            unresolvedError("glGetQueryObjectui64vEXT");
    

        *(void **)&real_glBeginTransformFeedbackEXT = resolveGl("glBeginTransformFeedbackEXT");
        if (!real_glBeginTransformFeedbackEXT)
            unresolvedError("glBeginTransformFeedbackEXT");
    

        *(void **)&real_glEndTransformFeedbackEXT = resolveGl("glEndTransformFeedbackEXT");
        if (!real_glEndTransformFeedbackEXT)
            unresolvedError("glEndTransformFeedbackEXT");
    

        *(void **)&real_glBindBufferRangeEXT = resolveGl("glBindBufferRangeEXT");
        if (!real_glBindBufferRangeEXT)
            unresolvedError("glBindBufferRangeEXT");
    

        *(void **)&real_glBindBufferOffsetEXT = resolveGl("glBindBufferOffsetEXT");
        if (!real_glBindBufferOffsetEXT)
            unresolvedError("glBindBufferOffsetEXT");
    

        *(void **)&real_glBindBufferBaseEXT = resolveGl("glBindBufferBaseEXT");
        if (!real_glBindBufferBaseEXT)
            unresolvedError("glBindBufferBaseEXT");
    

        *(void **)&real_glTransformFeedbackVaryingsEXT = resolveGl("glTransformFeedbackVaryingsEXT");
        if (!real_glTransformFeedbackVaryingsEXT)
            unresolvedError("glTransformFeedbackVaryingsEXT");
    

        *(void **)&real_glGetTransformFeedbackVaryingEXT = resolveGl("glGetTransformFeedbackVaryingEXT");
        if (!real_glGetTransformFeedbackVaryingEXT)
            unresolvedError("glGetTransformFeedbackVaryingEXT");
    

        *(void **)&real_glArrayElementEXT = resolveGl("glArrayElementEXT");
        if (!real_glArrayElementEXT)
            unresolvedError("glArrayElementEXT");
    

        *(void **)&real_glColorPointerEXT = resolveGl("glColorPointerEXT");
        if (!real_glColorPointerEXT)
            unresolvedError("glColorPointerEXT");
    

        *(void **)&real_glDrawArraysEXT = resolveGl("glDrawArraysEXT");
        if (!real_glDrawArraysEXT)
            unresolvedError("glDrawArraysEXT");
    

        *(void **)&real_glEdgeFlagPointerEXT = resolveGl("glEdgeFlagPointerEXT");
        if (!real_glEdgeFlagPointerEXT)
            unresolvedError("glEdgeFlagPointerEXT");
    

        *(void **)&real_glGetPointervEXT = resolveGl("glGetPointervEXT");
        if (!real_glGetPointervEXT)
            unresolvedError("glGetPointervEXT");
    

        *(void **)&real_glIndexPointerEXT = resolveGl("glIndexPointerEXT");
        if (!real_glIndexPointerEXT)
            unresolvedError("glIndexPointerEXT");
    

        *(void **)&real_glNormalPointerEXT = resolveGl("glNormalPointerEXT");
        if (!real_glNormalPointerEXT)
            unresolvedError("glNormalPointerEXT");
    

        *(void **)&real_glTexCoordPointerEXT = resolveGl("glTexCoordPointerEXT");
        if (!real_glTexCoordPointerEXT)
            unresolvedError("glTexCoordPointerEXT");
    

        *(void **)&real_glVertexPointerEXT = resolveGl("glVertexPointerEXT");
        if (!real_glVertexPointerEXT)
            unresolvedError("glVertexPointerEXT");
    

        *(void **)&real_glVertexAttribL1dEXT = resolveGl("glVertexAttribL1dEXT");
        if (!real_glVertexAttribL1dEXT)
            unresolvedError("glVertexAttribL1dEXT");
    

        *(void **)&real_glVertexAttribL2dEXT = resolveGl("glVertexAttribL2dEXT");
        if (!real_glVertexAttribL2dEXT)
            unresolvedError("glVertexAttribL2dEXT");
    

        *(void **)&real_glVertexAttribL3dEXT = resolveGl("glVertexAttribL3dEXT");
        if (!real_glVertexAttribL3dEXT)
            unresolvedError("glVertexAttribL3dEXT");
    

        *(void **)&real_glVertexAttribL4dEXT = resolveGl("glVertexAttribL4dEXT");
        if (!real_glVertexAttribL4dEXT)
            unresolvedError("glVertexAttribL4dEXT");
    

        *(void **)&real_glVertexAttribL1dvEXT = resolveGl("glVertexAttribL1dvEXT");
        if (!real_glVertexAttribL1dvEXT)
            unresolvedError("glVertexAttribL1dvEXT");
    

        *(void **)&real_glVertexAttribL2dvEXT = resolveGl("glVertexAttribL2dvEXT");
        if (!real_glVertexAttribL2dvEXT)
            unresolvedError("glVertexAttribL2dvEXT");
    

        *(void **)&real_glVertexAttribL3dvEXT = resolveGl("glVertexAttribL3dvEXT");
        if (!real_glVertexAttribL3dvEXT)
            unresolvedError("glVertexAttribL3dvEXT");
    

        *(void **)&real_glVertexAttribL4dvEXT = resolveGl("glVertexAttribL4dvEXT");
        if (!real_glVertexAttribL4dvEXT)
            unresolvedError("glVertexAttribL4dvEXT");
    

        *(void **)&real_glVertexAttribLPointerEXT = resolveGl("glVertexAttribLPointerEXT");
        if (!real_glVertexAttribLPointerEXT)
            unresolvedError("glVertexAttribLPointerEXT");
    

        *(void **)&real_glGetVertexAttribLdvEXT = resolveGl("glGetVertexAttribLdvEXT");
        if (!real_glGetVertexAttribLdvEXT)
            unresolvedError("glGetVertexAttribLdvEXT");
    

        *(void **)&real_glBeginVertexShaderEXT = resolveGl("glBeginVertexShaderEXT");
        if (!real_glBeginVertexShaderEXT)
            unresolvedError("glBeginVertexShaderEXT");
    

        *(void **)&real_glEndVertexShaderEXT = resolveGl("glEndVertexShaderEXT");
        if (!real_glEndVertexShaderEXT)
            unresolvedError("glEndVertexShaderEXT");
    

        *(void **)&real_glBindVertexShaderEXT = resolveGl("glBindVertexShaderEXT");
        if (!real_glBindVertexShaderEXT)
            unresolvedError("glBindVertexShaderEXT");
    

        *(void **)&real_glGenVertexShadersEXT = resolveGl("glGenVertexShadersEXT");
        if (!real_glGenVertexShadersEXT)
            unresolvedError("glGenVertexShadersEXT");
    

        *(void **)&real_glDeleteVertexShaderEXT = resolveGl("glDeleteVertexShaderEXT");
        if (!real_glDeleteVertexShaderEXT)
            unresolvedError("glDeleteVertexShaderEXT");
    

        *(void **)&real_glShaderOp1EXT = resolveGl("glShaderOp1EXT");
        if (!real_glShaderOp1EXT)
            unresolvedError("glShaderOp1EXT");
    

        *(void **)&real_glShaderOp2EXT = resolveGl("glShaderOp2EXT");
        if (!real_glShaderOp2EXT)
            unresolvedError("glShaderOp2EXT");
    

        *(void **)&real_glShaderOp3EXT = resolveGl("glShaderOp3EXT");
        if (!real_glShaderOp3EXT)
            unresolvedError("glShaderOp3EXT");
    

        *(void **)&real_glSwizzleEXT = resolveGl("glSwizzleEXT");
        if (!real_glSwizzleEXT)
            unresolvedError("glSwizzleEXT");
    

        *(void **)&real_glWriteMaskEXT = resolveGl("glWriteMaskEXT");
        if (!real_glWriteMaskEXT)
            unresolvedError("glWriteMaskEXT");
    

        *(void **)&real_glInsertComponentEXT = resolveGl("glInsertComponentEXT");
        if (!real_glInsertComponentEXT)
            unresolvedError("glInsertComponentEXT");
    

        *(void **)&real_glExtractComponentEXT = resolveGl("glExtractComponentEXT");
        if (!real_glExtractComponentEXT)
            unresolvedError("glExtractComponentEXT");
    

        *(void **)&real_glGenSymbolsEXT = resolveGl("glGenSymbolsEXT");
        if (!real_glGenSymbolsEXT)
            unresolvedError("glGenSymbolsEXT");
    

        *(void **)&real_glSetInvariantEXT = resolveGl("glSetInvariantEXT");
        if (!real_glSetInvariantEXT)
            unresolvedError("glSetInvariantEXT");
    

        *(void **)&real_glSetLocalConstantEXT = resolveGl("glSetLocalConstantEXT");
        if (!real_glSetLocalConstantEXT)
            unresolvedError("glSetLocalConstantEXT");
    

        *(void **)&real_glVariantbvEXT = resolveGl("glVariantbvEXT");
        if (!real_glVariantbvEXT)
            unresolvedError("glVariantbvEXT");
    

        *(void **)&real_glVariantsvEXT = resolveGl("glVariantsvEXT");
        if (!real_glVariantsvEXT)
            unresolvedError("glVariantsvEXT");
    

        *(void **)&real_glVariantivEXT = resolveGl("glVariantivEXT");
        if (!real_glVariantivEXT)
            unresolvedError("glVariantivEXT");
    

        *(void **)&real_glVariantfvEXT = resolveGl("glVariantfvEXT");
        if (!real_glVariantfvEXT)
            unresolvedError("glVariantfvEXT");
    

        *(void **)&real_glVariantdvEXT = resolveGl("glVariantdvEXT");
        if (!real_glVariantdvEXT)
            unresolvedError("glVariantdvEXT");
    

        *(void **)&real_glVariantubvEXT = resolveGl("glVariantubvEXT");
        if (!real_glVariantubvEXT)
            unresolvedError("glVariantubvEXT");
    

        *(void **)&real_glVariantusvEXT = resolveGl("glVariantusvEXT");
        if (!real_glVariantusvEXT)
            unresolvedError("glVariantusvEXT");
    

        *(void **)&real_glVariantuivEXT = resolveGl("glVariantuivEXT");
        if (!real_glVariantuivEXT)
            unresolvedError("glVariantuivEXT");
    

        *(void **)&real_glVariantPointerEXT = resolveGl("glVariantPointerEXT");
        if (!real_glVariantPointerEXT)
            unresolvedError("glVariantPointerEXT");
    

        *(void **)&real_glEnableVariantClientStateEXT = resolveGl("glEnableVariantClientStateEXT");
        if (!real_glEnableVariantClientStateEXT)
            unresolvedError("glEnableVariantClientStateEXT");
    

        *(void **)&real_glDisableVariantClientStateEXT = resolveGl("glDisableVariantClientStateEXT");
        if (!real_glDisableVariantClientStateEXT)
            unresolvedError("glDisableVariantClientStateEXT");
    

        *(void **)&real_glBindLightParameterEXT = resolveGl("glBindLightParameterEXT");
        if (!real_glBindLightParameterEXT)
            unresolvedError("glBindLightParameterEXT");
    

        *(void **)&real_glBindMaterialParameterEXT = resolveGl("glBindMaterialParameterEXT");
        if (!real_glBindMaterialParameterEXT)
            unresolvedError("glBindMaterialParameterEXT");
    

        *(void **)&real_glBindTexGenParameterEXT = resolveGl("glBindTexGenParameterEXT");
        if (!real_glBindTexGenParameterEXT)
            unresolvedError("glBindTexGenParameterEXT");
    

        *(void **)&real_glBindTextureUnitParameterEXT = resolveGl("glBindTextureUnitParameterEXT");
        if (!real_glBindTextureUnitParameterEXT)
            unresolvedError("glBindTextureUnitParameterEXT");
    

        *(void **)&real_glBindParameterEXT = resolveGl("glBindParameterEXT");
        if (!real_glBindParameterEXT)
            unresolvedError("glBindParameterEXT");
    

        *(void **)&real_glIsVariantEnabledEXT = resolveGl("glIsVariantEnabledEXT");
        if (!real_glIsVariantEnabledEXT)
            unresolvedError("glIsVariantEnabledEXT");
    

        *(void **)&real_glGetVariantBooleanvEXT = resolveGl("glGetVariantBooleanvEXT");
        if (!real_glGetVariantBooleanvEXT)
            unresolvedError("glGetVariantBooleanvEXT");
    

        *(void **)&real_glGetVariantIntegervEXT = resolveGl("glGetVariantIntegervEXT");
        if (!real_glGetVariantIntegervEXT)
            unresolvedError("glGetVariantIntegervEXT");
    

        *(void **)&real_glGetVariantFloatvEXT = resolveGl("glGetVariantFloatvEXT");
        if (!real_glGetVariantFloatvEXT)
            unresolvedError("glGetVariantFloatvEXT");
    

        *(void **)&real_glGetVariantPointervEXT = resolveGl("glGetVariantPointervEXT");
        if (!real_glGetVariantPointervEXT)
            unresolvedError("glGetVariantPointervEXT");
    

        *(void **)&real_glGetInvariantBooleanvEXT = resolveGl("glGetInvariantBooleanvEXT");
        if (!real_glGetInvariantBooleanvEXT)
            unresolvedError("glGetInvariantBooleanvEXT");
    

        *(void **)&real_glGetInvariantIntegervEXT = resolveGl("glGetInvariantIntegervEXT");
        if (!real_glGetInvariantIntegervEXT)
            unresolvedError("glGetInvariantIntegervEXT");
    

        *(void **)&real_glGetInvariantFloatvEXT = resolveGl("glGetInvariantFloatvEXT");
        if (!real_glGetInvariantFloatvEXT)
            unresolvedError("glGetInvariantFloatvEXT");
    

        *(void **)&real_glGetLocalConstantBooleanvEXT = resolveGl("glGetLocalConstantBooleanvEXT");
        if (!real_glGetLocalConstantBooleanvEXT)
            unresolvedError("glGetLocalConstantBooleanvEXT");
    

        *(void **)&real_glGetLocalConstantIntegervEXT = resolveGl("glGetLocalConstantIntegervEXT");
        if (!real_glGetLocalConstantIntegervEXT)
            unresolvedError("glGetLocalConstantIntegervEXT");
    

        *(void **)&real_glGetLocalConstantFloatvEXT = resolveGl("glGetLocalConstantFloatvEXT");
        if (!real_glGetLocalConstantFloatvEXT)
            unresolvedError("glGetLocalConstantFloatvEXT");
    

        *(void **)&real_glVertexWeightfEXT = resolveGl("glVertexWeightfEXT");
        if (!real_glVertexWeightfEXT)
            unresolvedError("glVertexWeightfEXT");
    

        *(void **)&real_glVertexWeightfvEXT = resolveGl("glVertexWeightfvEXT");
        if (!real_glVertexWeightfvEXT)
            unresolvedError("glVertexWeightfvEXT");
    

        *(void **)&real_glVertexWeightPointerEXT = resolveGl("glVertexWeightPointerEXT");
        if (!real_glVertexWeightPointerEXT)
            unresolvedError("glVertexWeightPointerEXT");
    

        *(void **)&real_glAcquireKeyedMutexWin32EXT = resolveGl("glAcquireKeyedMutexWin32EXT");
        if (!real_glAcquireKeyedMutexWin32EXT)
            unresolvedError("glAcquireKeyedMutexWin32EXT");
    

        *(void **)&real_glReleaseKeyedMutexWin32EXT = resolveGl("glReleaseKeyedMutexWin32EXT");
        if (!real_glReleaseKeyedMutexWin32EXT)
            unresolvedError("glReleaseKeyedMutexWin32EXT");
    

        *(void **)&real_glWindowRectanglesEXT = resolveGl("glWindowRectanglesEXT");
        if (!real_glWindowRectanglesEXT)
            unresolvedError("glWindowRectanglesEXT");
    

        *(void **)&real_glImportSyncEXT = resolveGl("glImportSyncEXT");
        if (!real_glImportSyncEXT)
            unresolvedError("glImportSyncEXT");
    

        *(void **)&real_glFrameTerminatorGREMEDY = resolveGl("glFrameTerminatorGREMEDY");
        if (!real_glFrameTerminatorGREMEDY)
            unresolvedError("glFrameTerminatorGREMEDY");
    

        *(void **)&real_glStringMarkerGREMEDY = resolveGl("glStringMarkerGREMEDY");
        if (!real_glStringMarkerGREMEDY)
            unresolvedError("glStringMarkerGREMEDY");
    

        *(void **)&real_glImageTransformParameteriHP = resolveGl("glImageTransformParameteriHP");
        if (!real_glImageTransformParameteriHP)
            unresolvedError("glImageTransformParameteriHP");
    

        *(void **)&real_glImageTransformParameterfHP = resolveGl("glImageTransformParameterfHP");
        if (!real_glImageTransformParameterfHP)
            unresolvedError("glImageTransformParameterfHP");
    

        *(void **)&real_glImageTransformParameterivHP = resolveGl("glImageTransformParameterivHP");
        if (!real_glImageTransformParameterivHP)
            unresolvedError("glImageTransformParameterivHP");
    

        *(void **)&real_glImageTransformParameterfvHP = resolveGl("glImageTransformParameterfvHP");
        if (!real_glImageTransformParameterfvHP)
            unresolvedError("glImageTransformParameterfvHP");
    

        *(void **)&real_glGetImageTransformParameterivHP = resolveGl("glGetImageTransformParameterivHP");
        if (!real_glGetImageTransformParameterivHP)
            unresolvedError("glGetImageTransformParameterivHP");
    

        *(void **)&real_glGetImageTransformParameterfvHP = resolveGl("glGetImageTransformParameterfvHP");
        if (!real_glGetImageTransformParameterfvHP)
            unresolvedError("glGetImageTransformParameterfvHP");
    

        *(void **)&real_glMultiModeDrawArraysIBM = resolveGl("glMultiModeDrawArraysIBM");
        if (!real_glMultiModeDrawArraysIBM)
            unresolvedError("glMultiModeDrawArraysIBM");
    

        *(void **)&real_glMultiModeDrawElementsIBM = resolveGl("glMultiModeDrawElementsIBM");
        if (!real_glMultiModeDrawElementsIBM)
            unresolvedError("glMultiModeDrawElementsIBM");
    

        *(void **)&real_glFlushStaticDataIBM = resolveGl("glFlushStaticDataIBM");
        if (!real_glFlushStaticDataIBM)
            unresolvedError("glFlushStaticDataIBM");
    

        *(void **)&real_glColorPointerListIBM = resolveGl("glColorPointerListIBM");
        if (!real_glColorPointerListIBM)
            unresolvedError("glColorPointerListIBM");
    

        *(void **)&real_glSecondaryColorPointerListIBM = resolveGl("glSecondaryColorPointerListIBM");
        if (!real_glSecondaryColorPointerListIBM)
            unresolvedError("glSecondaryColorPointerListIBM");
    

        *(void **)&real_glEdgeFlagPointerListIBM = resolveGl("glEdgeFlagPointerListIBM");
        if (!real_glEdgeFlagPointerListIBM)
            unresolvedError("glEdgeFlagPointerListIBM");
    

        *(void **)&real_glFogCoordPointerListIBM = resolveGl("glFogCoordPointerListIBM");
        if (!real_glFogCoordPointerListIBM)
            unresolvedError("glFogCoordPointerListIBM");
    

        *(void **)&real_glIndexPointerListIBM = resolveGl("glIndexPointerListIBM");
        if (!real_glIndexPointerListIBM)
            unresolvedError("glIndexPointerListIBM");
    

        *(void **)&real_glNormalPointerListIBM = resolveGl("glNormalPointerListIBM");
        if (!real_glNormalPointerListIBM)
            unresolvedError("glNormalPointerListIBM");
    

        *(void **)&real_glTexCoordPointerListIBM = resolveGl("glTexCoordPointerListIBM");
        if (!real_glTexCoordPointerListIBM)
            unresolvedError("glTexCoordPointerListIBM");
    

        *(void **)&real_glVertexPointerListIBM = resolveGl("glVertexPointerListIBM");
        if (!real_glVertexPointerListIBM)
            unresolvedError("glVertexPointerListIBM");
    

        *(void **)&real_glBlendFuncSeparateINGR = resolveGl("glBlendFuncSeparateINGR");
        if (!real_glBlendFuncSeparateINGR)
            unresolvedError("glBlendFuncSeparateINGR");
    

        *(void **)&real_glApplyFramebufferAttachmentCMAAINTEL = resolveGl("glApplyFramebufferAttachmentCMAAINTEL");
        if (!real_glApplyFramebufferAttachmentCMAAINTEL)
            unresolvedError("glApplyFramebufferAttachmentCMAAINTEL");
    

        *(void **)&real_glSyncTextureINTEL = resolveGl("glSyncTextureINTEL");
        if (!real_glSyncTextureINTEL)
            unresolvedError("glSyncTextureINTEL");
    

        *(void **)&real_glUnmapTexture2DINTEL = resolveGl("glUnmapTexture2DINTEL");
        if (!real_glUnmapTexture2DINTEL)
            unresolvedError("glUnmapTexture2DINTEL");
    

        *(void **)&real_glMapTexture2DINTEL = resolveGl("glMapTexture2DINTEL");
        if (!real_glMapTexture2DINTEL)
            unresolvedError("glMapTexture2DINTEL");
    

        *(void **)&real_glVertexPointervINTEL = resolveGl("glVertexPointervINTEL");
        if (!real_glVertexPointervINTEL)
            unresolvedError("glVertexPointervINTEL");
    

        *(void **)&real_glNormalPointervINTEL = resolveGl("glNormalPointervINTEL");
        if (!real_glNormalPointervINTEL)
            unresolvedError("glNormalPointervINTEL");
    

        *(void **)&real_glColorPointervINTEL = resolveGl("glColorPointervINTEL");
        if (!real_glColorPointervINTEL)
            unresolvedError("glColorPointervINTEL");
    

        *(void **)&real_glTexCoordPointervINTEL = resolveGl("glTexCoordPointervINTEL");
        if (!real_glTexCoordPointervINTEL)
            unresolvedError("glTexCoordPointervINTEL");
    

        *(void **)&real_glBeginPerfQueryINTEL = resolveGl("glBeginPerfQueryINTEL");
        if (!real_glBeginPerfQueryINTEL)
            unresolvedError("glBeginPerfQueryINTEL");
    

        *(void **)&real_glCreatePerfQueryINTEL = resolveGl("glCreatePerfQueryINTEL");
        if (!real_glCreatePerfQueryINTEL)
            unresolvedError("glCreatePerfQueryINTEL");
    

        *(void **)&real_glDeletePerfQueryINTEL = resolveGl("glDeletePerfQueryINTEL");
        if (!real_glDeletePerfQueryINTEL)
            unresolvedError("glDeletePerfQueryINTEL");
    

        *(void **)&real_glEndPerfQueryINTEL = resolveGl("glEndPerfQueryINTEL");
        if (!real_glEndPerfQueryINTEL)
            unresolvedError("glEndPerfQueryINTEL");
    

        *(void **)&real_glGetFirstPerfQueryIdINTEL = resolveGl("glGetFirstPerfQueryIdINTEL");
        if (!real_glGetFirstPerfQueryIdINTEL)
            unresolvedError("glGetFirstPerfQueryIdINTEL");
    

        *(void **)&real_glGetNextPerfQueryIdINTEL = resolveGl("glGetNextPerfQueryIdINTEL");
        if (!real_glGetNextPerfQueryIdINTEL)
            unresolvedError("glGetNextPerfQueryIdINTEL");
    

        *(void **)&real_glGetPerfCounterInfoINTEL = resolveGl("glGetPerfCounterInfoINTEL");
        if (!real_glGetPerfCounterInfoINTEL)
            unresolvedError("glGetPerfCounterInfoINTEL");
    

        *(void **)&real_glGetPerfQueryDataINTEL = resolveGl("glGetPerfQueryDataINTEL");
        if (!real_glGetPerfQueryDataINTEL)
            unresolvedError("glGetPerfQueryDataINTEL");
    

        *(void **)&real_glGetPerfQueryIdByNameINTEL = resolveGl("glGetPerfQueryIdByNameINTEL");
        if (!real_glGetPerfQueryIdByNameINTEL)
            unresolvedError("glGetPerfQueryIdByNameINTEL");
    

        *(void **)&real_glGetPerfQueryInfoINTEL = resolveGl("glGetPerfQueryInfoINTEL");
        if (!real_glGetPerfQueryInfoINTEL)
            unresolvedError("glGetPerfQueryInfoINTEL");
    

        *(void **)&real_glResizeBuffersMESA = resolveGl("glResizeBuffersMESA");
        if (!real_glResizeBuffersMESA)
            unresolvedError("glResizeBuffersMESA");
    

        *(void **)&real_glWindowPos2dMESA = resolveGl("glWindowPos2dMESA");
        if (!real_glWindowPos2dMESA)
            unresolvedError("glWindowPos2dMESA");
    

        *(void **)&real_glWindowPos2dvMESA = resolveGl("glWindowPos2dvMESA");
        if (!real_glWindowPos2dvMESA)
            unresolvedError("glWindowPos2dvMESA");
    

        *(void **)&real_glWindowPos2fMESA = resolveGl("glWindowPos2fMESA");
        if (!real_glWindowPos2fMESA)
            unresolvedError("glWindowPos2fMESA");
    

        *(void **)&real_glWindowPos2fvMESA = resolveGl("glWindowPos2fvMESA");
        if (!real_glWindowPos2fvMESA)
            unresolvedError("glWindowPos2fvMESA");
    

        *(void **)&real_glWindowPos2iMESA = resolveGl("glWindowPos2iMESA");
        if (!real_glWindowPos2iMESA)
            unresolvedError("glWindowPos2iMESA");
    

        *(void **)&real_glWindowPos2ivMESA = resolveGl("glWindowPos2ivMESA");
        if (!real_glWindowPos2ivMESA)
            unresolvedError("glWindowPos2ivMESA");
    

        *(void **)&real_glWindowPos2sMESA = resolveGl("glWindowPos2sMESA");
        if (!real_glWindowPos2sMESA)
            unresolvedError("glWindowPos2sMESA");
    

        *(void **)&real_glWindowPos2svMESA = resolveGl("glWindowPos2svMESA");
        if (!real_glWindowPos2svMESA)
            unresolvedError("glWindowPos2svMESA");
    

        *(void **)&real_glWindowPos3dMESA = resolveGl("glWindowPos3dMESA");
        if (!real_glWindowPos3dMESA)
            unresolvedError("glWindowPos3dMESA");
    

        *(void **)&real_glWindowPos3dvMESA = resolveGl("glWindowPos3dvMESA");
        if (!real_glWindowPos3dvMESA)
            unresolvedError("glWindowPos3dvMESA");
    

        *(void **)&real_glWindowPos3fMESA = resolveGl("glWindowPos3fMESA");
        if (!real_glWindowPos3fMESA)
            unresolvedError("glWindowPos3fMESA");
    

        *(void **)&real_glWindowPos3fvMESA = resolveGl("glWindowPos3fvMESA");
        if (!real_glWindowPos3fvMESA)
            unresolvedError("glWindowPos3fvMESA");
    

        *(void **)&real_glWindowPos3iMESA = resolveGl("glWindowPos3iMESA");
        if (!real_glWindowPos3iMESA)
            unresolvedError("glWindowPos3iMESA");
    

        *(void **)&real_glWindowPos3ivMESA = resolveGl("glWindowPos3ivMESA");
        if (!real_glWindowPos3ivMESA)
            unresolvedError("glWindowPos3ivMESA");
    

        *(void **)&real_glWindowPos3sMESA = resolveGl("glWindowPos3sMESA");
        if (!real_glWindowPos3sMESA)
            unresolvedError("glWindowPos3sMESA");
    

        *(void **)&real_glWindowPos3svMESA = resolveGl("glWindowPos3svMESA");
        if (!real_glWindowPos3svMESA)
            unresolvedError("glWindowPos3svMESA");
    

        *(void **)&real_glWindowPos4dMESA = resolveGl("glWindowPos4dMESA");
        if (!real_glWindowPos4dMESA)
            unresolvedError("glWindowPos4dMESA");
    

        *(void **)&real_glWindowPos4dvMESA = resolveGl("glWindowPos4dvMESA");
        if (!real_glWindowPos4dvMESA)
            unresolvedError("glWindowPos4dvMESA");
    

        *(void **)&real_glWindowPos4fMESA = resolveGl("glWindowPos4fMESA");
        if (!real_glWindowPos4fMESA)
            unresolvedError("glWindowPos4fMESA");
    

        *(void **)&real_glWindowPos4fvMESA = resolveGl("glWindowPos4fvMESA");
        if (!real_glWindowPos4fvMESA)
            unresolvedError("glWindowPos4fvMESA");
    

        *(void **)&real_glWindowPos4iMESA = resolveGl("glWindowPos4iMESA");
        if (!real_glWindowPos4iMESA)
            unresolvedError("glWindowPos4iMESA");
    

        *(void **)&real_glWindowPos4ivMESA = resolveGl("glWindowPos4ivMESA");
        if (!real_glWindowPos4ivMESA)
            unresolvedError("glWindowPos4ivMESA");
    

        *(void **)&real_glWindowPos4sMESA = resolveGl("glWindowPos4sMESA");
        if (!real_glWindowPos4sMESA)
            unresolvedError("glWindowPos4sMESA");
    

        *(void **)&real_glWindowPos4svMESA = resolveGl("glWindowPos4svMESA");
        if (!real_glWindowPos4svMESA)
            unresolvedError("glWindowPos4svMESA");
    

        *(void **)&real_glBeginConditionalRenderNVX = resolveGl("glBeginConditionalRenderNVX");
        if (!real_glBeginConditionalRenderNVX)
            unresolvedError("glBeginConditionalRenderNVX");
    

        *(void **)&real_glEndConditionalRenderNVX = resolveGl("glEndConditionalRenderNVX");
        if (!real_glEndConditionalRenderNVX)
            unresolvedError("glEndConditionalRenderNVX");
    

        *(void **)&real_glLGPUNamedBufferSubDataNVX = resolveGl("glLGPUNamedBufferSubDataNVX");
        if (!real_glLGPUNamedBufferSubDataNVX)
            unresolvedError("glLGPUNamedBufferSubDataNVX");
    

        *(void **)&real_glLGPUCopyImageSubDataNVX = resolveGl("glLGPUCopyImageSubDataNVX");
        if (!real_glLGPUCopyImageSubDataNVX)
            unresolvedError("glLGPUCopyImageSubDataNVX");
    

        *(void **)&real_glLGPUInterlockNVX = resolveGl("glLGPUInterlockNVX");
        if (!real_glLGPUInterlockNVX)
            unresolvedError("glLGPUInterlockNVX");
    

        *(void **)&real_glAlphaToCoverageDitherControlNV = resolveGl("glAlphaToCoverageDitherControlNV");
        if (!real_glAlphaToCoverageDitherControlNV)
            unresolvedError("glAlphaToCoverageDitherControlNV");
    

        *(void **)&real_glMultiDrawArraysIndirectBindlessNV = resolveGl("glMultiDrawArraysIndirectBindlessNV");
        if (!real_glMultiDrawArraysIndirectBindlessNV)
            unresolvedError("glMultiDrawArraysIndirectBindlessNV");
    

        *(void **)&real_glMultiDrawElementsIndirectBindlessNV = resolveGl("glMultiDrawElementsIndirectBindlessNV");
        if (!real_glMultiDrawElementsIndirectBindlessNV)
            unresolvedError("glMultiDrawElementsIndirectBindlessNV");
    

        *(void **)&real_glMultiDrawArraysIndirectBindlessCountNV = resolveGl("glMultiDrawArraysIndirectBindlessCountNV");
        if (!real_glMultiDrawArraysIndirectBindlessCountNV)
            unresolvedError("glMultiDrawArraysIndirectBindlessCountNV");
    

        *(void **)&real_glMultiDrawElementsIndirectBindlessCountNV = resolveGl("glMultiDrawElementsIndirectBindlessCountNV");
        if (!real_glMultiDrawElementsIndirectBindlessCountNV)
            unresolvedError("glMultiDrawElementsIndirectBindlessCountNV");
    

        *(void **)&real_glGetTextureHandleNV = resolveGl("glGetTextureHandleNV");
        if (!real_glGetTextureHandleNV)
            unresolvedError("glGetTextureHandleNV");
    

        *(void **)&real_glGetTextureSamplerHandleNV = resolveGl("glGetTextureSamplerHandleNV");
        if (!real_glGetTextureSamplerHandleNV)
            unresolvedError("glGetTextureSamplerHandleNV");
    

        *(void **)&real_glMakeTextureHandleResidentNV = resolveGl("glMakeTextureHandleResidentNV");
        if (!real_glMakeTextureHandleResidentNV)
            unresolvedError("glMakeTextureHandleResidentNV");
    

        *(void **)&real_glMakeTextureHandleNonResidentNV = resolveGl("glMakeTextureHandleNonResidentNV");
        if (!real_glMakeTextureHandleNonResidentNV)
            unresolvedError("glMakeTextureHandleNonResidentNV");
    

        *(void **)&real_glGetImageHandleNV = resolveGl("glGetImageHandleNV");
        if (!real_glGetImageHandleNV)
            unresolvedError("glGetImageHandleNV");
    

        *(void **)&real_glMakeImageHandleResidentNV = resolveGl("glMakeImageHandleResidentNV");
        if (!real_glMakeImageHandleResidentNV)
            unresolvedError("glMakeImageHandleResidentNV");
    

        *(void **)&real_glMakeImageHandleNonResidentNV = resolveGl("glMakeImageHandleNonResidentNV");
        if (!real_glMakeImageHandleNonResidentNV)
            unresolvedError("glMakeImageHandleNonResidentNV");
    

        *(void **)&real_glUniformHandleui64NV = resolveGl("glUniformHandleui64NV");
        if (!real_glUniformHandleui64NV)
            unresolvedError("glUniformHandleui64NV");
    

        *(void **)&real_glUniformHandleui64vNV = resolveGl("glUniformHandleui64vNV");
        if (!real_glUniformHandleui64vNV)
            unresolvedError("glUniformHandleui64vNV");
    

        *(void **)&real_glProgramUniformHandleui64NV = resolveGl("glProgramUniformHandleui64NV");
        if (!real_glProgramUniformHandleui64NV)
            unresolvedError("glProgramUniformHandleui64NV");
    

        *(void **)&real_glProgramUniformHandleui64vNV = resolveGl("glProgramUniformHandleui64vNV");
        if (!real_glProgramUniformHandleui64vNV)
            unresolvedError("glProgramUniformHandleui64vNV");
    

        *(void **)&real_glIsTextureHandleResidentNV = resolveGl("glIsTextureHandleResidentNV");
        if (!real_glIsTextureHandleResidentNV)
            unresolvedError("glIsTextureHandleResidentNV");
    

        *(void **)&real_glIsImageHandleResidentNV = resolveGl("glIsImageHandleResidentNV");
        if (!real_glIsImageHandleResidentNV)
            unresolvedError("glIsImageHandleResidentNV");
    

        *(void **)&real_glBlendParameteriNV = resolveGl("glBlendParameteriNV");
        if (!real_glBlendParameteriNV)
            unresolvedError("glBlendParameteriNV");
    

        *(void **)&real_glBlendBarrierNV = resolveGl("glBlendBarrierNV");
        if (!real_glBlendBarrierNV)
            unresolvedError("glBlendBarrierNV");
    

        *(void **)&real_glViewportPositionWScaleNV = resolveGl("glViewportPositionWScaleNV");
        if (!real_glViewportPositionWScaleNV)
            unresolvedError("glViewportPositionWScaleNV");
    

        *(void **)&real_glCreateStatesNV = resolveGl("glCreateStatesNV");
        if (!real_glCreateStatesNV)
            unresolvedError("glCreateStatesNV");
    

        *(void **)&real_glDeleteStatesNV = resolveGl("glDeleteStatesNV");
        if (!real_glDeleteStatesNV)
            unresolvedError("glDeleteStatesNV");
    

        *(void **)&real_glIsStateNV = resolveGl("glIsStateNV");
        if (!real_glIsStateNV)
            unresolvedError("glIsStateNV");
    

        *(void **)&real_glStateCaptureNV = resolveGl("glStateCaptureNV");
        if (!real_glStateCaptureNV)
            unresolvedError("glStateCaptureNV");
    

        *(void **)&real_glGetCommandHeaderNV = resolveGl("glGetCommandHeaderNV");
        if (!real_glGetCommandHeaderNV)
            unresolvedError("glGetCommandHeaderNV");
    

        *(void **)&real_glGetStageIndexNV = resolveGl("glGetStageIndexNV");
        if (!real_glGetStageIndexNV)
            unresolvedError("glGetStageIndexNV");
    

        *(void **)&real_glDrawCommandsNV = resolveGl("glDrawCommandsNV");
        if (!real_glDrawCommandsNV)
            unresolvedError("glDrawCommandsNV");
    

        *(void **)&real_glDrawCommandsAddressNV = resolveGl("glDrawCommandsAddressNV");
        if (!real_glDrawCommandsAddressNV)
            unresolvedError("glDrawCommandsAddressNV");
    

        *(void **)&real_glDrawCommandsStatesNV = resolveGl("glDrawCommandsStatesNV");
        if (!real_glDrawCommandsStatesNV)
            unresolvedError("glDrawCommandsStatesNV");
    

        *(void **)&real_glDrawCommandsStatesAddressNV = resolveGl("glDrawCommandsStatesAddressNV");
        if (!real_glDrawCommandsStatesAddressNV)
            unresolvedError("glDrawCommandsStatesAddressNV");
    

        *(void **)&real_glCreateCommandListsNV = resolveGl("glCreateCommandListsNV");
        if (!real_glCreateCommandListsNV)
            unresolvedError("glCreateCommandListsNV");
    

        *(void **)&real_glDeleteCommandListsNV = resolveGl("glDeleteCommandListsNV");
        if (!real_glDeleteCommandListsNV)
            unresolvedError("glDeleteCommandListsNV");
    

        *(void **)&real_glIsCommandListNV = resolveGl("glIsCommandListNV");
        if (!real_glIsCommandListNV)
            unresolvedError("glIsCommandListNV");
    

        *(void **)&real_glListDrawCommandsStatesClientNV = resolveGl("glListDrawCommandsStatesClientNV");
        if (!real_glListDrawCommandsStatesClientNV)
            unresolvedError("glListDrawCommandsStatesClientNV");
    

        *(void **)&real_glCommandListSegmentsNV = resolveGl("glCommandListSegmentsNV");
        if (!real_glCommandListSegmentsNV)
            unresolvedError("glCommandListSegmentsNV");
    

        *(void **)&real_glCompileCommandListNV = resolveGl("glCompileCommandListNV");
        if (!real_glCompileCommandListNV)
            unresolvedError("glCompileCommandListNV");
    

        *(void **)&real_glCallCommandListNV = resolveGl("glCallCommandListNV");
        if (!real_glCallCommandListNV)
            unresolvedError("glCallCommandListNV");
    

        *(void **)&real_glBeginConditionalRenderNV = resolveGl("glBeginConditionalRenderNV");
        if (!real_glBeginConditionalRenderNV)
            unresolvedError("glBeginConditionalRenderNV");
    

        *(void **)&real_glEndConditionalRenderNV = resolveGl("glEndConditionalRenderNV");
        if (!real_glEndConditionalRenderNV)
            unresolvedError("glEndConditionalRenderNV");
    

        *(void **)&real_glSubpixelPrecisionBiasNV = resolveGl("glSubpixelPrecisionBiasNV");
        if (!real_glSubpixelPrecisionBiasNV)
            unresolvedError("glSubpixelPrecisionBiasNV");
    

        *(void **)&real_glConservativeRasterParameterfNV = resolveGl("glConservativeRasterParameterfNV");
        if (!real_glConservativeRasterParameterfNV)
            unresolvedError("glConservativeRasterParameterfNV");
    

        *(void **)&real_glConservativeRasterParameteriNV = resolveGl("glConservativeRasterParameteriNV");
        if (!real_glConservativeRasterParameteriNV)
            unresolvedError("glConservativeRasterParameteriNV");
    

        *(void **)&real_glCopyImageSubDataNV = resolveGl("glCopyImageSubDataNV");
        if (!real_glCopyImageSubDataNV)
            unresolvedError("glCopyImageSubDataNV");
    

        *(void **)&real_glDepthRangedNV = resolveGl("glDepthRangedNV");
        if (!real_glDepthRangedNV)
            unresolvedError("glDepthRangedNV");
    

        *(void **)&real_glClearDepthdNV = resolveGl("glClearDepthdNV");
        if (!real_glClearDepthdNV)
            unresolvedError("glClearDepthdNV");
    

        *(void **)&real_glDepthBoundsdNV = resolveGl("glDepthBoundsdNV");
        if (!real_glDepthBoundsdNV)
            unresolvedError("glDepthBoundsdNV");
    

        *(void **)&real_glDrawTextureNV = resolveGl("glDrawTextureNV");
        if (!real_glDrawTextureNV)
            unresolvedError("glDrawTextureNV");
    

        *(void **)&real_glDrawVkImageNV = resolveGl("glDrawVkImageNV");
        if (!real_glDrawVkImageNV)
            unresolvedError("glDrawVkImageNV");
    

        *(void **)&real_glGetVkProcAddrNV = resolveGl("glGetVkProcAddrNV");
        if (!real_glGetVkProcAddrNV)
            unresolvedError("glGetVkProcAddrNV");
    

        *(void **)&real_glWaitVkSemaphoreNV = resolveGl("glWaitVkSemaphoreNV");
        if (!real_glWaitVkSemaphoreNV)
            unresolvedError("glWaitVkSemaphoreNV");
    

        *(void **)&real_glSignalVkSemaphoreNV = resolveGl("glSignalVkSemaphoreNV");
        if (!real_glSignalVkSemaphoreNV)
            unresolvedError("glSignalVkSemaphoreNV");
    

        *(void **)&real_glSignalVkFenceNV = resolveGl("glSignalVkFenceNV");
        if (!real_glSignalVkFenceNV)
            unresolvedError("glSignalVkFenceNV");
    

        *(void **)&real_glMapControlPointsNV = resolveGl("glMapControlPointsNV");
        if (!real_glMapControlPointsNV)
            unresolvedError("glMapControlPointsNV");
    

        *(void **)&real_glMapParameterivNV = resolveGl("glMapParameterivNV");
        if (!real_glMapParameterivNV)
            unresolvedError("glMapParameterivNV");
    

        *(void **)&real_glMapParameterfvNV = resolveGl("glMapParameterfvNV");
        if (!real_glMapParameterfvNV)
            unresolvedError("glMapParameterfvNV");
    

        *(void **)&real_glGetMapControlPointsNV = resolveGl("glGetMapControlPointsNV");
        if (!real_glGetMapControlPointsNV)
            unresolvedError("glGetMapControlPointsNV");
    

        *(void **)&real_glGetMapParameterivNV = resolveGl("glGetMapParameterivNV");
        if (!real_glGetMapParameterivNV)
            unresolvedError("glGetMapParameterivNV");
    

        *(void **)&real_glGetMapParameterfvNV = resolveGl("glGetMapParameterfvNV");
        if (!real_glGetMapParameterfvNV)
            unresolvedError("glGetMapParameterfvNV");
    

        *(void **)&real_glGetMapAttribParameterivNV = resolveGl("glGetMapAttribParameterivNV");
        if (!real_glGetMapAttribParameterivNV)
            unresolvedError("glGetMapAttribParameterivNV");
    

        *(void **)&real_glGetMapAttribParameterfvNV = resolveGl("glGetMapAttribParameterfvNV");
        if (!real_glGetMapAttribParameterfvNV)
            unresolvedError("glGetMapAttribParameterfvNV");
    

        *(void **)&real_glEvalMapsNV = resolveGl("glEvalMapsNV");
        if (!real_glEvalMapsNV)
            unresolvedError("glEvalMapsNV");
    

        *(void **)&real_glGetMultisamplefvNV = resolveGl("glGetMultisamplefvNV");
        if (!real_glGetMultisamplefvNV)
            unresolvedError("glGetMultisamplefvNV");
    

        *(void **)&real_glSampleMaskIndexedNV = resolveGl("glSampleMaskIndexedNV");
        if (!real_glSampleMaskIndexedNV)
            unresolvedError("glSampleMaskIndexedNV");
    

        *(void **)&real_glTexRenderbufferNV = resolveGl("glTexRenderbufferNV");
        if (!real_glTexRenderbufferNV)
            unresolvedError("glTexRenderbufferNV");
    

        *(void **)&real_glDeleteFencesNV = resolveGl("glDeleteFencesNV");
        if (!real_glDeleteFencesNV)
            unresolvedError("glDeleteFencesNV");
    

        *(void **)&real_glGenFencesNV = resolveGl("glGenFencesNV");
        if (!real_glGenFencesNV)
            unresolvedError("glGenFencesNV");
    

        *(void **)&real_glIsFenceNV = resolveGl("glIsFenceNV");
        if (!real_glIsFenceNV)
            unresolvedError("glIsFenceNV");
    

        *(void **)&real_glTestFenceNV = resolveGl("glTestFenceNV");
        if (!real_glTestFenceNV)
            unresolvedError("glTestFenceNV");
    

        *(void **)&real_glGetFenceivNV = resolveGl("glGetFenceivNV");
        if (!real_glGetFenceivNV)
            unresolvedError("glGetFenceivNV");
    

        *(void **)&real_glFinishFenceNV = resolveGl("glFinishFenceNV");
        if (!real_glFinishFenceNV)
            unresolvedError("glFinishFenceNV");
    

        *(void **)&real_glSetFenceNV = resolveGl("glSetFenceNV");
        if (!real_glSetFenceNV)
            unresolvedError("glSetFenceNV");
    

        *(void **)&real_glFragmentCoverageColorNV = resolveGl("glFragmentCoverageColorNV");
        if (!real_glFragmentCoverageColorNV)
            unresolvedError("glFragmentCoverageColorNV");
    

        *(void **)&real_glProgramNamedParameter4fNV = resolveGl("glProgramNamedParameter4fNV");
        if (!real_glProgramNamedParameter4fNV)
            unresolvedError("glProgramNamedParameter4fNV");
    

        *(void **)&real_glProgramNamedParameter4fvNV = resolveGl("glProgramNamedParameter4fvNV");
        if (!real_glProgramNamedParameter4fvNV)
            unresolvedError("glProgramNamedParameter4fvNV");
    

        *(void **)&real_glProgramNamedParameter4dNV = resolveGl("glProgramNamedParameter4dNV");
        if (!real_glProgramNamedParameter4dNV)
            unresolvedError("glProgramNamedParameter4dNV");
    

        *(void **)&real_glProgramNamedParameter4dvNV = resolveGl("glProgramNamedParameter4dvNV");
        if (!real_glProgramNamedParameter4dvNV)
            unresolvedError("glProgramNamedParameter4dvNV");
    

        *(void **)&real_glGetProgramNamedParameterfvNV = resolveGl("glGetProgramNamedParameterfvNV");
        if (!real_glGetProgramNamedParameterfvNV)
            unresolvedError("glGetProgramNamedParameterfvNV");
    

        *(void **)&real_glGetProgramNamedParameterdvNV = resolveGl("glGetProgramNamedParameterdvNV");
        if (!real_glGetProgramNamedParameterdvNV)
            unresolvedError("glGetProgramNamedParameterdvNV");
    

        *(void **)&real_glCoverageModulationTableNV = resolveGl("glCoverageModulationTableNV");
        if (!real_glCoverageModulationTableNV)
            unresolvedError("glCoverageModulationTableNV");
    

        *(void **)&real_glGetCoverageModulationTableNV = resolveGl("glGetCoverageModulationTableNV");
        if (!real_glGetCoverageModulationTableNV)
            unresolvedError("glGetCoverageModulationTableNV");
    

        *(void **)&real_glCoverageModulationNV = resolveGl("glCoverageModulationNV");
        if (!real_glCoverageModulationNV)
            unresolvedError("glCoverageModulationNV");
    

        *(void **)&real_glRenderbufferStorageMultisampleCoverageNV = resolveGl("glRenderbufferStorageMultisampleCoverageNV");
        if (!real_glRenderbufferStorageMultisampleCoverageNV)
            unresolvedError("glRenderbufferStorageMultisampleCoverageNV");
    

        *(void **)&real_glProgramVertexLimitNV = resolveGl("glProgramVertexLimitNV");
        if (!real_glProgramVertexLimitNV)
            unresolvedError("glProgramVertexLimitNV");
    

        *(void **)&real_glFramebufferTextureEXT = resolveGl("glFramebufferTextureEXT");
        if (!real_glFramebufferTextureEXT)
            unresolvedError("glFramebufferTextureEXT");
    

        *(void **)&real_glFramebufferTextureFaceEXT = resolveGl("glFramebufferTextureFaceEXT");
        if (!real_glFramebufferTextureFaceEXT)
            unresolvedError("glFramebufferTextureFaceEXT");
    

        *(void **)&real_glRenderGpuMaskNV = resolveGl("glRenderGpuMaskNV");
        if (!real_glRenderGpuMaskNV)
            unresolvedError("glRenderGpuMaskNV");
    

        *(void **)&real_glMulticastBufferSubDataNV = resolveGl("glMulticastBufferSubDataNV");
        if (!real_glMulticastBufferSubDataNV)
            unresolvedError("glMulticastBufferSubDataNV");
    

        *(void **)&real_glMulticastCopyBufferSubDataNV = resolveGl("glMulticastCopyBufferSubDataNV");
        if (!real_glMulticastCopyBufferSubDataNV)
            unresolvedError("glMulticastCopyBufferSubDataNV");
    

        *(void **)&real_glMulticastCopyImageSubDataNV = resolveGl("glMulticastCopyImageSubDataNV");
        if (!real_glMulticastCopyImageSubDataNV)
            unresolvedError("glMulticastCopyImageSubDataNV");
    

        *(void **)&real_glMulticastBlitFramebufferNV = resolveGl("glMulticastBlitFramebufferNV");
        if (!real_glMulticastBlitFramebufferNV)
            unresolvedError("glMulticastBlitFramebufferNV");
    

        *(void **)&real_glMulticastFramebufferSampleLocationsfvNV = resolveGl("glMulticastFramebufferSampleLocationsfvNV");
        if (!real_glMulticastFramebufferSampleLocationsfvNV)
            unresolvedError("glMulticastFramebufferSampleLocationsfvNV");
    

        *(void **)&real_glMulticastBarrierNV = resolveGl("glMulticastBarrierNV");
        if (!real_glMulticastBarrierNV)
            unresolvedError("glMulticastBarrierNV");
    

        *(void **)&real_glMulticastWaitSyncNV = resolveGl("glMulticastWaitSyncNV");
        if (!real_glMulticastWaitSyncNV)
            unresolvedError("glMulticastWaitSyncNV");
    

        *(void **)&real_glMulticastGetQueryObjectivNV = resolveGl("glMulticastGetQueryObjectivNV");
        if (!real_glMulticastGetQueryObjectivNV)
            unresolvedError("glMulticastGetQueryObjectivNV");
    

        *(void **)&real_glMulticastGetQueryObjectuivNV = resolveGl("glMulticastGetQueryObjectuivNV");
        if (!real_glMulticastGetQueryObjectuivNV)
            unresolvedError("glMulticastGetQueryObjectuivNV");
    

        *(void **)&real_glMulticastGetQueryObjecti64vNV = resolveGl("glMulticastGetQueryObjecti64vNV");
        if (!real_glMulticastGetQueryObjecti64vNV)
            unresolvedError("glMulticastGetQueryObjecti64vNV");
    

        *(void **)&real_glMulticastGetQueryObjectui64vNV = resolveGl("glMulticastGetQueryObjectui64vNV");
        if (!real_glMulticastGetQueryObjectui64vNV)
            unresolvedError("glMulticastGetQueryObjectui64vNV");
    

        *(void **)&real_glProgramLocalParameterI4iNV = resolveGl("glProgramLocalParameterI4iNV");
        if (!real_glProgramLocalParameterI4iNV)
            unresolvedError("glProgramLocalParameterI4iNV");
    

        *(void **)&real_glProgramLocalParameterI4ivNV = resolveGl("glProgramLocalParameterI4ivNV");
        if (!real_glProgramLocalParameterI4ivNV)
            unresolvedError("glProgramLocalParameterI4ivNV");
    

        *(void **)&real_glProgramLocalParametersI4ivNV = resolveGl("glProgramLocalParametersI4ivNV");
        if (!real_glProgramLocalParametersI4ivNV)
            unresolvedError("glProgramLocalParametersI4ivNV");
    

        *(void **)&real_glProgramLocalParameterI4uiNV = resolveGl("glProgramLocalParameterI4uiNV");
        if (!real_glProgramLocalParameterI4uiNV)
            unresolvedError("glProgramLocalParameterI4uiNV");
    

        *(void **)&real_glProgramLocalParameterI4uivNV = resolveGl("glProgramLocalParameterI4uivNV");
        if (!real_glProgramLocalParameterI4uivNV)
            unresolvedError("glProgramLocalParameterI4uivNV");
    

        *(void **)&real_glProgramLocalParametersI4uivNV = resolveGl("glProgramLocalParametersI4uivNV");
        if (!real_glProgramLocalParametersI4uivNV)
            unresolvedError("glProgramLocalParametersI4uivNV");
    

        *(void **)&real_glProgramEnvParameterI4iNV = resolveGl("glProgramEnvParameterI4iNV");
        if (!real_glProgramEnvParameterI4iNV)
            unresolvedError("glProgramEnvParameterI4iNV");
    

        *(void **)&real_glProgramEnvParameterI4ivNV = resolveGl("glProgramEnvParameterI4ivNV");
        if (!real_glProgramEnvParameterI4ivNV)
            unresolvedError("glProgramEnvParameterI4ivNV");
    

        *(void **)&real_glProgramEnvParametersI4ivNV = resolveGl("glProgramEnvParametersI4ivNV");
        if (!real_glProgramEnvParametersI4ivNV)
            unresolvedError("glProgramEnvParametersI4ivNV");
    

        *(void **)&real_glProgramEnvParameterI4uiNV = resolveGl("glProgramEnvParameterI4uiNV");
        if (!real_glProgramEnvParameterI4uiNV)
            unresolvedError("glProgramEnvParameterI4uiNV");
    

        *(void **)&real_glProgramEnvParameterI4uivNV = resolveGl("glProgramEnvParameterI4uivNV");
        if (!real_glProgramEnvParameterI4uivNV)
            unresolvedError("glProgramEnvParameterI4uivNV");
    

        *(void **)&real_glProgramEnvParametersI4uivNV = resolveGl("glProgramEnvParametersI4uivNV");
        if (!real_glProgramEnvParametersI4uivNV)
            unresolvedError("glProgramEnvParametersI4uivNV");
    

        *(void **)&real_glGetProgramLocalParameterIivNV = resolveGl("glGetProgramLocalParameterIivNV");
        if (!real_glGetProgramLocalParameterIivNV)
            unresolvedError("glGetProgramLocalParameterIivNV");
    

        *(void **)&real_glGetProgramLocalParameterIuivNV = resolveGl("glGetProgramLocalParameterIuivNV");
        if (!real_glGetProgramLocalParameterIuivNV)
            unresolvedError("glGetProgramLocalParameterIuivNV");
    

        *(void **)&real_glGetProgramEnvParameterIivNV = resolveGl("glGetProgramEnvParameterIivNV");
        if (!real_glGetProgramEnvParameterIivNV)
            unresolvedError("glGetProgramEnvParameterIivNV");
    

        *(void **)&real_glGetProgramEnvParameterIuivNV = resolveGl("glGetProgramEnvParameterIuivNV");
        if (!real_glGetProgramEnvParameterIuivNV)
            unresolvedError("glGetProgramEnvParameterIuivNV");
    

        *(void **)&real_glProgramSubroutineParametersuivNV = resolveGl("glProgramSubroutineParametersuivNV");
        if (!real_glProgramSubroutineParametersuivNV)
            unresolvedError("glProgramSubroutineParametersuivNV");
    

        *(void **)&real_glGetProgramSubroutineParameteruivNV = resolveGl("glGetProgramSubroutineParameteruivNV");
        if (!real_glGetProgramSubroutineParameteruivNV)
            unresolvedError("glGetProgramSubroutineParameteruivNV");
    

        *(void **)&real_glVertex2hNV = resolveGl("glVertex2hNV");
        if (!real_glVertex2hNV)
            unresolvedError("glVertex2hNV");
    

        *(void **)&real_glVertex2hvNV = resolveGl("glVertex2hvNV");
        if (!real_glVertex2hvNV)
            unresolvedError("glVertex2hvNV");
    

        *(void **)&real_glVertex3hNV = resolveGl("glVertex3hNV");
        if (!real_glVertex3hNV)
            unresolvedError("glVertex3hNV");
    

        *(void **)&real_glVertex3hvNV = resolveGl("glVertex3hvNV");
        if (!real_glVertex3hvNV)
            unresolvedError("glVertex3hvNV");
    

        *(void **)&real_glVertex4hNV = resolveGl("glVertex4hNV");
        if (!real_glVertex4hNV)
            unresolvedError("glVertex4hNV");
    

        *(void **)&real_glVertex4hvNV = resolveGl("glVertex4hvNV");
        if (!real_glVertex4hvNV)
            unresolvedError("glVertex4hvNV");
    

        *(void **)&real_glNormal3hNV = resolveGl("glNormal3hNV");
        if (!real_glNormal3hNV)
            unresolvedError("glNormal3hNV");
    

        *(void **)&real_glNormal3hvNV = resolveGl("glNormal3hvNV");
        if (!real_glNormal3hvNV)
            unresolvedError("glNormal3hvNV");
    

        *(void **)&real_glColor3hNV = resolveGl("glColor3hNV");
        if (!real_glColor3hNV)
            unresolvedError("glColor3hNV");
    

        *(void **)&real_glColor3hvNV = resolveGl("glColor3hvNV");
        if (!real_glColor3hvNV)
            unresolvedError("glColor3hvNV");
    

        *(void **)&real_glColor4hNV = resolveGl("glColor4hNV");
        if (!real_glColor4hNV)
            unresolvedError("glColor4hNV");
    

        *(void **)&real_glColor4hvNV = resolveGl("glColor4hvNV");
        if (!real_glColor4hvNV)
            unresolvedError("glColor4hvNV");
    

        *(void **)&real_glTexCoord1hNV = resolveGl("glTexCoord1hNV");
        if (!real_glTexCoord1hNV)
            unresolvedError("glTexCoord1hNV");
    

        *(void **)&real_glTexCoord1hvNV = resolveGl("glTexCoord1hvNV");
        if (!real_glTexCoord1hvNV)
            unresolvedError("glTexCoord1hvNV");
    

        *(void **)&real_glTexCoord2hNV = resolveGl("glTexCoord2hNV");
        if (!real_glTexCoord2hNV)
            unresolvedError("glTexCoord2hNV");
    

        *(void **)&real_glTexCoord2hvNV = resolveGl("glTexCoord2hvNV");
        if (!real_glTexCoord2hvNV)
            unresolvedError("glTexCoord2hvNV");
    

        *(void **)&real_glTexCoord3hNV = resolveGl("glTexCoord3hNV");
        if (!real_glTexCoord3hNV)
            unresolvedError("glTexCoord3hNV");
    

        *(void **)&real_glTexCoord3hvNV = resolveGl("glTexCoord3hvNV");
        if (!real_glTexCoord3hvNV)
            unresolvedError("glTexCoord3hvNV");
    

        *(void **)&real_glTexCoord4hNV = resolveGl("glTexCoord4hNV");
        if (!real_glTexCoord4hNV)
            unresolvedError("glTexCoord4hNV");
    

        *(void **)&real_glTexCoord4hvNV = resolveGl("glTexCoord4hvNV");
        if (!real_glTexCoord4hvNV)
            unresolvedError("glTexCoord4hvNV");
    

        *(void **)&real_glMultiTexCoord1hNV = resolveGl("glMultiTexCoord1hNV");
        if (!real_glMultiTexCoord1hNV)
            unresolvedError("glMultiTexCoord1hNV");
    

        *(void **)&real_glMultiTexCoord1hvNV = resolveGl("glMultiTexCoord1hvNV");
        if (!real_glMultiTexCoord1hvNV)
            unresolvedError("glMultiTexCoord1hvNV");
    

        *(void **)&real_glMultiTexCoord2hNV = resolveGl("glMultiTexCoord2hNV");
        if (!real_glMultiTexCoord2hNV)
            unresolvedError("glMultiTexCoord2hNV");
    

        *(void **)&real_glMultiTexCoord2hvNV = resolveGl("glMultiTexCoord2hvNV");
        if (!real_glMultiTexCoord2hvNV)
            unresolvedError("glMultiTexCoord2hvNV");
    

        *(void **)&real_glMultiTexCoord3hNV = resolveGl("glMultiTexCoord3hNV");
        if (!real_glMultiTexCoord3hNV)
            unresolvedError("glMultiTexCoord3hNV");
    

        *(void **)&real_glMultiTexCoord3hvNV = resolveGl("glMultiTexCoord3hvNV");
        if (!real_glMultiTexCoord3hvNV)
            unresolvedError("glMultiTexCoord3hvNV");
    

        *(void **)&real_glMultiTexCoord4hNV = resolveGl("glMultiTexCoord4hNV");
        if (!real_glMultiTexCoord4hNV)
            unresolvedError("glMultiTexCoord4hNV");
    

        *(void **)&real_glMultiTexCoord4hvNV = resolveGl("glMultiTexCoord4hvNV");
        if (!real_glMultiTexCoord4hvNV)
            unresolvedError("glMultiTexCoord4hvNV");
    

        *(void **)&real_glFogCoordhNV = resolveGl("glFogCoordhNV");
        if (!real_glFogCoordhNV)
            unresolvedError("glFogCoordhNV");
    

        *(void **)&real_glFogCoordhvNV = resolveGl("glFogCoordhvNV");
        if (!real_glFogCoordhvNV)
            unresolvedError("glFogCoordhvNV");
    

        *(void **)&real_glSecondaryColor3hNV = resolveGl("glSecondaryColor3hNV");
        if (!real_glSecondaryColor3hNV)
            unresolvedError("glSecondaryColor3hNV");
    

        *(void **)&real_glSecondaryColor3hvNV = resolveGl("glSecondaryColor3hvNV");
        if (!real_glSecondaryColor3hvNV)
            unresolvedError("glSecondaryColor3hvNV");
    

        *(void **)&real_glVertexWeighthNV = resolveGl("glVertexWeighthNV");
        if (!real_glVertexWeighthNV)
            unresolvedError("glVertexWeighthNV");
    

        *(void **)&real_glVertexWeighthvNV = resolveGl("glVertexWeighthvNV");
        if (!real_glVertexWeighthvNV)
            unresolvedError("glVertexWeighthvNV");
    

        *(void **)&real_glVertexAttrib1hNV = resolveGl("glVertexAttrib1hNV");
        if (!real_glVertexAttrib1hNV)
            unresolvedError("glVertexAttrib1hNV");
    

        *(void **)&real_glVertexAttrib1hvNV = resolveGl("glVertexAttrib1hvNV");
        if (!real_glVertexAttrib1hvNV)
            unresolvedError("glVertexAttrib1hvNV");
    

        *(void **)&real_glVertexAttrib2hNV = resolveGl("glVertexAttrib2hNV");
        if (!real_glVertexAttrib2hNV)
            unresolvedError("glVertexAttrib2hNV");
    

        *(void **)&real_glVertexAttrib2hvNV = resolveGl("glVertexAttrib2hvNV");
        if (!real_glVertexAttrib2hvNV)
            unresolvedError("glVertexAttrib2hvNV");
    

        *(void **)&real_glVertexAttrib3hNV = resolveGl("glVertexAttrib3hNV");
        if (!real_glVertexAttrib3hNV)
            unresolvedError("glVertexAttrib3hNV");
    

        *(void **)&real_glVertexAttrib3hvNV = resolveGl("glVertexAttrib3hvNV");
        if (!real_glVertexAttrib3hvNV)
            unresolvedError("glVertexAttrib3hvNV");
    

        *(void **)&real_glVertexAttrib4hNV = resolveGl("glVertexAttrib4hNV");
        if (!real_glVertexAttrib4hNV)
            unresolvedError("glVertexAttrib4hNV");
    

        *(void **)&real_glVertexAttrib4hvNV = resolveGl("glVertexAttrib4hvNV");
        if (!real_glVertexAttrib4hvNV)
            unresolvedError("glVertexAttrib4hvNV");
    

        *(void **)&real_glVertexAttribs1hvNV = resolveGl("glVertexAttribs1hvNV");
        if (!real_glVertexAttribs1hvNV)
            unresolvedError("glVertexAttribs1hvNV");
    

        *(void **)&real_glVertexAttribs2hvNV = resolveGl("glVertexAttribs2hvNV");
        if (!real_glVertexAttribs2hvNV)
            unresolvedError("glVertexAttribs2hvNV");
    

        *(void **)&real_glVertexAttribs3hvNV = resolveGl("glVertexAttribs3hvNV");
        if (!real_glVertexAttribs3hvNV)
            unresolvedError("glVertexAttribs3hvNV");
    

        *(void **)&real_glVertexAttribs4hvNV = resolveGl("glVertexAttribs4hvNV");
        if (!real_glVertexAttribs4hvNV)
            unresolvedError("glVertexAttribs4hvNV");
    

        *(void **)&real_glGetInternalformatSampleivNV = resolveGl("glGetInternalformatSampleivNV");
        if (!real_glGetInternalformatSampleivNV)
            unresolvedError("glGetInternalformatSampleivNV");
    

        *(void **)&real_glGetMemoryObjectDetachedResourcesuivNV = resolveGl("glGetMemoryObjectDetachedResourcesuivNV");
        if (!real_glGetMemoryObjectDetachedResourcesuivNV)
            unresolvedError("glGetMemoryObjectDetachedResourcesuivNV");
    

        *(void **)&real_glResetMemoryObjectParameterNV = resolveGl("glResetMemoryObjectParameterNV");
        if (!real_glResetMemoryObjectParameterNV)
            unresolvedError("glResetMemoryObjectParameterNV");
    

        *(void **)&real_glTexAttachMemoryNV = resolveGl("glTexAttachMemoryNV");
        if (!real_glTexAttachMemoryNV)
            unresolvedError("glTexAttachMemoryNV");
    

        *(void **)&real_glBufferAttachMemoryNV = resolveGl("glBufferAttachMemoryNV");
        if (!real_glBufferAttachMemoryNV)
            unresolvedError("glBufferAttachMemoryNV");
    

        *(void **)&real_glTextureAttachMemoryNV = resolveGl("glTextureAttachMemoryNV");
        if (!real_glTextureAttachMemoryNV)
            unresolvedError("glTextureAttachMemoryNV");
    

        *(void **)&real_glNamedBufferAttachMemoryNV = resolveGl("glNamedBufferAttachMemoryNV");
        if (!real_glNamedBufferAttachMemoryNV)
            unresolvedError("glNamedBufferAttachMemoryNV");
    

        *(void **)&real_glDrawMeshTasksNV = resolveGl("glDrawMeshTasksNV");
        if (!real_glDrawMeshTasksNV)
            unresolvedError("glDrawMeshTasksNV");
    

        *(void **)&real_glDrawMeshTasksIndirectNV = resolveGl("glDrawMeshTasksIndirectNV");
        if (!real_glDrawMeshTasksIndirectNV)
            unresolvedError("glDrawMeshTasksIndirectNV");
    

        *(void **)&real_glMultiDrawMeshTasksIndirectNV = resolveGl("glMultiDrawMeshTasksIndirectNV");
        if (!real_glMultiDrawMeshTasksIndirectNV)
            unresolvedError("glMultiDrawMeshTasksIndirectNV");
    

        *(void **)&real_glMultiDrawMeshTasksIndirectCountNV = resolveGl("glMultiDrawMeshTasksIndirectCountNV");
        if (!real_glMultiDrawMeshTasksIndirectCountNV)
            unresolvedError("glMultiDrawMeshTasksIndirectCountNV");
    

        *(void **)&real_glGenOcclusionQueriesNV = resolveGl("glGenOcclusionQueriesNV");
        if (!real_glGenOcclusionQueriesNV)
            unresolvedError("glGenOcclusionQueriesNV");
    

        *(void **)&real_glDeleteOcclusionQueriesNV = resolveGl("glDeleteOcclusionQueriesNV");
        if (!real_glDeleteOcclusionQueriesNV)
            unresolvedError("glDeleteOcclusionQueriesNV");
    

        *(void **)&real_glIsOcclusionQueryNV = resolveGl("glIsOcclusionQueryNV");
        if (!real_glIsOcclusionQueryNV)
            unresolvedError("glIsOcclusionQueryNV");
    

        *(void **)&real_glBeginOcclusionQueryNV = resolveGl("glBeginOcclusionQueryNV");
        if (!real_glBeginOcclusionQueryNV)
            unresolvedError("glBeginOcclusionQueryNV");
    

        *(void **)&real_glEndOcclusionQueryNV = resolveGl("glEndOcclusionQueryNV");
        if (!real_glEndOcclusionQueryNV)
            unresolvedError("glEndOcclusionQueryNV");
    

        *(void **)&real_glGetOcclusionQueryivNV = resolveGl("glGetOcclusionQueryivNV");
        if (!real_glGetOcclusionQueryivNV)
            unresolvedError("glGetOcclusionQueryivNV");
    

        *(void **)&real_glGetOcclusionQueryuivNV = resolveGl("glGetOcclusionQueryuivNV");
        if (!real_glGetOcclusionQueryuivNV)
            unresolvedError("glGetOcclusionQueryuivNV");
    

        *(void **)&real_glProgramBufferParametersfvNV = resolveGl("glProgramBufferParametersfvNV");
        if (!real_glProgramBufferParametersfvNV)
            unresolvedError("glProgramBufferParametersfvNV");
    

        *(void **)&real_glProgramBufferParametersIivNV = resolveGl("glProgramBufferParametersIivNV");
        if (!real_glProgramBufferParametersIivNV)
            unresolvedError("glProgramBufferParametersIivNV");
    

        *(void **)&real_glProgramBufferParametersIuivNV = resolveGl("glProgramBufferParametersIuivNV");
        if (!real_glProgramBufferParametersIuivNV)
            unresolvedError("glProgramBufferParametersIuivNV");
    

        *(void **)&real_glGenPathsNV = resolveGl("glGenPathsNV");
        if (!real_glGenPathsNV)
            unresolvedError("glGenPathsNV");
    

        *(void **)&real_glDeletePathsNV = resolveGl("glDeletePathsNV");
        if (!real_glDeletePathsNV)
            unresolvedError("glDeletePathsNV");
    

        *(void **)&real_glIsPathNV = resolveGl("glIsPathNV");
        if (!real_glIsPathNV)
            unresolvedError("glIsPathNV");
    

        *(void **)&real_glPathCommandsNV = resolveGl("glPathCommandsNV");
        if (!real_glPathCommandsNV)
            unresolvedError("glPathCommandsNV");
    

        *(void **)&real_glPathCoordsNV = resolveGl("glPathCoordsNV");
        if (!real_glPathCoordsNV)
            unresolvedError("glPathCoordsNV");
    

        *(void **)&real_glPathSubCommandsNV = resolveGl("glPathSubCommandsNV");
        if (!real_glPathSubCommandsNV)
            unresolvedError("glPathSubCommandsNV");
    

        *(void **)&real_glPathSubCoordsNV = resolveGl("glPathSubCoordsNV");
        if (!real_glPathSubCoordsNV)
            unresolvedError("glPathSubCoordsNV");
    

        *(void **)&real_glPathStringNV = resolveGl("glPathStringNV");
        if (!real_glPathStringNV)
            unresolvedError("glPathStringNV");
    

        *(void **)&real_glPathGlyphsNV = resolveGl("glPathGlyphsNV");
        if (!real_glPathGlyphsNV)
            unresolvedError("glPathGlyphsNV");
    

        *(void **)&real_glPathGlyphRangeNV = resolveGl("glPathGlyphRangeNV");
        if (!real_glPathGlyphRangeNV)
            unresolvedError("glPathGlyphRangeNV");
    

        *(void **)&real_glWeightPathsNV = resolveGl("glWeightPathsNV");
        if (!real_glWeightPathsNV)
            unresolvedError("glWeightPathsNV");
    

        *(void **)&real_glCopyPathNV = resolveGl("glCopyPathNV");
        if (!real_glCopyPathNV)
            unresolvedError("glCopyPathNV");
    

        *(void **)&real_glInterpolatePathsNV = resolveGl("glInterpolatePathsNV");
        if (!real_glInterpolatePathsNV)
            unresolvedError("glInterpolatePathsNV");
    

        *(void **)&real_glTransformPathNV = resolveGl("glTransformPathNV");
        if (!real_glTransformPathNV)
            unresolvedError("glTransformPathNV");
    

        *(void **)&real_glPathParameterivNV = resolveGl("glPathParameterivNV");
        if (!real_glPathParameterivNV)
            unresolvedError("glPathParameterivNV");
    

        *(void **)&real_glPathParameteriNV = resolveGl("glPathParameteriNV");
        if (!real_glPathParameteriNV)
            unresolvedError("glPathParameteriNV");
    

        *(void **)&real_glPathParameterfvNV = resolveGl("glPathParameterfvNV");
        if (!real_glPathParameterfvNV)
            unresolvedError("glPathParameterfvNV");
    

        *(void **)&real_glPathParameterfNV = resolveGl("glPathParameterfNV");
        if (!real_glPathParameterfNV)
            unresolvedError("glPathParameterfNV");
    

        *(void **)&real_glPathDashArrayNV = resolveGl("glPathDashArrayNV");
        if (!real_glPathDashArrayNV)
            unresolvedError("glPathDashArrayNV");
    

        *(void **)&real_glPathStencilFuncNV = resolveGl("glPathStencilFuncNV");
        if (!real_glPathStencilFuncNV)
            unresolvedError("glPathStencilFuncNV");
    

        *(void **)&real_glPathStencilDepthOffsetNV = resolveGl("glPathStencilDepthOffsetNV");
        if (!real_glPathStencilDepthOffsetNV)
            unresolvedError("glPathStencilDepthOffsetNV");
    

        *(void **)&real_glStencilFillPathNV = resolveGl("glStencilFillPathNV");
        if (!real_glStencilFillPathNV)
            unresolvedError("glStencilFillPathNV");
    

        *(void **)&real_glStencilStrokePathNV = resolveGl("glStencilStrokePathNV");
        if (!real_glStencilStrokePathNV)
            unresolvedError("glStencilStrokePathNV");
    

        *(void **)&real_glStencilFillPathInstancedNV = resolveGl("glStencilFillPathInstancedNV");
        if (!real_glStencilFillPathInstancedNV)
            unresolvedError("glStencilFillPathInstancedNV");
    

        *(void **)&real_glStencilStrokePathInstancedNV = resolveGl("glStencilStrokePathInstancedNV");
        if (!real_glStencilStrokePathInstancedNV)
            unresolvedError("glStencilStrokePathInstancedNV");
    

        *(void **)&real_glPathCoverDepthFuncNV = resolveGl("glPathCoverDepthFuncNV");
        if (!real_glPathCoverDepthFuncNV)
            unresolvedError("glPathCoverDepthFuncNV");
    

        *(void **)&real_glCoverFillPathNV = resolveGl("glCoverFillPathNV");
        if (!real_glCoverFillPathNV)
            unresolvedError("glCoverFillPathNV");
    

        *(void **)&real_glCoverStrokePathNV = resolveGl("glCoverStrokePathNV");
        if (!real_glCoverStrokePathNV)
            unresolvedError("glCoverStrokePathNV");
    

        *(void **)&real_glCoverFillPathInstancedNV = resolveGl("glCoverFillPathInstancedNV");
        if (!real_glCoverFillPathInstancedNV)
            unresolvedError("glCoverFillPathInstancedNV");
    

        *(void **)&real_glCoverStrokePathInstancedNV = resolveGl("glCoverStrokePathInstancedNV");
        if (!real_glCoverStrokePathInstancedNV)
            unresolvedError("glCoverStrokePathInstancedNV");
    

        *(void **)&real_glGetPathParameterivNV = resolveGl("glGetPathParameterivNV");
        if (!real_glGetPathParameterivNV)
            unresolvedError("glGetPathParameterivNV");
    

        *(void **)&real_glGetPathParameterfvNV = resolveGl("glGetPathParameterfvNV");
        if (!real_glGetPathParameterfvNV)
            unresolvedError("glGetPathParameterfvNV");
    

        *(void **)&real_glGetPathCommandsNV = resolveGl("glGetPathCommandsNV");
        if (!real_glGetPathCommandsNV)
            unresolvedError("glGetPathCommandsNV");
    

        *(void **)&real_glGetPathCoordsNV = resolveGl("glGetPathCoordsNV");
        if (!real_glGetPathCoordsNV)
            unresolvedError("glGetPathCoordsNV");
    

        *(void **)&real_glGetPathDashArrayNV = resolveGl("glGetPathDashArrayNV");
        if (!real_glGetPathDashArrayNV)
            unresolvedError("glGetPathDashArrayNV");
    

        *(void **)&real_glGetPathMetricsNV = resolveGl("glGetPathMetricsNV");
        if (!real_glGetPathMetricsNV)
            unresolvedError("glGetPathMetricsNV");
    

        *(void **)&real_glGetPathMetricRangeNV = resolveGl("glGetPathMetricRangeNV");
        if (!real_glGetPathMetricRangeNV)
            unresolvedError("glGetPathMetricRangeNV");
    

        *(void **)&real_glGetPathSpacingNV = resolveGl("glGetPathSpacingNV");
        if (!real_glGetPathSpacingNV)
            unresolvedError("glGetPathSpacingNV");
    

        *(void **)&real_glIsPointInFillPathNV = resolveGl("glIsPointInFillPathNV");
        if (!real_glIsPointInFillPathNV)
            unresolvedError("glIsPointInFillPathNV");
    

        *(void **)&real_glIsPointInStrokePathNV = resolveGl("glIsPointInStrokePathNV");
        if (!real_glIsPointInStrokePathNV)
            unresolvedError("glIsPointInStrokePathNV");
    

        *(void **)&real_glGetPathLengthNV = resolveGl("glGetPathLengthNV");
        if (!real_glGetPathLengthNV)
            unresolvedError("glGetPathLengthNV");
    

        *(void **)&real_glPointAlongPathNV = resolveGl("glPointAlongPathNV");
        if (!real_glPointAlongPathNV)
            unresolvedError("glPointAlongPathNV");
    

        *(void **)&real_glMatrixLoad3x2fNV = resolveGl("glMatrixLoad3x2fNV");
        if (!real_glMatrixLoad3x2fNV)
            unresolvedError("glMatrixLoad3x2fNV");
    

        *(void **)&real_glMatrixLoad3x3fNV = resolveGl("glMatrixLoad3x3fNV");
        if (!real_glMatrixLoad3x3fNV)
            unresolvedError("glMatrixLoad3x3fNV");
    

        *(void **)&real_glMatrixLoadTranspose3x3fNV = resolveGl("glMatrixLoadTranspose3x3fNV");
        if (!real_glMatrixLoadTranspose3x3fNV)
            unresolvedError("glMatrixLoadTranspose3x3fNV");
    

        *(void **)&real_glMatrixMult3x2fNV = resolveGl("glMatrixMult3x2fNV");
        if (!real_glMatrixMult3x2fNV)
            unresolvedError("glMatrixMult3x2fNV");
    

        *(void **)&real_glMatrixMult3x3fNV = resolveGl("glMatrixMult3x3fNV");
        if (!real_glMatrixMult3x3fNV)
            unresolvedError("glMatrixMult3x3fNV");
    

        *(void **)&real_glMatrixMultTranspose3x3fNV = resolveGl("glMatrixMultTranspose3x3fNV");
        if (!real_glMatrixMultTranspose3x3fNV)
            unresolvedError("glMatrixMultTranspose3x3fNV");
    

        *(void **)&real_glStencilThenCoverFillPathNV = resolveGl("glStencilThenCoverFillPathNV");
        if (!real_glStencilThenCoverFillPathNV)
            unresolvedError("glStencilThenCoverFillPathNV");
    

        *(void **)&real_glStencilThenCoverStrokePathNV = resolveGl("glStencilThenCoverStrokePathNV");
        if (!real_glStencilThenCoverStrokePathNV)
            unresolvedError("glStencilThenCoverStrokePathNV");
    

        *(void **)&real_glStencilThenCoverFillPathInstancedNV = resolveGl("glStencilThenCoverFillPathInstancedNV");
        if (!real_glStencilThenCoverFillPathInstancedNV)
            unresolvedError("glStencilThenCoverFillPathInstancedNV");
    

        *(void **)&real_glStencilThenCoverStrokePathInstancedNV = resolveGl("glStencilThenCoverStrokePathInstancedNV");
        if (!real_glStencilThenCoverStrokePathInstancedNV)
            unresolvedError("glStencilThenCoverStrokePathInstancedNV");
    

        *(void **)&real_glPathGlyphIndexRangeNV = resolveGl("glPathGlyphIndexRangeNV");
        if (!real_glPathGlyphIndexRangeNV)
            unresolvedError("glPathGlyphIndexRangeNV");
    

        *(void **)&real_glPathGlyphIndexArrayNV = resolveGl("glPathGlyphIndexArrayNV");
        if (!real_glPathGlyphIndexArrayNV)
            unresolvedError("glPathGlyphIndexArrayNV");
    

        *(void **)&real_glPathMemoryGlyphIndexArrayNV = resolveGl("glPathMemoryGlyphIndexArrayNV");
        if (!real_glPathMemoryGlyphIndexArrayNV)
            unresolvedError("glPathMemoryGlyphIndexArrayNV");
    

        *(void **)&real_glProgramPathFragmentInputGenNV = resolveGl("glProgramPathFragmentInputGenNV");
        if (!real_glProgramPathFragmentInputGenNV)
            unresolvedError("glProgramPathFragmentInputGenNV");
    

        *(void **)&real_glGetProgramResourcefvNV = resolveGl("glGetProgramResourcefvNV");
        if (!real_glGetProgramResourcefvNV)
            unresolvedError("glGetProgramResourcefvNV");
    

        *(void **)&real_glPathColorGenNV = resolveGl("glPathColorGenNV");
        if (!real_glPathColorGenNV)
            unresolvedError("glPathColorGenNV");
    

        *(void **)&real_glPathTexGenNV = resolveGl("glPathTexGenNV");
        if (!real_glPathTexGenNV)
            unresolvedError("glPathTexGenNV");
    

        *(void **)&real_glPathFogGenNV = resolveGl("glPathFogGenNV");
        if (!real_glPathFogGenNV)
            unresolvedError("glPathFogGenNV");
    

        *(void **)&real_glGetPathColorGenivNV = resolveGl("glGetPathColorGenivNV");
        if (!real_glGetPathColorGenivNV)
            unresolvedError("glGetPathColorGenivNV");
    

        *(void **)&real_glGetPathColorGenfvNV = resolveGl("glGetPathColorGenfvNV");
        if (!real_glGetPathColorGenfvNV)
            unresolvedError("glGetPathColorGenfvNV");
    

        *(void **)&real_glGetPathTexGenivNV = resolveGl("glGetPathTexGenivNV");
        if (!real_glGetPathTexGenivNV)
            unresolvedError("glGetPathTexGenivNV");
    

        *(void **)&real_glGetPathTexGenfvNV = resolveGl("glGetPathTexGenfvNV");
        if (!real_glGetPathTexGenfvNV)
            unresolvedError("glGetPathTexGenfvNV");
    

        *(void **)&real_glPixelDataRangeNV = resolveGl("glPixelDataRangeNV");
        if (!real_glPixelDataRangeNV)
            unresolvedError("glPixelDataRangeNV");
    

        *(void **)&real_glFlushPixelDataRangeNV = resolveGl("glFlushPixelDataRangeNV");
        if (!real_glFlushPixelDataRangeNV)
            unresolvedError("glFlushPixelDataRangeNV");
    

        *(void **)&real_glPointParameteriNV = resolveGl("glPointParameteriNV");
        if (!real_glPointParameteriNV)
            unresolvedError("glPointParameteriNV");
    

        *(void **)&real_glPointParameterivNV = resolveGl("glPointParameterivNV");
        if (!real_glPointParameterivNV)
            unresolvedError("glPointParameterivNV");
    

        *(void **)&real_glPresentFrameKeyedNV = resolveGl("glPresentFrameKeyedNV");
        if (!real_glPresentFrameKeyedNV)
            unresolvedError("glPresentFrameKeyedNV");
    

        *(void **)&real_glPresentFrameDualFillNV = resolveGl("glPresentFrameDualFillNV");
        if (!real_glPresentFrameDualFillNV)
            unresolvedError("glPresentFrameDualFillNV");
    

        *(void **)&real_glGetVideoivNV = resolveGl("glGetVideoivNV");
        if (!real_glGetVideoivNV)
            unresolvedError("glGetVideoivNV");
    

        *(void **)&real_glGetVideouivNV = resolveGl("glGetVideouivNV");
        if (!real_glGetVideouivNV)
            unresolvedError("glGetVideouivNV");
    

        *(void **)&real_glGetVideoi64vNV = resolveGl("glGetVideoi64vNV");
        if (!real_glGetVideoi64vNV)
            unresolvedError("glGetVideoi64vNV");
    

        *(void **)&real_glGetVideoui64vNV = resolveGl("glGetVideoui64vNV");
        if (!real_glGetVideoui64vNV)
            unresolvedError("glGetVideoui64vNV");
    

        *(void **)&real_glPrimitiveRestartNV = resolveGl("glPrimitiveRestartNV");
        if (!real_glPrimitiveRestartNV)
            unresolvedError("glPrimitiveRestartNV");
    

        *(void **)&real_glPrimitiveRestartIndexNV = resolveGl("glPrimitiveRestartIndexNV");
        if (!real_glPrimitiveRestartIndexNV)
            unresolvedError("glPrimitiveRestartIndexNV");
    

        *(void **)&real_glQueryResourceNV = resolveGl("glQueryResourceNV");
        if (!real_glQueryResourceNV)
            unresolvedError("glQueryResourceNV");
    

        *(void **)&real_glGenQueryResourceTagNV = resolveGl("glGenQueryResourceTagNV");
        if (!real_glGenQueryResourceTagNV)
            unresolvedError("glGenQueryResourceTagNV");
    

        *(void **)&real_glDeleteQueryResourceTagNV = resolveGl("glDeleteQueryResourceTagNV");
        if (!real_glDeleteQueryResourceTagNV)
            unresolvedError("glDeleteQueryResourceTagNV");
    

        *(void **)&real_glQueryResourceTagNV = resolveGl("glQueryResourceTagNV");
        if (!real_glQueryResourceTagNV)
            unresolvedError("glQueryResourceTagNV");
    

        *(void **)&real_glCombinerParameterfvNV = resolveGl("glCombinerParameterfvNV");
        if (!real_glCombinerParameterfvNV)
            unresolvedError("glCombinerParameterfvNV");
    

        *(void **)&real_glCombinerParameterfNV = resolveGl("glCombinerParameterfNV");
        if (!real_glCombinerParameterfNV)
            unresolvedError("glCombinerParameterfNV");
    

        *(void **)&real_glCombinerParameterivNV = resolveGl("glCombinerParameterivNV");
        if (!real_glCombinerParameterivNV)
            unresolvedError("glCombinerParameterivNV");
    

        *(void **)&real_glCombinerParameteriNV = resolveGl("glCombinerParameteriNV");
        if (!real_glCombinerParameteriNV)
            unresolvedError("glCombinerParameteriNV");
    

        *(void **)&real_glCombinerInputNV = resolveGl("glCombinerInputNV");
        if (!real_glCombinerInputNV)
            unresolvedError("glCombinerInputNV");
    

        *(void **)&real_glCombinerOutputNV = resolveGl("glCombinerOutputNV");
        if (!real_glCombinerOutputNV)
            unresolvedError("glCombinerOutputNV");
    

        *(void **)&real_glFinalCombinerInputNV = resolveGl("glFinalCombinerInputNV");
        if (!real_glFinalCombinerInputNV)
            unresolvedError("glFinalCombinerInputNV");
    

        *(void **)&real_glGetCombinerInputParameterfvNV = resolveGl("glGetCombinerInputParameterfvNV");
        if (!real_glGetCombinerInputParameterfvNV)
            unresolvedError("glGetCombinerInputParameterfvNV");
    

        *(void **)&real_glGetCombinerInputParameterivNV = resolveGl("glGetCombinerInputParameterivNV");
        if (!real_glGetCombinerInputParameterivNV)
            unresolvedError("glGetCombinerInputParameterivNV");
    

        *(void **)&real_glGetCombinerOutputParameterfvNV = resolveGl("glGetCombinerOutputParameterfvNV");
        if (!real_glGetCombinerOutputParameterfvNV)
            unresolvedError("glGetCombinerOutputParameterfvNV");
    

        *(void **)&real_glGetCombinerOutputParameterivNV = resolveGl("glGetCombinerOutputParameterivNV");
        if (!real_glGetCombinerOutputParameterivNV)
            unresolvedError("glGetCombinerOutputParameterivNV");
    

        *(void **)&real_glGetFinalCombinerInputParameterfvNV = resolveGl("glGetFinalCombinerInputParameterfvNV");
        if (!real_glGetFinalCombinerInputParameterfvNV)
            unresolvedError("glGetFinalCombinerInputParameterfvNV");
    

        *(void **)&real_glGetFinalCombinerInputParameterivNV = resolveGl("glGetFinalCombinerInputParameterivNV");
        if (!real_glGetFinalCombinerInputParameterivNV)
            unresolvedError("glGetFinalCombinerInputParameterivNV");
    

        *(void **)&real_glCombinerStageParameterfvNV = resolveGl("glCombinerStageParameterfvNV");
        if (!real_glCombinerStageParameterfvNV)
            unresolvedError("glCombinerStageParameterfvNV");
    

        *(void **)&real_glGetCombinerStageParameterfvNV = resolveGl("glGetCombinerStageParameterfvNV");
        if (!real_glGetCombinerStageParameterfvNV)
            unresolvedError("glGetCombinerStageParameterfvNV");
    

        *(void **)&real_glFramebufferSampleLocationsfvNV = resolveGl("glFramebufferSampleLocationsfvNV");
        if (!real_glFramebufferSampleLocationsfvNV)
            unresolvedError("glFramebufferSampleLocationsfvNV");
    

        *(void **)&real_glNamedFramebufferSampleLocationsfvNV = resolveGl("glNamedFramebufferSampleLocationsfvNV");
        if (!real_glNamedFramebufferSampleLocationsfvNV)
            unresolvedError("glNamedFramebufferSampleLocationsfvNV");
    

        *(void **)&real_glResolveDepthValuesNV = resolveGl("glResolveDepthValuesNV");
        if (!real_glResolveDepthValuesNV)
            unresolvedError("glResolveDepthValuesNV");
    

        *(void **)&real_glScissorExclusiveNV = resolveGl("glScissorExclusiveNV");
        if (!real_glScissorExclusiveNV)
            unresolvedError("glScissorExclusiveNV");
    

        *(void **)&real_glScissorExclusiveArrayvNV = resolveGl("glScissorExclusiveArrayvNV");
        if (!real_glScissorExclusiveArrayvNV)
            unresolvedError("glScissorExclusiveArrayvNV");
    

        *(void **)&real_glMakeBufferResidentNV = resolveGl("glMakeBufferResidentNV");
        if (!real_glMakeBufferResidentNV)
            unresolvedError("glMakeBufferResidentNV");
    

        *(void **)&real_glMakeBufferNonResidentNV = resolveGl("glMakeBufferNonResidentNV");
        if (!real_glMakeBufferNonResidentNV)
            unresolvedError("glMakeBufferNonResidentNV");
    

        *(void **)&real_glIsBufferResidentNV = resolveGl("glIsBufferResidentNV");
        if (!real_glIsBufferResidentNV)
            unresolvedError("glIsBufferResidentNV");
    

        *(void **)&real_glMakeNamedBufferResidentNV = resolveGl("glMakeNamedBufferResidentNV");
        if (!real_glMakeNamedBufferResidentNV)
            unresolvedError("glMakeNamedBufferResidentNV");
    

        *(void **)&real_glMakeNamedBufferNonResidentNV = resolveGl("glMakeNamedBufferNonResidentNV");
        if (!real_glMakeNamedBufferNonResidentNV)
            unresolvedError("glMakeNamedBufferNonResidentNV");
    

        *(void **)&real_glIsNamedBufferResidentNV = resolveGl("glIsNamedBufferResidentNV");
        if (!real_glIsNamedBufferResidentNV)
            unresolvedError("glIsNamedBufferResidentNV");
    

        *(void **)&real_glGetBufferParameterui64vNV = resolveGl("glGetBufferParameterui64vNV");
        if (!real_glGetBufferParameterui64vNV)
            unresolvedError("glGetBufferParameterui64vNV");
    

        *(void **)&real_glGetNamedBufferParameterui64vNV = resolveGl("glGetNamedBufferParameterui64vNV");
        if (!real_glGetNamedBufferParameterui64vNV)
            unresolvedError("glGetNamedBufferParameterui64vNV");
    

        *(void **)&real_glGetIntegerui64vNV = resolveGl("glGetIntegerui64vNV");
        if (!real_glGetIntegerui64vNV)
            unresolvedError("glGetIntegerui64vNV");
    

        *(void **)&real_glUniformui64NV = resolveGl("glUniformui64NV");
        if (!real_glUniformui64NV)
            unresolvedError("glUniformui64NV");
    

        *(void **)&real_glUniformui64vNV = resolveGl("glUniformui64vNV");
        if (!real_glUniformui64vNV)
            unresolvedError("glUniformui64vNV");
    

        *(void **)&real_glProgramUniformui64NV = resolveGl("glProgramUniformui64NV");
        if (!real_glProgramUniformui64NV)
            unresolvedError("glProgramUniformui64NV");
    

        *(void **)&real_glProgramUniformui64vNV = resolveGl("glProgramUniformui64vNV");
        if (!real_glProgramUniformui64vNV)
            unresolvedError("glProgramUniformui64vNV");
    

        *(void **)&real_glBindShadingRateImageNV = resolveGl("glBindShadingRateImageNV");
        if (!real_glBindShadingRateImageNV)
            unresolvedError("glBindShadingRateImageNV");
    

        *(void **)&real_glGetShadingRateImagePaletteNV = resolveGl("glGetShadingRateImagePaletteNV");
        if (!real_glGetShadingRateImagePaletteNV)
            unresolvedError("glGetShadingRateImagePaletteNV");
    

        *(void **)&real_glGetShadingRateSampleLocationivNV = resolveGl("glGetShadingRateSampleLocationivNV");
        if (!real_glGetShadingRateSampleLocationivNV)
            unresolvedError("glGetShadingRateSampleLocationivNV");
    

        *(void **)&real_glShadingRateImageBarrierNV = resolveGl("glShadingRateImageBarrierNV");
        if (!real_glShadingRateImageBarrierNV)
            unresolvedError("glShadingRateImageBarrierNV");
    

        *(void **)&real_glShadingRateImagePaletteNV = resolveGl("glShadingRateImagePaletteNV");
        if (!real_glShadingRateImagePaletteNV)
            unresolvedError("glShadingRateImagePaletteNV");
    

        *(void **)&real_glShadingRateSampleOrderNV = resolveGl("glShadingRateSampleOrderNV");
        if (!real_glShadingRateSampleOrderNV)
            unresolvedError("glShadingRateSampleOrderNV");
    

        *(void **)&real_glShadingRateSampleOrderCustomNV = resolveGl("glShadingRateSampleOrderCustomNV");
        if (!real_glShadingRateSampleOrderCustomNV)
            unresolvedError("glShadingRateSampleOrderCustomNV");
    

        *(void **)&real_glTextureBarrierNV = resolveGl("glTextureBarrierNV");
        if (!real_glTextureBarrierNV)
            unresolvedError("glTextureBarrierNV");
    

        *(void **)&real_glTexImage2DMultisampleCoverageNV = resolveGl("glTexImage2DMultisampleCoverageNV");
        if (!real_glTexImage2DMultisampleCoverageNV)
            unresolvedError("glTexImage2DMultisampleCoverageNV");
    

        *(void **)&real_glTexImage3DMultisampleCoverageNV = resolveGl("glTexImage3DMultisampleCoverageNV");
        if (!real_glTexImage3DMultisampleCoverageNV)
            unresolvedError("glTexImage3DMultisampleCoverageNV");
    

        *(void **)&real_glTextureImage2DMultisampleNV = resolveGl("glTextureImage2DMultisampleNV");
        if (!real_glTextureImage2DMultisampleNV)
            unresolvedError("glTextureImage2DMultisampleNV");
    

        *(void **)&real_glTextureImage3DMultisampleNV = resolveGl("glTextureImage3DMultisampleNV");
        if (!real_glTextureImage3DMultisampleNV)
            unresolvedError("glTextureImage3DMultisampleNV");
    

        *(void **)&real_glTextureImage2DMultisampleCoverageNV = resolveGl("glTextureImage2DMultisampleCoverageNV");
        if (!real_glTextureImage2DMultisampleCoverageNV)
            unresolvedError("glTextureImage2DMultisampleCoverageNV");
    

        *(void **)&real_glTextureImage3DMultisampleCoverageNV = resolveGl("glTextureImage3DMultisampleCoverageNV");
        if (!real_glTextureImage3DMultisampleCoverageNV)
            unresolvedError("glTextureImage3DMultisampleCoverageNV");
    

        *(void **)&real_glBeginTransformFeedbackNV = resolveGl("glBeginTransformFeedbackNV");
        if (!real_glBeginTransformFeedbackNV)
            unresolvedError("glBeginTransformFeedbackNV");
    

        *(void **)&real_glEndTransformFeedbackNV = resolveGl("glEndTransformFeedbackNV");
        if (!real_glEndTransformFeedbackNV)
            unresolvedError("glEndTransformFeedbackNV");
    

        *(void **)&real_glTransformFeedbackAttribsNV = resolveGl("glTransformFeedbackAttribsNV");
        if (!real_glTransformFeedbackAttribsNV)
            unresolvedError("glTransformFeedbackAttribsNV");
    

        *(void **)&real_glBindBufferRangeNV = resolveGl("glBindBufferRangeNV");
        if (!real_glBindBufferRangeNV)
            unresolvedError("glBindBufferRangeNV");
    

        *(void **)&real_glBindBufferOffsetNV = resolveGl("glBindBufferOffsetNV");
        if (!real_glBindBufferOffsetNV)
            unresolvedError("glBindBufferOffsetNV");
    

        *(void **)&real_glBindBufferBaseNV = resolveGl("glBindBufferBaseNV");
        if (!real_glBindBufferBaseNV)
            unresolvedError("glBindBufferBaseNV");
    

        *(void **)&real_glTransformFeedbackVaryingsNV = resolveGl("glTransformFeedbackVaryingsNV");
        if (!real_glTransformFeedbackVaryingsNV)
            unresolvedError("glTransformFeedbackVaryingsNV");
    

        *(void **)&real_glActiveVaryingNV = resolveGl("glActiveVaryingNV");
        if (!real_glActiveVaryingNV)
            unresolvedError("glActiveVaryingNV");
    

        *(void **)&real_glGetVaryingLocationNV = resolveGl("glGetVaryingLocationNV");
        if (!real_glGetVaryingLocationNV)
            unresolvedError("glGetVaryingLocationNV");
    

        *(void **)&real_glGetActiveVaryingNV = resolveGl("glGetActiveVaryingNV");
        if (!real_glGetActiveVaryingNV)
            unresolvedError("glGetActiveVaryingNV");
    

        *(void **)&real_glGetTransformFeedbackVaryingNV = resolveGl("glGetTransformFeedbackVaryingNV");
        if (!real_glGetTransformFeedbackVaryingNV)
            unresolvedError("glGetTransformFeedbackVaryingNV");
    

        *(void **)&real_glTransformFeedbackStreamAttribsNV = resolveGl("glTransformFeedbackStreamAttribsNV");
        if (!real_glTransformFeedbackStreamAttribsNV)
            unresolvedError("glTransformFeedbackStreamAttribsNV");
    

        *(void **)&real_glBindTransformFeedbackNV = resolveGl("glBindTransformFeedbackNV");
        if (!real_glBindTransformFeedbackNV)
            unresolvedError("glBindTransformFeedbackNV");
    

        *(void **)&real_glDeleteTransformFeedbacksNV = resolveGl("glDeleteTransformFeedbacksNV");
        if (!real_glDeleteTransformFeedbacksNV)
            unresolvedError("glDeleteTransformFeedbacksNV");
    

        *(void **)&real_glGenTransformFeedbacksNV = resolveGl("glGenTransformFeedbacksNV");
        if (!real_glGenTransformFeedbacksNV)
            unresolvedError("glGenTransformFeedbacksNV");
    

        *(void **)&real_glIsTransformFeedbackNV = resolveGl("glIsTransformFeedbackNV");
        if (!real_glIsTransformFeedbackNV)
            unresolvedError("glIsTransformFeedbackNV");
    

        *(void **)&real_glPauseTransformFeedbackNV = resolveGl("glPauseTransformFeedbackNV");
        if (!real_glPauseTransformFeedbackNV)
            unresolvedError("glPauseTransformFeedbackNV");
    

        *(void **)&real_glResumeTransformFeedbackNV = resolveGl("glResumeTransformFeedbackNV");
        if (!real_glResumeTransformFeedbackNV)
            unresolvedError("glResumeTransformFeedbackNV");
    

        *(void **)&real_glDrawTransformFeedbackNV = resolveGl("glDrawTransformFeedbackNV");
        if (!real_glDrawTransformFeedbackNV)
            unresolvedError("glDrawTransformFeedbackNV");
    

        *(void **)&real_glVDPAUInitNV = resolveGl("glVDPAUInitNV");
        if (!real_glVDPAUInitNV)
            unresolvedError("glVDPAUInitNV");
    

        *(void **)&real_glVDPAUFiniNV = resolveGl("glVDPAUFiniNV");
        if (!real_glVDPAUFiniNV)
            unresolvedError("glVDPAUFiniNV");
    

        *(void **)&real_glVDPAURegisterVideoSurfaceNV = resolveGl("glVDPAURegisterVideoSurfaceNV");
        if (!real_glVDPAURegisterVideoSurfaceNV)
            unresolvedError("glVDPAURegisterVideoSurfaceNV");
    

        *(void **)&real_glVDPAURegisterOutputSurfaceNV = resolveGl("glVDPAURegisterOutputSurfaceNV");
        if (!real_glVDPAURegisterOutputSurfaceNV)
            unresolvedError("glVDPAURegisterOutputSurfaceNV");
    

        *(void **)&real_glVDPAUIsSurfaceNV = resolveGl("glVDPAUIsSurfaceNV");
        if (!real_glVDPAUIsSurfaceNV)
            unresolvedError("glVDPAUIsSurfaceNV");
    

        *(void **)&real_glVDPAUUnregisterSurfaceNV = resolveGl("glVDPAUUnregisterSurfaceNV");
        if (!real_glVDPAUUnregisterSurfaceNV)
            unresolvedError("glVDPAUUnregisterSurfaceNV");
    

        *(void **)&real_glVDPAUGetSurfaceivNV = resolveGl("glVDPAUGetSurfaceivNV");
        if (!real_glVDPAUGetSurfaceivNV)
            unresolvedError("glVDPAUGetSurfaceivNV");
    

        *(void **)&real_glVDPAUSurfaceAccessNV = resolveGl("glVDPAUSurfaceAccessNV");
        if (!real_glVDPAUSurfaceAccessNV)
            unresolvedError("glVDPAUSurfaceAccessNV");
    

        *(void **)&real_glVDPAUMapSurfacesNV = resolveGl("glVDPAUMapSurfacesNV");
        if (!real_glVDPAUMapSurfacesNV)
            unresolvedError("glVDPAUMapSurfacesNV");
    

        *(void **)&real_glVDPAUUnmapSurfacesNV = resolveGl("glVDPAUUnmapSurfacesNV");
        if (!real_glVDPAUUnmapSurfacesNV)
            unresolvedError("glVDPAUUnmapSurfacesNV");
    

        *(void **)&real_glVDPAURegisterVideoSurfaceWithPictureStructureNV = resolveGl("glVDPAURegisterVideoSurfaceWithPictureStructureNV");
        if (!real_glVDPAURegisterVideoSurfaceWithPictureStructureNV)
            unresolvedError("glVDPAURegisterVideoSurfaceWithPictureStructureNV");
    

        *(void **)&real_glFlushVertexArrayRangeNV = resolveGl("glFlushVertexArrayRangeNV");
        if (!real_glFlushVertexArrayRangeNV)
            unresolvedError("glFlushVertexArrayRangeNV");
    

        *(void **)&real_glVertexArrayRangeNV = resolveGl("glVertexArrayRangeNV");
        if (!real_glVertexArrayRangeNV)
            unresolvedError("glVertexArrayRangeNV");
    

        *(void **)&real_glVertexAttribL1i64NV = resolveGl("glVertexAttribL1i64NV");
        if (!real_glVertexAttribL1i64NV)
            unresolvedError("glVertexAttribL1i64NV");
    

        *(void **)&real_glVertexAttribL2i64NV = resolveGl("glVertexAttribL2i64NV");
        if (!real_glVertexAttribL2i64NV)
            unresolvedError("glVertexAttribL2i64NV");
    

        *(void **)&real_glVertexAttribL3i64NV = resolveGl("glVertexAttribL3i64NV");
        if (!real_glVertexAttribL3i64NV)
            unresolvedError("glVertexAttribL3i64NV");
    

        *(void **)&real_glVertexAttribL4i64NV = resolveGl("glVertexAttribL4i64NV");
        if (!real_glVertexAttribL4i64NV)
            unresolvedError("glVertexAttribL4i64NV");
    

        *(void **)&real_glVertexAttribL1i64vNV = resolveGl("glVertexAttribL1i64vNV");
        if (!real_glVertexAttribL1i64vNV)
            unresolvedError("glVertexAttribL1i64vNV");
    

        *(void **)&real_glVertexAttribL2i64vNV = resolveGl("glVertexAttribL2i64vNV");
        if (!real_glVertexAttribL2i64vNV)
            unresolvedError("glVertexAttribL2i64vNV");
    

        *(void **)&real_glVertexAttribL3i64vNV = resolveGl("glVertexAttribL3i64vNV");
        if (!real_glVertexAttribL3i64vNV)
            unresolvedError("glVertexAttribL3i64vNV");
    

        *(void **)&real_glVertexAttribL4i64vNV = resolveGl("glVertexAttribL4i64vNV");
        if (!real_glVertexAttribL4i64vNV)
            unresolvedError("glVertexAttribL4i64vNV");
    

        *(void **)&real_glVertexAttribL1ui64NV = resolveGl("glVertexAttribL1ui64NV");
        if (!real_glVertexAttribL1ui64NV)
            unresolvedError("glVertexAttribL1ui64NV");
    

        *(void **)&real_glVertexAttribL2ui64NV = resolveGl("glVertexAttribL2ui64NV");
        if (!real_glVertexAttribL2ui64NV)
            unresolvedError("glVertexAttribL2ui64NV");
    

        *(void **)&real_glVertexAttribL3ui64NV = resolveGl("glVertexAttribL3ui64NV");
        if (!real_glVertexAttribL3ui64NV)
            unresolvedError("glVertexAttribL3ui64NV");
    

        *(void **)&real_glVertexAttribL4ui64NV = resolveGl("glVertexAttribL4ui64NV");
        if (!real_glVertexAttribL4ui64NV)
            unresolvedError("glVertexAttribL4ui64NV");
    

        *(void **)&real_glVertexAttribL1ui64vNV = resolveGl("glVertexAttribL1ui64vNV");
        if (!real_glVertexAttribL1ui64vNV)
            unresolvedError("glVertexAttribL1ui64vNV");
    

        *(void **)&real_glVertexAttribL2ui64vNV = resolveGl("glVertexAttribL2ui64vNV");
        if (!real_glVertexAttribL2ui64vNV)
            unresolvedError("glVertexAttribL2ui64vNV");
    

        *(void **)&real_glVertexAttribL3ui64vNV = resolveGl("glVertexAttribL3ui64vNV");
        if (!real_glVertexAttribL3ui64vNV)
            unresolvedError("glVertexAttribL3ui64vNV");
    

        *(void **)&real_glVertexAttribL4ui64vNV = resolveGl("glVertexAttribL4ui64vNV");
        if (!real_glVertexAttribL4ui64vNV)
            unresolvedError("glVertexAttribL4ui64vNV");
    

        *(void **)&real_glGetVertexAttribLi64vNV = resolveGl("glGetVertexAttribLi64vNV");
        if (!real_glGetVertexAttribLi64vNV)
            unresolvedError("glGetVertexAttribLi64vNV");
    

        *(void **)&real_glGetVertexAttribLui64vNV = resolveGl("glGetVertexAttribLui64vNV");
        if (!real_glGetVertexAttribLui64vNV)
            unresolvedError("glGetVertexAttribLui64vNV");
    

        *(void **)&real_glVertexAttribLFormatNV = resolveGl("glVertexAttribLFormatNV");
        if (!real_glVertexAttribLFormatNV)
            unresolvedError("glVertexAttribLFormatNV");
    

        *(void **)&real_glBufferAddressRangeNV = resolveGl("glBufferAddressRangeNV");
        if (!real_glBufferAddressRangeNV)
            unresolvedError("glBufferAddressRangeNV");
    

        *(void **)&real_glVertexFormatNV = resolveGl("glVertexFormatNV");
        if (!real_glVertexFormatNV)
            unresolvedError("glVertexFormatNV");
    

        *(void **)&real_glNormalFormatNV = resolveGl("glNormalFormatNV");
        if (!real_glNormalFormatNV)
            unresolvedError("glNormalFormatNV");
    

        *(void **)&real_glColorFormatNV = resolveGl("glColorFormatNV");
        if (!real_glColorFormatNV)
            unresolvedError("glColorFormatNV");
    

        *(void **)&real_glIndexFormatNV = resolveGl("glIndexFormatNV");
        if (!real_glIndexFormatNV)
            unresolvedError("glIndexFormatNV");
    

        *(void **)&real_glTexCoordFormatNV = resolveGl("glTexCoordFormatNV");
        if (!real_glTexCoordFormatNV)
            unresolvedError("glTexCoordFormatNV");
    

        *(void **)&real_glEdgeFlagFormatNV = resolveGl("glEdgeFlagFormatNV");
        if (!real_glEdgeFlagFormatNV)
            unresolvedError("glEdgeFlagFormatNV");
    

        *(void **)&real_glSecondaryColorFormatNV = resolveGl("glSecondaryColorFormatNV");
        if (!real_glSecondaryColorFormatNV)
            unresolvedError("glSecondaryColorFormatNV");
    

        *(void **)&real_glFogCoordFormatNV = resolveGl("glFogCoordFormatNV");
        if (!real_glFogCoordFormatNV)
            unresolvedError("glFogCoordFormatNV");
    

        *(void **)&real_glVertexAttribFormatNV = resolveGl("glVertexAttribFormatNV");
        if (!real_glVertexAttribFormatNV)
            unresolvedError("glVertexAttribFormatNV");
    

        *(void **)&real_glVertexAttribIFormatNV = resolveGl("glVertexAttribIFormatNV");
        if (!real_glVertexAttribIFormatNV)
            unresolvedError("glVertexAttribIFormatNV");
    

        *(void **)&real_glGetIntegerui64i_vNV = resolveGl("glGetIntegerui64i_vNV");
        if (!real_glGetIntegerui64i_vNV)
            unresolvedError("glGetIntegerui64i_vNV");
    

        *(void **)&real_glAreProgramsResidentNV = resolveGl("glAreProgramsResidentNV");
        if (!real_glAreProgramsResidentNV)
            unresolvedError("glAreProgramsResidentNV");
    

        *(void **)&real_glBindProgramNV = resolveGl("glBindProgramNV");
        if (!real_glBindProgramNV)
            unresolvedError("glBindProgramNV");
    

        *(void **)&real_glDeleteProgramsNV = resolveGl("glDeleteProgramsNV");
        if (!real_glDeleteProgramsNV)
            unresolvedError("glDeleteProgramsNV");
    

        *(void **)&real_glExecuteProgramNV = resolveGl("glExecuteProgramNV");
        if (!real_glExecuteProgramNV)
            unresolvedError("glExecuteProgramNV");
    

        *(void **)&real_glGenProgramsNV = resolveGl("glGenProgramsNV");
        if (!real_glGenProgramsNV)
            unresolvedError("glGenProgramsNV");
    

        *(void **)&real_glGetProgramParameterdvNV = resolveGl("glGetProgramParameterdvNV");
        if (!real_glGetProgramParameterdvNV)
            unresolvedError("glGetProgramParameterdvNV");
    

        *(void **)&real_glGetProgramParameterfvNV = resolveGl("glGetProgramParameterfvNV");
        if (!real_glGetProgramParameterfvNV)
            unresolvedError("glGetProgramParameterfvNV");
    

        *(void **)&real_glGetProgramivNV = resolveGl("glGetProgramivNV");
        if (!real_glGetProgramivNV)
            unresolvedError("glGetProgramivNV");
    

        *(void **)&real_glGetProgramStringNV = resolveGl("glGetProgramStringNV");
        if (!real_glGetProgramStringNV)
            unresolvedError("glGetProgramStringNV");
    

        *(void **)&real_glGetTrackMatrixivNV = resolveGl("glGetTrackMatrixivNV");
        if (!real_glGetTrackMatrixivNV)
            unresolvedError("glGetTrackMatrixivNV");
    

        *(void **)&real_glGetVertexAttribdvNV = resolveGl("glGetVertexAttribdvNV");
        if (!real_glGetVertexAttribdvNV)
            unresolvedError("glGetVertexAttribdvNV");
    

        *(void **)&real_glGetVertexAttribfvNV = resolveGl("glGetVertexAttribfvNV");
        if (!real_glGetVertexAttribfvNV)
            unresolvedError("glGetVertexAttribfvNV");
    

        *(void **)&real_glGetVertexAttribivNV = resolveGl("glGetVertexAttribivNV");
        if (!real_glGetVertexAttribivNV)
            unresolvedError("glGetVertexAttribivNV");
    

        *(void **)&real_glGetVertexAttribPointervNV = resolveGl("glGetVertexAttribPointervNV");
        if (!real_glGetVertexAttribPointervNV)
            unresolvedError("glGetVertexAttribPointervNV");
    

        *(void **)&real_glIsProgramNV = resolveGl("glIsProgramNV");
        if (!real_glIsProgramNV)
            unresolvedError("glIsProgramNV");
    

        *(void **)&real_glLoadProgramNV = resolveGl("glLoadProgramNV");
        if (!real_glLoadProgramNV)
            unresolvedError("glLoadProgramNV");
    

        *(void **)&real_glProgramParameter4dNV = resolveGl("glProgramParameter4dNV");
        if (!real_glProgramParameter4dNV)
            unresolvedError("glProgramParameter4dNV");
    

        *(void **)&real_glProgramParameter4dvNV = resolveGl("glProgramParameter4dvNV");
        if (!real_glProgramParameter4dvNV)
            unresolvedError("glProgramParameter4dvNV");
    

        *(void **)&real_glProgramParameter4fNV = resolveGl("glProgramParameter4fNV");
        if (!real_glProgramParameter4fNV)
            unresolvedError("glProgramParameter4fNV");
    

        *(void **)&real_glProgramParameter4fvNV = resolveGl("glProgramParameter4fvNV");
        if (!real_glProgramParameter4fvNV)
            unresolvedError("glProgramParameter4fvNV");
    

        *(void **)&real_glProgramParameters4dvNV = resolveGl("glProgramParameters4dvNV");
        if (!real_glProgramParameters4dvNV)
            unresolvedError("glProgramParameters4dvNV");
    

        *(void **)&real_glProgramParameters4fvNV = resolveGl("glProgramParameters4fvNV");
        if (!real_glProgramParameters4fvNV)
            unresolvedError("glProgramParameters4fvNV");
    

        *(void **)&real_glRequestResidentProgramsNV = resolveGl("glRequestResidentProgramsNV");
        if (!real_glRequestResidentProgramsNV)
            unresolvedError("glRequestResidentProgramsNV");
    

        *(void **)&real_glTrackMatrixNV = resolveGl("glTrackMatrixNV");
        if (!real_glTrackMatrixNV)
            unresolvedError("glTrackMatrixNV");
    

        *(void **)&real_glVertexAttribPointerNV = resolveGl("glVertexAttribPointerNV");
        if (!real_glVertexAttribPointerNV)
            unresolvedError("glVertexAttribPointerNV");
    

        *(void **)&real_glVertexAttrib1dNV = resolveGl("glVertexAttrib1dNV");
        if (!real_glVertexAttrib1dNV)
            unresolvedError("glVertexAttrib1dNV");
    

        *(void **)&real_glVertexAttrib1dvNV = resolveGl("glVertexAttrib1dvNV");
        if (!real_glVertexAttrib1dvNV)
            unresolvedError("glVertexAttrib1dvNV");
    

        *(void **)&real_glVertexAttrib1fNV = resolveGl("glVertexAttrib1fNV");
        if (!real_glVertexAttrib1fNV)
            unresolvedError("glVertexAttrib1fNV");
    

        *(void **)&real_glVertexAttrib1fvNV = resolveGl("glVertexAttrib1fvNV");
        if (!real_glVertexAttrib1fvNV)
            unresolvedError("glVertexAttrib1fvNV");
    

        *(void **)&real_glVertexAttrib1sNV = resolveGl("glVertexAttrib1sNV");
        if (!real_glVertexAttrib1sNV)
            unresolvedError("glVertexAttrib1sNV");
    

        *(void **)&real_glVertexAttrib1svNV = resolveGl("glVertexAttrib1svNV");
        if (!real_glVertexAttrib1svNV)
            unresolvedError("glVertexAttrib1svNV");
    

        *(void **)&real_glVertexAttrib2dNV = resolveGl("glVertexAttrib2dNV");
        if (!real_glVertexAttrib2dNV)
            unresolvedError("glVertexAttrib2dNV");
    

        *(void **)&real_glVertexAttrib2dvNV = resolveGl("glVertexAttrib2dvNV");
        if (!real_glVertexAttrib2dvNV)
            unresolvedError("glVertexAttrib2dvNV");
    

        *(void **)&real_glVertexAttrib2fNV = resolveGl("glVertexAttrib2fNV");
        if (!real_glVertexAttrib2fNV)
            unresolvedError("glVertexAttrib2fNV");
    

        *(void **)&real_glVertexAttrib2fvNV = resolveGl("glVertexAttrib2fvNV");
        if (!real_glVertexAttrib2fvNV)
            unresolvedError("glVertexAttrib2fvNV");
    

        *(void **)&real_glVertexAttrib2sNV = resolveGl("glVertexAttrib2sNV");
        if (!real_glVertexAttrib2sNV)
            unresolvedError("glVertexAttrib2sNV");
    

        *(void **)&real_glVertexAttrib2svNV = resolveGl("glVertexAttrib2svNV");
        if (!real_glVertexAttrib2svNV)
            unresolvedError("glVertexAttrib2svNV");
    

        *(void **)&real_glVertexAttrib3dNV = resolveGl("glVertexAttrib3dNV");
        if (!real_glVertexAttrib3dNV)
            unresolvedError("glVertexAttrib3dNV");
    

        *(void **)&real_glVertexAttrib3dvNV = resolveGl("glVertexAttrib3dvNV");
        if (!real_glVertexAttrib3dvNV)
            unresolvedError("glVertexAttrib3dvNV");
    

        *(void **)&real_glVertexAttrib3fNV = resolveGl("glVertexAttrib3fNV");
        if (!real_glVertexAttrib3fNV)
            unresolvedError("glVertexAttrib3fNV");
    

        *(void **)&real_glVertexAttrib3fvNV = resolveGl("glVertexAttrib3fvNV");
        if (!real_glVertexAttrib3fvNV)
            unresolvedError("glVertexAttrib3fvNV");
    

        *(void **)&real_glVertexAttrib3sNV = resolveGl("glVertexAttrib3sNV");
        if (!real_glVertexAttrib3sNV)
            unresolvedError("glVertexAttrib3sNV");
    

        *(void **)&real_glVertexAttrib3svNV = resolveGl("glVertexAttrib3svNV");
        if (!real_glVertexAttrib3svNV)
            unresolvedError("glVertexAttrib3svNV");
    

        *(void **)&real_glVertexAttrib4dNV = resolveGl("glVertexAttrib4dNV");
        if (!real_glVertexAttrib4dNV)
            unresolvedError("glVertexAttrib4dNV");
    

        *(void **)&real_glVertexAttrib4dvNV = resolveGl("glVertexAttrib4dvNV");
        if (!real_glVertexAttrib4dvNV)
            unresolvedError("glVertexAttrib4dvNV");
    

        *(void **)&real_glVertexAttrib4fNV = resolveGl("glVertexAttrib4fNV");
        if (!real_glVertexAttrib4fNV)
            unresolvedError("glVertexAttrib4fNV");
    

        *(void **)&real_glVertexAttrib4fvNV = resolveGl("glVertexAttrib4fvNV");
        if (!real_glVertexAttrib4fvNV)
            unresolvedError("glVertexAttrib4fvNV");
    

        *(void **)&real_glVertexAttrib4sNV = resolveGl("glVertexAttrib4sNV");
        if (!real_glVertexAttrib4sNV)
            unresolvedError("glVertexAttrib4sNV");
    

        *(void **)&real_glVertexAttrib4svNV = resolveGl("glVertexAttrib4svNV");
        if (!real_glVertexAttrib4svNV)
            unresolvedError("glVertexAttrib4svNV");
    

        *(void **)&real_glVertexAttrib4ubNV = resolveGl("glVertexAttrib4ubNV");
        if (!real_glVertexAttrib4ubNV)
            unresolvedError("glVertexAttrib4ubNV");
    

        *(void **)&real_glVertexAttrib4ubvNV = resolveGl("glVertexAttrib4ubvNV");
        if (!real_glVertexAttrib4ubvNV)
            unresolvedError("glVertexAttrib4ubvNV");
    

        *(void **)&real_glVertexAttribs1dvNV = resolveGl("glVertexAttribs1dvNV");
        if (!real_glVertexAttribs1dvNV)
            unresolvedError("glVertexAttribs1dvNV");
    

        *(void **)&real_glVertexAttribs1fvNV = resolveGl("glVertexAttribs1fvNV");
        if (!real_glVertexAttribs1fvNV)
            unresolvedError("glVertexAttribs1fvNV");
    

        *(void **)&real_glVertexAttribs1svNV = resolveGl("glVertexAttribs1svNV");
        if (!real_glVertexAttribs1svNV)
            unresolvedError("glVertexAttribs1svNV");
    

        *(void **)&real_glVertexAttribs2dvNV = resolveGl("glVertexAttribs2dvNV");
        if (!real_glVertexAttribs2dvNV)
            unresolvedError("glVertexAttribs2dvNV");
    

        *(void **)&real_glVertexAttribs2fvNV = resolveGl("glVertexAttribs2fvNV");
        if (!real_glVertexAttribs2fvNV)
            unresolvedError("glVertexAttribs2fvNV");
    

        *(void **)&real_glVertexAttribs2svNV = resolveGl("glVertexAttribs2svNV");
        if (!real_glVertexAttribs2svNV)
            unresolvedError("glVertexAttribs2svNV");
    

        *(void **)&real_glVertexAttribs3dvNV = resolveGl("glVertexAttribs3dvNV");
        if (!real_glVertexAttribs3dvNV)
            unresolvedError("glVertexAttribs3dvNV");
    

        *(void **)&real_glVertexAttribs3fvNV = resolveGl("glVertexAttribs3fvNV");
        if (!real_glVertexAttribs3fvNV)
            unresolvedError("glVertexAttribs3fvNV");
    

        *(void **)&real_glVertexAttribs3svNV = resolveGl("glVertexAttribs3svNV");
        if (!real_glVertexAttribs3svNV)
            unresolvedError("glVertexAttribs3svNV");
    

        *(void **)&real_glVertexAttribs4dvNV = resolveGl("glVertexAttribs4dvNV");
        if (!real_glVertexAttribs4dvNV)
            unresolvedError("glVertexAttribs4dvNV");
    

        *(void **)&real_glVertexAttribs4fvNV = resolveGl("glVertexAttribs4fvNV");
        if (!real_glVertexAttribs4fvNV)
            unresolvedError("glVertexAttribs4fvNV");
    

        *(void **)&real_glVertexAttribs4svNV = resolveGl("glVertexAttribs4svNV");
        if (!real_glVertexAttribs4svNV)
            unresolvedError("glVertexAttribs4svNV");
    

        *(void **)&real_glVertexAttribs4ubvNV = resolveGl("glVertexAttribs4ubvNV");
        if (!real_glVertexAttribs4ubvNV)
            unresolvedError("glVertexAttribs4ubvNV");
    

        *(void **)&real_glVertexAttribI1iEXT = resolveGl("glVertexAttribI1iEXT");
        if (!real_glVertexAttribI1iEXT)
            unresolvedError("glVertexAttribI1iEXT");
    

        *(void **)&real_glVertexAttribI2iEXT = resolveGl("glVertexAttribI2iEXT");
        if (!real_glVertexAttribI2iEXT)
            unresolvedError("glVertexAttribI2iEXT");
    

        *(void **)&real_glVertexAttribI3iEXT = resolveGl("glVertexAttribI3iEXT");
        if (!real_glVertexAttribI3iEXT)
            unresolvedError("glVertexAttribI3iEXT");
    

        *(void **)&real_glVertexAttribI4iEXT = resolveGl("glVertexAttribI4iEXT");
        if (!real_glVertexAttribI4iEXT)
            unresolvedError("glVertexAttribI4iEXT");
    

        *(void **)&real_glVertexAttribI1uiEXT = resolveGl("glVertexAttribI1uiEXT");
        if (!real_glVertexAttribI1uiEXT)
            unresolvedError("glVertexAttribI1uiEXT");
    

        *(void **)&real_glVertexAttribI2uiEXT = resolveGl("glVertexAttribI2uiEXT");
        if (!real_glVertexAttribI2uiEXT)
            unresolvedError("glVertexAttribI2uiEXT");
    

        *(void **)&real_glVertexAttribI3uiEXT = resolveGl("glVertexAttribI3uiEXT");
        if (!real_glVertexAttribI3uiEXT)
            unresolvedError("glVertexAttribI3uiEXT");
    

        *(void **)&real_glVertexAttribI4uiEXT = resolveGl("glVertexAttribI4uiEXT");
        if (!real_glVertexAttribI4uiEXT)
            unresolvedError("glVertexAttribI4uiEXT");
    

        *(void **)&real_glVertexAttribI1ivEXT = resolveGl("glVertexAttribI1ivEXT");
        if (!real_glVertexAttribI1ivEXT)
            unresolvedError("glVertexAttribI1ivEXT");
    

        *(void **)&real_glVertexAttribI2ivEXT = resolveGl("glVertexAttribI2ivEXT");
        if (!real_glVertexAttribI2ivEXT)
            unresolvedError("glVertexAttribI2ivEXT");
    

        *(void **)&real_glVertexAttribI3ivEXT = resolveGl("glVertexAttribI3ivEXT");
        if (!real_glVertexAttribI3ivEXT)
            unresolvedError("glVertexAttribI3ivEXT");
    

        *(void **)&real_glVertexAttribI4ivEXT = resolveGl("glVertexAttribI4ivEXT");
        if (!real_glVertexAttribI4ivEXT)
            unresolvedError("glVertexAttribI4ivEXT");
    

        *(void **)&real_glVertexAttribI1uivEXT = resolveGl("glVertexAttribI1uivEXT");
        if (!real_glVertexAttribI1uivEXT)
            unresolvedError("glVertexAttribI1uivEXT");
    

        *(void **)&real_glVertexAttribI2uivEXT = resolveGl("glVertexAttribI2uivEXT");
        if (!real_glVertexAttribI2uivEXT)
            unresolvedError("glVertexAttribI2uivEXT");
    

        *(void **)&real_glVertexAttribI3uivEXT = resolveGl("glVertexAttribI3uivEXT");
        if (!real_glVertexAttribI3uivEXT)
            unresolvedError("glVertexAttribI3uivEXT");
    

        *(void **)&real_glVertexAttribI4uivEXT = resolveGl("glVertexAttribI4uivEXT");
        if (!real_glVertexAttribI4uivEXT)
            unresolvedError("glVertexAttribI4uivEXT");
    

        *(void **)&real_glVertexAttribI4bvEXT = resolveGl("glVertexAttribI4bvEXT");
        if (!real_glVertexAttribI4bvEXT)
            unresolvedError("glVertexAttribI4bvEXT");
    

        *(void **)&real_glVertexAttribI4svEXT = resolveGl("glVertexAttribI4svEXT");
        if (!real_glVertexAttribI4svEXT)
            unresolvedError("glVertexAttribI4svEXT");
    

        *(void **)&real_glVertexAttribI4ubvEXT = resolveGl("glVertexAttribI4ubvEXT");
        if (!real_glVertexAttribI4ubvEXT)
            unresolvedError("glVertexAttribI4ubvEXT");
    

        *(void **)&real_glVertexAttribI4usvEXT = resolveGl("glVertexAttribI4usvEXT");
        if (!real_glVertexAttribI4usvEXT)
            unresolvedError("glVertexAttribI4usvEXT");
    

        *(void **)&real_glVertexAttribIPointerEXT = resolveGl("glVertexAttribIPointerEXT");
        if (!real_glVertexAttribIPointerEXT)
            unresolvedError("glVertexAttribIPointerEXT");
    

        *(void **)&real_glGetVertexAttribIivEXT = resolveGl("glGetVertexAttribIivEXT");
        if (!real_glGetVertexAttribIivEXT)
            unresolvedError("glGetVertexAttribIivEXT");
    

        *(void **)&real_glGetVertexAttribIuivEXT = resolveGl("glGetVertexAttribIuivEXT");
        if (!real_glGetVertexAttribIuivEXT)
            unresolvedError("glGetVertexAttribIuivEXT");
    

        *(void **)&real_glBeginVideoCaptureNV = resolveGl("glBeginVideoCaptureNV");
        if (!real_glBeginVideoCaptureNV)
            unresolvedError("glBeginVideoCaptureNV");
    

        *(void **)&real_glBindVideoCaptureStreamBufferNV = resolveGl("glBindVideoCaptureStreamBufferNV");
        if (!real_glBindVideoCaptureStreamBufferNV)
            unresolvedError("glBindVideoCaptureStreamBufferNV");
    

        *(void **)&real_glBindVideoCaptureStreamTextureNV = resolveGl("glBindVideoCaptureStreamTextureNV");
        if (!real_glBindVideoCaptureStreamTextureNV)
            unresolvedError("glBindVideoCaptureStreamTextureNV");
    

        *(void **)&real_glEndVideoCaptureNV = resolveGl("glEndVideoCaptureNV");
        if (!real_glEndVideoCaptureNV)
            unresolvedError("glEndVideoCaptureNV");
    

        *(void **)&real_glGetVideoCaptureivNV = resolveGl("glGetVideoCaptureivNV");
        if (!real_glGetVideoCaptureivNV)
            unresolvedError("glGetVideoCaptureivNV");
    

        *(void **)&real_glGetVideoCaptureStreamivNV = resolveGl("glGetVideoCaptureStreamivNV");
        if (!real_glGetVideoCaptureStreamivNV)
            unresolvedError("glGetVideoCaptureStreamivNV");
    

        *(void **)&real_glGetVideoCaptureStreamfvNV = resolveGl("glGetVideoCaptureStreamfvNV");
        if (!real_glGetVideoCaptureStreamfvNV)
            unresolvedError("glGetVideoCaptureStreamfvNV");
    

        *(void **)&real_glGetVideoCaptureStreamdvNV = resolveGl("glGetVideoCaptureStreamdvNV");
        if (!real_glGetVideoCaptureStreamdvNV)
            unresolvedError("glGetVideoCaptureStreamdvNV");
    

        *(void **)&real_glVideoCaptureNV = resolveGl("glVideoCaptureNV");
        if (!real_glVideoCaptureNV)
            unresolvedError("glVideoCaptureNV");
    

        *(void **)&real_glVideoCaptureStreamParameterivNV = resolveGl("glVideoCaptureStreamParameterivNV");
        if (!real_glVideoCaptureStreamParameterivNV)
            unresolvedError("glVideoCaptureStreamParameterivNV");
    

        *(void **)&real_glVideoCaptureStreamParameterfvNV = resolveGl("glVideoCaptureStreamParameterfvNV");
        if (!real_glVideoCaptureStreamParameterfvNV)
            unresolvedError("glVideoCaptureStreamParameterfvNV");
    

        *(void **)&real_glVideoCaptureStreamParameterdvNV = resolveGl("glVideoCaptureStreamParameterdvNV");
        if (!real_glVideoCaptureStreamParameterdvNV)
            unresolvedError("glVideoCaptureStreamParameterdvNV");
    

        *(void **)&real_glViewportSwizzleNV = resolveGl("glViewportSwizzleNV");
        if (!real_glViewportSwizzleNV)
            unresolvedError("glViewportSwizzleNV");
    

        *(void **)&real_glFramebufferTextureMultiviewOVR = resolveGl("glFramebufferTextureMultiviewOVR");
        if (!real_glFramebufferTextureMultiviewOVR)
            unresolvedError("glFramebufferTextureMultiviewOVR");
    

        *(void **)&real_glHintPGI = resolveGl("glHintPGI");
        if (!real_glHintPGI)
            unresolvedError("glHintPGI");
    

        *(void **)&real_glDetailTexFuncSGIS = resolveGl("glDetailTexFuncSGIS");
        if (!real_glDetailTexFuncSGIS)
            unresolvedError("glDetailTexFuncSGIS");
    

        *(void **)&real_glGetDetailTexFuncSGIS = resolveGl("glGetDetailTexFuncSGIS");
        if (!real_glGetDetailTexFuncSGIS)
            unresolvedError("glGetDetailTexFuncSGIS");
    

        *(void **)&real_glFogFuncSGIS = resolveGl("glFogFuncSGIS");
        if (!real_glFogFuncSGIS)
            unresolvedError("glFogFuncSGIS");
    

        *(void **)&real_glGetFogFuncSGIS = resolveGl("glGetFogFuncSGIS");
        if (!real_glGetFogFuncSGIS)
            unresolvedError("glGetFogFuncSGIS");
    

        *(void **)&real_glSampleMaskSGIS = resolveGl("glSampleMaskSGIS");
        if (!real_glSampleMaskSGIS)
            unresolvedError("glSampleMaskSGIS");
    

        *(void **)&real_glSamplePatternSGIS = resolveGl("glSamplePatternSGIS");
        if (!real_glSamplePatternSGIS)
            unresolvedError("glSamplePatternSGIS");
    

        *(void **)&real_glPixelTexGenParameteriSGIS = resolveGl("glPixelTexGenParameteriSGIS");
        if (!real_glPixelTexGenParameteriSGIS)
            unresolvedError("glPixelTexGenParameteriSGIS");
    

        *(void **)&real_glPixelTexGenParameterivSGIS = resolveGl("glPixelTexGenParameterivSGIS");
        if (!real_glPixelTexGenParameterivSGIS)
            unresolvedError("glPixelTexGenParameterivSGIS");
    

        *(void **)&real_glPixelTexGenParameterfSGIS = resolveGl("glPixelTexGenParameterfSGIS");
        if (!real_glPixelTexGenParameterfSGIS)
            unresolvedError("glPixelTexGenParameterfSGIS");
    

        *(void **)&real_glPixelTexGenParameterfvSGIS = resolveGl("glPixelTexGenParameterfvSGIS");
        if (!real_glPixelTexGenParameterfvSGIS)
            unresolvedError("glPixelTexGenParameterfvSGIS");
    

        *(void **)&real_glGetPixelTexGenParameterivSGIS = resolveGl("glGetPixelTexGenParameterivSGIS");
        if (!real_glGetPixelTexGenParameterivSGIS)
            unresolvedError("glGetPixelTexGenParameterivSGIS");
    

        *(void **)&real_glGetPixelTexGenParameterfvSGIS = resolveGl("glGetPixelTexGenParameterfvSGIS");
        if (!real_glGetPixelTexGenParameterfvSGIS)
            unresolvedError("glGetPixelTexGenParameterfvSGIS");
    

        *(void **)&real_glPointParameterfSGIS = resolveGl("glPointParameterfSGIS");
        if (!real_glPointParameterfSGIS)
            unresolvedError("glPointParameterfSGIS");
    

        *(void **)&real_glPointParameterfvSGIS = resolveGl("glPointParameterfvSGIS");
        if (!real_glPointParameterfvSGIS)
            unresolvedError("glPointParameterfvSGIS");
    

        *(void **)&real_glSharpenTexFuncSGIS = resolveGl("glSharpenTexFuncSGIS");
        if (!real_glSharpenTexFuncSGIS)
            unresolvedError("glSharpenTexFuncSGIS");
    

        *(void **)&real_glGetSharpenTexFuncSGIS = resolveGl("glGetSharpenTexFuncSGIS");
        if (!real_glGetSharpenTexFuncSGIS)
            unresolvedError("glGetSharpenTexFuncSGIS");
    

        *(void **)&real_glTexImage4DSGIS = resolveGl("glTexImage4DSGIS");
        if (!real_glTexImage4DSGIS)
            unresolvedError("glTexImage4DSGIS");
    

        *(void **)&real_glTexSubImage4DSGIS = resolveGl("glTexSubImage4DSGIS");
        if (!real_glTexSubImage4DSGIS)
            unresolvedError("glTexSubImage4DSGIS");
    

        *(void **)&real_glTextureColorMaskSGIS = resolveGl("glTextureColorMaskSGIS");
        if (!real_glTextureColorMaskSGIS)
            unresolvedError("glTextureColorMaskSGIS");
    

        *(void **)&real_glGetTexFilterFuncSGIS = resolveGl("glGetTexFilterFuncSGIS");
        if (!real_glGetTexFilterFuncSGIS)
            unresolvedError("glGetTexFilterFuncSGIS");
    

        *(void **)&real_glTexFilterFuncSGIS = resolveGl("glTexFilterFuncSGIS");
        if (!real_glTexFilterFuncSGIS)
            unresolvedError("glTexFilterFuncSGIS");
    

        *(void **)&real_glAsyncMarkerSGIX = resolveGl("glAsyncMarkerSGIX");
        if (!real_glAsyncMarkerSGIX)
            unresolvedError("glAsyncMarkerSGIX");
    

        *(void **)&real_glFinishAsyncSGIX = resolveGl("glFinishAsyncSGIX");
        if (!real_glFinishAsyncSGIX)
            unresolvedError("glFinishAsyncSGIX");
    

        *(void **)&real_glPollAsyncSGIX = resolveGl("glPollAsyncSGIX");
        if (!real_glPollAsyncSGIX)
            unresolvedError("glPollAsyncSGIX");
    

        *(void **)&real_glGenAsyncMarkersSGIX = resolveGl("glGenAsyncMarkersSGIX");
        if (!real_glGenAsyncMarkersSGIX)
            unresolvedError("glGenAsyncMarkersSGIX");
    

        *(void **)&real_glDeleteAsyncMarkersSGIX = resolveGl("glDeleteAsyncMarkersSGIX");
        if (!real_glDeleteAsyncMarkersSGIX)
            unresolvedError("glDeleteAsyncMarkersSGIX");
    

        *(void **)&real_glIsAsyncMarkerSGIX = resolveGl("glIsAsyncMarkerSGIX");
        if (!real_glIsAsyncMarkerSGIX)
            unresolvedError("glIsAsyncMarkerSGIX");
    

        *(void **)&real_glFlushRasterSGIX = resolveGl("glFlushRasterSGIX");
        if (!real_glFlushRasterSGIX)
            unresolvedError("glFlushRasterSGIX");
    

        *(void **)&real_glFragmentColorMaterialSGIX = resolveGl("glFragmentColorMaterialSGIX");
        if (!real_glFragmentColorMaterialSGIX)
            unresolvedError("glFragmentColorMaterialSGIX");
    

        *(void **)&real_glFragmentLightfSGIX = resolveGl("glFragmentLightfSGIX");
        if (!real_glFragmentLightfSGIX)
            unresolvedError("glFragmentLightfSGIX");
    

        *(void **)&real_glFragmentLightfvSGIX = resolveGl("glFragmentLightfvSGIX");
        if (!real_glFragmentLightfvSGIX)
            unresolvedError("glFragmentLightfvSGIX");
    

        *(void **)&real_glFragmentLightiSGIX = resolveGl("glFragmentLightiSGIX");
        if (!real_glFragmentLightiSGIX)
            unresolvedError("glFragmentLightiSGIX");
    

        *(void **)&real_glFragmentLightivSGIX = resolveGl("glFragmentLightivSGIX");
        if (!real_glFragmentLightivSGIX)
            unresolvedError("glFragmentLightivSGIX");
    

        *(void **)&real_glFragmentLightModelfSGIX = resolveGl("glFragmentLightModelfSGIX");
        if (!real_glFragmentLightModelfSGIX)
            unresolvedError("glFragmentLightModelfSGIX");
    

        *(void **)&real_glFragmentLightModelfvSGIX = resolveGl("glFragmentLightModelfvSGIX");
        if (!real_glFragmentLightModelfvSGIX)
            unresolvedError("glFragmentLightModelfvSGIX");
    

        *(void **)&real_glFragmentLightModeliSGIX = resolveGl("glFragmentLightModeliSGIX");
        if (!real_glFragmentLightModeliSGIX)
            unresolvedError("glFragmentLightModeliSGIX");
    

        *(void **)&real_glFragmentLightModelivSGIX = resolveGl("glFragmentLightModelivSGIX");
        if (!real_glFragmentLightModelivSGIX)
            unresolvedError("glFragmentLightModelivSGIX");
    

        *(void **)&real_glFragmentMaterialfSGIX = resolveGl("glFragmentMaterialfSGIX");
        if (!real_glFragmentMaterialfSGIX)
            unresolvedError("glFragmentMaterialfSGIX");
    

        *(void **)&real_glFragmentMaterialfvSGIX = resolveGl("glFragmentMaterialfvSGIX");
        if (!real_glFragmentMaterialfvSGIX)
            unresolvedError("glFragmentMaterialfvSGIX");
    

        *(void **)&real_glFragmentMaterialiSGIX = resolveGl("glFragmentMaterialiSGIX");
        if (!real_glFragmentMaterialiSGIX)
            unresolvedError("glFragmentMaterialiSGIX");
    

        *(void **)&real_glFragmentMaterialivSGIX = resolveGl("glFragmentMaterialivSGIX");
        if (!real_glFragmentMaterialivSGIX)
            unresolvedError("glFragmentMaterialivSGIX");
    

        *(void **)&real_glGetFragmentLightfvSGIX = resolveGl("glGetFragmentLightfvSGIX");
        if (!real_glGetFragmentLightfvSGIX)
            unresolvedError("glGetFragmentLightfvSGIX");
    

        *(void **)&real_glGetFragmentLightivSGIX = resolveGl("glGetFragmentLightivSGIX");
        if (!real_glGetFragmentLightivSGIX)
            unresolvedError("glGetFragmentLightivSGIX");
    

        *(void **)&real_glGetFragmentMaterialfvSGIX = resolveGl("glGetFragmentMaterialfvSGIX");
        if (!real_glGetFragmentMaterialfvSGIX)
            unresolvedError("glGetFragmentMaterialfvSGIX");
    

        *(void **)&real_glGetFragmentMaterialivSGIX = resolveGl("glGetFragmentMaterialivSGIX");
        if (!real_glGetFragmentMaterialivSGIX)
            unresolvedError("glGetFragmentMaterialivSGIX");
    

        *(void **)&real_glLightEnviSGIX = resolveGl("glLightEnviSGIX");
        if (!real_glLightEnviSGIX)
            unresolvedError("glLightEnviSGIX");
    

        *(void **)&real_glFrameZoomSGIX = resolveGl("glFrameZoomSGIX");
        if (!real_glFrameZoomSGIX)
            unresolvedError("glFrameZoomSGIX");
    

        *(void **)&real_glIglooInterfaceSGIX = resolveGl("glIglooInterfaceSGIX");
        if (!real_glIglooInterfaceSGIX)
            unresolvedError("glIglooInterfaceSGIX");
    

        *(void **)&real_glGetInstrumentsSGIX = resolveGl("glGetInstrumentsSGIX");
        if (!real_glGetInstrumentsSGIX)
            unresolvedError("glGetInstrumentsSGIX");
    

        *(void **)&real_glInstrumentsBufferSGIX = resolveGl("glInstrumentsBufferSGIX");
        if (!real_glInstrumentsBufferSGIX)
            unresolvedError("glInstrumentsBufferSGIX");
    

        *(void **)&real_glPollInstrumentsSGIX = resolveGl("glPollInstrumentsSGIX");
        if (!real_glPollInstrumentsSGIX)
            unresolvedError("glPollInstrumentsSGIX");
    

        *(void **)&real_glReadInstrumentsSGIX = resolveGl("glReadInstrumentsSGIX");
        if (!real_glReadInstrumentsSGIX)
            unresolvedError("glReadInstrumentsSGIX");
    

        *(void **)&real_glStartInstrumentsSGIX = resolveGl("glStartInstrumentsSGIX");
        if (!real_glStartInstrumentsSGIX)
            unresolvedError("glStartInstrumentsSGIX");
    

        *(void **)&real_glStopInstrumentsSGIX = resolveGl("glStopInstrumentsSGIX");
        if (!real_glStopInstrumentsSGIX)
            unresolvedError("glStopInstrumentsSGIX");
    

        *(void **)&real_glGetListParameterfvSGIX = resolveGl("glGetListParameterfvSGIX");
        if (!real_glGetListParameterfvSGIX)
            unresolvedError("glGetListParameterfvSGIX");
    

        *(void **)&real_glGetListParameterivSGIX = resolveGl("glGetListParameterivSGIX");
        if (!real_glGetListParameterivSGIX)
            unresolvedError("glGetListParameterivSGIX");
    

        *(void **)&real_glListParameterfSGIX = resolveGl("glListParameterfSGIX");
        if (!real_glListParameterfSGIX)
            unresolvedError("glListParameterfSGIX");
    

        *(void **)&real_glListParameterfvSGIX = resolveGl("glListParameterfvSGIX");
        if (!real_glListParameterfvSGIX)
            unresolvedError("glListParameterfvSGIX");
    

        *(void **)&real_glListParameteriSGIX = resolveGl("glListParameteriSGIX");
        if (!real_glListParameteriSGIX)
            unresolvedError("glListParameteriSGIX");
    

        *(void **)&real_glListParameterivSGIX = resolveGl("glListParameterivSGIX");
        if (!real_glListParameterivSGIX)
            unresolvedError("glListParameterivSGIX");
    

        *(void **)&real_glPixelTexGenSGIX = resolveGl("glPixelTexGenSGIX");
        if (!real_glPixelTexGenSGIX)
            unresolvedError("glPixelTexGenSGIX");
    

        *(void **)&real_glDeformationMap3dSGIX = resolveGl("glDeformationMap3dSGIX");
        if (!real_glDeformationMap3dSGIX)
            unresolvedError("glDeformationMap3dSGIX");
    

        *(void **)&real_glDeformationMap3fSGIX = resolveGl("glDeformationMap3fSGIX");
        if (!real_glDeformationMap3fSGIX)
            unresolvedError("glDeformationMap3fSGIX");
    

        *(void **)&real_glDeformSGIX = resolveGl("glDeformSGIX");
        if (!real_glDeformSGIX)
            unresolvedError("glDeformSGIX");
    

        *(void **)&real_glLoadIdentityDeformationMapSGIX = resolveGl("glLoadIdentityDeformationMapSGIX");
        if (!real_glLoadIdentityDeformationMapSGIX)
            unresolvedError("glLoadIdentityDeformationMapSGIX");
    

        *(void **)&real_glReferencePlaneSGIX = resolveGl("glReferencePlaneSGIX");
        if (!real_glReferencePlaneSGIX)
            unresolvedError("glReferencePlaneSGIX");
    

        *(void **)&real_glSpriteParameterfSGIX = resolveGl("glSpriteParameterfSGIX");
        if (!real_glSpriteParameterfSGIX)
            unresolvedError("glSpriteParameterfSGIX");
    

        *(void **)&real_glSpriteParameterfvSGIX = resolveGl("glSpriteParameterfvSGIX");
        if (!real_glSpriteParameterfvSGIX)
            unresolvedError("glSpriteParameterfvSGIX");
    

        *(void **)&real_glSpriteParameteriSGIX = resolveGl("glSpriteParameteriSGIX");
        if (!real_glSpriteParameteriSGIX)
            unresolvedError("glSpriteParameteriSGIX");
    

        *(void **)&real_glSpriteParameterivSGIX = resolveGl("glSpriteParameterivSGIX");
        if (!real_glSpriteParameterivSGIX)
            unresolvedError("glSpriteParameterivSGIX");
    

        *(void **)&real_glTagSampleBufferSGIX = resolveGl("glTagSampleBufferSGIX");
        if (!real_glTagSampleBufferSGIX)
            unresolvedError("glTagSampleBufferSGIX");
    

        *(void **)&real_glColorTableSGI = resolveGl("glColorTableSGI");
        if (!real_glColorTableSGI)
            unresolvedError("glColorTableSGI");
    

        *(void **)&real_glColorTableParameterfvSGI = resolveGl("glColorTableParameterfvSGI");
        if (!real_glColorTableParameterfvSGI)
            unresolvedError("glColorTableParameterfvSGI");
    

        *(void **)&real_glColorTableParameterivSGI = resolveGl("glColorTableParameterivSGI");
        if (!real_glColorTableParameterivSGI)
            unresolvedError("glColorTableParameterivSGI");
    

        *(void **)&real_glCopyColorTableSGI = resolveGl("glCopyColorTableSGI");
        if (!real_glCopyColorTableSGI)
            unresolvedError("glCopyColorTableSGI");
    

        *(void **)&real_glGetColorTableSGI = resolveGl("glGetColorTableSGI");
        if (!real_glGetColorTableSGI)
            unresolvedError("glGetColorTableSGI");
    

        *(void **)&real_glGetColorTableParameterfvSGI = resolveGl("glGetColorTableParameterfvSGI");
        if (!real_glGetColorTableParameterfvSGI)
            unresolvedError("glGetColorTableParameterfvSGI");
    

        *(void **)&real_glGetColorTableParameterivSGI = resolveGl("glGetColorTableParameterivSGI");
        if (!real_glGetColorTableParameterivSGI)
            unresolvedError("glGetColorTableParameterivSGI");
    

        *(void **)&real_glFinishTextureSUNX = resolveGl("glFinishTextureSUNX");
        if (!real_glFinishTextureSUNX)
            unresolvedError("glFinishTextureSUNX");
    

        *(void **)&real_glGlobalAlphaFactorbSUN = resolveGl("glGlobalAlphaFactorbSUN");
        if (!real_glGlobalAlphaFactorbSUN)
            unresolvedError("glGlobalAlphaFactorbSUN");
    

        *(void **)&real_glGlobalAlphaFactorsSUN = resolveGl("glGlobalAlphaFactorsSUN");
        if (!real_glGlobalAlphaFactorsSUN)
            unresolvedError("glGlobalAlphaFactorsSUN");
    

        *(void **)&real_glGlobalAlphaFactoriSUN = resolveGl("glGlobalAlphaFactoriSUN");
        if (!real_glGlobalAlphaFactoriSUN)
            unresolvedError("glGlobalAlphaFactoriSUN");
    

        *(void **)&real_glGlobalAlphaFactorfSUN = resolveGl("glGlobalAlphaFactorfSUN");
        if (!real_glGlobalAlphaFactorfSUN)
            unresolvedError("glGlobalAlphaFactorfSUN");
    

        *(void **)&real_glGlobalAlphaFactordSUN = resolveGl("glGlobalAlphaFactordSUN");
        if (!real_glGlobalAlphaFactordSUN)
            unresolvedError("glGlobalAlphaFactordSUN");
    

        *(void **)&real_glGlobalAlphaFactorubSUN = resolveGl("glGlobalAlphaFactorubSUN");
        if (!real_glGlobalAlphaFactorubSUN)
            unresolvedError("glGlobalAlphaFactorubSUN");
    

        *(void **)&real_glGlobalAlphaFactorusSUN = resolveGl("glGlobalAlphaFactorusSUN");
        if (!real_glGlobalAlphaFactorusSUN)
            unresolvedError("glGlobalAlphaFactorusSUN");
    

        *(void **)&real_glGlobalAlphaFactoruiSUN = resolveGl("glGlobalAlphaFactoruiSUN");
        if (!real_glGlobalAlphaFactoruiSUN)
            unresolvedError("glGlobalAlphaFactoruiSUN");
    

        *(void **)&real_glDrawMeshArraysSUN = resolveGl("glDrawMeshArraysSUN");
        if (!real_glDrawMeshArraysSUN)
            unresolvedError("glDrawMeshArraysSUN");
    

        *(void **)&real_glReplacementCodeuiSUN = resolveGl("glReplacementCodeuiSUN");
        if (!real_glReplacementCodeuiSUN)
            unresolvedError("glReplacementCodeuiSUN");
    

        *(void **)&real_glReplacementCodeusSUN = resolveGl("glReplacementCodeusSUN");
        if (!real_glReplacementCodeusSUN)
            unresolvedError("glReplacementCodeusSUN");
    

        *(void **)&real_glReplacementCodeubSUN = resolveGl("glReplacementCodeubSUN");
        if (!real_glReplacementCodeubSUN)
            unresolvedError("glReplacementCodeubSUN");
    

        *(void **)&real_glReplacementCodeuivSUN = resolveGl("glReplacementCodeuivSUN");
        if (!real_glReplacementCodeuivSUN)
            unresolvedError("glReplacementCodeuivSUN");
    

        *(void **)&real_glReplacementCodeusvSUN = resolveGl("glReplacementCodeusvSUN");
        if (!real_glReplacementCodeusvSUN)
            unresolvedError("glReplacementCodeusvSUN");
    

        *(void **)&real_glReplacementCodeubvSUN = resolveGl("glReplacementCodeubvSUN");
        if (!real_glReplacementCodeubvSUN)
            unresolvedError("glReplacementCodeubvSUN");
    

        *(void **)&real_glReplacementCodePointerSUN = resolveGl("glReplacementCodePointerSUN");
        if (!real_glReplacementCodePointerSUN)
            unresolvedError("glReplacementCodePointerSUN");
    

        *(void **)&real_glColor4ubVertex2fSUN = resolveGl("glColor4ubVertex2fSUN");
        if (!real_glColor4ubVertex2fSUN)
            unresolvedError("glColor4ubVertex2fSUN");
    

        *(void **)&real_glColor4ubVertex2fvSUN = resolveGl("glColor4ubVertex2fvSUN");
        if (!real_glColor4ubVertex2fvSUN)
            unresolvedError("glColor4ubVertex2fvSUN");
    

        *(void **)&real_glColor4ubVertex3fSUN = resolveGl("glColor4ubVertex3fSUN");
        if (!real_glColor4ubVertex3fSUN)
            unresolvedError("glColor4ubVertex3fSUN");
    

        *(void **)&real_glColor4ubVertex3fvSUN = resolveGl("glColor4ubVertex3fvSUN");
        if (!real_glColor4ubVertex3fvSUN)
            unresolvedError("glColor4ubVertex3fvSUN");
    

        *(void **)&real_glColor3fVertex3fSUN = resolveGl("glColor3fVertex3fSUN");
        if (!real_glColor3fVertex3fSUN)
            unresolvedError("glColor3fVertex3fSUN");
    

        *(void **)&real_glColor3fVertex3fvSUN = resolveGl("glColor3fVertex3fvSUN");
        if (!real_glColor3fVertex3fvSUN)
            unresolvedError("glColor3fVertex3fvSUN");
    

        *(void **)&real_glNormal3fVertex3fSUN = resolveGl("glNormal3fVertex3fSUN");
        if (!real_glNormal3fVertex3fSUN)
            unresolvedError("glNormal3fVertex3fSUN");
    

        *(void **)&real_glNormal3fVertex3fvSUN = resolveGl("glNormal3fVertex3fvSUN");
        if (!real_glNormal3fVertex3fvSUN)
            unresolvedError("glNormal3fVertex3fvSUN");
    

        *(void **)&real_glColor4fNormal3fVertex3fSUN = resolveGl("glColor4fNormal3fVertex3fSUN");
        if (!real_glColor4fNormal3fVertex3fSUN)
            unresolvedError("glColor4fNormal3fVertex3fSUN");
    

        *(void **)&real_glColor4fNormal3fVertex3fvSUN = resolveGl("glColor4fNormal3fVertex3fvSUN");
        if (!real_glColor4fNormal3fVertex3fvSUN)
            unresolvedError("glColor4fNormal3fVertex3fvSUN");
    

        *(void **)&real_glTexCoord2fVertex3fSUN = resolveGl("glTexCoord2fVertex3fSUN");
        if (!real_glTexCoord2fVertex3fSUN)
            unresolvedError("glTexCoord2fVertex3fSUN");
    

        *(void **)&real_glTexCoord2fVertex3fvSUN = resolveGl("glTexCoord2fVertex3fvSUN");
        if (!real_glTexCoord2fVertex3fvSUN)
            unresolvedError("glTexCoord2fVertex3fvSUN");
    

        *(void **)&real_glTexCoord4fVertex4fSUN = resolveGl("glTexCoord4fVertex4fSUN");
        if (!real_glTexCoord4fVertex4fSUN)
            unresolvedError("glTexCoord4fVertex4fSUN");
    

        *(void **)&real_glTexCoord4fVertex4fvSUN = resolveGl("glTexCoord4fVertex4fvSUN");
        if (!real_glTexCoord4fVertex4fvSUN)
            unresolvedError("glTexCoord4fVertex4fvSUN");
    

        *(void **)&real_glTexCoord2fColor4ubVertex3fSUN = resolveGl("glTexCoord2fColor4ubVertex3fSUN");
        if (!real_glTexCoord2fColor4ubVertex3fSUN)
            unresolvedError("glTexCoord2fColor4ubVertex3fSUN");
    

        *(void **)&real_glTexCoord2fColor4ubVertex3fvSUN = resolveGl("glTexCoord2fColor4ubVertex3fvSUN");
        if (!real_glTexCoord2fColor4ubVertex3fvSUN)
            unresolvedError("glTexCoord2fColor4ubVertex3fvSUN");
    

        *(void **)&real_glTexCoord2fColor3fVertex3fSUN = resolveGl("glTexCoord2fColor3fVertex3fSUN");
        if (!real_glTexCoord2fColor3fVertex3fSUN)
            unresolvedError("glTexCoord2fColor3fVertex3fSUN");
    

        *(void **)&real_glTexCoord2fColor3fVertex3fvSUN = resolveGl("glTexCoord2fColor3fVertex3fvSUN");
        if (!real_glTexCoord2fColor3fVertex3fvSUN)
            unresolvedError("glTexCoord2fColor3fVertex3fvSUN");
    

        *(void **)&real_glTexCoord2fNormal3fVertex3fSUN = resolveGl("glTexCoord2fNormal3fVertex3fSUN");
        if (!real_glTexCoord2fNormal3fVertex3fSUN)
            unresolvedError("glTexCoord2fNormal3fVertex3fSUN");
    

        *(void **)&real_glTexCoord2fNormal3fVertex3fvSUN = resolveGl("glTexCoord2fNormal3fVertex3fvSUN");
        if (!real_glTexCoord2fNormal3fVertex3fvSUN)
            unresolvedError("glTexCoord2fNormal3fVertex3fvSUN");
    

        *(void **)&real_glTexCoord2fColor4fNormal3fVertex3fSUN = resolveGl("glTexCoord2fColor4fNormal3fVertex3fSUN");
        if (!real_glTexCoord2fColor4fNormal3fVertex3fSUN)
            unresolvedError("glTexCoord2fColor4fNormal3fVertex3fSUN");
    

        *(void **)&real_glTexCoord2fColor4fNormal3fVertex3fvSUN = resolveGl("glTexCoord2fColor4fNormal3fVertex3fvSUN");
        if (!real_glTexCoord2fColor4fNormal3fVertex3fvSUN)
            unresolvedError("glTexCoord2fColor4fNormal3fVertex3fvSUN");
    

        *(void **)&real_glTexCoord4fColor4fNormal3fVertex4fSUN = resolveGl("glTexCoord4fColor4fNormal3fVertex4fSUN");
        if (!real_glTexCoord4fColor4fNormal3fVertex4fSUN)
            unresolvedError("glTexCoord4fColor4fNormal3fVertex4fSUN");
    

        *(void **)&real_glTexCoord4fColor4fNormal3fVertex4fvSUN = resolveGl("glTexCoord4fColor4fNormal3fVertex4fvSUN");
        if (!real_glTexCoord4fColor4fNormal3fVertex4fvSUN)
            unresolvedError("glTexCoord4fColor4fNormal3fVertex4fvSUN");
    

        *(void **)&real_glReplacementCodeuiVertex3fSUN = resolveGl("glReplacementCodeuiVertex3fSUN");
        if (!real_glReplacementCodeuiVertex3fSUN)
            unresolvedError("glReplacementCodeuiVertex3fSUN");
    

        *(void **)&real_glReplacementCodeuiVertex3fvSUN = resolveGl("glReplacementCodeuiVertex3fvSUN");
        if (!real_glReplacementCodeuiVertex3fvSUN)
            unresolvedError("glReplacementCodeuiVertex3fvSUN");
    

        *(void **)&real_glReplacementCodeuiColor4ubVertex3fSUN = resolveGl("glReplacementCodeuiColor4ubVertex3fSUN");
        if (!real_glReplacementCodeuiColor4ubVertex3fSUN)
            unresolvedError("glReplacementCodeuiColor4ubVertex3fSUN");
    

        *(void **)&real_glReplacementCodeuiColor4ubVertex3fvSUN = resolveGl("glReplacementCodeuiColor4ubVertex3fvSUN");
        if (!real_glReplacementCodeuiColor4ubVertex3fvSUN)
            unresolvedError("glReplacementCodeuiColor4ubVertex3fvSUN");
    

        *(void **)&real_glReplacementCodeuiColor3fVertex3fSUN = resolveGl("glReplacementCodeuiColor3fVertex3fSUN");
        if (!real_glReplacementCodeuiColor3fVertex3fSUN)
            unresolvedError("glReplacementCodeuiColor3fVertex3fSUN");
    

        *(void **)&real_glReplacementCodeuiColor3fVertex3fvSUN = resolveGl("glReplacementCodeuiColor3fVertex3fvSUN");
        if (!real_glReplacementCodeuiColor3fVertex3fvSUN)
            unresolvedError("glReplacementCodeuiColor3fVertex3fvSUN");
    

        *(void **)&real_glReplacementCodeuiNormal3fVertex3fSUN = resolveGl("glReplacementCodeuiNormal3fVertex3fSUN");
        if (!real_glReplacementCodeuiNormal3fVertex3fSUN)
            unresolvedError("glReplacementCodeuiNormal3fVertex3fSUN");
    

        *(void **)&real_glReplacementCodeuiNormal3fVertex3fvSUN = resolveGl("glReplacementCodeuiNormal3fVertex3fvSUN");
        if (!real_glReplacementCodeuiNormal3fVertex3fvSUN)
            unresolvedError("glReplacementCodeuiNormal3fVertex3fvSUN");
    

        *(void **)&real_glReplacementCodeuiColor4fNormal3fVertex3fSUN = resolveGl("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
        if (!real_glReplacementCodeuiColor4fNormal3fVertex3fSUN)
            unresolvedError("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    

        *(void **)&real_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = resolveGl("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
        if (!real_glReplacementCodeuiColor4fNormal3fVertex3fvSUN)
            unresolvedError("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    

        *(void **)&real_glReplacementCodeuiTexCoord2fVertex3fSUN = resolveGl("glReplacementCodeuiTexCoord2fVertex3fSUN");
        if (!real_glReplacementCodeuiTexCoord2fVertex3fSUN)
            unresolvedError("glReplacementCodeuiTexCoord2fVertex3fSUN");
    

        *(void **)&real_glReplacementCodeuiTexCoord2fVertex3fvSUN = resolveGl("glReplacementCodeuiTexCoord2fVertex3fvSUN");
        if (!real_glReplacementCodeuiTexCoord2fVertex3fvSUN)
            unresolvedError("glReplacementCodeuiTexCoord2fVertex3fvSUN");
    

        *(void **)&real_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = resolveGl("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
        if (!real_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
            unresolvedError("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    

        *(void **)&real_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = resolveGl("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
        if (!real_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
            unresolvedError("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    

        *(void **)&real_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = resolveGl("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
        if (!real_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
            unresolvedError("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    

        *(void **)&real_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = resolveGl("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
        if (!real_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
            unresolvedError("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
    
} 
    